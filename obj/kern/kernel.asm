
obj/kern/kernel:     file format elf64-x86-64


Disassembly of section .bootstrap:

0000000000100000 <_head64>:
// VMCALL to the VMM to get a multiboot map.
    movl $VMX_VMCALL_MBMAP, %eax
    vmcall
#endif
	
    movl $multiboot_info, %eax
  100000:	b8 00 70 10 00       	mov    $0x107000,%eax
    movl %ebx, (%eax)
  100005:	89 18                	mov    %ebx,(%rax)

#ifndef VMM_GUEST
    movw $0x1234,0x472			# warm boot
  100007:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472(%rip)        # 100482 <verify_cpu_no_longmode+0x36f>
  10000e:	34 12 
#endif
	
# Reset the stack pointer in case we didn't come from the loader
    movl $0x7c00,%esp
  100010:	bc 00 7c 00 00       	mov    $0x7c00,%esp

    call verify_cpu   #check if CPU supports long mode
  100015:	e8 cc 00 00 00       	callq  1000e6 <verify_cpu>
#ifndef VMM_GUEST
    movl $CR4_PAE,%eax
  10001a:	b8 20 00 00 00       	mov    $0x20,%eax
#else
    movl $(CR4_PAE|CR4_VMXE),%eax
#endif
    movl %eax,%cr4
  10001f:	0f 22 e0             	mov    %rax,%cr4

# build an early boot pml4 at physical address pml4phys 

    #initializing the page tables
    movl $pml4,%edi
  100022:	bf 00 20 10 00       	mov    $0x102000,%edi
    xorl %eax,%eax
  100027:	31 c0                	xor    %eax,%eax
    movl $((4096/4)*5),%ecx  # moving these many words to the 6 pages with 4 second level pages + 1 3rd level + 1 4th level pages 
  100029:	b9 00 14 00 00       	mov    $0x1400,%ecx
    rep stosl
  10002e:	f3 ab                	rep stos %eax,%es:(%rdi)
    # creating a 4G boot page table
    # setting the 4th level page table only the second entry needed (PML4)
    movl $pml4,%eax
  100030:	b8 00 20 10 00       	mov    $0x102000,%eax
    movl $pdpt1, %ebx
  100035:	bb 00 30 10 00       	mov    $0x103000,%ebx
    orl $PTE_P,%ebx
  10003a:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10003d:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,(%eax)
  100040:	89 18                	mov    %ebx,(%rax)

    movl $pdpt2, %ebx
  100042:	bb 00 40 10 00       	mov    $0x104000,%ebx
    orl $PTE_P,%ebx
  100047:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10004a:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,0x8(%eax)
  10004d:	89 58 08             	mov    %ebx,0x8(%rax)

    # setting the 3rd level page table (PDPE)
    # 4 entries (counter in ecx), point to the next four physical pages (pgdirs)
    # pgdirs in 0xa0000--0xd000
    movl $pdpt1,%edi
  100050:	bf 00 30 10 00       	mov    $0x103000,%edi
    movl $pde1,%ebx
  100055:	bb 00 50 10 00       	mov    $0x105000,%ebx
    orl $PTE_P,%ebx
  10005a:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10005d:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,(%edi)
  100060:	89 1f                	mov    %ebx,(%rdi)

    movl $pdpt2,%edi
  100062:	bf 00 40 10 00       	mov    $0x104000,%edi
    movl $pde2,%ebx
  100067:	bb 00 60 10 00       	mov    $0x106000,%ebx
    orl $PTE_P,%ebx
  10006c:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10006f:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,(%edi)
  100072:	89 1f                	mov    %ebx,(%rdi)
    
    # setting the pgdir so that the LA=PA
    # mapping first 1G of mem at KERNBASE
    movl $128,%ecx
  100074:	b9 80 00 00 00       	mov    $0x80,%ecx
    # Start at the end and work backwards
    #leal (pml4 + 5*0x1000 - 0x8),%edi
    movl $pde1,%edi
  100079:	bf 00 50 10 00       	mov    $0x105000,%edi
    movl $pde2,%ebx
  10007e:	bb 00 60 10 00       	mov    $0x106000,%ebx
    #64th entry - 0x8004000000
    addl $256,%ebx 
  100083:	81 c3 00 01 00 00    	add    $0x100,%ebx
    # PTE_P|PTE_W|PTE_MBZ
    movl $0x00000183,%eax
  100089:	b8 83 01 00 00       	mov    $0x183,%eax
  1:
     movl %eax,(%edi)
  10008e:	89 07                	mov    %eax,(%rdi)
     movl %eax,(%ebx)
  100090:	89 03                	mov    %eax,(%rbx)
     addl $0x8,%edi
  100092:	83 c7 08             	add    $0x8,%edi
     addl $0x8,%ebx
  100095:	83 c3 08             	add    $0x8,%ebx
     addl $0x00200000,%eax
  100098:	05 00 00 20 00       	add    $0x200000,%eax
     subl $1,%ecx
  10009d:	83 e9 01             	sub    $0x1,%ecx
     cmp $0x0,%ecx
  1000a0:	83 f9 00             	cmp    $0x0,%ecx
     jne 1b
  1000a3:	75 e9                	jne    10008e <_head64+0x8e>
 /*    subl $1,%ecx */
 /*    cmp $0x0,%ecx */
 /*    jne 1b */

    # set the cr3 register
    movl $pml4,%eax
  1000a5:	b8 00 20 10 00       	mov    $0x102000,%eax
    movl %eax, %cr3
  1000aa:	0f 22 d8             	mov    %rax,%cr3

	
    # enable the long mode in MSR
    movl $EFER_MSR,%ecx
  1000ad:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
    rdmsr
  1000b2:	0f 32                	rdmsr  
    btsl $EFER_LME,%eax
  1000b4:	0f ba e8 08          	bts    $0x8,%eax
    wrmsr
  1000b8:	0f 30                	wrmsr  
    
    # enable paging 
    movl %cr0,%eax
  1000ba:	0f 20 c0             	mov    %cr0,%rax
    orl $CR0_PE,%eax
  1000bd:	83 c8 01             	or     $0x1,%eax
    orl $CR0_PG,%eax
  1000c0:	0d 00 00 00 80       	or     $0x80000000,%eax
    orl $CR0_AM,%eax
  1000c5:	0d 00 00 04 00       	or     $0x40000,%eax
    orl $CR0_WP,%eax
  1000ca:	0d 00 00 01 00       	or     $0x10000,%eax
    orl $CR0_MP,%eax
  1000cf:	83 c8 02             	or     $0x2,%eax
    movl %eax,%cr0
  1000d2:	0f 22 c0             	mov    %rax,%cr0
    #jump to long mode with CS=0 and

    movl $gdtdesc_64,%eax
  1000d5:	b8 18 10 10 00       	mov    $0x101018,%eax
    lgdt (%eax)
  1000da:	0f 01 10             	lgdt   (%rax)
    pushl $0x8
  1000dd:	6a 08                	pushq  $0x8
    movl $_start,%eax
  1000df:	b8 0c 00 20 00       	mov    $0x20000c,%eax
    pushl %eax
  1000e4:	50                   	push   %rax

00000000001000e5 <jumpto_longmode>:
    
    .globl jumpto_longmode
    .type jumpto_longmode,@function
jumpto_longmode:
    lret
  1000e5:	cb                   	lret   

00000000001000e6 <verify_cpu>:
/*     movabs $_back_from_head64, %rax */
/*     pushq %rax */
/*     lretq */

verify_cpu:
    pushfl                   # get eflags in eax -- standardard way to check for cpuid
  1000e6:	9c                   	pushfq 
    popl %eax
  1000e7:	58                   	pop    %rax
    movl %eax,%ecx
  1000e8:	89 c1                	mov    %eax,%ecx
    xorl $0x200000, %eax
  1000ea:	35 00 00 20 00       	xor    $0x200000,%eax
    pushl %eax
  1000ef:	50                   	push   %rax
    popfl
  1000f0:	9d                   	popfq  
    pushfl
  1000f1:	9c                   	pushfq 
    popl %eax
  1000f2:	58                   	pop    %rax
    cmpl %eax,%ebx
  1000f3:	39 c3                	cmp    %eax,%ebx
    jz verify_cpu_no_longmode   # no cpuid -- no long mode
  1000f5:	74 1c                	je     100113 <verify_cpu_no_longmode>

    movl $0x0,%eax              # see if cpuid 1 is implemented
  1000f7:	b8 00 00 00 00       	mov    $0x0,%eax
    cpuid
  1000fc:	0f a2                	cpuid  
    cmpl $0x1,%eax
  1000fe:	83 f8 01             	cmp    $0x1,%eax
    jb verify_cpu_no_longmode    # cpuid 1 is not implemented
  100101:	72 10                	jb     100113 <verify_cpu_no_longmode>


    mov $0x80000001, %eax
  100103:	b8 01 00 00 80       	mov    $0x80000001,%eax
    cpuid                 
  100108:	0f a2                	cpuid  
    test $(1 << 29),%edx                 #Test if the LM-bit, is set or not.
  10010a:	f7 c2 00 00 00 20    	test   $0x20000000,%edx
    jz verify_cpu_no_longmode
  100110:	74 01                	je     100113 <verify_cpu_no_longmode>

    ret
  100112:	c3                   	retq   

0000000000100113 <verify_cpu_no_longmode>:

verify_cpu_no_longmode:
    jmp verify_cpu_no_longmode
  100113:	eb fe                	jmp    100113 <verify_cpu_no_longmode>
  100115:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10011c:	00 00 00 
  10011f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100126:	00 00 00 
  100129:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100130:	00 00 00 
  100133:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10013a:	00 00 00 
  10013d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100144:	00 00 00 
  100147:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10014e:	00 00 00 
  100151:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100158:	00 00 00 
  10015b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100162:	00 00 00 
  100165:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10016c:	00 00 00 
  10016f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100176:	00 00 00 
  100179:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100180:	00 00 00 
  100183:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10018a:	00 00 00 
  10018d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100194:	00 00 00 
  100197:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10019e:	00 00 00 
  1001a1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001a8:	00 00 00 
  1001ab:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001b2:	00 00 00 
  1001b5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001bc:	00 00 00 
  1001bf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001c6:	00 00 00 
  1001c9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001d0:	00 00 00 
  1001d3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001da:	00 00 00 
  1001dd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001e4:	00 00 00 
  1001e7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001ee:	00 00 00 
  1001f1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001f8:	00 00 00 
  1001fb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100202:	00 00 00 
  100205:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10020c:	00 00 00 
  10020f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100216:	00 00 00 
  100219:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100220:	00 00 00 
  100223:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10022a:	00 00 00 
  10022d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100234:	00 00 00 
  100237:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10023e:	00 00 00 
  100241:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100248:	00 00 00 
  10024b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100252:	00 00 00 
  100255:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10025c:	00 00 00 
  10025f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100266:	00 00 00 
  100269:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100270:	00 00 00 
  100273:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10027a:	00 00 00 
  10027d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100284:	00 00 00 
  100287:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10028e:	00 00 00 
  100291:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100298:	00 00 00 
  10029b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002a2:	00 00 00 
  1002a5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002ac:	00 00 00 
  1002af:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002b6:	00 00 00 
  1002b9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002c0:	00 00 00 
  1002c3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002ca:	00 00 00 
  1002cd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002d4:	00 00 00 
  1002d7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002de:	00 00 00 
  1002e1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002e8:	00 00 00 
  1002eb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002f2:	00 00 00 
  1002f5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002fc:	00 00 00 
  1002ff:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100306:	00 00 00 
  100309:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100310:	00 00 00 
  100313:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10031a:	00 00 00 
  10031d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100324:	00 00 00 
  100327:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10032e:	00 00 00 
  100331:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100338:	00 00 00 
  10033b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100342:	00 00 00 
  100345:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10034c:	00 00 00 
  10034f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100356:	00 00 00 
  100359:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100360:	00 00 00 
  100363:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10036a:	00 00 00 
  10036d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100374:	00 00 00 
  100377:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10037e:	00 00 00 
  100381:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100388:	00 00 00 
  10038b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100392:	00 00 00 
  100395:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10039c:	00 00 00 
  10039f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003a6:	00 00 00 
  1003a9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003b0:	00 00 00 
  1003b3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003ba:	00 00 00 
  1003bd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003c4:	00 00 00 
  1003c7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003ce:	00 00 00 
  1003d1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003d8:	00 00 00 
  1003db:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003e2:	00 00 00 
  1003e5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003ec:	00 00 00 
  1003ef:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003f6:	00 00 00 
  1003f9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100400:	00 00 00 
  100403:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10040a:	00 00 00 
  10040d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100414:	00 00 00 
  100417:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10041e:	00 00 00 
  100421:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100428:	00 00 00 
  10042b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100432:	00 00 00 
  100435:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10043c:	00 00 00 
  10043f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100446:	00 00 00 
  100449:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100450:	00 00 00 
  100453:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10045a:	00 00 00 
  10045d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100464:	00 00 00 
  100467:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10046e:	00 00 00 
  100471:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100478:	00 00 00 
  10047b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100482:	00 00 00 
  100485:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10048c:	00 00 00 
  10048f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100496:	00 00 00 
  100499:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004a0:	00 00 00 
  1004a3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004aa:	00 00 00 
  1004ad:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004b4:	00 00 00 
  1004b7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004be:	00 00 00 
  1004c1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004c8:	00 00 00 
  1004cb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004d2:	00 00 00 
  1004d5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004dc:	00 00 00 
  1004df:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004e6:	00 00 00 
  1004e9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004f0:	00 00 00 
  1004f3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004fa:	00 00 00 
  1004fd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100504:	00 00 00 
  100507:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10050e:	00 00 00 
  100511:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100518:	00 00 00 
  10051b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100522:	00 00 00 
  100525:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10052c:	00 00 00 
  10052f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100536:	00 00 00 
  100539:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100540:	00 00 00 
  100543:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10054a:	00 00 00 
  10054d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100554:	00 00 00 
  100557:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10055e:	00 00 00 
  100561:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100568:	00 00 00 
  10056b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100572:	00 00 00 
  100575:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10057c:	00 00 00 
  10057f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100586:	00 00 00 
  100589:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100590:	00 00 00 
  100593:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10059a:	00 00 00 
  10059d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005a4:	00 00 00 
  1005a7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005ae:	00 00 00 
  1005b1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005b8:	00 00 00 
  1005bb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005c2:	00 00 00 
  1005c5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005cc:	00 00 00 
  1005cf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005d6:	00 00 00 
  1005d9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005e0:	00 00 00 
  1005e3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005ea:	00 00 00 
  1005ed:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005f4:	00 00 00 
  1005f7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005fe:	00 00 00 
  100601:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100608:	00 00 00 
  10060b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100612:	00 00 00 
  100615:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10061c:	00 00 00 
  10061f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100626:	00 00 00 
  100629:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100630:	00 00 00 
  100633:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10063a:	00 00 00 
  10063d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100644:	00 00 00 
  100647:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10064e:	00 00 00 
  100651:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100658:	00 00 00 
  10065b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100662:	00 00 00 
  100665:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10066c:	00 00 00 
  10066f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100676:	00 00 00 
  100679:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100680:	00 00 00 
  100683:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10068a:	00 00 00 
  10068d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100694:	00 00 00 
  100697:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10069e:	00 00 00 
  1006a1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006a8:	00 00 00 
  1006ab:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006b2:	00 00 00 
  1006b5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006bc:	00 00 00 
  1006bf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006c6:	00 00 00 
  1006c9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006d0:	00 00 00 
  1006d3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006da:	00 00 00 
  1006dd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006e4:	00 00 00 
  1006e7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006ee:	00 00 00 
  1006f1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006f8:	00 00 00 
  1006fb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100702:	00 00 00 
  100705:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10070c:	00 00 00 
  10070f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100716:	00 00 00 
  100719:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100720:	00 00 00 
  100723:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10072a:	00 00 00 
  10072d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100734:	00 00 00 
  100737:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10073e:	00 00 00 
  100741:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100748:	00 00 00 
  10074b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100752:	00 00 00 
  100755:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10075c:	00 00 00 
  10075f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100766:	00 00 00 
  100769:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100770:	00 00 00 
  100773:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10077a:	00 00 00 
  10077d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100784:	00 00 00 
  100787:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10078e:	00 00 00 
  100791:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100798:	00 00 00 
  10079b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007a2:	00 00 00 
  1007a5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007ac:	00 00 00 
  1007af:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007b6:	00 00 00 
  1007b9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007c0:	00 00 00 
  1007c3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007ca:	00 00 00 
  1007cd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007d4:	00 00 00 
  1007d7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007de:	00 00 00 
  1007e1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007e8:	00 00 00 
  1007eb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007f2:	00 00 00 
  1007f5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007fc:	00 00 00 
  1007ff:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100806:	00 00 00 
  100809:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100810:	00 00 00 
  100813:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10081a:	00 00 00 
  10081d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100824:	00 00 00 
  100827:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10082e:	00 00 00 
  100831:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100838:	00 00 00 
  10083b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100842:	00 00 00 
  100845:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10084c:	00 00 00 
  10084f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100856:	00 00 00 
  100859:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100860:	00 00 00 
  100863:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10086a:	00 00 00 
  10086d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100874:	00 00 00 
  100877:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10087e:	00 00 00 
  100881:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100888:	00 00 00 
  10088b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100892:	00 00 00 
  100895:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10089c:	00 00 00 
  10089f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008a6:	00 00 00 
  1008a9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008b0:	00 00 00 
  1008b3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008ba:	00 00 00 
  1008bd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008c4:	00 00 00 
  1008c7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008ce:	00 00 00 
  1008d1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008d8:	00 00 00 
  1008db:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008e2:	00 00 00 
  1008e5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008ec:	00 00 00 
  1008ef:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008f6:	00 00 00 
  1008f9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100900:	00 00 00 
  100903:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10090a:	00 00 00 
  10090d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100914:	00 00 00 
  100917:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10091e:	00 00 00 
  100921:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100928:	00 00 00 
  10092b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100932:	00 00 00 
  100935:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10093c:	00 00 00 
  10093f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100946:	00 00 00 
  100949:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100950:	00 00 00 
  100953:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10095a:	00 00 00 
  10095d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100964:	00 00 00 
  100967:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10096e:	00 00 00 
  100971:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100978:	00 00 00 
  10097b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100982:	00 00 00 
  100985:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10098c:	00 00 00 
  10098f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100996:	00 00 00 
  100999:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009a0:	00 00 00 
  1009a3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009aa:	00 00 00 
  1009ad:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009b4:	00 00 00 
  1009b7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009be:	00 00 00 
  1009c1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009c8:	00 00 00 
  1009cb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009d2:	00 00 00 
  1009d5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009dc:	00 00 00 
  1009df:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009e6:	00 00 00 
  1009e9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009f0:	00 00 00 
  1009f3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009fa:	00 00 00 
  1009fd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a04:	00 00 00 
  100a07:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a0e:	00 00 00 
  100a11:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a18:	00 00 00 
  100a1b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a22:	00 00 00 
  100a25:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a2c:	00 00 00 
  100a2f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a36:	00 00 00 
  100a39:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a40:	00 00 00 
  100a43:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a4a:	00 00 00 
  100a4d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a54:	00 00 00 
  100a57:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a5e:	00 00 00 
  100a61:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a68:	00 00 00 
  100a6b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a72:	00 00 00 
  100a75:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a7c:	00 00 00 
  100a7f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a86:	00 00 00 
  100a89:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a90:	00 00 00 
  100a93:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a9a:	00 00 00 
  100a9d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100aa4:	00 00 00 
  100aa7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100aae:	00 00 00 
  100ab1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ab8:	00 00 00 
  100abb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ac2:	00 00 00 
  100ac5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100acc:	00 00 00 
  100acf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ad6:	00 00 00 
  100ad9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ae0:	00 00 00 
  100ae3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100aea:	00 00 00 
  100aed:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100af4:	00 00 00 
  100af7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100afe:	00 00 00 
  100b01:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b08:	00 00 00 
  100b0b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b12:	00 00 00 
  100b15:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b1c:	00 00 00 
  100b1f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b26:	00 00 00 
  100b29:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b30:	00 00 00 
  100b33:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b3a:	00 00 00 
  100b3d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b44:	00 00 00 
  100b47:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b4e:	00 00 00 
  100b51:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b58:	00 00 00 
  100b5b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b62:	00 00 00 
  100b65:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b6c:	00 00 00 
  100b6f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b76:	00 00 00 
  100b79:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b80:	00 00 00 
  100b83:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b8a:	00 00 00 
  100b8d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b94:	00 00 00 
  100b97:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b9e:	00 00 00 
  100ba1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ba8:	00 00 00 
  100bab:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bb2:	00 00 00 
  100bb5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bbc:	00 00 00 
  100bbf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bc6:	00 00 00 
  100bc9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bd0:	00 00 00 
  100bd3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bda:	00 00 00 
  100bdd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100be4:	00 00 00 
  100be7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bee:	00 00 00 
  100bf1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bf8:	00 00 00 
  100bfb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c02:	00 00 00 
  100c05:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c0c:	00 00 00 
  100c0f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c16:	00 00 00 
  100c19:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c20:	00 00 00 
  100c23:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c2a:	00 00 00 
  100c2d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c34:	00 00 00 
  100c37:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c3e:	00 00 00 
  100c41:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c48:	00 00 00 
  100c4b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c52:	00 00 00 
  100c55:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c5c:	00 00 00 
  100c5f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c66:	00 00 00 
  100c69:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c70:	00 00 00 
  100c73:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c7a:	00 00 00 
  100c7d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c84:	00 00 00 
  100c87:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c8e:	00 00 00 
  100c91:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c98:	00 00 00 
  100c9b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ca2:	00 00 00 
  100ca5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cac:	00 00 00 
  100caf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cb6:	00 00 00 
  100cb9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cc0:	00 00 00 
  100cc3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cca:	00 00 00 
  100ccd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cd4:	00 00 00 
  100cd7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cde:	00 00 00 
  100ce1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ce8:	00 00 00 
  100ceb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cf2:	00 00 00 
  100cf5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cfc:	00 00 00 
  100cff:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d06:	00 00 00 
  100d09:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d10:	00 00 00 
  100d13:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d1a:	00 00 00 
  100d1d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d24:	00 00 00 
  100d27:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d2e:	00 00 00 
  100d31:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d38:	00 00 00 
  100d3b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d42:	00 00 00 
  100d45:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d4c:	00 00 00 
  100d4f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d56:	00 00 00 
  100d59:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d60:	00 00 00 
  100d63:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d6a:	00 00 00 
  100d6d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d74:	00 00 00 
  100d77:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d7e:	00 00 00 
  100d81:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d88:	00 00 00 
  100d8b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d92:	00 00 00 
  100d95:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d9c:	00 00 00 
  100d9f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100da6:	00 00 00 
  100da9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100db0:	00 00 00 
  100db3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dba:	00 00 00 
  100dbd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dc4:	00 00 00 
  100dc7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dce:	00 00 00 
  100dd1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dd8:	00 00 00 
  100ddb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100de2:	00 00 00 
  100de5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dec:	00 00 00 
  100def:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100df6:	00 00 00 
  100df9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e00:	00 00 00 
  100e03:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e0a:	00 00 00 
  100e0d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e14:	00 00 00 
  100e17:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e1e:	00 00 00 
  100e21:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e28:	00 00 00 
  100e2b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e32:	00 00 00 
  100e35:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e3c:	00 00 00 
  100e3f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e46:	00 00 00 
  100e49:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e50:	00 00 00 
  100e53:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e5a:	00 00 00 
  100e5d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e64:	00 00 00 
  100e67:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e6e:	00 00 00 
  100e71:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e78:	00 00 00 
  100e7b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e82:	00 00 00 
  100e85:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e8c:	00 00 00 
  100e8f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e96:	00 00 00 
  100e99:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ea0:	00 00 00 
  100ea3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100eaa:	00 00 00 
  100ead:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100eb4:	00 00 00 
  100eb7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ebe:	00 00 00 
  100ec1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ec8:	00 00 00 
  100ecb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ed2:	00 00 00 
  100ed5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100edc:	00 00 00 
  100edf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ee6:	00 00 00 
  100ee9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ef0:	00 00 00 
  100ef3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100efa:	00 00 00 
  100efd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f04:	00 00 00 
  100f07:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f0e:	00 00 00 
  100f11:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f18:	00 00 00 
  100f1b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f22:	00 00 00 
  100f25:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f2c:	00 00 00 
  100f2f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f36:	00 00 00 
  100f39:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f40:	00 00 00 
  100f43:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f4a:	00 00 00 
  100f4d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f54:	00 00 00 
  100f57:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f5e:	00 00 00 
  100f61:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f68:	00 00 00 
  100f6b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f72:	00 00 00 
  100f75:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f7c:	00 00 00 
  100f7f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f86:	00 00 00 
  100f89:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f90:	00 00 00 
  100f93:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f9a:	00 00 00 
  100f9d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fa4:	00 00 00 
  100fa7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fae:	00 00 00 
  100fb1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fb8:	00 00 00 
  100fbb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fc2:	00 00 00 
  100fc5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fcc:	00 00 00 
  100fcf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fd6:	00 00 00 
  100fd9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fe0:	00 00 00 
  100fe3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fea:	00 00 00 
  100fed:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ff4:	00 00 00 
  100ff7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  100ffe:	00 00 

0000000000101000 <gdt_64>:
	...
  101008:	ff                   	(bad)  
  101009:	ff 00                	incl   (%rax)
  10100b:	00 00                	add    %al,(%rax)
  10100d:	9a                   	(bad)  
  10100e:	af                   	scas   %es:(%rdi),%eax
  10100f:	00 ff                	add    %bh,%bh
  101011:	ff 00                	incl   (%rax)
  101013:	00 00                	add    %al,(%rax)
  101015:	92                   	xchg   %eax,%edx
  101016:	cf                   	iret   
	...

0000000000101018 <gdtdesc_64>:
  101018:	17                   	(bad)  
  101019:	00 00                	add    %al,(%rax)
  10101b:	10 10                	adc    %dl,(%rax)
	...

0000000000102000 <pml4phys>:
	...

0000000000103000 <pdpt1>:
	...

0000000000104000 <pdpt2>:
	...

0000000000105000 <pde1>:
	...

0000000000106000 <pde2>:
	...

0000000000107000 <multiboot_info>:
  107000:	00 00                	add    %al,(%rax)
	...

Disassembly of section .text:

0000008004200000 <_start+0x8003fffff4>:
  8004200000:	02 b0 ad 1b 00 00    	add    0x1bad(%rax),%dh
  8004200006:	00 00                	add    %al,(%rax)
  8004200008:	fe 4f 52             	decb   0x52(%rdi)
  800420000b:	e4 48                	in     $0x48,%al

000000800420000c <entry>:
entry:

/* .globl _back_from_head64 */
/* _back_from_head64: */

    movabs   $gdtdesc_64,%rax
  800420000c:	48 b8 38 50 23 04 80 	movabs $0x8004235038,%rax
  8004200013:	00 00 00 
    lgdt     (%rax)
  8004200016:	0f 01 10             	lgdt   (%rax)
    movw    $DATA_SEL,%ax
  8004200019:	66 b8 10 00          	mov    $0x10,%ax
    movw    %ax,%ds
  800420001d:	8e d8                	mov    %eax,%ds
    movw    %ax,%ss
  800420001f:	8e d0                	mov    %eax,%ss
    movw    %ax,%fs
  8004200021:	8e e0                	mov    %eax,%fs
    movw    %ax,%gs
  8004200023:	8e e8                	mov    %eax,%gs
    movw    %ax,%es
  8004200025:	8e c0                	mov    %eax,%es
    pushq   $CODE_SEL
  8004200027:	6a 08                	pushq  $0x8
    movabs  $relocated,%rax
  8004200029:	48 b8 36 00 20 04 80 	movabs $0x8004200036,%rax
  8004200030:	00 00 00 
    pushq   %rax
  8004200033:	50                   	push   %rax
    lretq
  8004200034:	48 cb                	lretq  

0000008004200036 <relocated>:
relocated:

	# Clear the frame pointer register (RBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movq	$0x0,%rbp			# nuke frame pointer
  8004200036:	48 c7 c5 00 00 00 00 	mov    $0x0,%rbp

	# Set the stack pointer
	movabs	$(bootstacktop),%rax
  800420003d:	48 b8 00 50 23 04 80 	movabs $0x8004235000,%rax
  8004200044:	00 00 00 
	movq  %rax,%rsp
  8004200047:	48 89 c4             	mov    %rax,%rsp

	# now to C code
    movabs $i386_init, %rax
  800420004a:	48 b8 99 00 20 04 80 	movabs $0x8004200099,%rax
  8004200051:	00 00 00 
	call *%rax
  8004200054:	ff d0                	callq  *%rax

0000008004200056 <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
  8004200056:	eb fe                	jmp    8004200056 <spin>

0000008004200058 <xchg>:
	if (edxp)
		*edxp = edx;
}

static inline uint32_t
xchg(volatile uint32_t *addr,uint32_t newval){
  8004200058:	55                   	push   %rbp
  8004200059:	48 89 e5             	mov    %rsp,%rbp
  800420005c:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004200060:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004200064:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint32_t result;
	__asm __volatile("lock; xchgl %0, %1":
  8004200067:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420006b:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420006e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004200072:	f0 87 02             	lock xchg %eax,(%rdx)
  8004200075:	89 45 fc             	mov    %eax,-0x4(%rbp)
			 "+m" (*addr), "=a" (result):
			 "1"(newval):
			 "cc");
	return result;
  8004200078:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  800420007b:	c9                   	leaveq 
  800420007c:	c3                   	retq   

000000800420007d <lock_kernel>:
  800420007d:	55                   	push   %rbp
  800420007e:	48 89 e5             	mov    %rsp,%rbp
  8004200081:	48 bf 60 57 23 04 80 	movabs $0x8004235760,%rdi
  8004200088:	00 00 00 
  800420008b:	48 b8 bd 81 21 04 80 	movabs $0x80042181bd,%rax
  8004200092:	00 00 00 
  8004200095:	ff d0                	callq  *%rax
  8004200097:	5d                   	pop    %rbp
  8004200098:	c3                   	retq   

0000008004200099 <i386_init>:
  8004200099:	55                   	push   %rbp
  800420009a:	48 89 e5             	mov    %rsp,%rbp
  800420009d:	48 ba 10 10 72 04 80 	movabs $0x8004721010,%rdx
  80042000a4:	00 00 00 
  80042000a7:	48 b8 17 ed 4d 04 80 	movabs $0x80044ded17,%rax
  80042000ae:	00 00 00 
  80042000b1:	48 29 c2             	sub    %rax,%rdx
  80042000b4:	48 89 d0             	mov    %rdx,%rax
  80042000b7:	48 89 c2             	mov    %rax,%rdx
  80042000ba:	be 00 00 00 00       	mov    $0x0,%esi
  80042000bf:	48 bf 17 ed 4d 04 80 	movabs $0x80044ded17,%rdi
  80042000c6:	00 00 00 
  80042000c9:	48 b8 37 0e 21 04 80 	movabs $0x8004210e37,%rax
  80042000d0:	00 00 00 
  80042000d3:	ff d0                	callq  *%rax
  80042000d5:	48 b8 a6 11 20 04 80 	movabs $0x80042011a6,%rax
  80042000dc:	00 00 00 
  80042000df:	ff d0                	callq  *%rax
  80042000e1:	be ac 1a 00 00       	mov    $0x1aac,%esi
  80042000e6:	48 bf 40 e3 21 04 80 	movabs $0x800421e340,%rdi
  80042000ed:	00 00 00 
  80042000f0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042000f5:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  80042000fc:	00 00 00 
  80042000ff:	ff d2                	callq  *%rdx
  8004200101:	48 b8 10 10 72 04 80 	movabs $0x8004721010,%rax
  8004200108:	00 00 00 
  800420010b:	48 89 c6             	mov    %rax,%rsi
  800420010e:	48 bf 00 00 01 04 80 	movabs $0x8004010000,%rdi
  8004200115:	00 00 00 
  8004200118:	48 b8 57 68 21 04 80 	movabs $0x8004216857,%rax
  800420011f:	00 00 00 
  8004200122:	ff d0                	callq  *%rax
  8004200124:	48 ba d0 e5 6d 04 80 	movabs $0x80046de5d0,%rdx
  800420012b:	00 00 00 
  800420012e:	48 89 02             	mov    %rax,(%rdx)
  8004200131:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200136:	48 ba 3d 26 20 04 80 	movabs $0x800420263d,%rdx
  800420013d:	00 00 00 
  8004200140:	ff d2                	callq  *%rdx
  8004200142:	48 b8 6d 7f 20 04 80 	movabs $0x8004207f6d,%rax
  8004200149:	00 00 00 
  800420014c:	ff d0                	callq  *%rax
  800420014e:	48 b8 fb 9d 20 04 80 	movabs $0x8004209dfb,%rax
  8004200155:	00 00 00 
  8004200158:	ff d0                	callq  *%rax
  800420015a:	48 b8 dd 77 21 04 80 	movabs $0x80042177dd,%rax
  8004200161:	00 00 00 
  8004200164:	ff d0                	callq  *%rax
  8004200166:	48 b8 3b 7c 21 04 80 	movabs $0x8004217c3b,%rax
  800420016d:	00 00 00 
  8004200170:	ff d0                	callq  *%rax
  8004200172:	48 b8 83 99 20 04 80 	movabs $0x8004209983,%rax
  8004200179:	00 00 00 
  800420017c:	ff d0                	callq  *%rax
  800420017e:	48 b8 58 96 21 04 80 	movabs $0x8004219658,%rax
  8004200185:	00 00 00 
  8004200188:	ff d0                	callq  *%rax
  800420018a:	48 b8 1c 96 21 04 80 	movabs $0x800421961c,%rax
  8004200191:	00 00 00 
  8004200194:	ff d0                	callq  *%rax
  8004200196:	48 b8 7d 00 20 04 80 	movabs $0x800420007d,%rax
  800420019d:	00 00 00 
  80042001a0:	ff d0                	callq  *%rax
  80042001a2:	48 b8 08 02 20 04 80 	movabs $0x8004200208,%rax
  80042001a9:	00 00 00 
  80042001ac:	ff d0                	callq  *%rax
  80042001ae:	be 01 00 00 00       	mov    $0x1,%esi
  80042001b3:	48 bf 3f f7 2b 04 80 	movabs $0x80042bf73f,%rdi
  80042001ba:	00 00 00 
  80042001bd:	48 b8 be 8f 20 04 80 	movabs $0x8004208fbe,%rax
  80042001c4:	00 00 00 
  80042001c7:	ff d0                	callq  *%rax
  80042001c9:	48 b8 23 a0 21 04 80 	movabs $0x800421a023,%rax
  80042001d0:	00 00 00 
  80042001d3:	ff d0                	callq  *%rax
  80042001d5:	be 00 00 00 00       	mov    $0x0,%esi
  80042001da:	48 bf f0 73 2a 04 80 	movabs $0x80042a73f0,%rdi
  80042001e1:	00 00 00 
  80042001e4:	48 b8 be 8f 20 04 80 	movabs $0x8004208fbe,%rax
  80042001eb:	00 00 00 
  80042001ee:	ff d0                	callq  *%rax
  80042001f0:	48 b8 d8 0f 20 04 80 	movabs $0x8004200fd8,%rax
  80042001f7:	00 00 00 
  80042001fa:	ff d0                	callq  *%rax
  80042001fc:	48 b8 76 da 20 04 80 	movabs $0x800420da76,%rax
  8004200203:	00 00 00 
  8004200206:	ff d0                	callq  *%rax

0000008004200208 <boot_aps>:
  8004200208:	55                   	push   %rbp
  8004200209:	48 89 e5             	mov    %rsp,%rbp
  800420020c:	48 83 ec 30          	sub    $0x30,%rsp
  8004200210:	48 c7 45 f0 00 70 00 	movq   $0x7000,-0x10(%rbp)
  8004200217:	00 
  8004200218:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420021c:	48 c1 e8 0c          	shr    $0xc,%rax
  8004200220:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004200223:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004200226:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  800420022d:	00 00 00 
  8004200230:	48 8b 00             	mov    (%rax),%rax
  8004200233:	48 39 c2             	cmp    %rax,%rdx
  8004200236:	72 32                	jb     800420026a <boot_aps+0x62>
  8004200238:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420023c:	48 89 c1             	mov    %rax,%rcx
  800420023f:	48 ba 60 e3 21 04 80 	movabs $0x800421e360,%rdx
  8004200246:	00 00 00 
  8004200249:	be 01 01 00 00       	mov    $0x101,%esi
  800420024e:	48 bf 83 e3 21 04 80 	movabs $0x800421e383,%rdi
  8004200255:	00 00 00 
  8004200258:	b8 00 00 00 00       	mov    $0x0,%eax
  800420025d:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004200264:	00 00 00 
  8004200267:	41 ff d0             	callq  *%r8
  800420026a:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004200271:	00 00 00 
  8004200274:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004200278:	48 01 d0             	add    %rdx,%rax
  800420027b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420027f:	48 ba 06 73 21 04 80 	movabs $0x8004217306,%rdx
  8004200286:	00 00 00 
  8004200289:	48 b8 20 72 21 04 80 	movabs $0x8004217220,%rax
  8004200290:	00 00 00 
  8004200293:	48 29 c2             	sub    %rax,%rdx
  8004200296:	48 89 d0             	mov    %rdx,%rax
  8004200299:	48 89 c2             	mov    %rax,%rdx
  800420029c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042002a0:	48 be 20 72 21 04 80 	movabs $0x8004217220,%rsi
  80042002a7:	00 00 00 
  80042002aa:	48 89 c7             	mov    %rax,%rdi
  80042002ad:	48 b8 c2 0e 21 04 80 	movabs $0x8004210ec2,%rax
  80042002b4:	00 00 00 
  80042002b7:	ff d0                	callq  *%rax
  80042002b9:	48 b8 20 00 6e 04 80 	movabs $0x80046e0020,%rax
  80042002c0:	00 00 00 
  80042002c3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042002c7:	e9 0e 01 00 00       	jmpq   80042003da <boot_aps+0x1d2>
  80042002cc:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  80042002d3:	00 00 00 
  80042002d6:	ff d0                	callq  *%rax
  80042002d8:	48 98                	cltq   
  80042002da:	48 c1 e0 03          	shl    $0x3,%rax
  80042002de:	48 89 c2             	mov    %rax,%rdx
  80042002e1:	48 c1 e2 04          	shl    $0x4,%rdx
  80042002e5:	48 01 c2             	add    %rax,%rdx
  80042002e8:	48 b8 20 00 6e 04 80 	movabs $0x80046e0020,%rax
  80042002ef:	00 00 00 
  80042002f2:	48 01 d0             	add    %rdx,%rax
  80042002f5:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042002f9:	75 05                	jne    8004200300 <boot_aps+0xf8>
  80042002fb:	e9 d2 00 00 00       	jmpq   80042003d2 <boot_aps+0x1ca>
  8004200300:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004200304:	48 b8 20 00 6e 04 80 	movabs $0x80046e0020,%rax
  800420030b:	00 00 00 
  800420030e:	48 29 c2             	sub    %rax,%rdx
  8004200311:	48 89 d0             	mov    %rdx,%rax
  8004200314:	48 c1 f8 03          	sar    $0x3,%rax
  8004200318:	48 89 c2             	mov    %rax,%rdx
  800420031b:	48 b8 f1 f0 f0 f0 f0 	movabs $0xf0f0f0f0f0f0f0f1,%rax
  8004200322:	f0 f0 f0 
  8004200325:	48 0f af c2          	imul   %rdx,%rax
  8004200329:	48 83 c0 01          	add    $0x1,%rax
  800420032d:	48 c1 e0 10          	shl    $0x10,%rax
  8004200331:	48 89 c2             	mov    %rax,%rdx
  8004200334:	48 b8 00 10 6e 04 80 	movabs $0x80046e1000,%rax
  800420033b:	00 00 00 
  800420033e:	48 01 c2             	add    %rax,%rdx
  8004200341:	48 b8 e0 e5 6d 04 80 	movabs $0x80046de5e0,%rax
  8004200348:	00 00 00 
  800420034b:	48 89 10             	mov    %rdx,(%rax)
  800420034e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004200352:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004200356:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420035d:	00 00 00 
  8004200360:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  8004200364:	77 32                	ja     8004200398 <boot_aps+0x190>
  8004200366:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420036a:	48 89 c1             	mov    %rax,%rcx
  800420036d:	48 ba 98 e3 21 04 80 	movabs $0x800421e398,%rdx
  8004200374:	00 00 00 
  8004200377:	be 0b 01 00 00       	mov    $0x10b,%esi
  800420037c:	48 bf 83 e3 21 04 80 	movabs $0x800421e383,%rdi
  8004200383:	00 00 00 
  8004200386:	b8 00 00 00 00       	mov    $0x0,%eax
  800420038b:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004200392:	00 00 00 
  8004200395:	41 ff d0             	callq  *%r8
  8004200398:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800420039f:	ff ff ff 
  80042003a2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042003a6:	48 01 d0             	add    %rdx,%rax
  80042003a9:	89 c2                	mov    %eax,%edx
  80042003ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042003af:	0f b6 00             	movzbl (%rax),%eax
  80042003b2:	0f b6 c0             	movzbl %al,%eax
  80042003b5:	89 d6                	mov    %edx,%esi
  80042003b7:	89 c7                	mov    %eax,%edi
  80042003b9:	48 b8 a2 7e 21 04 80 	movabs $0x8004217ea2,%rax
  80042003c0:	00 00 00 
  80042003c3:	ff d0                	callq  *%rax
  80042003c5:	90                   	nop
  80042003c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042003ca:	8b 40 04             	mov    0x4(%rax),%eax
  80042003cd:	83 f8 01             	cmp    $0x1,%eax
  80042003d0:	75 f4                	jne    80042003c6 <boot_aps+0x1be>
  80042003d2:	48 81 45 f8 88 00 00 	addq   $0x88,-0x8(%rbp)
  80042003d9:	00 
  80042003da:	48 b8 48 02 6e 04 80 	movabs $0x80046e0248,%rax
  80042003e1:	00 00 00 
  80042003e4:	8b 00                	mov    (%rax),%eax
  80042003e6:	48 98                	cltq   
  80042003e8:	48 c1 e0 03          	shl    $0x3,%rax
  80042003ec:	48 89 c2             	mov    %rax,%rdx
  80042003ef:	48 c1 e2 04          	shl    $0x4,%rdx
  80042003f3:	48 01 c2             	add    %rax,%rdx
  80042003f6:	48 b8 20 00 6e 04 80 	movabs $0x80046e0020,%rax
  80042003fd:	00 00 00 
  8004200400:	48 01 d0             	add    %rdx,%rax
  8004200403:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004200407:	0f 87 bf fe ff ff    	ja     80042002cc <boot_aps+0xc4>
  800420040d:	c9                   	leaveq 
  800420040e:	c3                   	retq   

000000800420040f <mp_main>:
  800420040f:	55                   	push   %rbp
  8004200410:	48 89 e5             	mov    %rsp,%rbp
  8004200413:	48 83 ec 10          	sub    $0x10,%rsp
  8004200417:	48 b8 e8 e5 6d 04 80 	movabs $0x80046de5e8,%rax
  800420041e:	00 00 00 
  8004200421:	48 8b 00             	mov    (%rax),%rax
  8004200424:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
}

static __inline void
lcr3(uint64_t val)
{
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  8004200428:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420042c:	0f 22 d8             	mov    %rax,%cr3
  800420042f:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  8004200436:	00 00 00 
  8004200439:	ff d0                	callq  *%rax
  800420043b:	89 c6                	mov    %eax,%esi
  800420043d:	48 bf bc e3 21 04 80 	movabs $0x800421e3bc,%rdi
  8004200444:	00 00 00 
  8004200447:	b8 00 00 00 00       	mov    $0x0,%eax
  800420044c:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004200453:	00 00 00 
  8004200456:	ff d2                	callq  *%rdx
  8004200458:	48 b8 3b 7c 21 04 80 	movabs $0x8004217c3b,%rax
  800420045f:	00 00 00 
  8004200462:	ff d0                	callq  *%rax
  8004200464:	48 b8 3a 80 20 04 80 	movabs $0x800420803a,%rax
  800420046b:	00 00 00 
  800420046e:	ff d0                	callq  *%rax
  8004200470:	48 b8 fe c4 20 04 80 	movabs $0x800420c4fe,%rax
  8004200477:	00 00 00 
  800420047a:	ff d0                	callq  *%rax
  800420047c:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  8004200483:	00 00 00 
  8004200486:	ff d0                	callq  *%rax
  8004200488:	48 98                	cltq   
  800420048a:	48 c1 e0 03          	shl    $0x3,%rax
  800420048e:	48 89 c2             	mov    %rax,%rdx
  8004200491:	48 c1 e2 04          	shl    $0x4,%rdx
  8004200495:	48 01 d0             	add    %rdx,%rax
  8004200498:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420049f:	00 00 00 
  80042004a2:	48 01 d0             	add    %rdx,%rax
  80042004a5:	48 83 c0 04          	add    $0x4,%rax
  80042004a9:	be 01 00 00 00       	mov    $0x1,%esi
  80042004ae:	48 89 c7             	mov    %rax,%rdi
  80042004b1:	48 b8 58 00 20 04 80 	movabs $0x8004200058,%rax
  80042004b8:	00 00 00 
  80042004bb:	ff d0                	callq  *%rax
  80042004bd:	48 b8 7d 00 20 04 80 	movabs $0x800420007d,%rax
  80042004c4:	00 00 00 
  80042004c7:	ff d0                	callq  *%rax
  80042004c9:	48 b8 76 da 20 04 80 	movabs $0x800420da76,%rax
  80042004d0:	00 00 00 
  80042004d3:	ff d0                	callq  *%rax

00000080042004d5 <_panic>:
  80042004d5:	55                   	push   %rbp
  80042004d6:	48 89 e5             	mov    %rsp,%rbp
  80042004d9:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  80042004e0:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  80042004e7:	89 b5 24 ff ff ff    	mov    %esi,-0xdc(%rbp)
  80042004ed:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  80042004f4:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  80042004fb:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  8004200502:	84 c0                	test   %al,%al
  8004200504:	74 20                	je     8004200526 <_panic+0x51>
  8004200506:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  800420050a:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  800420050e:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  8004200512:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  8004200516:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  800420051a:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  800420051e:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  8004200522:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  8004200526:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  800420052d:	48 b8 d8 e5 6d 04 80 	movabs $0x80046de5d8,%rax
  8004200534:	00 00 00 
  8004200537:	48 8b 00             	mov    (%rax),%rax
  800420053a:	48 85 c0             	test   %rax,%rax
  800420053d:	74 05                	je     8004200544 <_panic+0x6f>
  800420053f:	e9 b5 00 00 00       	jmpq   80042005f9 <_panic+0x124>
  8004200544:	48 b8 d8 e5 6d 04 80 	movabs $0x80046de5d8,%rax
  800420054b:	00 00 00 
  800420054e:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  8004200555:	48 89 10             	mov    %rdx,(%rax)
  8004200558:	fa                   	cli    
  8004200559:	fc                   	cld    
  800420055a:	c7 85 38 ff ff ff 18 	movl   $0x18,-0xc8(%rbp)
  8004200561:	00 00 00 
  8004200564:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  800420056b:	00 00 00 
  800420056e:	48 8d 45 10          	lea    0x10(%rbp),%rax
  8004200572:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  8004200579:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004200580:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  8004200587:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420058e:	00 00 00 
  8004200591:	ff d0                	callq  *%rax
  8004200593:	8b 8d 24 ff ff ff    	mov    -0xdc(%rbp),%ecx
  8004200599:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
  80042005a0:	89 c6                	mov    %eax,%esi
  80042005a2:	48 bf d8 e3 21 04 80 	movabs $0x800421e3d8,%rdi
  80042005a9:	00 00 00 
  80042005ac:	b8 00 00 00 00       	mov    $0x0,%eax
  80042005b1:	49 b8 83 9c 20 04 80 	movabs $0x8004209c83,%r8
  80042005b8:	00 00 00 
  80042005bb:	41 ff d0             	callq  *%r8
  80042005be:	48 8d 95 38 ff ff ff 	lea    -0xc8(%rbp),%rdx
  80042005c5:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  80042005cc:	48 89 d6             	mov    %rdx,%rsi
  80042005cf:	48 89 c7             	mov    %rax,%rdi
  80042005d2:	48 b8 24 9c 20 04 80 	movabs $0x8004209c24,%rax
  80042005d9:	00 00 00 
  80042005dc:	ff d0                	callq  *%rax
  80042005de:	48 bf fa e3 21 04 80 	movabs $0x800421e3fa,%rdi
  80042005e5:	00 00 00 
  80042005e8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042005ed:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  80042005f4:	00 00 00 
  80042005f7:	ff d2                	callq  *%rdx
  80042005f9:	bf 00 00 00 00       	mov    $0x0,%edi
  80042005fe:	48 b8 5d 1a 20 04 80 	movabs $0x8004201a5d,%rax
  8004200605:	00 00 00 
  8004200608:	ff d0                	callq  *%rax
  800420060a:	eb ed                	jmp    80042005f9 <_panic+0x124>

000000800420060c <_warn>:
  800420060c:	55                   	push   %rbp
  800420060d:	48 89 e5             	mov    %rsp,%rbp
  8004200610:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  8004200617:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  800420061e:	89 b5 24 ff ff ff    	mov    %esi,-0xdc(%rbp)
  8004200624:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  800420062b:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  8004200632:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  8004200639:	84 c0                	test   %al,%al
  800420063b:	74 20                	je     800420065d <_warn+0x51>
  800420063d:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  8004200641:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  8004200645:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  8004200649:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  800420064d:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  8004200651:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  8004200655:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  8004200659:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  800420065d:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  8004200664:	c7 85 38 ff ff ff 18 	movl   $0x18,-0xc8(%rbp)
  800420066b:	00 00 00 
  800420066e:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  8004200675:	00 00 00 
  8004200678:	48 8d 45 10          	lea    0x10(%rbp),%rax
  800420067c:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  8004200683:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800420068a:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  8004200691:	8b 95 24 ff ff ff    	mov    -0xdc(%rbp),%edx
  8004200697:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  800420069e:	48 89 c6             	mov    %rax,%rsi
  80042006a1:	48 bf fc e3 21 04 80 	movabs $0x800421e3fc,%rdi
  80042006a8:	00 00 00 
  80042006ab:	b8 00 00 00 00       	mov    $0x0,%eax
  80042006b0:	48 b9 83 9c 20 04 80 	movabs $0x8004209c83,%rcx
  80042006b7:	00 00 00 
  80042006ba:	ff d1                	callq  *%rcx
  80042006bc:	48 8d 95 38 ff ff ff 	lea    -0xc8(%rbp),%rdx
  80042006c3:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  80042006ca:	48 89 d6             	mov    %rdx,%rsi
  80042006cd:	48 89 c7             	mov    %rax,%rdi
  80042006d0:	48 b8 24 9c 20 04 80 	movabs $0x8004209c24,%rax
  80042006d7:	00 00 00 
  80042006da:	ff d0                	callq  *%rax
  80042006dc:	48 bf fa e3 21 04 80 	movabs $0x800421e3fa,%rdi
  80042006e3:	00 00 00 
  80042006e6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042006eb:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  80042006f2:	00 00 00 
  80042006f5:	ff d2                	callq  *%rdx
  80042006f7:	c9                   	leaveq 
  80042006f8:	c3                   	retq   

00000080042006f9 <delay>:
  80042006f9:	55                   	push   %rbp
  80042006fa:	48 89 e5             	mov    %rsp,%rbp
  80042006fd:	48 83 ec 20          	sub    $0x20,%rsp
  8004200701:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200708:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420070b:	89 c2                	mov    %eax,%edx
  800420070d:	ec                   	in     (%dx),%al
  800420070e:	88 45 fb             	mov    %al,-0x5(%rbp)
  8004200711:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%rbp)
  8004200718:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420071b:	89 c2                	mov    %eax,%edx
  800420071d:	ec                   	in     (%dx),%al
  800420071e:	88 45 f3             	mov    %al,-0xd(%rbp)
  8004200721:	c7 45 ec 84 00 00 00 	movl   $0x84,-0x14(%rbp)
  8004200728:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420072b:	89 c2                	mov    %eax,%edx
  800420072d:	ec                   	in     (%dx),%al
  800420072e:	88 45 eb             	mov    %al,-0x15(%rbp)
  8004200731:	c7 45 e4 84 00 00 00 	movl   $0x84,-0x1c(%rbp)
  8004200738:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420073b:	89 c2                	mov    %eax,%edx
  800420073d:	ec                   	in     (%dx),%al
  800420073e:	88 45 e3             	mov    %al,-0x1d(%rbp)
  8004200741:	c9                   	leaveq 
  8004200742:	c3                   	retq   

0000008004200743 <serial_proc_data>:
  8004200743:	55                   	push   %rbp
  8004200744:	48 89 e5             	mov    %rsp,%rbp
  8004200747:	48 83 ec 10          	sub    $0x10,%rsp
  800420074b:	c7 45 fc fd 03 00 00 	movl   $0x3fd,-0x4(%rbp)
  8004200752:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004200755:	89 c2                	mov    %eax,%edx
  8004200757:	ec                   	in     (%dx),%al
  8004200758:	88 45 fb             	mov    %al,-0x5(%rbp)
	return data;
  800420075b:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  800420075f:	0f b6 c0             	movzbl %al,%eax
  8004200762:	83 e0 01             	and    $0x1,%eax
  8004200765:	85 c0                	test   %eax,%eax
  8004200767:	75 07                	jne    8004200770 <serial_proc_data+0x2d>
  8004200769:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420076e:	eb 17                	jmp    8004200787 <serial_proc_data+0x44>
  8004200770:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200777:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420077a:	89 c2                	mov    %eax,%edx
  800420077c:	ec                   	in     (%dx),%al
  800420077d:	88 45 f3             	mov    %al,-0xd(%rbp)
	return data;
  8004200780:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004200784:	0f b6 c0             	movzbl %al,%eax
  8004200787:	c9                   	leaveq 
  8004200788:	c3                   	retq   

0000008004200789 <serial_intr>:
  8004200789:	55                   	push   %rbp
  800420078a:	48 89 e5             	mov    %rsp,%rbp
  800420078d:	48 b8 00 f0 4d 04 80 	movabs $0x80044df000,%rax
  8004200794:	00 00 00 
  8004200797:	0f b6 00             	movzbl (%rax),%eax
  800420079a:	84 c0                	test   %al,%al
  800420079c:	74 16                	je     80042007b4 <serial_intr+0x2b>
  800420079e:	48 bf 43 07 20 04 80 	movabs $0x8004200743,%rdi
  80042007a5:	00 00 00 
  80042007a8:	48 b8 29 10 20 04 80 	movabs $0x8004201029,%rax
  80042007af:	00 00 00 
  80042007b2:	ff d0                	callq  *%rax
  80042007b4:	5d                   	pop    %rbp
  80042007b5:	c3                   	retq   

00000080042007b6 <serial_putc>:
  80042007b6:	55                   	push   %rbp
  80042007b7:	48 89 e5             	mov    %rsp,%rbp
  80042007ba:	48 83 ec 28          	sub    $0x28,%rsp
  80042007be:	89 7d dc             	mov    %edi,-0x24(%rbp)
  80042007c1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042007c8:	eb 10                	jmp    80042007da <serial_putc+0x24>
  80042007ca:	48 b8 f9 06 20 04 80 	movabs $0x80042006f9,%rax
  80042007d1:	00 00 00 
  80042007d4:	ff d0                	callq  *%rax
  80042007d6:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042007da:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042007e1:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042007e4:	89 c2                	mov    %eax,%edx
  80042007e6:	ec                   	in     (%dx),%al
  80042007e7:	88 45 f7             	mov    %al,-0x9(%rbp)
	return data;
  80042007ea:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  80042007ee:	0f b6 c0             	movzbl %al,%eax
  80042007f1:	83 e0 20             	and    $0x20,%eax
  80042007f4:	85 c0                	test   %eax,%eax
  80042007f6:	75 09                	jne    8004200801 <serial_putc+0x4b>
  80042007f8:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%rbp)
  80042007ff:	7e c9                	jle    80042007ca <serial_putc+0x14>
  8004200801:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004200804:	0f b6 c0             	movzbl %al,%eax
  8004200807:	c7 45 f0 f8 03 00 00 	movl   $0x3f8,-0x10(%rbp)
  800420080e:	88 45 ef             	mov    %al,-0x11(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200811:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004200815:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004200818:	ee                   	out    %al,(%dx)
  8004200819:	c9                   	leaveq 
  800420081a:	c3                   	retq   

000000800420081b <serial_init>:
  800420081b:	55                   	push   %rbp
  800420081c:	48 89 e5             	mov    %rsp,%rbp
  800420081f:	48 83 ec 50          	sub    $0x50,%rsp
  8004200823:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%rbp)
  800420082a:	c6 45 fb 00          	movb   $0x0,-0x5(%rbp)
  800420082e:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200832:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004200835:	ee                   	out    %al,(%dx)
  8004200836:	c7 45 f4 fb 03 00 00 	movl   $0x3fb,-0xc(%rbp)
  800420083d:	c6 45 f3 80          	movb   $0x80,-0xd(%rbp)
  8004200841:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004200845:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004200848:	ee                   	out    %al,(%dx)
  8004200849:	c7 45 ec f8 03 00 00 	movl   $0x3f8,-0x14(%rbp)
  8004200850:	c6 45 eb 0c          	movb   $0xc,-0x15(%rbp)
  8004200854:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  8004200858:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800420085b:	ee                   	out    %al,(%dx)
  800420085c:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%rbp)
  8004200863:	c6 45 e3 00          	movb   $0x0,-0x1d(%rbp)
  8004200867:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  800420086b:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  800420086e:	ee                   	out    %al,(%dx)
  800420086f:	c7 45 dc fb 03 00 00 	movl   $0x3fb,-0x24(%rbp)
  8004200876:	c6 45 db 03          	movb   $0x3,-0x25(%rbp)
  800420087a:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  800420087e:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004200881:	ee                   	out    %al,(%dx)
  8004200882:	c7 45 d4 fc 03 00 00 	movl   $0x3fc,-0x2c(%rbp)
  8004200889:	c6 45 d3 00          	movb   $0x0,-0x2d(%rbp)
  800420088d:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004200891:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004200894:	ee                   	out    %al,(%dx)
  8004200895:	c7 45 cc f9 03 00 00 	movl   $0x3f9,-0x34(%rbp)
  800420089c:	c6 45 cb 01          	movb   $0x1,-0x35(%rbp)
  80042008a0:	0f b6 45 cb          	movzbl -0x35(%rbp),%eax
  80042008a4:	8b 55 cc             	mov    -0x34(%rbp),%edx
  80042008a7:	ee                   	out    %al,(%dx)
  80042008a8:	c7 45 c4 fd 03 00 00 	movl   $0x3fd,-0x3c(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042008af:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  80042008b2:	89 c2                	mov    %eax,%edx
  80042008b4:	ec                   	in     (%dx),%al
  80042008b5:	88 45 c3             	mov    %al,-0x3d(%rbp)
	return data;
  80042008b8:	0f b6 45 c3          	movzbl -0x3d(%rbp),%eax
  80042008bc:	3c ff                	cmp    $0xff,%al
  80042008be:	0f 95 c2             	setne  %dl
  80042008c1:	48 b8 00 f0 4d 04 80 	movabs $0x80044df000,%rax
  80042008c8:	00 00 00 
  80042008cb:	88 10                	mov    %dl,(%rax)
  80042008cd:	c7 45 bc fa 03 00 00 	movl   $0x3fa,-0x44(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042008d4:	8b 45 bc             	mov    -0x44(%rbp),%eax
  80042008d7:	89 c2                	mov    %eax,%edx
  80042008d9:	ec                   	in     (%dx),%al
  80042008da:	88 45 bb             	mov    %al,-0x45(%rbp)
  80042008dd:	c7 45 b4 f8 03 00 00 	movl   $0x3f8,-0x4c(%rbp)
  80042008e4:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  80042008e7:	89 c2                	mov    %eax,%edx
  80042008e9:	ec                   	in     (%dx),%al
  80042008ea:	88 45 b3             	mov    %al,-0x4d(%rbp)
  80042008ed:	48 b8 00 f0 4d 04 80 	movabs $0x80044df000,%rax
  80042008f4:	00 00 00 
  80042008f7:	0f b6 00             	movzbl (%rax),%eax
  80042008fa:	84 c0                	test   %al,%al
  80042008fc:	74 23                	je     8004200921 <serial_init+0x106>
  80042008fe:	48 b8 72 56 23 04 80 	movabs $0x8004235672,%rax
  8004200905:	00 00 00 
  8004200908:	0f b7 00             	movzwl (%rax),%eax
  800420090b:	0f b7 c0             	movzwl %ax,%eax
  800420090e:	25 ef ff 00 00       	and    $0xffef,%eax
  8004200913:	89 c7                	mov    %eax,%edi
  8004200915:	48 b8 d5 9a 20 04 80 	movabs $0x8004209ad5,%rax
  800420091c:	00 00 00 
  800420091f:	ff d0                	callq  *%rax
  8004200921:	c9                   	leaveq 
  8004200922:	c3                   	retq   

0000008004200923 <lpt_putc>:
  8004200923:	55                   	push   %rbp
  8004200924:	48 89 e5             	mov    %rsp,%rbp
  8004200927:	48 83 ec 38          	sub    $0x38,%rsp
  800420092b:	89 7d cc             	mov    %edi,-0x34(%rbp)
  800420092e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004200935:	eb 10                	jmp    8004200947 <lpt_putc+0x24>
  8004200937:	48 b8 f9 06 20 04 80 	movabs $0x80042006f9,%rax
  800420093e:	00 00 00 
  8004200941:	ff d0                	callq  *%rax
  8004200943:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004200947:	c7 45 f8 79 03 00 00 	movl   $0x379,-0x8(%rbp)
  800420094e:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004200951:	89 c2                	mov    %eax,%edx
  8004200953:	ec                   	in     (%dx),%al
  8004200954:	88 45 f7             	mov    %al,-0x9(%rbp)
	return data;
  8004200957:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  800420095b:	84 c0                	test   %al,%al
  800420095d:	78 09                	js     8004200968 <lpt_putc+0x45>
  800420095f:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%rbp)
  8004200966:	7e cf                	jle    8004200937 <lpt_putc+0x14>
  8004200968:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800420096b:	0f b6 c0             	movzbl %al,%eax
  800420096e:	c7 45 f0 78 03 00 00 	movl   $0x378,-0x10(%rbp)
  8004200975:	88 45 ef             	mov    %al,-0x11(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200978:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  800420097c:	8b 55 f0             	mov    -0x10(%rbp),%edx
  800420097f:	ee                   	out    %al,(%dx)
  8004200980:	c7 45 e8 7a 03 00 00 	movl   $0x37a,-0x18(%rbp)
  8004200987:	c6 45 e7 0d          	movb   $0xd,-0x19(%rbp)
  800420098b:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  800420098f:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004200992:	ee                   	out    %al,(%dx)
  8004200993:	c7 45 e0 7a 03 00 00 	movl   $0x37a,-0x20(%rbp)
  800420099a:	c6 45 df 08          	movb   $0x8,-0x21(%rbp)
  800420099e:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  80042009a2:	8b 55 e0             	mov    -0x20(%rbp),%edx
  80042009a5:	ee                   	out    %al,(%dx)
  80042009a6:	c9                   	leaveq 
  80042009a7:	c3                   	retq   

00000080042009a8 <cga_init>:
  80042009a8:	55                   	push   %rbp
  80042009a9:	48 89 e5             	mov    %rsp,%rbp
  80042009ac:	48 83 ec 30          	sub    $0x30,%rsp
  80042009b0:	48 b8 00 80 0b 04 80 	movabs $0x80040b8000,%rax
  80042009b7:	00 00 00 
  80042009ba:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042009be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042009c2:	0f b7 00             	movzwl (%rax),%eax
  80042009c5:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
  80042009c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042009cd:	66 c7 00 5a a5       	movw   $0xa55a,(%rax)
  80042009d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042009d6:	0f b7 00             	movzwl (%rax),%eax
  80042009d9:	66 3d 5a a5          	cmp    $0xa55a,%ax
  80042009dd:	74 20                	je     80042009ff <cga_init+0x57>
  80042009df:	48 b8 00 00 0b 04 80 	movabs $0x80040b0000,%rax
  80042009e6:	00 00 00 
  80042009e9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042009ed:	48 b8 04 f0 4d 04 80 	movabs $0x80044df004,%rax
  80042009f4:	00 00 00 
  80042009f7:	c7 00 b4 03 00 00    	movl   $0x3b4,(%rax)
  80042009fd:	eb 1b                	jmp    8004200a1a <cga_init+0x72>
  80042009ff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004200a03:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  8004200a07:	66 89 10             	mov    %dx,(%rax)
  8004200a0a:	48 b8 04 f0 4d 04 80 	movabs $0x80044df004,%rax
  8004200a11:	00 00 00 
  8004200a14:	c7 00 d4 03 00 00    	movl   $0x3d4,(%rax)
  8004200a1a:	48 b8 04 f0 4d 04 80 	movabs $0x80044df004,%rax
  8004200a21:	00 00 00 
  8004200a24:	8b 00                	mov    (%rax),%eax
  8004200a26:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004200a29:	c6 45 eb 0e          	movb   $0xe,-0x15(%rbp)
  8004200a2d:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  8004200a31:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004200a34:	ee                   	out    %al,(%dx)
  8004200a35:	48 b8 04 f0 4d 04 80 	movabs $0x80044df004,%rax
  8004200a3c:	00 00 00 
  8004200a3f:	8b 00                	mov    (%rax),%eax
  8004200a41:	83 c0 01             	add    $0x1,%eax
  8004200a44:	89 45 e4             	mov    %eax,-0x1c(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200a47:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004200a4a:	89 c2                	mov    %eax,%edx
  8004200a4c:	ec                   	in     (%dx),%al
  8004200a4d:	88 45 e3             	mov    %al,-0x1d(%rbp)
	return data;
  8004200a50:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  8004200a54:	0f b6 c0             	movzbl %al,%eax
  8004200a57:	c1 e0 08             	shl    $0x8,%eax
  8004200a5a:	89 45 f0             	mov    %eax,-0x10(%rbp)
  8004200a5d:	48 b8 04 f0 4d 04 80 	movabs $0x80044df004,%rax
  8004200a64:	00 00 00 
  8004200a67:	8b 00                	mov    (%rax),%eax
  8004200a69:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004200a6c:	c6 45 db 0f          	movb   $0xf,-0x25(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200a70:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  8004200a74:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004200a77:	ee                   	out    %al,(%dx)
  8004200a78:	48 b8 04 f0 4d 04 80 	movabs $0x80044df004,%rax
  8004200a7f:	00 00 00 
  8004200a82:	8b 00                	mov    (%rax),%eax
  8004200a84:	83 c0 01             	add    $0x1,%eax
  8004200a87:	89 45 d4             	mov    %eax,-0x2c(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200a8a:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  8004200a8d:	89 c2                	mov    %eax,%edx
  8004200a8f:	ec                   	in     (%dx),%al
  8004200a90:	88 45 d3             	mov    %al,-0x2d(%rbp)
	return data;
  8004200a93:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004200a97:	0f b6 c0             	movzbl %al,%eax
  8004200a9a:	09 45 f0             	or     %eax,-0x10(%rbp)
  8004200a9d:	48 b8 08 f0 4d 04 80 	movabs $0x80044df008,%rax
  8004200aa4:	00 00 00 
  8004200aa7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004200aab:	48 89 10             	mov    %rdx,(%rax)
  8004200aae:	8b 45 f0             	mov    -0x10(%rbp),%eax
  8004200ab1:	89 c2                	mov    %eax,%edx
  8004200ab3:	48 b8 10 f0 4d 04 80 	movabs $0x80044df010,%rax
  8004200aba:	00 00 00 
  8004200abd:	66 89 10             	mov    %dx,(%rax)
  8004200ac0:	c9                   	leaveq 
  8004200ac1:	c3                   	retq   

0000008004200ac2 <cga_putc>:
  8004200ac2:	55                   	push   %rbp
  8004200ac3:	48 89 e5             	mov    %rsp,%rbp
  8004200ac6:	48 83 ec 40          	sub    $0x40,%rsp
  8004200aca:	89 7d cc             	mov    %edi,-0x34(%rbp)
  8004200acd:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200ad0:	b0 00                	mov    $0x0,%al
  8004200ad2:	85 c0                	test   %eax,%eax
  8004200ad4:	75 07                	jne    8004200add <cga_putc+0x1b>
  8004200ad6:	81 4d cc 00 07 00 00 	orl    $0x700,-0x34(%rbp)
  8004200add:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200ae0:	0f b6 c0             	movzbl %al,%eax
  8004200ae3:	83 f8 09             	cmp    $0x9,%eax
  8004200ae6:	0f 84 f6 00 00 00    	je     8004200be2 <cga_putc+0x120>
  8004200aec:	83 f8 09             	cmp    $0x9,%eax
  8004200aef:	7f 0a                	jg     8004200afb <cga_putc+0x39>
  8004200af1:	83 f8 08             	cmp    $0x8,%eax
  8004200af4:	74 18                	je     8004200b0e <cga_putc+0x4c>
  8004200af6:	e9 3e 01 00 00       	jmpq   8004200c39 <cga_putc+0x177>
  8004200afb:	83 f8 0a             	cmp    $0xa,%eax
  8004200afe:	74 75                	je     8004200b75 <cga_putc+0xb3>
  8004200b00:	83 f8 0d             	cmp    $0xd,%eax
  8004200b03:	0f 84 89 00 00 00    	je     8004200b92 <cga_putc+0xd0>
  8004200b09:	e9 2b 01 00 00       	jmpq   8004200c39 <cga_putc+0x177>
  8004200b0e:	48 b8 10 f0 4d 04 80 	movabs $0x80044df010,%rax
  8004200b15:	00 00 00 
  8004200b18:	0f b7 00             	movzwl (%rax),%eax
  8004200b1b:	66 85 c0             	test   %ax,%ax
  8004200b1e:	74 50                	je     8004200b70 <cga_putc+0xae>
  8004200b20:	48 b8 10 f0 4d 04 80 	movabs $0x80044df010,%rax
  8004200b27:	00 00 00 
  8004200b2a:	0f b7 00             	movzwl (%rax),%eax
  8004200b2d:	8d 50 ff             	lea    -0x1(%rax),%edx
  8004200b30:	48 b8 10 f0 4d 04 80 	movabs $0x80044df010,%rax
  8004200b37:	00 00 00 
  8004200b3a:	66 89 10             	mov    %dx,(%rax)
  8004200b3d:	48 b8 08 f0 4d 04 80 	movabs $0x80044df008,%rax
  8004200b44:	00 00 00 
  8004200b47:	48 8b 10             	mov    (%rax),%rdx
  8004200b4a:	48 b8 10 f0 4d 04 80 	movabs $0x80044df010,%rax
  8004200b51:	00 00 00 
  8004200b54:	0f b7 00             	movzwl (%rax),%eax
  8004200b57:	0f b7 c0             	movzwl %ax,%eax
  8004200b5a:	48 01 c0             	add    %rax,%rax
  8004200b5d:	48 01 c2             	add    %rax,%rdx
  8004200b60:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200b63:	b0 00                	mov    $0x0,%al
  8004200b65:	83 c8 20             	or     $0x20,%eax
  8004200b68:	66 89 02             	mov    %ax,(%rdx)
  8004200b6b:	e9 04 01 00 00       	jmpq   8004200c74 <cga_putc+0x1b2>
  8004200b70:	e9 ff 00 00 00       	jmpq   8004200c74 <cga_putc+0x1b2>
  8004200b75:	48 b8 10 f0 4d 04 80 	movabs $0x80044df010,%rax
  8004200b7c:	00 00 00 
  8004200b7f:	0f b7 00             	movzwl (%rax),%eax
  8004200b82:	8d 50 50             	lea    0x50(%rax),%edx
  8004200b85:	48 b8 10 f0 4d 04 80 	movabs $0x80044df010,%rax
  8004200b8c:	00 00 00 
  8004200b8f:	66 89 10             	mov    %dx,(%rax)
  8004200b92:	48 b8 10 f0 4d 04 80 	movabs $0x80044df010,%rax
  8004200b99:	00 00 00 
  8004200b9c:	0f b7 30             	movzwl (%rax),%esi
  8004200b9f:	48 b8 10 f0 4d 04 80 	movabs $0x80044df010,%rax
  8004200ba6:	00 00 00 
  8004200ba9:	0f b7 08             	movzwl (%rax),%ecx
  8004200bac:	0f b7 c1             	movzwl %cx,%eax
  8004200baf:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
  8004200bb5:	c1 e8 10             	shr    $0x10,%eax
  8004200bb8:	89 c2                	mov    %eax,%edx
  8004200bba:	66 c1 ea 06          	shr    $0x6,%dx
  8004200bbe:	89 d0                	mov    %edx,%eax
  8004200bc0:	c1 e0 02             	shl    $0x2,%eax
  8004200bc3:	01 d0                	add    %edx,%eax
  8004200bc5:	c1 e0 04             	shl    $0x4,%eax
  8004200bc8:	29 c1                	sub    %eax,%ecx
  8004200bca:	89 ca                	mov    %ecx,%edx
  8004200bcc:	29 d6                	sub    %edx,%esi
  8004200bce:	89 f2                	mov    %esi,%edx
  8004200bd0:	48 b8 10 f0 4d 04 80 	movabs $0x80044df010,%rax
  8004200bd7:	00 00 00 
  8004200bda:	66 89 10             	mov    %dx,(%rax)
  8004200bdd:	e9 92 00 00 00       	jmpq   8004200c74 <cga_putc+0x1b2>
  8004200be2:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200be7:	48 b8 66 11 20 04 80 	movabs $0x8004201166,%rax
  8004200bee:	00 00 00 
  8004200bf1:	ff d0                	callq  *%rax
  8004200bf3:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200bf8:	48 b8 66 11 20 04 80 	movabs $0x8004201166,%rax
  8004200bff:	00 00 00 
  8004200c02:	ff d0                	callq  *%rax
  8004200c04:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200c09:	48 b8 66 11 20 04 80 	movabs $0x8004201166,%rax
  8004200c10:	00 00 00 
  8004200c13:	ff d0                	callq  *%rax
  8004200c15:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200c1a:	48 b8 66 11 20 04 80 	movabs $0x8004201166,%rax
  8004200c21:	00 00 00 
  8004200c24:	ff d0                	callq  *%rax
  8004200c26:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200c2b:	48 b8 66 11 20 04 80 	movabs $0x8004201166,%rax
  8004200c32:	00 00 00 
  8004200c35:	ff d0                	callq  *%rax
  8004200c37:	eb 3b                	jmp    8004200c74 <cga_putc+0x1b2>
  8004200c39:	48 b8 08 f0 4d 04 80 	movabs $0x80044df008,%rax
  8004200c40:	00 00 00 
  8004200c43:	48 8b 30             	mov    (%rax),%rsi
  8004200c46:	48 b8 10 f0 4d 04 80 	movabs $0x80044df010,%rax
  8004200c4d:	00 00 00 
  8004200c50:	0f b7 00             	movzwl (%rax),%eax
  8004200c53:	8d 48 01             	lea    0x1(%rax),%ecx
  8004200c56:	48 ba 10 f0 4d 04 80 	movabs $0x80044df010,%rdx
  8004200c5d:	00 00 00 
  8004200c60:	66 89 0a             	mov    %cx,(%rdx)
  8004200c63:	0f b7 c0             	movzwl %ax,%eax
  8004200c66:	48 01 c0             	add    %rax,%rax
  8004200c69:	48 8d 14 06          	lea    (%rsi,%rax,1),%rdx
  8004200c6d:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200c70:	66 89 02             	mov    %ax,(%rdx)
  8004200c73:	90                   	nop
  8004200c74:	48 b8 10 f0 4d 04 80 	movabs $0x80044df010,%rax
  8004200c7b:	00 00 00 
  8004200c7e:	0f b7 00             	movzwl (%rax),%eax
  8004200c81:	66 3d cf 07          	cmp    $0x7cf,%ax
  8004200c85:	0f 86 89 00 00 00    	jbe    8004200d14 <cga_putc+0x252>
  8004200c8b:	48 b8 08 f0 4d 04 80 	movabs $0x80044df008,%rax
  8004200c92:	00 00 00 
  8004200c95:	48 8b 00             	mov    (%rax),%rax
  8004200c98:	48 8d 88 a0 00 00 00 	lea    0xa0(%rax),%rcx
  8004200c9f:	48 b8 08 f0 4d 04 80 	movabs $0x80044df008,%rax
  8004200ca6:	00 00 00 
  8004200ca9:	48 8b 00             	mov    (%rax),%rax
  8004200cac:	ba 00 0f 00 00       	mov    $0xf00,%edx
  8004200cb1:	48 89 ce             	mov    %rcx,%rsi
  8004200cb4:	48 89 c7             	mov    %rax,%rdi
  8004200cb7:	48 b8 c2 0e 21 04 80 	movabs $0x8004210ec2,%rax
  8004200cbe:	00 00 00 
  8004200cc1:	ff d0                	callq  *%rax
  8004200cc3:	c7 45 fc 80 07 00 00 	movl   $0x780,-0x4(%rbp)
  8004200cca:	eb 22                	jmp    8004200cee <cga_putc+0x22c>
  8004200ccc:	48 b8 08 f0 4d 04 80 	movabs $0x80044df008,%rax
  8004200cd3:	00 00 00 
  8004200cd6:	48 8b 00             	mov    (%rax),%rax
  8004200cd9:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004200cdc:	48 63 d2             	movslq %edx,%rdx
  8004200cdf:	48 01 d2             	add    %rdx,%rdx
  8004200ce2:	48 01 d0             	add    %rdx,%rax
  8004200ce5:	66 c7 00 20 07       	movw   $0x720,(%rax)
  8004200cea:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004200cee:	81 7d fc cf 07 00 00 	cmpl   $0x7cf,-0x4(%rbp)
  8004200cf5:	7e d5                	jle    8004200ccc <cga_putc+0x20a>
  8004200cf7:	48 b8 10 f0 4d 04 80 	movabs $0x80044df010,%rax
  8004200cfe:	00 00 00 
  8004200d01:	0f b7 00             	movzwl (%rax),%eax
  8004200d04:	8d 50 b0             	lea    -0x50(%rax),%edx
  8004200d07:	48 b8 10 f0 4d 04 80 	movabs $0x80044df010,%rax
  8004200d0e:	00 00 00 
  8004200d11:	66 89 10             	mov    %dx,(%rax)
  8004200d14:	48 b8 04 f0 4d 04 80 	movabs $0x80044df004,%rax
  8004200d1b:	00 00 00 
  8004200d1e:	8b 00                	mov    (%rax),%eax
  8004200d20:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004200d23:	c6 45 f7 0e          	movb   $0xe,-0x9(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200d27:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  8004200d2b:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004200d2e:	ee                   	out    %al,(%dx)
  8004200d2f:	48 b8 10 f0 4d 04 80 	movabs $0x80044df010,%rax
  8004200d36:	00 00 00 
  8004200d39:	0f b7 00             	movzwl (%rax),%eax
  8004200d3c:	66 c1 e8 08          	shr    $0x8,%ax
  8004200d40:	0f b6 c0             	movzbl %al,%eax
  8004200d43:	48 ba 04 f0 4d 04 80 	movabs $0x80044df004,%rdx
  8004200d4a:	00 00 00 
  8004200d4d:	8b 12                	mov    (%rdx),%edx
  8004200d4f:	83 c2 01             	add    $0x1,%edx
  8004200d52:	89 55 f0             	mov    %edx,-0x10(%rbp)
  8004200d55:	88 45 ef             	mov    %al,-0x11(%rbp)
  8004200d58:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004200d5c:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004200d5f:	ee                   	out    %al,(%dx)
  8004200d60:	48 b8 04 f0 4d 04 80 	movabs $0x80044df004,%rax
  8004200d67:	00 00 00 
  8004200d6a:	8b 00                	mov    (%rax),%eax
  8004200d6c:	89 45 e8             	mov    %eax,-0x18(%rbp)
  8004200d6f:	c6 45 e7 0f          	movb   $0xf,-0x19(%rbp)
  8004200d73:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004200d77:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004200d7a:	ee                   	out    %al,(%dx)
  8004200d7b:	48 b8 10 f0 4d 04 80 	movabs $0x80044df010,%rax
  8004200d82:	00 00 00 
  8004200d85:	0f b7 00             	movzwl (%rax),%eax
  8004200d88:	0f b6 c0             	movzbl %al,%eax
  8004200d8b:	48 ba 04 f0 4d 04 80 	movabs $0x80044df004,%rdx
  8004200d92:	00 00 00 
  8004200d95:	8b 12                	mov    (%rdx),%edx
  8004200d97:	83 c2 01             	add    $0x1,%edx
  8004200d9a:	89 55 e0             	mov    %edx,-0x20(%rbp)
  8004200d9d:	88 45 df             	mov    %al,-0x21(%rbp)
  8004200da0:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  8004200da4:	8b 55 e0             	mov    -0x20(%rbp),%edx
  8004200da7:	ee                   	out    %al,(%dx)
  8004200da8:	c9                   	leaveq 
  8004200da9:	c3                   	retq   

0000008004200daa <kbd_proc_data>:
  8004200daa:	55                   	push   %rbp
  8004200dab:	48 89 e5             	mov    %rsp,%rbp
  8004200dae:	48 83 ec 20          	sub    $0x20,%rsp
  8004200db2:	c7 45 f4 64 00 00 00 	movl   $0x64,-0xc(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200db9:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004200dbc:	89 c2                	mov    %eax,%edx
  8004200dbe:	ec                   	in     (%dx),%al
  8004200dbf:	88 45 f3             	mov    %al,-0xd(%rbp)
	return data;
  8004200dc2:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004200dc6:	0f b6 c0             	movzbl %al,%eax
  8004200dc9:	83 e0 01             	and    $0x1,%eax
  8004200dcc:	85 c0                	test   %eax,%eax
  8004200dce:	75 0a                	jne    8004200dda <kbd_proc_data+0x30>
  8004200dd0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004200dd5:	e9 fc 01 00 00       	jmpq   8004200fd6 <kbd_proc_data+0x22c>
  8004200dda:	c7 45 ec 60 00 00 00 	movl   $0x60,-0x14(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200de1:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004200de4:	89 c2                	mov    %eax,%edx
  8004200de6:	ec                   	in     (%dx),%al
  8004200de7:	88 45 eb             	mov    %al,-0x15(%rbp)
	return data;
  8004200dea:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  8004200dee:	88 45 fb             	mov    %al,-0x5(%rbp)
  8004200df1:	80 7d fb e0          	cmpb   $0xe0,-0x5(%rbp)
  8004200df5:	75 27                	jne    8004200e1e <kbd_proc_data+0x74>
  8004200df7:	48 b8 28 f2 4d 04 80 	movabs $0x80044df228,%rax
  8004200dfe:	00 00 00 
  8004200e01:	8b 00                	mov    (%rax),%eax
  8004200e03:	83 c8 40             	or     $0x40,%eax
  8004200e06:	89 c2                	mov    %eax,%edx
  8004200e08:	48 b8 28 f2 4d 04 80 	movabs $0x80044df228,%rax
  8004200e0f:	00 00 00 
  8004200e12:	89 10                	mov    %edx,(%rax)
  8004200e14:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200e19:	e9 b8 01 00 00       	jmpq   8004200fd6 <kbd_proc_data+0x22c>
  8004200e1e:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200e22:	84 c0                	test   %al,%al
  8004200e24:	79 65                	jns    8004200e8b <kbd_proc_data+0xe1>
  8004200e26:	48 b8 28 f2 4d 04 80 	movabs $0x80044df228,%rax
  8004200e2d:	00 00 00 
  8004200e30:	8b 00                	mov    (%rax),%eax
  8004200e32:	83 e0 40             	and    $0x40,%eax
  8004200e35:	85 c0                	test   %eax,%eax
  8004200e37:	75 09                	jne    8004200e42 <kbd_proc_data+0x98>
  8004200e39:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200e3d:	83 e0 7f             	and    $0x7f,%eax
  8004200e40:	eb 04                	jmp    8004200e46 <kbd_proc_data+0x9c>
  8004200e42:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200e46:	88 45 fb             	mov    %al,-0x5(%rbp)
  8004200e49:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200e4d:	48 ba 60 50 23 04 80 	movabs $0x8004235060,%rdx
  8004200e54:	00 00 00 
  8004200e57:	48 98                	cltq   
  8004200e59:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004200e5d:	83 c8 40             	or     $0x40,%eax
  8004200e60:	0f b6 c0             	movzbl %al,%eax
  8004200e63:	f7 d0                	not    %eax
  8004200e65:	89 c2                	mov    %eax,%edx
  8004200e67:	48 b8 28 f2 4d 04 80 	movabs $0x80044df228,%rax
  8004200e6e:	00 00 00 
  8004200e71:	8b 00                	mov    (%rax),%eax
  8004200e73:	21 c2                	and    %eax,%edx
  8004200e75:	48 b8 28 f2 4d 04 80 	movabs $0x80044df228,%rax
  8004200e7c:	00 00 00 
  8004200e7f:	89 10                	mov    %edx,(%rax)
  8004200e81:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200e86:	e9 4b 01 00 00       	jmpq   8004200fd6 <kbd_proc_data+0x22c>
  8004200e8b:	48 b8 28 f2 4d 04 80 	movabs $0x80044df228,%rax
  8004200e92:	00 00 00 
  8004200e95:	8b 00                	mov    (%rax),%eax
  8004200e97:	83 e0 40             	and    $0x40,%eax
  8004200e9a:	85 c0                	test   %eax,%eax
  8004200e9c:	74 21                	je     8004200ebf <kbd_proc_data+0x115>
  8004200e9e:	80 4d fb 80          	orb    $0x80,-0x5(%rbp)
  8004200ea2:	48 b8 28 f2 4d 04 80 	movabs $0x80044df228,%rax
  8004200ea9:	00 00 00 
  8004200eac:	8b 00                	mov    (%rax),%eax
  8004200eae:	83 e0 bf             	and    $0xffffffbf,%eax
  8004200eb1:	89 c2                	mov    %eax,%edx
  8004200eb3:	48 b8 28 f2 4d 04 80 	movabs $0x80044df228,%rax
  8004200eba:	00 00 00 
  8004200ebd:	89 10                	mov    %edx,(%rax)
  8004200ebf:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200ec3:	48 ba 60 50 23 04 80 	movabs $0x8004235060,%rdx
  8004200eca:	00 00 00 
  8004200ecd:	48 98                	cltq   
  8004200ecf:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004200ed3:	0f b6 d0             	movzbl %al,%edx
  8004200ed6:	48 b8 28 f2 4d 04 80 	movabs $0x80044df228,%rax
  8004200edd:	00 00 00 
  8004200ee0:	8b 00                	mov    (%rax),%eax
  8004200ee2:	09 c2                	or     %eax,%edx
  8004200ee4:	48 b8 28 f2 4d 04 80 	movabs $0x80044df228,%rax
  8004200eeb:	00 00 00 
  8004200eee:	89 10                	mov    %edx,(%rax)
  8004200ef0:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200ef4:	48 ba 60 51 23 04 80 	movabs $0x8004235160,%rdx
  8004200efb:	00 00 00 
  8004200efe:	48 98                	cltq   
  8004200f00:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004200f04:	0f b6 d0             	movzbl %al,%edx
  8004200f07:	48 b8 28 f2 4d 04 80 	movabs $0x80044df228,%rax
  8004200f0e:	00 00 00 
  8004200f11:	8b 00                	mov    (%rax),%eax
  8004200f13:	31 c2                	xor    %eax,%edx
  8004200f15:	48 b8 28 f2 4d 04 80 	movabs $0x80044df228,%rax
  8004200f1c:	00 00 00 
  8004200f1f:	89 10                	mov    %edx,(%rax)
  8004200f21:	48 b8 28 f2 4d 04 80 	movabs $0x80044df228,%rax
  8004200f28:	00 00 00 
  8004200f2b:	8b 00                	mov    (%rax),%eax
  8004200f2d:	83 e0 03             	and    $0x3,%eax
  8004200f30:	89 c2                	mov    %eax,%edx
  8004200f32:	48 b8 60 55 23 04 80 	movabs $0x8004235560,%rax
  8004200f39:	00 00 00 
  8004200f3c:	89 d2                	mov    %edx,%edx
  8004200f3e:	48 8b 14 d0          	mov    (%rax,%rdx,8),%rdx
  8004200f42:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200f46:	48 01 d0             	add    %rdx,%rax
  8004200f49:	0f b6 00             	movzbl (%rax),%eax
  8004200f4c:	0f b6 c0             	movzbl %al,%eax
  8004200f4f:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004200f52:	48 b8 28 f2 4d 04 80 	movabs $0x80044df228,%rax
  8004200f59:	00 00 00 
  8004200f5c:	8b 00                	mov    (%rax),%eax
  8004200f5e:	83 e0 08             	and    $0x8,%eax
  8004200f61:	85 c0                	test   %eax,%eax
  8004200f63:	74 22                	je     8004200f87 <kbd_proc_data+0x1dd>
  8004200f65:	83 7d fc 60          	cmpl   $0x60,-0x4(%rbp)
  8004200f69:	7e 0c                	jle    8004200f77 <kbd_proc_data+0x1cd>
  8004200f6b:	83 7d fc 7a          	cmpl   $0x7a,-0x4(%rbp)
  8004200f6f:	7f 06                	jg     8004200f77 <kbd_proc_data+0x1cd>
  8004200f71:	83 6d fc 20          	subl   $0x20,-0x4(%rbp)
  8004200f75:	eb 10                	jmp    8004200f87 <kbd_proc_data+0x1dd>
  8004200f77:	83 7d fc 40          	cmpl   $0x40,-0x4(%rbp)
  8004200f7b:	7e 0a                	jle    8004200f87 <kbd_proc_data+0x1dd>
  8004200f7d:	83 7d fc 5a          	cmpl   $0x5a,-0x4(%rbp)
  8004200f81:	7f 04                	jg     8004200f87 <kbd_proc_data+0x1dd>
  8004200f83:	83 45 fc 20          	addl   $0x20,-0x4(%rbp)
  8004200f87:	48 b8 28 f2 4d 04 80 	movabs $0x80044df228,%rax
  8004200f8e:	00 00 00 
  8004200f91:	8b 00                	mov    (%rax),%eax
  8004200f93:	f7 d0                	not    %eax
  8004200f95:	83 e0 06             	and    $0x6,%eax
  8004200f98:	85 c0                	test   %eax,%eax
  8004200f9a:	75 37                	jne    8004200fd3 <kbd_proc_data+0x229>
  8004200f9c:	81 7d fc e9 00 00 00 	cmpl   $0xe9,-0x4(%rbp)
  8004200fa3:	75 2e                	jne    8004200fd3 <kbd_proc_data+0x229>
  8004200fa5:	48 bf 16 e4 21 04 80 	movabs $0x800421e416,%rdi
  8004200fac:	00 00 00 
  8004200faf:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200fb4:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004200fbb:	00 00 00 
  8004200fbe:	ff d2                	callq  *%rdx
  8004200fc0:	c7 45 e4 92 00 00 00 	movl   $0x92,-0x1c(%rbp)
  8004200fc7:	c6 45 e3 03          	movb   $0x3,-0x1d(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200fcb:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  8004200fcf:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004200fd2:	ee                   	out    %al,(%dx)
  8004200fd3:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004200fd6:	c9                   	leaveq 
  8004200fd7:	c3                   	retq   

0000008004200fd8 <kbd_intr>:
  8004200fd8:	55                   	push   %rbp
  8004200fd9:	48 89 e5             	mov    %rsp,%rbp
  8004200fdc:	48 bf aa 0d 20 04 80 	movabs $0x8004200daa,%rdi
  8004200fe3:	00 00 00 
  8004200fe6:	48 b8 29 10 20 04 80 	movabs $0x8004201029,%rax
  8004200fed:	00 00 00 
  8004200ff0:	ff d0                	callq  *%rax
  8004200ff2:	5d                   	pop    %rbp
  8004200ff3:	c3                   	retq   

0000008004200ff4 <kbd_init>:
  8004200ff4:	55                   	push   %rbp
  8004200ff5:	48 89 e5             	mov    %rsp,%rbp
  8004200ff8:	48 b8 d8 0f 20 04 80 	movabs $0x8004200fd8,%rax
  8004200fff:	00 00 00 
  8004201002:	ff d0                	callq  *%rax
  8004201004:	48 b8 72 56 23 04 80 	movabs $0x8004235672,%rax
  800420100b:	00 00 00 
  800420100e:	0f b7 00             	movzwl (%rax),%eax
  8004201011:	0f b7 c0             	movzwl %ax,%eax
  8004201014:	25 fd ff 00 00       	and    $0xfffd,%eax
  8004201019:	89 c7                	mov    %eax,%edi
  800420101b:	48 b8 d5 9a 20 04 80 	movabs $0x8004209ad5,%rax
  8004201022:	00 00 00 
  8004201025:	ff d0                	callq  *%rax
  8004201027:	5d                   	pop    %rbp
  8004201028:	c3                   	retq   

0000008004201029 <cons_intr>:
  8004201029:	55                   	push   %rbp
  800420102a:	48 89 e5             	mov    %rsp,%rbp
  800420102d:	48 83 ec 20          	sub    $0x20,%rsp
  8004201031:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004201035:	eb 6a                	jmp    80042010a1 <cons_intr+0x78>
  8004201037:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420103b:	75 02                	jne    800420103f <cons_intr+0x16>
  800420103d:	eb 62                	jmp    80042010a1 <cons_intr+0x78>
  800420103f:	48 b8 20 f0 4d 04 80 	movabs $0x80044df020,%rax
  8004201046:	00 00 00 
  8004201049:	8b 80 04 02 00 00    	mov    0x204(%rax),%eax
  800420104f:	8d 48 01             	lea    0x1(%rax),%ecx
  8004201052:	48 ba 20 f0 4d 04 80 	movabs $0x80044df020,%rdx
  8004201059:	00 00 00 
  800420105c:	89 8a 04 02 00 00    	mov    %ecx,0x204(%rdx)
  8004201062:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004201065:	89 d1                	mov    %edx,%ecx
  8004201067:	48 ba 20 f0 4d 04 80 	movabs $0x80044df020,%rdx
  800420106e:	00 00 00 
  8004201071:	89 c0                	mov    %eax,%eax
  8004201073:	88 0c 02             	mov    %cl,(%rdx,%rax,1)
  8004201076:	48 b8 20 f0 4d 04 80 	movabs $0x80044df020,%rax
  800420107d:	00 00 00 
  8004201080:	8b 80 04 02 00 00    	mov    0x204(%rax),%eax
  8004201086:	3d 00 02 00 00       	cmp    $0x200,%eax
  800420108b:	75 14                	jne    80042010a1 <cons_intr+0x78>
  800420108d:	48 b8 20 f0 4d 04 80 	movabs $0x80044df020,%rax
  8004201094:	00 00 00 
  8004201097:	c7 80 04 02 00 00 00 	movl   $0x0,0x204(%rax)
  800420109e:	00 00 00 
  80042010a1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042010a5:	ff d0                	callq  *%rax
  80042010a7:	89 45 fc             	mov    %eax,-0x4(%rbp)
  80042010aa:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
  80042010ae:	75 87                	jne    8004201037 <cons_intr+0xe>
  80042010b0:	c9                   	leaveq 
  80042010b1:	c3                   	retq   

00000080042010b2 <cons_getc>:
  80042010b2:	55                   	push   %rbp
  80042010b3:	48 89 e5             	mov    %rsp,%rbp
  80042010b6:	48 83 ec 10          	sub    $0x10,%rsp
  80042010ba:	48 b8 89 07 20 04 80 	movabs $0x8004200789,%rax
  80042010c1:	00 00 00 
  80042010c4:	ff d0                	callq  *%rax
  80042010c6:	48 b8 d8 0f 20 04 80 	movabs $0x8004200fd8,%rax
  80042010cd:	00 00 00 
  80042010d0:	ff d0                	callq  *%rax
  80042010d2:	48 b8 20 f0 4d 04 80 	movabs $0x80044df020,%rax
  80042010d9:	00 00 00 
  80042010dc:	8b 90 00 02 00 00    	mov    0x200(%rax),%edx
  80042010e2:	48 b8 20 f0 4d 04 80 	movabs $0x80044df020,%rax
  80042010e9:	00 00 00 
  80042010ec:	8b 80 04 02 00 00    	mov    0x204(%rax),%eax
  80042010f2:	39 c2                	cmp    %eax,%edx
  80042010f4:	74 69                	je     800420115f <cons_getc+0xad>
  80042010f6:	48 b8 20 f0 4d 04 80 	movabs $0x80044df020,%rax
  80042010fd:	00 00 00 
  8004201100:	8b 80 00 02 00 00    	mov    0x200(%rax),%eax
  8004201106:	8d 48 01             	lea    0x1(%rax),%ecx
  8004201109:	48 ba 20 f0 4d 04 80 	movabs $0x80044df020,%rdx
  8004201110:	00 00 00 
  8004201113:	89 8a 00 02 00 00    	mov    %ecx,0x200(%rdx)
  8004201119:	48 ba 20 f0 4d 04 80 	movabs $0x80044df020,%rdx
  8004201120:	00 00 00 
  8004201123:	89 c0                	mov    %eax,%eax
  8004201125:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004201129:	0f b6 c0             	movzbl %al,%eax
  800420112c:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420112f:	48 b8 20 f0 4d 04 80 	movabs $0x80044df020,%rax
  8004201136:	00 00 00 
  8004201139:	8b 80 00 02 00 00    	mov    0x200(%rax),%eax
  800420113f:	3d 00 02 00 00       	cmp    $0x200,%eax
  8004201144:	75 14                	jne    800420115a <cons_getc+0xa8>
  8004201146:	48 b8 20 f0 4d 04 80 	movabs $0x80044df020,%rax
  800420114d:	00 00 00 
  8004201150:	c7 80 00 02 00 00 00 	movl   $0x0,0x200(%rax)
  8004201157:	00 00 00 
  800420115a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420115d:	eb 05                	jmp    8004201164 <cons_getc+0xb2>
  800420115f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201164:	c9                   	leaveq 
  8004201165:	c3                   	retq   

0000008004201166 <cons_putc>:
  8004201166:	55                   	push   %rbp
  8004201167:	48 89 e5             	mov    %rsp,%rbp
  800420116a:	48 83 ec 10          	sub    $0x10,%rsp
  800420116e:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004201171:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201174:	89 c7                	mov    %eax,%edi
  8004201176:	48 b8 b6 07 20 04 80 	movabs $0x80042007b6,%rax
  800420117d:	00 00 00 
  8004201180:	ff d0                	callq  *%rax
  8004201182:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201185:	89 c7                	mov    %eax,%edi
  8004201187:	48 b8 23 09 20 04 80 	movabs $0x8004200923,%rax
  800420118e:	00 00 00 
  8004201191:	ff d0                	callq  *%rax
  8004201193:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201196:	89 c7                	mov    %eax,%edi
  8004201198:	48 b8 c2 0a 20 04 80 	movabs $0x8004200ac2,%rax
  800420119f:	00 00 00 
  80042011a2:	ff d0                	callq  *%rax
  80042011a4:	c9                   	leaveq 
  80042011a5:	c3                   	retq   

00000080042011a6 <cons_init>:
  80042011a6:	55                   	push   %rbp
  80042011a7:	48 89 e5             	mov    %rsp,%rbp
  80042011aa:	48 b8 a8 09 20 04 80 	movabs $0x80042009a8,%rax
  80042011b1:	00 00 00 
  80042011b4:	ff d0                	callq  *%rax
  80042011b6:	48 b8 f4 0f 20 04 80 	movabs $0x8004200ff4,%rax
  80042011bd:	00 00 00 
  80042011c0:	ff d0                	callq  *%rax
  80042011c2:	48 b8 1b 08 20 04 80 	movabs $0x800420081b,%rax
  80042011c9:	00 00 00 
  80042011cc:	ff d0                	callq  *%rax
  80042011ce:	48 b8 00 f0 4d 04 80 	movabs $0x80044df000,%rax
  80042011d5:	00 00 00 
  80042011d8:	0f b6 00             	movzbl (%rax),%eax
  80042011db:	83 f0 01             	xor    $0x1,%eax
  80042011de:	84 c0                	test   %al,%al
  80042011e0:	74 1b                	je     80042011fd <cons_init+0x57>
  80042011e2:	48 bf 22 e4 21 04 80 	movabs $0x800421e422,%rdi
  80042011e9:	00 00 00 
  80042011ec:	b8 00 00 00 00       	mov    $0x0,%eax
  80042011f1:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  80042011f8:	00 00 00 
  80042011fb:	ff d2                	callq  *%rdx
  80042011fd:	5d                   	pop    %rbp
  80042011fe:	c3                   	retq   

00000080042011ff <cputchar>:
  80042011ff:	55                   	push   %rbp
  8004201200:	48 89 e5             	mov    %rsp,%rbp
  8004201203:	48 83 ec 10          	sub    $0x10,%rsp
  8004201207:	89 7d fc             	mov    %edi,-0x4(%rbp)
  800420120a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420120d:	89 c7                	mov    %eax,%edi
  800420120f:	48 b8 66 11 20 04 80 	movabs $0x8004201166,%rax
  8004201216:	00 00 00 
  8004201219:	ff d0                	callq  *%rax
  800420121b:	c9                   	leaveq 
  800420121c:	c3                   	retq   

000000800420121d <getchar>:
  800420121d:	55                   	push   %rbp
  800420121e:	48 89 e5             	mov    %rsp,%rbp
  8004201221:	48 83 ec 10          	sub    $0x10,%rsp
  8004201225:	48 b8 b2 10 20 04 80 	movabs $0x80042010b2,%rax
  800420122c:	00 00 00 
  800420122f:	ff d0                	callq  *%rax
  8004201231:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004201234:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004201238:	74 eb                	je     8004201225 <getchar+0x8>
  800420123a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420123d:	c9                   	leaveq 
  800420123e:	c3                   	retq   

000000800420123f <iscons>:
  800420123f:	55                   	push   %rbp
  8004201240:	48 89 e5             	mov    %rsp,%rbp
  8004201243:	48 83 ec 04          	sub    $0x4,%rsp
  8004201247:	89 7d fc             	mov    %edi,-0x4(%rbp)
  800420124a:	b8 01 00 00 00       	mov    $0x1,%eax
  800420124f:	c9                   	leaveq 
  8004201250:	c3                   	retq   

0000008004201251 <mon_help>:
  8004201251:	55                   	push   %rbp
  8004201252:	48 89 e5             	mov    %rsp,%rbp
  8004201255:	48 83 ec 30          	sub    $0x30,%rsp
  8004201259:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420125c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004201260:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004201264:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420126b:	eb 6c                	jmp    80042012d9 <mon_help+0x88>
  800420126d:	48 b9 80 55 23 04 80 	movabs $0x8004235580,%rcx
  8004201274:	00 00 00 
  8004201277:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420127a:	48 63 d0             	movslq %eax,%rdx
  800420127d:	48 89 d0             	mov    %rdx,%rax
  8004201280:	48 01 c0             	add    %rax,%rax
  8004201283:	48 01 d0             	add    %rdx,%rax
  8004201286:	48 c1 e0 03          	shl    $0x3,%rax
  800420128a:	48 01 c8             	add    %rcx,%rax
  800420128d:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004201291:	48 be 80 55 23 04 80 	movabs $0x8004235580,%rsi
  8004201298:	00 00 00 
  800420129b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420129e:	48 63 d0             	movslq %eax,%rdx
  80042012a1:	48 89 d0             	mov    %rdx,%rax
  80042012a4:	48 01 c0             	add    %rax,%rax
  80042012a7:	48 01 d0             	add    %rdx,%rax
  80042012aa:	48 c1 e0 03          	shl    $0x3,%rax
  80042012ae:	48 01 f0             	add    %rsi,%rax
  80042012b1:	48 8b 00             	mov    (%rax),%rax
  80042012b4:	48 89 ca             	mov    %rcx,%rdx
  80042012b7:	48 89 c6             	mov    %rax,%rsi
  80042012ba:	48 bf d6 e4 21 04 80 	movabs $0x800421e4d6,%rdi
  80042012c1:	00 00 00 
  80042012c4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042012c9:	48 b9 83 9c 20 04 80 	movabs $0x8004209c83,%rcx
  80042012d0:	00 00 00 
  80042012d3:	ff d1                	callq  *%rcx
  80042012d5:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042012d9:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042012dc:	83 f8 03             	cmp    $0x3,%eax
  80042012df:	76 8c                	jbe    800420126d <mon_help+0x1c>
  80042012e1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042012e6:	c9                   	leaveq 
  80042012e7:	c3                   	retq   

00000080042012e8 <mon_kerninfo>:
  80042012e8:	55                   	push   %rbp
  80042012e9:	48 89 e5             	mov    %rsp,%rbp
  80042012ec:	48 83 ec 30          	sub    $0x30,%rsp
  80042012f0:	89 7d ec             	mov    %edi,-0x14(%rbp)
  80042012f3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042012f7:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  80042012fb:	48 bf df e4 21 04 80 	movabs $0x800421e4df,%rdi
  8004201302:	00 00 00 
  8004201305:	b8 00 00 00 00       	mov    $0x0,%eax
  800420130a:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004201311:	00 00 00 
  8004201314:	ff d2                	callq  *%rdx
  8004201316:	48 be 0c 00 20 00 00 	movabs $0x20000c,%rsi
  800420131d:	00 00 00 
  8004201320:	48 bf f8 e4 21 04 80 	movabs $0x800421e4f8,%rdi
  8004201327:	00 00 00 
  800420132a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420132f:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004201336:	00 00 00 
  8004201339:	ff d2                	callq  *%rdx
  800420133b:	48 ba 0c 00 20 00 00 	movabs $0x20000c,%rdx
  8004201342:	00 00 00 
  8004201345:	48 be 0c 00 20 04 80 	movabs $0x800420000c,%rsi
  800420134c:	00 00 00 
  800420134f:	48 bf 20 e5 21 04 80 	movabs $0x800421e520,%rdi
  8004201356:	00 00 00 
  8004201359:	b8 00 00 00 00       	mov    $0x0,%eax
  800420135e:	48 b9 83 9c 20 04 80 	movabs $0x8004209c83,%rcx
  8004201365:	00 00 00 
  8004201368:	ff d1                	callq  *%rcx
  800420136a:	48 ba 3f e3 21 00 00 	movabs $0x21e33f,%rdx
  8004201371:	00 00 00 
  8004201374:	48 be 3f e3 21 04 80 	movabs $0x800421e33f,%rsi
  800420137b:	00 00 00 
  800420137e:	48 bf 48 e5 21 04 80 	movabs $0x800421e548,%rdi
  8004201385:	00 00 00 
  8004201388:	b8 00 00 00 00       	mov    $0x0,%eax
  800420138d:	48 b9 83 9c 20 04 80 	movabs $0x8004209c83,%rcx
  8004201394:	00 00 00 
  8004201397:	ff d1                	callq  *%rcx
  8004201399:	48 ba 17 ed 4d 00 00 	movabs $0x4ded17,%rdx
  80042013a0:	00 00 00 
  80042013a3:	48 be 17 ed 4d 04 80 	movabs $0x80044ded17,%rsi
  80042013aa:	00 00 00 
  80042013ad:	48 bf 70 e5 21 04 80 	movabs $0x800421e570,%rdi
  80042013b4:	00 00 00 
  80042013b7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042013bc:	48 b9 83 9c 20 04 80 	movabs $0x8004209c83,%rcx
  80042013c3:	00 00 00 
  80042013c6:	ff d1                	callq  *%rcx
  80042013c8:	48 ba 10 10 72 00 00 	movabs $0x721010,%rdx
  80042013cf:	00 00 00 
  80042013d2:	48 be 10 10 72 04 80 	movabs $0x8004721010,%rsi
  80042013d9:	00 00 00 
  80042013dc:	48 bf 98 e5 21 04 80 	movabs $0x800421e598,%rdi
  80042013e3:	00 00 00 
  80042013e6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042013eb:	48 b9 83 9c 20 04 80 	movabs $0x8004209c83,%rcx
  80042013f2:	00 00 00 
  80042013f5:	ff d1                	callq  *%rcx
  80042013f7:	48 c7 45 f8 00 04 00 	movq   $0x400,-0x8(%rbp)
  80042013fe:	00 
  80042013ff:	48 b8 0c 00 20 04 80 	movabs $0x800420000c,%rax
  8004201406:	00 00 00 
  8004201409:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420140d:	48 29 c2             	sub    %rax,%rdx
  8004201410:	48 b8 10 10 72 04 80 	movabs $0x8004721010,%rax
  8004201417:	00 00 00 
  800420141a:	48 83 e8 01          	sub    $0x1,%rax
  800420141e:	48 01 d0             	add    %rdx,%rax
  8004201421:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004201425:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004201429:	ba 00 00 00 00       	mov    $0x0,%edx
  800420142e:	48 f7 75 f8          	divq   -0x8(%rbp)
  8004201432:	48 89 d0             	mov    %rdx,%rax
  8004201435:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004201439:	48 29 c2             	sub    %rax,%rdx
  800420143c:	48 89 d0             	mov    %rdx,%rax
  800420143f:	48 8d 90 ff 03 00 00 	lea    0x3ff(%rax),%rdx
  8004201446:	48 85 c0             	test   %rax,%rax
  8004201449:	48 0f 48 c2          	cmovs  %rdx,%rax
  800420144d:	48 c1 f8 0a          	sar    $0xa,%rax
  8004201451:	48 89 c6             	mov    %rax,%rsi
  8004201454:	48 bf c0 e5 21 04 80 	movabs $0x800421e5c0,%rdi
  800420145b:	00 00 00 
  800420145e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201463:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420146a:	00 00 00 
  800420146d:	ff d2                	callq  *%rdx
  800420146f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201474:	c9                   	leaveq 
  8004201475:	c3                   	retq   

0000008004201476 <mon_backtrace>:
  8004201476:	55                   	push   %rbp
  8004201477:	48 89 e5             	mov    %rsp,%rbp
  800420147a:	48 81 ec 50 05 00 00 	sub    $0x550,%rsp
  8004201481:	89 bd cc fa ff ff    	mov    %edi,-0x534(%rbp)
  8004201487:	48 89 b5 c0 fa ff ff 	mov    %rsi,-0x540(%rbp)
  800420148e:	48 89 95 b8 fa ff ff 	mov    %rdx,-0x548(%rbp)

static __inline uint64_t
read_rbp(void)
{
	uint64_t rbp;
	__asm __volatile("movq %%rbp,%0" : "=r" (rbp)::"cc","memory");
  8004201495:	48 89 e8             	mov    %rbp,%rax
  8004201498:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	return rbp;
  800420149c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042014a0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

static __inline uint64_t
read_rsp(void)
{
	uint64_t esp;
	__asm __volatile("movq %%rsp,%0" : "=r" (esp));
  80042014a4:	48 89 e0             	mov    %rsp,%rax
  80042014a7:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	return esp;
  80042014ab:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042014af:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042014b3:	48 83 bd b8 fa ff ff 	cmpq   $0x0,-0x548(%rbp)
  80042014ba:	00 
  80042014bb:	74 21                	je     80042014de <mon_backtrace+0x68>
  80042014bd:	48 8b 85 b8 fa ff ff 	mov    -0x548(%rbp),%rax
  80042014c4:	48 8b 40 50          	mov    0x50(%rax),%rax
  80042014c8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042014cc:	48 8b 85 b8 fa ff ff 	mov    -0x548(%rbp),%rax
  80042014d3:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  80042014da:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042014de:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 80042014e5 <mon_backtrace+0x6f>
  80042014e5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042014e9:	48 bf ea e5 21 04 80 	movabs $0x800421e5ea,%rdi
  80042014f0:	00 00 00 
  80042014f3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042014f8:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  80042014ff:	00 00 00 
  8004201502:	ff d2                	callq  *%rdx
  8004201504:	e9 17 03 00 00       	jmpq   8004201820 <mon_backtrace+0x3aa>
  8004201509:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420150d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004201511:	48 89 c6             	mov    %rax,%rsi
  8004201514:	48 bf fc e5 21 04 80 	movabs $0x800421e5fc,%rdi
  800420151b:	00 00 00 
  800420151e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201523:	48 b9 83 9c 20 04 80 	movabs $0x8004209c83,%rcx
  800420152a:	00 00 00 
  800420152d:	ff d1                	callq  *%rcx
  800420152f:	48 8d 95 d0 fa ff ff 	lea    -0x530(%rbp),%rdx
  8004201536:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420153a:	48 89 d6             	mov    %rdx,%rsi
  800420153d:	48 89 c7             	mov    %rax,%rdi
  8004201540:	48 b8 a3 fa 20 04 80 	movabs $0x800420faa3,%rax
  8004201547:	00 00 00 
  800420154a:	ff d0                	callq  *%rax
  800420154c:	85 c0                	test   %eax,%eax
  800420154e:	0f 88 9a 02 00 00    	js     80042017ee <mon_backtrace+0x378>
  8004201554:	48 8d 85 d0 fa ff ff 	lea    -0x530(%rbp),%rax
  800420155b:	48 05 a8 00 00 00    	add    $0xa8,%rax
  8004201561:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004201565:	48 8b 85 f0 fa ff ff 	mov    -0x510(%rbp),%rax
  800420156c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004201570:	48 89 d7             	mov    %rdx,%rdi
  8004201573:	48 29 c7             	sub    %rax,%rdi
  8004201576:	48 8b b5 e0 fa ff ff 	mov    -0x520(%rbp),%rsi
  800420157d:	8b 8d e8 fa ff ff    	mov    -0x518(%rbp),%ecx
  8004201583:	8b 95 d8 fa ff ff    	mov    -0x528(%rbp),%edx
  8004201589:	48 8b 85 d0 fa ff ff 	mov    -0x530(%rbp),%rax
  8004201590:	49 89 f9             	mov    %rdi,%r9
  8004201593:	49 89 f0             	mov    %rsi,%r8
  8004201596:	48 89 c6             	mov    %rax,%rsi
  8004201599:	48 bf 18 e6 21 04 80 	movabs $0x800421e618,%rdi
  80042015a0:	00 00 00 
  80042015a3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042015a8:	49 ba 83 9c 20 04 80 	movabs $0x8004209c83,%r10
  80042015af:	00 00 00 
  80042015b2:	41 ff d2             	callq  *%r10
  80042015b5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042015b9:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  80042015bd:	66 83 f8 06          	cmp    $0x6,%ax
  80042015c1:	75 15                	jne    80042015d8 <mon_backtrace+0x162>
  80042015c3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042015c7:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042015cb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042015cf:	48 01 d0             	add    %rdx,%rax
  80042015d2:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042015d6:	eb 28                	jmp    8004201600 <mon_backtrace+0x18a>
  80042015d8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042015dc:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  80042015e0:	66 83 f8 07          	cmp    $0x7,%ax
  80042015e4:	75 15                	jne    80042015fb <mon_backtrace+0x185>
  80042015e6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042015ea:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042015ee:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042015f2:	48 01 d0             	add    %rdx,%rax
  80042015f5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042015f9:	eb 05                	jmp    8004201600 <mon_backtrace+0x18a>
  80042015fb:	e9 ee 01 00 00       	jmpq   80042017ee <mon_backtrace+0x378>
  8004201600:	8b 85 f8 fa ff ff    	mov    -0x508(%rbp),%eax
  8004201606:	89 c6                	mov    %eax,%esi
  8004201608:	48 bf 33 e6 21 04 80 	movabs $0x800421e633,%rdi
  800420160f:	00 00 00 
  8004201612:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201617:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420161e:	00 00 00 
  8004201621:	ff d2                	callq  *%rdx
  8004201623:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420162a:	e9 f2 00 00 00       	jmpq   8004201721 <mon_backtrace+0x2ab>
  800420162f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201632:	48 98                	cltq   
  8004201634:	48 83 c0 0a          	add    $0xa,%rax
  8004201638:	48 8b 84 c5 d8 fa ff 	mov    -0x528(%rbp,%rax,8),%rax
  800420163f:	ff 
  8004201640:	48 85 c0             	test   %rax,%rax
  8004201643:	75 35                	jne    800420167a <mon_backtrace+0x204>
  8004201645:	48 b9 3e e6 21 04 80 	movabs $0x800421e63e,%rcx
  800420164c:	00 00 00 
  800420164f:	48 ba 54 e6 21 04 80 	movabs $0x800421e654,%rdx
  8004201656:	00 00 00 
  8004201659:	be 78 00 00 00       	mov    $0x78,%esi
  800420165e:	48 bf 69 e6 21 04 80 	movabs $0x800421e669,%rdi
  8004201665:	00 00 00 
  8004201668:	b8 00 00 00 00       	mov    $0x0,%eax
  800420166d:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004201674:	00 00 00 
  8004201677:	41 ff d0             	callq  *%r8
  800420167a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420167d:	48 98                	cltq   
  800420167f:	48 83 c0 0a          	add    $0xa,%rax
  8004201683:	48 8b 94 c5 d8 fa ff 	mov    -0x528(%rbp,%rax,8),%rdx
  800420168a:	ff 
  800420168b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420168f:	48 01 d0             	add    %rdx,%rax
  8004201692:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004201696:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201699:	48 98                	cltq   
  800420169b:	48 83 c0 08          	add    $0x8,%rax
  800420169f:	8b 84 85 dc fa ff ff 	mov    -0x524(%rbp,%rax,4),%eax
  80042016a6:	83 f8 02             	cmp    $0x2,%eax
  80042016a9:	74 31                	je     80042016dc <mon_backtrace+0x266>
  80042016ab:	83 f8 02             	cmp    $0x2,%eax
  80042016ae:	7f 07                	jg     80042016b7 <mon_backtrace+0x241>
  80042016b0:	83 f8 01             	cmp    $0x1,%eax
  80042016b3:	74 37                	je     80042016ec <mon_backtrace+0x276>
  80042016b5:	eb 44                	jmp    80042016fb <mon_backtrace+0x285>
  80042016b7:	83 f8 04             	cmp    $0x4,%eax
  80042016ba:	74 12                	je     80042016ce <mon_backtrace+0x258>
  80042016bc:	83 f8 08             	cmp    $0x8,%eax
  80042016bf:	75 3a                	jne    80042016fb <mon_backtrace+0x285>
  80042016c1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042016c5:	48 8b 00             	mov    (%rax),%rax
  80042016c8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042016cc:	eb 2d                	jmp    80042016fb <mon_backtrace+0x285>
  80042016ce:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042016d2:	8b 00                	mov    (%rax),%eax
  80042016d4:	89 c0                	mov    %eax,%eax
  80042016d6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042016da:	eb 1f                	jmp    80042016fb <mon_backtrace+0x285>
  80042016dc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042016e0:	0f b7 00             	movzwl (%rax),%eax
  80042016e3:	0f b7 c0             	movzwl %ax,%eax
  80042016e6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042016ea:	eb 0f                	jmp    80042016fb <mon_backtrace+0x285>
  80042016ec:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042016f0:	0f b6 00             	movzbl (%rax),%eax
  80042016f3:	0f b6 c0             	movzbl %al,%eax
  80042016f6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042016fa:	90                   	nop
  80042016fb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042016ff:	48 89 c6             	mov    %rax,%rsi
  8004201702:	48 bf 7b e6 21 04 80 	movabs $0x800421e67b,%rdi
  8004201709:	00 00 00 
  800420170c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201711:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004201718:	00 00 00 
  800420171b:	ff d2                	callq  *%rdx
  800420171d:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004201721:	8b 85 f8 fa ff ff    	mov    -0x508(%rbp),%eax
  8004201727:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  800420172a:	0f 8f ff fe ff ff    	jg     800420162f <mon_backtrace+0x1b9>
  8004201730:	0f b7 85 ea fb ff ff 	movzwl -0x416(%rbp),%eax
  8004201737:	0f b7 c0             	movzwl %ax,%eax
  800420173a:	3d 0b 04 00 00       	cmp    $0x40b,%eax
  800420173f:	74 48                	je     8004201789 <mon_backtrace+0x313>
  8004201741:	3d 9c 05 00 00       	cmp    $0x59c,%eax
  8004201746:	75 17                	jne    800420175f <mon_backtrace+0x2e9>
  8004201748:	48 8b 95 f0 fb ff ff 	mov    -0x410(%rbp),%rdx
  800420174f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004201753:	48 01 d0             	add    %rdx,%rax
  8004201756:	48 8b 00             	mov    (%rax),%rax
  8004201759:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420175d:	eb 2b                	jmp    800420178a <mon_backtrace+0x314>
  800420175f:	48 ba 82 e6 21 04 80 	movabs $0x800421e682,%rdx
  8004201766:	00 00 00 
  8004201769:	be 92 00 00 00       	mov    $0x92,%esi
  800420176e:	48 bf 69 e6 21 04 80 	movabs $0x800421e669,%rdi
  8004201775:	00 00 00 
  8004201778:	b8 00 00 00 00       	mov    $0x0,%eax
  800420177d:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  8004201784:	00 00 00 
  8004201787:	ff d1                	callq  *%rcx
  8004201789:	90                   	nop
  800420178a:	0f b7 85 8a fc ff ff 	movzwl -0x376(%rbp),%eax
  8004201791:	0f b7 c0             	movzwl %ax,%eax
  8004201794:	3d 0b 04 00 00       	cmp    $0x40b,%eax
  8004201799:	74 48                	je     80042017e3 <mon_backtrace+0x36d>
  800420179b:	3d 9c 05 00 00       	cmp    $0x59c,%eax
  80042017a0:	75 17                	jne    80042017b9 <mon_backtrace+0x343>
  80042017a2:	48 8b 95 90 fc ff ff 	mov    -0x370(%rbp),%rdx
  80042017a9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042017ad:	48 01 d0             	add    %rdx,%rax
  80042017b0:	48 8b 00             	mov    (%rax),%rax
  80042017b3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042017b7:	eb 2b                	jmp    80042017e4 <mon_backtrace+0x36e>
  80042017b9:	48 ba 82 e6 21 04 80 	movabs $0x800421e682,%rdx
  80042017c0:	00 00 00 
  80042017c3:	be 9d 00 00 00       	mov    $0x9d,%esi
  80042017c8:	48 bf 69 e6 21 04 80 	movabs $0x800421e669,%rdi
  80042017cf:	00 00 00 
  80042017d2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042017d7:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  80042017de:	00 00 00 
  80042017e1:	ff d1                	callq  *%rcx
  80042017e3:	90                   	nop
  80042017e4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042017e8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042017ec:	eb 17                	jmp    8004201805 <mon_backtrace+0x38f>
  80042017ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042017f2:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042017f6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042017fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042017fe:	48 8b 00             	mov    (%rax),%rax
  8004201801:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004201805:	48 bf 93 e6 21 04 80 	movabs $0x800421e693,%rdi
  800420180c:	00 00 00 
  800420180f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201814:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420181b:	00 00 00 
  800420181e:	ff d2                	callq  *%rdx
  8004201820:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  8004201825:	0f 85 de fc ff ff    	jne    8004201509 <mon_backtrace+0x93>
  800420182b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201830:	c9                   	leaveq 
  8004201831:	c3                   	retq   

0000008004201832 <mon_exit>:
  8004201832:	55                   	push   %rbp
  8004201833:	48 89 e5             	mov    %rsp,%rbp
  8004201836:	48 83 ec 18          	sub    $0x18,%rsp
  800420183a:	89 7d fc             	mov    %edi,-0x4(%rbp)
  800420183d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004201841:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004201845:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420184a:	c9                   	leaveq 
  800420184b:	c3                   	retq   

000000800420184c <runcmd>:
  800420184c:	55                   	push   %rbp
  800420184d:	48 89 e5             	mov    %rsp,%rbp
  8004201850:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
  8004201857:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  800420185e:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
  8004201865:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420186c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420186f:	48 98                	cltq   
  8004201871:	48 c7 84 c5 70 ff ff 	movq   $0x0,-0x90(%rbp,%rax,8)
  8004201878:	ff 00 00 00 00 
  800420187d:	eb 15                	jmp    8004201894 <runcmd+0x48>
  800420187f:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004201886:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420188a:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
  8004201891:	c6 00 00             	movb   $0x0,(%rax)
  8004201894:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420189b:	0f b6 00             	movzbl (%rax),%eax
  800420189e:	84 c0                	test   %al,%al
  80042018a0:	74 2a                	je     80042018cc <runcmd+0x80>
  80042018a2:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042018a9:	0f b6 00             	movzbl (%rax),%eax
  80042018ac:	0f be c0             	movsbl %al,%eax
  80042018af:	89 c6                	mov    %eax,%esi
  80042018b1:	48 bf 95 e6 21 04 80 	movabs $0x800421e695,%rdi
  80042018b8:	00 00 00 
  80042018bb:	48 b8 c4 0d 21 04 80 	movabs $0x8004210dc4,%rax
  80042018c2:	00 00 00 
  80042018c5:	ff d0                	callq  *%rax
  80042018c7:	48 85 c0             	test   %rax,%rax
  80042018ca:	75 b3                	jne    800420187f <runcmd+0x33>
  80042018cc:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042018d3:	0f b6 00             	movzbl (%rax),%eax
  80042018d6:	84 c0                	test   %al,%al
  80042018d8:	75 21                	jne    80042018fb <runcmd+0xaf>
  80042018da:	90                   	nop
  80042018db:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042018de:	48 98                	cltq   
  80042018e0:	48 c7 84 c5 70 ff ff 	movq   $0x0,-0x90(%rbp,%rax,8)
  80042018e7:	ff 00 00 00 00 
  80042018ec:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  80042018f0:	0f 85 a1 00 00 00    	jne    8004201997 <runcmd+0x14b>
  80042018f6:	e9 92 00 00 00       	jmpq   800420198d <runcmd+0x141>
  80042018fb:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)
  80042018ff:	75 2a                	jne    800420192b <runcmd+0xdf>
  8004201901:	be 10 00 00 00       	mov    $0x10,%esi
  8004201906:	48 bf 9a e6 21 04 80 	movabs $0x800421e69a,%rdi
  800420190d:	00 00 00 
  8004201910:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201915:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420191c:	00 00 00 
  800420191f:	ff d2                	callq  *%rdx
  8004201921:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201926:	e9 30 01 00 00       	jmpq   8004201a5b <runcmd+0x20f>
  800420192b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420192e:	8d 50 01             	lea    0x1(%rax),%edx
  8004201931:	89 55 fc             	mov    %edx,-0x4(%rbp)
  8004201934:	48 98                	cltq   
  8004201936:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
  800420193d:	48 89 94 c5 70 ff ff 	mov    %rdx,-0x90(%rbp,%rax,8)
  8004201944:	ff 
  8004201945:	eb 08                	jmp    800420194f <runcmd+0x103>
  8004201947:	48 83 85 68 ff ff ff 	addq   $0x1,-0x98(%rbp)
  800420194e:	01 
  800420194f:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004201956:	0f b6 00             	movzbl (%rax),%eax
  8004201959:	84 c0                	test   %al,%al
  800420195b:	74 2a                	je     8004201987 <runcmd+0x13b>
  800420195d:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004201964:	0f b6 00             	movzbl (%rax),%eax
  8004201967:	0f be c0             	movsbl %al,%eax
  800420196a:	89 c6                	mov    %eax,%esi
  800420196c:	48 bf 95 e6 21 04 80 	movabs $0x800421e695,%rdi
  8004201973:	00 00 00 
  8004201976:	48 b8 c4 0d 21 04 80 	movabs $0x8004210dc4,%rax
  800420197d:	00 00 00 
  8004201980:	ff d0                	callq  *%rax
  8004201982:	48 85 c0             	test   %rax,%rax
  8004201985:	74 c0                	je     8004201947 <runcmd+0xfb>
  8004201987:	90                   	nop
  8004201988:	e9 07 ff ff ff       	jmpq   8004201894 <runcmd+0x48>
  800420198d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201992:	e9 c4 00 00 00       	jmpq   8004201a5b <runcmd+0x20f>
  8004201997:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  800420199e:	e9 82 00 00 00       	jmpq   8004201a25 <runcmd+0x1d9>
  80042019a3:	48 b9 80 55 23 04 80 	movabs $0x8004235580,%rcx
  80042019aa:	00 00 00 
  80042019ad:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042019b0:	48 63 d0             	movslq %eax,%rdx
  80042019b3:	48 89 d0             	mov    %rdx,%rax
  80042019b6:	48 01 c0             	add    %rax,%rax
  80042019b9:	48 01 d0             	add    %rdx,%rax
  80042019bc:	48 c1 e0 03          	shl    $0x3,%rax
  80042019c0:	48 01 c8             	add    %rcx,%rax
  80042019c3:	48 8b 10             	mov    (%rax),%rdx
  80042019c6:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  80042019cd:	48 89 d6             	mov    %rdx,%rsi
  80042019d0:	48 89 c7             	mov    %rax,%rdi
  80042019d3:	48 b8 00 0d 21 04 80 	movabs $0x8004210d00,%rax
  80042019da:	00 00 00 
  80042019dd:	ff d0                	callq  *%rax
  80042019df:	85 c0                	test   %eax,%eax
  80042019e1:	75 3e                	jne    8004201a21 <runcmd+0x1d5>
  80042019e3:	48 b9 80 55 23 04 80 	movabs $0x8004235580,%rcx
  80042019ea:	00 00 00 
  80042019ed:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042019f0:	48 63 d0             	movslq %eax,%rdx
  80042019f3:	48 89 d0             	mov    %rdx,%rax
  80042019f6:	48 01 c0             	add    %rax,%rax
  80042019f9:	48 01 d0             	add    %rdx,%rax
  80042019fc:	48 c1 e0 03          	shl    $0x3,%rax
  8004201a00:	48 01 c8             	add    %rcx,%rax
  8004201a03:	48 83 c0 10          	add    $0x10,%rax
  8004201a07:	48 8b 00             	mov    (%rax),%rax
  8004201a0a:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004201a11:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
  8004201a18:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004201a1b:	89 cf                	mov    %ecx,%edi
  8004201a1d:	ff d0                	callq  *%rax
  8004201a1f:	eb 3a                	jmp    8004201a5b <runcmd+0x20f>
  8004201a21:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  8004201a25:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004201a28:	83 f8 03             	cmp    $0x3,%eax
  8004201a2b:	0f 86 72 ff ff ff    	jbe    80042019a3 <runcmd+0x157>
  8004201a31:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004201a38:	48 89 c6             	mov    %rax,%rsi
  8004201a3b:	48 bf b7 e6 21 04 80 	movabs $0x800421e6b7,%rdi
  8004201a42:	00 00 00 
  8004201a45:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201a4a:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004201a51:	00 00 00 
  8004201a54:	ff d2                	callq  *%rdx
  8004201a56:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201a5b:	c9                   	leaveq 
  8004201a5c:	c3                   	retq   

0000008004201a5d <monitor>:
  8004201a5d:	55                   	push   %rbp
  8004201a5e:	48 89 e5             	mov    %rsp,%rbp
  8004201a61:	48 83 ec 20          	sub    $0x20,%rsp
  8004201a65:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004201a69:	48 bf d0 e6 21 04 80 	movabs $0x800421e6d0,%rdi
  8004201a70:	00 00 00 
  8004201a73:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201a78:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004201a7f:	00 00 00 
  8004201a82:	ff d2                	callq  *%rdx
  8004201a84:	48 bf f8 e6 21 04 80 	movabs $0x800421e6f8,%rdi
  8004201a8b:	00 00 00 
  8004201a8e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201a93:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004201a9a:	00 00 00 
  8004201a9d:	ff d2                	callq  *%rdx
  8004201a9f:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004201aa4:	74 13                	je     8004201ab9 <monitor+0x5c>
  8004201aa6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004201aaa:	48 89 c7             	mov    %rax,%rdi
  8004201aad:	48 b8 7a c9 20 04 80 	movabs $0x800420c97a,%rax
  8004201ab4:	00 00 00 
  8004201ab7:	ff d0                	callq  *%rax
  8004201ab9:	48 bf 1d e7 21 04 80 	movabs $0x800421e71d,%rdi
  8004201ac0:	00 00 00 
  8004201ac3:	48 b8 dd 09 21 04 80 	movabs $0x80042109dd,%rax
  8004201aca:	00 00 00 
  8004201acd:	ff d0                	callq  *%rax
  8004201acf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004201ad3:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004201ad8:	74 20                	je     8004201afa <monitor+0x9d>
  8004201ada:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004201ade:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201ae2:	48 89 d6             	mov    %rdx,%rsi
  8004201ae5:	48 89 c7             	mov    %rax,%rdi
  8004201ae8:	48 b8 4c 18 20 04 80 	movabs $0x800420184c,%rax
  8004201aef:	00 00 00 
  8004201af2:	ff d0                	callq  *%rax
  8004201af4:	85 c0                	test   %eax,%eax
  8004201af6:	79 02                	jns    8004201afa <monitor+0x9d>
  8004201af8:	eb 02                	jmp    8004201afc <monitor+0x9f>
  8004201afa:	eb bd                	jmp    8004201ab9 <monitor+0x5c>
  8004201afc:	c9                   	leaveq 
  8004201afd:	c3                   	retq   

0000008004201afe <page2ppn>:
  8004201afe:	55                   	push   %rbp
  8004201aff:	48 89 e5             	mov    %rsp,%rbp
  8004201b02:	48 83 ec 08          	sub    $0x8,%rsp
  8004201b06:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004201b0a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004201b0e:	48 b8 00 e6 6d 04 80 	movabs $0x80046de600,%rax
  8004201b15:	00 00 00 
  8004201b18:	48 8b 00             	mov    (%rax),%rax
  8004201b1b:	48 29 c2             	sub    %rax,%rdx
  8004201b1e:	48 89 d0             	mov    %rdx,%rax
  8004201b21:	48 c1 f8 04          	sar    $0x4,%rax
  8004201b25:	c9                   	leaveq 
  8004201b26:	c3                   	retq   

0000008004201b27 <page2pa>:
  8004201b27:	55                   	push   %rbp
  8004201b28:	48 89 e5             	mov    %rsp,%rbp
  8004201b2b:	48 83 ec 08          	sub    $0x8,%rsp
  8004201b2f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004201b33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201b37:	48 89 c7             	mov    %rax,%rdi
  8004201b3a:	48 b8 fe 1a 20 04 80 	movabs $0x8004201afe,%rax
  8004201b41:	00 00 00 
  8004201b44:	ff d0                	callq  *%rax
  8004201b46:	48 c1 e0 0c          	shl    $0xc,%rax
  8004201b4a:	c9                   	leaveq 
  8004201b4b:	c3                   	retq   

0000008004201b4c <pa2page>:
  8004201b4c:	55                   	push   %rbp
  8004201b4d:	48 89 e5             	mov    %rsp,%rbp
  8004201b50:	48 83 ec 10          	sub    $0x10,%rsp
  8004201b54:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004201b58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201b5c:	48 c1 e8 0c          	shr    $0xc,%rax
  8004201b60:	48 89 c2             	mov    %rax,%rdx
  8004201b63:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  8004201b6a:	00 00 00 
  8004201b6d:	48 8b 00             	mov    (%rax),%rax
  8004201b70:	48 39 c2             	cmp    %rax,%rdx
  8004201b73:	72 2a                	jb     8004201b9f <pa2page+0x53>
  8004201b75:	48 ba 28 e7 21 04 80 	movabs $0x800421e728,%rdx
  8004201b7c:	00 00 00 
  8004201b7f:	be 5b 00 00 00       	mov    $0x5b,%esi
  8004201b84:	48 bf 47 e7 21 04 80 	movabs $0x800421e747,%rdi
  8004201b8b:	00 00 00 
  8004201b8e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201b93:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  8004201b9a:	00 00 00 
  8004201b9d:	ff d1                	callq  *%rcx
  8004201b9f:	48 b8 00 e6 6d 04 80 	movabs $0x80046de600,%rax
  8004201ba6:	00 00 00 
  8004201ba9:	48 8b 00             	mov    (%rax),%rax
  8004201bac:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004201bb0:	48 c1 ea 0c          	shr    $0xc,%rdx
  8004201bb4:	48 c1 e2 04          	shl    $0x4,%rdx
  8004201bb8:	48 01 d0             	add    %rdx,%rax
  8004201bbb:	c9                   	leaveq 
  8004201bbc:	c3                   	retq   

0000008004201bbd <page2kva>:
  8004201bbd:	55                   	push   %rbp
  8004201bbe:	48 89 e5             	mov    %rsp,%rbp
  8004201bc1:	48 83 ec 20          	sub    $0x20,%rsp
  8004201bc5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004201bc9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004201bcd:	48 89 c7             	mov    %rax,%rdi
  8004201bd0:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  8004201bd7:	00 00 00 
  8004201bda:	ff d0                	callq  *%rax
  8004201bdc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004201be0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201be4:	48 c1 e8 0c          	shr    $0xc,%rax
  8004201be8:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004201beb:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004201bee:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  8004201bf5:	00 00 00 
  8004201bf8:	48 8b 00             	mov    (%rax),%rax
  8004201bfb:	48 39 c2             	cmp    %rax,%rdx
  8004201bfe:	72 32                	jb     8004201c32 <page2kva+0x75>
  8004201c00:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201c04:	48 89 c1             	mov    %rax,%rcx
  8004201c07:	48 ba 58 e7 21 04 80 	movabs $0x800421e758,%rdx
  8004201c0e:	00 00 00 
  8004201c11:	be 62 00 00 00       	mov    $0x62,%esi
  8004201c16:	48 bf 47 e7 21 04 80 	movabs $0x800421e747,%rdi
  8004201c1d:	00 00 00 
  8004201c20:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201c25:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004201c2c:	00 00 00 
  8004201c2f:	41 ff d0             	callq  *%r8
  8004201c32:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004201c39:	00 00 00 
  8004201c3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201c40:	48 01 d0             	add    %rdx,%rax
  8004201c43:	c9                   	leaveq 
  8004201c44:	c3                   	retq   

0000008004201c45 <restrictive_type>:
  8004201c45:	55                   	push   %rbp
  8004201c46:	48 89 e5             	mov    %rsp,%rbp
  8004201c49:	48 83 ec 08          	sub    $0x8,%rsp
  8004201c4d:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004201c50:	89 75 f8             	mov    %esi,-0x8(%rbp)
  8004201c53:	83 7d fc 05          	cmpl   $0x5,-0x4(%rbp)
  8004201c57:	74 06                	je     8004201c5f <restrictive_type+0x1a>
  8004201c59:	83 7d f8 05          	cmpl   $0x5,-0x8(%rbp)
  8004201c5d:	75 07                	jne    8004201c66 <restrictive_type+0x21>
  8004201c5f:	b8 05 00 00 00       	mov    $0x5,%eax
  8004201c64:	eb 3e                	jmp    8004201ca4 <restrictive_type+0x5f>
  8004201c66:	83 7d fc 04          	cmpl   $0x4,-0x4(%rbp)
  8004201c6a:	74 06                	je     8004201c72 <restrictive_type+0x2d>
  8004201c6c:	83 7d f8 04          	cmpl   $0x4,-0x8(%rbp)
  8004201c70:	75 07                	jne    8004201c79 <restrictive_type+0x34>
  8004201c72:	b8 04 00 00 00       	mov    $0x4,%eax
  8004201c77:	eb 2b                	jmp    8004201ca4 <restrictive_type+0x5f>
  8004201c79:	83 7d fc 02          	cmpl   $0x2,-0x4(%rbp)
  8004201c7d:	74 06                	je     8004201c85 <restrictive_type+0x40>
  8004201c7f:	83 7d f8 02          	cmpl   $0x2,-0x8(%rbp)
  8004201c83:	75 07                	jne    8004201c8c <restrictive_type+0x47>
  8004201c85:	b8 02 00 00 00       	mov    $0x2,%eax
  8004201c8a:	eb 18                	jmp    8004201ca4 <restrictive_type+0x5f>
  8004201c8c:	83 7d fc 03          	cmpl   $0x3,-0x4(%rbp)
  8004201c90:	74 06                	je     8004201c98 <restrictive_type+0x53>
  8004201c92:	83 7d f8 03          	cmpl   $0x3,-0x8(%rbp)
  8004201c96:	75 07                	jne    8004201c9f <restrictive_type+0x5a>
  8004201c98:	b8 03 00 00 00       	mov    $0x3,%eax
  8004201c9d:	eb 05                	jmp    8004201ca4 <restrictive_type+0x5f>
  8004201c9f:	b8 01 00 00 00       	mov    $0x1,%eax
  8004201ca4:	c9                   	leaveq 
  8004201ca5:	c3                   	retq   

0000008004201ca6 <nvram_read>:
  8004201ca6:	55                   	push   %rbp
  8004201ca7:	48 89 e5             	mov    %rsp,%rbp
  8004201caa:	53                   	push   %rbx
  8004201cab:	48 83 ec 18          	sub    $0x18,%rsp
  8004201caf:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004201cb2:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201cb5:	89 c7                	mov    %eax,%edi
  8004201cb7:	48 b8 07 99 20 04 80 	movabs $0x8004209907,%rax
  8004201cbe:	00 00 00 
  8004201cc1:	ff d0                	callq  *%rax
  8004201cc3:	89 c3                	mov    %eax,%ebx
  8004201cc5:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201cc8:	83 c0 01             	add    $0x1,%eax
  8004201ccb:	89 c7                	mov    %eax,%edi
  8004201ccd:	48 b8 07 99 20 04 80 	movabs $0x8004209907,%rax
  8004201cd4:	00 00 00 
  8004201cd7:	ff d0                	callq  *%rax
  8004201cd9:	c1 e0 08             	shl    $0x8,%eax
  8004201cdc:	09 d8                	or     %ebx,%eax
  8004201cde:	48 83 c4 18          	add    $0x18,%rsp
  8004201ce2:	5b                   	pop    %rbx
  8004201ce3:	5d                   	pop    %rbp
  8004201ce4:	c3                   	retq   

0000008004201ce5 <multiboot_read>:
  8004201ce5:	55                   	push   %rbp
  8004201ce6:	48 89 e5             	mov    %rsp,%rbp
  8004201ce9:	41 54                	push   %r12
  8004201ceb:	53                   	push   %rbx
  8004201cec:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  8004201cf3:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
  8004201cfa:	48 89 b5 50 ff ff ff 	mov    %rsi,-0xb0(%rbp)
  8004201d01:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
  8004201d08:	48 89 e0             	mov    %rsp,%rax
  8004201d0b:	49 89 c4             	mov    %rax,%r12
  8004201d0e:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004201d15:	8b 40 30             	mov    0x30(%rax),%eax
  8004201d18:	89 c0                	mov    %eax,%eax
  8004201d1a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004201d1e:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004201d25:	8b 40 2c             	mov    0x2c(%rax),%eax
  8004201d28:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004201d2d:	f7 e2                	mul    %edx
  8004201d2f:	89 d0                	mov    %edx,%eax
  8004201d31:	c1 e8 04             	shr    $0x4,%eax
  8004201d34:	89 c0                	mov    %eax,%eax
  8004201d36:	48 89 c2             	mov    %rax,%rdx
  8004201d39:	48 83 ea 01          	sub    $0x1,%rdx
  8004201d3d:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  8004201d41:	49 89 c0             	mov    %rax,%r8
  8004201d44:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  8004201d4a:	48 89 c1             	mov    %rax,%rcx
  8004201d4d:	bb 00 00 00 00       	mov    $0x0,%ebx
  8004201d52:	48 c1 e0 03          	shl    $0x3,%rax
  8004201d56:	48 8d 50 07          	lea    0x7(%rax),%rdx
  8004201d5a:	b8 10 00 00 00       	mov    $0x10,%eax
  8004201d5f:	48 83 e8 01          	sub    $0x1,%rax
  8004201d63:	48 01 d0             	add    %rdx,%rax
  8004201d66:	bb 10 00 00 00       	mov    $0x10,%ebx
  8004201d6b:	ba 00 00 00 00       	mov    $0x0,%edx
  8004201d70:	48 f7 f3             	div    %rbx
  8004201d73:	48 6b c0 10          	imul   $0x10,%rax,%rax
  8004201d77:	48 29 c4             	sub    %rax,%rsp
  8004201d7a:	48 89 e0             	mov    %rsp,%rax
  8004201d7d:	48 83 c0 07          	add    $0x7,%rax
  8004201d81:	48 c1 e8 03          	shr    $0x3,%rax
  8004201d85:	48 c1 e0 03          	shl    $0x3,%rax
  8004201d89:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004201d8d:	48 bf 7b e7 21 04 80 	movabs $0x800421e77b,%rdi
  8004201d94:	00 00 00 
  8004201d97:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201d9c:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004201da3:	00 00 00 
  8004201da6:	ff d2                	callq  *%rdx
  8004201da8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  8004201daf:	e9 6c 01 00 00       	jmpq   8004201f20 <multiboot_read+0x23b>
  8004201db4:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201db7:	48 63 d0             	movslq %eax,%rdx
  8004201dba:	48 89 d0             	mov    %rdx,%rax
  8004201dbd:	48 01 c0             	add    %rax,%rax
  8004201dc0:	48 01 d0             	add    %rdx,%rax
  8004201dc3:	48 c1 e0 03          	shl    $0x3,%rax
  8004201dc7:	48 89 c2             	mov    %rax,%rdx
  8004201dca:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004201dce:	48 01 d0             	add    %rdx,%rax
  8004201dd1:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004201dd5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201dd9:	8b 40 08             	mov    0x8(%rax),%eax
  8004201ddc:	89 c0                	mov    %eax,%eax
  8004201dde:	48 c1 e0 20          	shl    $0x20,%rax
  8004201de2:	48 89 c2             	mov    %rax,%rdx
  8004201de5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201de9:	8b 40 04             	mov    0x4(%rax),%eax
  8004201dec:	89 c0                	mov    %eax,%eax
  8004201dee:	48 01 d0             	add    %rdx,%rax
  8004201df1:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004201df5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201df9:	8b 40 10             	mov    0x10(%rax),%eax
  8004201dfc:	89 c0                	mov    %eax,%eax
  8004201dfe:	48 c1 e0 20          	shl    $0x20,%rax
  8004201e02:	48 89 c2             	mov    %rax,%rdx
  8004201e05:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201e09:	8b 40 0c             	mov    0xc(%rax),%eax
  8004201e0c:	89 c0                	mov    %eax,%eax
  8004201e0e:	48 01 d0             	add    %rdx,%rax
  8004201e11:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004201e15:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201e19:	8b 70 14             	mov    0x14(%rax),%esi
  8004201e1c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201e20:	8b 00                	mov    (%rax),%eax
  8004201e22:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  8004201e26:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004201e2a:	41 89 f0             	mov    %esi,%r8d
  8004201e2d:	89 c6                	mov    %eax,%esi
  8004201e2f:	48 bf 90 e7 21 04 80 	movabs $0x800421e790,%rdi
  8004201e36:	00 00 00 
  8004201e39:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201e3e:	49 b9 83 9c 20 04 80 	movabs $0x8004209c83,%r9
  8004201e45:	00 00 00 
  8004201e48:	41 ff d1             	callq  *%r9
  8004201e4b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201e4f:	8b 40 14             	mov    0x14(%rax),%eax
  8004201e52:	83 f8 05             	cmp    $0x5,%eax
  8004201e55:	77 0b                	ja     8004201e62 <multiboot_read+0x17d>
  8004201e57:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201e5b:	8b 40 14             	mov    0x14(%rax),%eax
  8004201e5e:	85 c0                	test   %eax,%eax
  8004201e60:	75 0b                	jne    8004201e6d <multiboot_read+0x188>
  8004201e62:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201e66:	c7 40 14 02 00 00 00 	movl   $0x2,0x14(%rax)
  8004201e6d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
  8004201e74:	e9 85 00 00 00       	jmpq   8004201efe <multiboot_read+0x219>
  8004201e79:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201e7d:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004201e80:	48 63 d2             	movslq %edx,%rdx
  8004201e83:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004201e87:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  8004201e8b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004201e8f:	8b 40 08             	mov    0x8(%rax),%eax
  8004201e92:	89 c0                	mov    %eax,%eax
  8004201e94:	48 c1 e0 20          	shl    $0x20,%rax
  8004201e98:	48 89 c2             	mov    %rax,%rdx
  8004201e9b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004201e9f:	8b 40 04             	mov    0x4(%rax),%eax
  8004201ea2:	89 c0                	mov    %eax,%eax
  8004201ea4:	48 01 d0             	add    %rdx,%rax
  8004201ea7:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004201eab:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004201eaf:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004201eb3:	76 45                	jbe    8004201efa <multiboot_read+0x215>
  8004201eb5:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201eb8:	83 c0 01             	add    $0x1,%eax
  8004201ebb:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004201ebe:	eb 30                	jmp    8004201ef0 <multiboot_read+0x20b>
  8004201ec0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201ec4:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004201ec7:	48 63 d2             	movslq %edx,%rdx
  8004201eca:	48 c1 e2 03          	shl    $0x3,%rdx
  8004201ece:	48 01 c2             	add    %rax,%rdx
  8004201ed1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201ed5:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  8004201ed8:	48 63 c9             	movslq %ecx,%rcx
  8004201edb:	48 c1 e1 03          	shl    $0x3,%rcx
  8004201edf:	48 83 e9 08          	sub    $0x8,%rcx
  8004201ee3:	48 01 c8             	add    %rcx,%rax
  8004201ee6:	48 8b 00             	mov    (%rax),%rax
  8004201ee9:	48 89 02             	mov    %rax,(%rdx)
  8004201eec:	83 6d e4 01          	subl   $0x1,-0x1c(%rbp)
  8004201ef0:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004201ef3:	3b 45 e8             	cmp    -0x18(%rbp),%eax
  8004201ef6:	75 c8                	jne    8004201ec0 <multiboot_read+0x1db>
  8004201ef8:	eb 10                	jmp    8004201f0a <multiboot_read+0x225>
  8004201efa:	83 45 e8 01          	addl   $0x1,-0x18(%rbp)
  8004201efe:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004201f01:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  8004201f04:	0f 8c 6f ff ff ff    	jl     8004201e79 <multiboot_read+0x194>
  8004201f0a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201f0e:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004201f11:	48 63 d2             	movslq %edx,%rdx
  8004201f14:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  8004201f18:	48 89 0c d0          	mov    %rcx,(%rax,%rdx,8)
  8004201f1c:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  8004201f20:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201f23:	48 63 c8             	movslq %eax,%rcx
  8004201f26:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004201f2d:	8b 40 2c             	mov    0x2c(%rax),%eax
  8004201f30:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004201f35:	f7 e2                	mul    %edx
  8004201f37:	89 d0                	mov    %edx,%eax
  8004201f39:	c1 e8 04             	shr    $0x4,%eax
  8004201f3c:	89 c0                	mov    %eax,%eax
  8004201f3e:	48 39 c1             	cmp    %rax,%rcx
  8004201f41:	0f 82 6d fe ff ff    	jb     8004201db4 <multiboot_read+0xcf>
  8004201f47:	48 bf c7 e7 21 04 80 	movabs $0x800421e7c7,%rdi
  8004201f4e:	00 00 00 
  8004201f51:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201f56:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004201f5d:	00 00 00 
  8004201f60:	ff d2                	callq  *%rdx
  8004201f62:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%rbp)
  8004201f69:	e9 93 01 00 00       	jmpq   8004202101 <multiboot_read+0x41c>
  8004201f6e:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201f71:	8d 50 ff             	lea    -0x1(%rax),%edx
  8004201f74:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201f78:	48 63 d2             	movslq %edx,%rdx
  8004201f7b:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004201f7f:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  8004201f83:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201f87:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004201f8a:	48 63 d2             	movslq %edx,%rdx
  8004201f8d:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004201f91:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  8004201f95:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004201f99:	8b 40 08             	mov    0x8(%rax),%eax
  8004201f9c:	89 c0                	mov    %eax,%eax
  8004201f9e:	48 c1 e0 20          	shl    $0x20,%rax
  8004201fa2:	48 89 c2             	mov    %rax,%rdx
  8004201fa5:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004201fa9:	8b 40 04             	mov    0x4(%rax),%eax
  8004201fac:	89 c0                	mov    %eax,%eax
  8004201fae:	48 01 d0             	add    %rdx,%rax
  8004201fb1:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  8004201fb5:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004201fb9:	8b 40 08             	mov    0x8(%rax),%eax
  8004201fbc:	89 c0                	mov    %eax,%eax
  8004201fbe:	48 c1 e0 20          	shl    $0x20,%rax
  8004201fc2:	48 89 c2             	mov    %rax,%rdx
  8004201fc5:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004201fc9:	8b 40 04             	mov    0x4(%rax),%eax
  8004201fcc:	89 c0                	mov    %eax,%eax
  8004201fce:	48 01 d0             	add    %rdx,%rax
  8004201fd1:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  8004201fd5:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004201fd9:	8b 40 10             	mov    0x10(%rax),%eax
  8004201fdc:	89 c0                	mov    %eax,%eax
  8004201fde:	48 c1 e0 20          	shl    $0x20,%rax
  8004201fe2:	48 89 c2             	mov    %rax,%rdx
  8004201fe5:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004201fe9:	8b 40 0c             	mov    0xc(%rax),%eax
  8004201fec:	89 c0                	mov    %eax,%eax
  8004201fee:	48 01 d0             	add    %rdx,%rax
  8004201ff1:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  8004201ff8:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004201ffc:	8b 40 10             	mov    0x10(%rax),%eax
  8004201fff:	89 c0                	mov    %eax,%eax
  8004202001:	48 c1 e0 20          	shl    $0x20,%rax
  8004202005:	48 89 c2             	mov    %rax,%rdx
  8004202008:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420200c:	8b 40 0c             	mov    0xc(%rax),%eax
  800420200f:	89 c0                	mov    %eax,%eax
  8004202011:	48 01 d0             	add    %rdx,%rax
  8004202014:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  800420201b:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004202022:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  8004202026:	48 01 d0             	add    %rdx,%rax
  8004202029:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
  800420202d:	75 7c                	jne    80042020ab <multiboot_read+0x3c6>
  800420202f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004202033:	8b 50 14             	mov    0x14(%rax),%edx
  8004202036:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420203a:	8b 40 14             	mov    0x14(%rax),%eax
  800420203d:	39 c2                	cmp    %eax,%edx
  800420203f:	75 6a                	jne    80042020ab <multiboot_read+0x3c6>
  8004202041:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004202048:	89 c2                	mov    %eax,%edx
  800420204a:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004202051:	01 c2                	add    %eax,%edx
  8004202053:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202057:	89 50 0c             	mov    %edx,0xc(%rax)
  800420205a:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004202061:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  8004202068:	48 01 d0             	add    %rdx,%rax
  800420206b:	48 c1 e8 20          	shr    $0x20,%rax
  800420206f:	89 c2                	mov    %eax,%edx
  8004202071:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202075:	89 50 10             	mov    %edx,0x10(%rax)
  8004202078:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420207c:	8b 50 04             	mov    0x4(%rax),%edx
  800420207f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202083:	89 50 04             	mov    %edx,0x4(%rax)
  8004202086:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420208a:	8b 50 08             	mov    0x8(%rax),%edx
  800420208d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202091:	89 50 08             	mov    %edx,0x8(%rax)
  8004202094:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004202097:	8d 50 ff             	lea    -0x1(%rax),%edx
  800420209a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420209e:	48 63 d2             	movslq %edx,%rdx
  80042020a1:	48 c7 04 d0 00 00 00 	movq   $0x0,(%rax,%rdx,8)
  80042020a8:	00 
  80042020a9:	eb 52                	jmp    80042020fd <multiboot_read+0x418>
  80042020ab:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042020b2:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  80042020b6:	48 01 d0             	add    %rdx,%rax
  80042020b9:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
  80042020bd:	76 3e                	jbe    80042020fd <multiboot_read+0x418>
  80042020bf:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042020c3:	8b 50 14             	mov    0x14(%rax),%edx
  80042020c6:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042020ca:	8b 40 14             	mov    0x14(%rax),%eax
  80042020cd:	89 d6                	mov    %edx,%esi
  80042020cf:	89 c7                	mov    %eax,%edi
  80042020d1:	48 b8 45 1c 20 04 80 	movabs $0x8004201c45,%rax
  80042020d8:	00 00 00 
  80042020db:	ff d0                	callq  *%rax
  80042020dd:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
  80042020e3:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042020e7:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  80042020ed:	89 50 14             	mov    %edx,0x14(%rax)
  80042020f0:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042020f4:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  80042020fa:	89 50 14             	mov    %edx,0x14(%rax)
  80042020fd:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  8004202101:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004202104:	48 63 c8             	movslq %eax,%rcx
  8004202107:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  800420210e:	8b 40 2c             	mov    0x2c(%rax),%eax
  8004202111:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004202116:	f7 e2                	mul    %edx
  8004202118:	89 d0                	mov    %edx,%eax
  800420211a:	c1 e8 04             	shr    $0x4,%eax
  800420211d:	89 c0                	mov    %eax,%eax
  800420211f:	48 39 c1             	cmp    %rax,%rcx
  8004202122:	0f 82 46 fe ff ff    	jb     8004201f6e <multiboot_read+0x289>
  8004202128:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  800420212f:	e9 dc 00 00 00       	jmpq   8004202210 <multiboot_read+0x52b>
  8004202134:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202138:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800420213b:	48 63 d2             	movslq %edx,%rdx
  800420213e:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004202142:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  8004202149:	48 83 bd 60 ff ff ff 	cmpq   $0x0,-0xa0(%rbp)
  8004202150:	00 
  8004202151:	0f 84 b5 00 00 00    	je     800420220c <multiboot_read+0x527>
  8004202157:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  800420215e:	8b 40 14             	mov    0x14(%rax),%eax
  8004202161:	83 f8 01             	cmp    $0x1,%eax
  8004202164:	74 13                	je     8004202179 <multiboot_read+0x494>
  8004202166:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  800420216d:	8b 40 14             	mov    0x14(%rax),%eax
  8004202170:	83 f8 03             	cmp    $0x3,%eax
  8004202173:	0f 85 93 00 00 00    	jne    800420220c <multiboot_read+0x527>
  8004202179:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004202180:	8b 40 04             	mov    0x4(%rax),%eax
  8004202183:	3d ff ff 0f 00       	cmp    $0xfffff,%eax
  8004202188:	77 49                	ja     80042021d3 <multiboot_read+0x4ee>
  800420218a:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004202191:	8b 40 08             	mov    0x8(%rax),%eax
  8004202194:	85 c0                	test   %eax,%eax
  8004202196:	75 3b                	jne    80042021d3 <multiboot_read+0x4ee>
  8004202198:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  800420219f:	48 8b 10             	mov    (%rax),%rdx
  80042021a2:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042021a9:	8b 40 10             	mov    0x10(%rax),%eax
  80042021ac:	89 c0                	mov    %eax,%eax
  80042021ae:	48 c1 e0 20          	shl    $0x20,%rax
  80042021b2:	48 89 c1             	mov    %rax,%rcx
  80042021b5:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042021bc:	8b 40 0c             	mov    0xc(%rax),%eax
  80042021bf:	89 c0                	mov    %eax,%eax
  80042021c1:	48 01 c8             	add    %rcx,%rax
  80042021c4:	48 01 c2             	add    %rax,%rdx
  80042021c7:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  80042021ce:	48 89 10             	mov    %rdx,(%rax)
  80042021d1:	eb 39                	jmp    800420220c <multiboot_read+0x527>
  80042021d3:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  80042021da:	48 8b 10             	mov    (%rax),%rdx
  80042021dd:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042021e4:	8b 40 10             	mov    0x10(%rax),%eax
  80042021e7:	89 c0                	mov    %eax,%eax
  80042021e9:	48 c1 e0 20          	shl    $0x20,%rax
  80042021ed:	48 89 c1             	mov    %rax,%rcx
  80042021f0:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042021f7:	8b 40 0c             	mov    0xc(%rax),%eax
  80042021fa:	89 c0                	mov    %eax,%eax
  80042021fc:	48 01 c8             	add    %rcx,%rax
  80042021ff:	48 01 c2             	add    %rax,%rdx
  8004202202:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004202209:	48 89 10             	mov    %rdx,(%rax)
  800420220c:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  8004202210:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004202213:	48 63 c8             	movslq %eax,%rcx
  8004202216:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  800420221d:	8b 40 2c             	mov    0x2c(%rax),%eax
  8004202220:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004202225:	f7 e2                	mul    %edx
  8004202227:	89 d0                	mov    %edx,%eax
  8004202229:	c1 e8 04             	shr    $0x4,%eax
  800420222c:	89 c0                	mov    %eax,%eax
  800420222e:	48 39 c1             	cmp    %rax,%rcx
  8004202231:	0f 82 fd fe ff ff    	jb     8004202134 <multiboot_read+0x44f>
  8004202237:	4c 89 e4             	mov    %r12,%rsp
  800420223a:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  800420223e:	5b                   	pop    %rbx
  800420223f:	41 5c                	pop    %r12
  8004202241:	5d                   	pop    %rbp
  8004202242:	c3                   	retq   

0000008004202243 <i386_detect_memory>:
  8004202243:	55                   	push   %rbp
  8004202244:	48 89 e5             	mov    %rsp,%rbp
  8004202247:	48 83 ec 50          	sub    $0x50,%rsp
  800420224b:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  8004202252:	00 
  8004202253:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
  800420225a:	00 
  800420225b:	48 b8 00 70 10 00 00 	movabs $0x107000,%rax
  8004202262:	00 00 00 
  8004202265:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004202269:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420226d:	48 8b 00             	mov    (%rax),%rax
  8004202270:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202274:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004202279:	74 2d                	je     80042022a8 <i386_detect_memory+0x65>
  800420227b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420227f:	8b 00                	mov    (%rax),%eax
  8004202281:	83 e0 40             	and    $0x40,%eax
  8004202284:	85 c0                	test   %eax,%eax
  8004202286:	74 20                	je     80042022a8 <i386_detect_memory+0x65>
  8004202288:	48 8d 55 b8          	lea    -0x48(%rbp),%rdx
  800420228c:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
  8004202290:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202294:	48 89 ce             	mov    %rcx,%rsi
  8004202297:	48 89 c7             	mov    %rax,%rdi
  800420229a:	48 b8 e5 1c 20 04 80 	movabs $0x8004201ce5,%rax
  80042022a1:	00 00 00 
  80042022a4:	ff d0                	callq  *%rax
  80042022a6:	eb 34                	jmp    80042022dc <i386_detect_memory+0x99>
  80042022a8:	bf 15 00 00 00       	mov    $0x15,%edi
  80042022ad:	48 b8 a6 1c 20 04 80 	movabs $0x8004201ca6,%rax
  80042022b4:	00 00 00 
  80042022b7:	ff d0                	callq  *%rax
  80042022b9:	c1 e0 0a             	shl    $0xa,%eax
  80042022bc:	48 98                	cltq   
  80042022be:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  80042022c2:	bf 17 00 00 00       	mov    $0x17,%edi
  80042022c7:	48 b8 a6 1c 20 04 80 	movabs $0x8004201ca6,%rax
  80042022ce:	00 00 00 
  80042022d1:	ff d0                	callq  *%rax
  80042022d3:	c1 e0 0a             	shl    $0xa,%eax
  80042022d6:	48 98                	cltq   
  80042022d8:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  80042022dc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042022e0:	48 85 c0             	test   %rax,%rax
  80042022e3:	75 35                	jne    800420231a <i386_detect_memory+0xd7>
  80042022e5:	48 b9 c9 e7 21 04 80 	movabs $0x800421e7c9,%rcx
  80042022ec:	00 00 00 
  80042022ef:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  80042022f6:	00 00 00 
  80042022f9:	be 8b 00 00 00       	mov    $0x8b,%esi
  80042022fe:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004202305:	00 00 00 
  8004202308:	b8 00 00 00 00       	mov    $0x0,%eax
  800420230d:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004202314:	00 00 00 
  8004202317:	41 ff d0             	callq  *%r8
  800420231a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420231e:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202322:	48 89 c2             	mov    %rax,%rdx
  8004202325:	48 b8 30 f2 4d 04 80 	movabs $0x80044df230,%rax
  800420232c:	00 00 00 
  800420232f:	48 89 10             	mov    %rdx,(%rax)
  8004202332:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202336:	48 c1 e8 0c          	shr    $0xc,%rax
  800420233a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420233e:	bf 17 00 00 00       	mov    $0x17,%edi
  8004202343:	48 b8 a6 1c 20 04 80 	movabs $0x8004201ca6,%rax
  800420234a:	00 00 00 
  800420234d:	ff d0                	callq  *%rax
  800420234f:	3d ff ff 00 00       	cmp    $0xffff,%eax
  8004202354:	75 2c                	jne    8004202382 <i386_detect_memory+0x13f>
  8004202356:	bf 34 00 00 00       	mov    $0x34,%edi
  800420235b:	48 b8 a6 1c 20 04 80 	movabs $0x8004201ca6,%rax
  8004202362:	00 00 00 
  8004202365:	ff d0                	callq  *%rax
  8004202367:	c1 e0 10             	shl    $0x10,%eax
  800420236a:	48 98                	cltq   
  800420236c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004202370:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004202374:	48 05 00 00 f0 00    	add    $0xf00000,%rax
  800420237a:	48 c1 e8 0c          	shr    $0xc,%rax
  800420237e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004202382:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004202387:	74 1a                	je     80042023a3 <i386_detect_memory+0x160>
  8004202389:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420238d:	48 8d 90 00 01 00 00 	lea    0x100(%rax),%rdx
  8004202394:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  800420239b:	00 00 00 
  800420239e:	48 89 10             	mov    %rdx,(%rax)
  80042023a1:	eb 1a                	jmp    80042023bd <i386_detect_memory+0x17a>
  80042023a3:	48 b8 30 f2 4d 04 80 	movabs $0x80044df230,%rax
  80042023aa:	00 00 00 
  80042023ad:	48 8b 10             	mov    (%rax),%rdx
  80042023b0:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  80042023b7:	00 00 00 
  80042023ba:	48 89 10             	mov    %rdx,(%rax)
  80042023bd:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  80042023c4:	00 00 00 
  80042023c7:	48 8b 30             	mov    (%rax),%rsi
  80042023ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042023ce:	48 c1 e0 0c          	shl    $0xc,%rax
  80042023d2:	48 c1 e8 0a          	shr    $0xa,%rax
  80042023d6:	48 89 c1             	mov    %rax,%rcx
  80042023d9:	48 b8 30 f2 4d 04 80 	movabs $0x80044df230,%rax
  80042023e0:	00 00 00 
  80042023e3:	48 8b 00             	mov    (%rax),%rax
  80042023e6:	48 c1 e0 0c          	shl    $0xc,%rax
  80042023ea:	48 c1 e8 0a          	shr    $0xa,%rax
  80042023ee:	48 89 c2             	mov    %rax,%rdx
  80042023f1:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  80042023f8:	00 00 00 
  80042023fb:	48 8b 00             	mov    (%rax),%rax
  80042023fe:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202402:	48 c1 e8 14          	shr    $0x14,%rax
  8004202406:	49 89 f0             	mov    %rsi,%r8
  8004202409:	48 89 c6             	mov    %rax,%rsi
  800420240c:	48 bf f8 e7 21 04 80 	movabs $0x800421e7f8,%rdi
  8004202413:	00 00 00 
  8004202416:	b8 00 00 00 00       	mov    $0x0,%eax
  800420241b:	49 b9 83 9c 20 04 80 	movabs $0x8004209c83,%r9
  8004202422:	00 00 00 
  8004202425:	41 ff d1             	callq  *%r9
  8004202428:	48 c7 45 d8 00 00 32 	movq   $0x320000,-0x28(%rbp)
  800420242f:	00 
  8004202430:	48 c7 45 d0 00 c0 ff 	movq   $0x7ffc000,-0x30(%rbp)
  8004202437:	07 
  8004202438:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420243c:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202440:	48 c1 e8 14          	shr    $0x14,%rax
  8004202444:	48 89 c1             	mov    %rax,%rcx
  8004202447:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420244b:	48 c1 e0 0c          	shl    $0xc,%rax
  800420244f:	48 c1 e8 14          	shr    $0x14,%rax
  8004202453:	48 89 c6             	mov    %rax,%rsi
  8004202456:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420245a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420245e:	49 89 c8             	mov    %rcx,%r8
  8004202461:	48 89 d1             	mov    %rdx,%rcx
  8004202464:	48 89 f2             	mov    %rsi,%rdx
  8004202467:	48 89 c6             	mov    %rax,%rsi
  800420246a:	48 bf 48 e8 21 04 80 	movabs $0x800421e848,%rdi
  8004202471:	00 00 00 
  8004202474:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202479:	49 b9 83 9c 20 04 80 	movabs $0x8004209c83,%r9
  8004202480:	00 00 00 
  8004202483:	41 ff d1             	callq  *%r9
  8004202486:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420248a:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  800420248e:	48 0f 46 45 d0       	cmovbe -0x30(%rbp),%rax
  8004202493:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004202497:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  800420249e:	00 00 00 
  80042024a1:	48 8b 00             	mov    (%rax),%rax
  80042024a4:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  80042024a8:	76 3a                	jbe    80042024e4 <i386_detect_memory+0x2a1>
  80042024aa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042024ae:	48 8d 90 00 fc ff ff 	lea    -0x400(%rax),%rdx
  80042024b5:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  80042024bc:	00 00 00 
  80042024bf:	48 89 10             	mov    %rdx,(%rax)
  80042024c2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042024c6:	48 89 c6             	mov    %rax,%rsi
  80042024c9:	48 bf b0 e8 21 04 80 	movabs $0x800421e8b0,%rdi
  80042024d0:	00 00 00 
  80042024d3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042024d8:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  80042024df:	00 00 00 
  80042024e2:	ff d2                	callq  *%rdx
  80042024e4:	c9                   	leaveq 
  80042024e5:	c3                   	retq   

00000080042024e6 <boot_alloc>:
  80042024e6:	55                   	push   %rbp
  80042024e7:	48 89 e5             	mov    %rsp,%rbp
  80042024ea:	48 83 ec 40          	sub    $0x40,%rsp
  80042024ee:	89 7d cc             	mov    %edi,-0x34(%rbp)
  80042024f1:	48 b8 48 f2 4d 04 80 	movabs $0x80044df248,%rax
  80042024f8:	00 00 00 
  80042024fb:	48 8b 00             	mov    (%rax),%rax
  80042024fe:	48 85 c0             	test   %rax,%rax
  8004202501:	75 4e                	jne    8004202551 <boot_alloc+0x6b>
  8004202503:	48 c7 45 f8 00 10 00 	movq   $0x1000,-0x8(%rbp)
  800420250a:	00 
  800420250b:	48 b8 d0 e5 6d 04 80 	movabs $0x80046de5d0,%rax
  8004202512:	00 00 00 
  8004202515:	48 8b 10             	mov    (%rax),%rdx
  8004202518:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420251c:	48 01 d0             	add    %rdx,%rax
  800420251f:	48 83 e8 01          	sub    $0x1,%rax
  8004202523:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004202527:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420252b:	ba 00 00 00 00       	mov    $0x0,%edx
  8004202530:	48 f7 75 f8          	divq   -0x8(%rbp)
  8004202534:	48 89 d0             	mov    %rdx,%rax
  8004202537:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420253b:	48 29 c2             	sub    %rax,%rdx
  800420253e:	48 89 d0             	mov    %rdx,%rax
  8004202541:	48 89 c2             	mov    %rax,%rdx
  8004202544:	48 b8 48 f2 4d 04 80 	movabs $0x80044df248,%rax
  800420254b:	00 00 00 
  800420254e:	48 89 10             	mov    %rdx,(%rax)
  8004202551:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004202554:	48 b8 48 f2 4d 04 80 	movabs $0x80044df248,%rax
  800420255b:	00 00 00 
  800420255e:	48 8b 00             	mov    (%rax),%rax
  8004202561:	48 01 c2             	add    %rax,%rdx
  8004202564:	48 b8 48 f2 4d 04 80 	movabs $0x80044df248,%rax
  800420256b:	00 00 00 
  800420256e:	48 8b 00             	mov    (%rax),%rax
  8004202571:	48 39 c2             	cmp    %rax,%rdx
  8004202574:	72 2f                	jb     80042025a5 <boot_alloc+0xbf>
  8004202576:	48 b8 48 f2 4d 04 80 	movabs $0x80044df248,%rax
  800420257d:	00 00 00 
  8004202580:	48 8b 10             	mov    (%rax),%rdx
  8004202583:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004202586:	48 01 c2             	add    %rax,%rdx
  8004202589:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  8004202590:	00 00 00 
  8004202593:	48 8b 00             	mov    (%rax),%rax
  8004202596:	48 05 00 40 00 08    	add    $0x8004000,%rax
  800420259c:	48 c1 e0 0c          	shl    $0xc,%rax
  80042025a0:	48 39 c2             	cmp    %rax,%rdx
  80042025a3:	76 2a                	jbe    80042025cf <boot_alloc+0xe9>
  80042025a5:	48 ba e0 e8 21 04 80 	movabs $0x800421e8e0,%rdx
  80042025ac:	00 00 00 
  80042025af:	be f3 00 00 00       	mov    $0xf3,%esi
  80042025b4:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  80042025bb:	00 00 00 
  80042025be:	b8 00 00 00 00       	mov    $0x0,%eax
  80042025c3:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  80042025ca:	00 00 00 
  80042025cd:	ff d1                	callq  *%rcx
  80042025cf:	48 b8 48 f2 4d 04 80 	movabs $0x80044df248,%rax
  80042025d6:	00 00 00 
  80042025d9:	48 8b 00             	mov    (%rax),%rax
  80042025dc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042025e0:	48 c7 45 e0 00 10 00 	movq   $0x1000,-0x20(%rbp)
  80042025e7:	00 
  80042025e8:	48 b8 48 f2 4d 04 80 	movabs $0x80044df248,%rax
  80042025ef:	00 00 00 
  80042025f2:	48 8b 10             	mov    (%rax),%rdx
  80042025f5:	8b 45 cc             	mov    -0x34(%rbp),%eax
  80042025f8:	48 01 d0             	add    %rdx,%rax
  80042025fb:	48 89 c2             	mov    %rax,%rdx
  80042025fe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004202602:	48 01 d0             	add    %rdx,%rax
  8004202605:	48 83 e8 01          	sub    $0x1,%rax
  8004202609:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420260d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202611:	ba 00 00 00 00       	mov    $0x0,%edx
  8004202616:	48 f7 75 e0          	divq   -0x20(%rbp)
  800420261a:	48 89 d0             	mov    %rdx,%rax
  800420261d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004202621:	48 29 c2             	sub    %rax,%rdx
  8004202624:	48 89 d0             	mov    %rdx,%rax
  8004202627:	48 89 c2             	mov    %rax,%rdx
  800420262a:	48 b8 48 f2 4d 04 80 	movabs $0x80044df248,%rax
  8004202631:	00 00 00 
  8004202634:	48 89 10             	mov    %rdx,(%rax)
  8004202637:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420263b:	c9                   	leaveq 
  800420263c:	c3                   	retq   

000000800420263d <x64_vm_init>:
  800420263d:	55                   	push   %rbp
  800420263e:	48 89 e5             	mov    %rsp,%rbp
  8004202641:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  8004202645:	48 b8 43 22 20 04 80 	movabs $0x8004202243,%rax
  800420264c:	00 00 00 
  800420264f:	ff d0                	callq  *%rax
  8004202651:	bf 00 10 00 00       	mov    $0x1000,%edi
  8004202656:	48 b8 e6 24 20 04 80 	movabs $0x80042024e6,%rax
  800420265d:	00 00 00 
  8004202660:	ff d0                	callq  *%rax
  8004202662:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004202666:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420266a:	ba 00 10 00 00       	mov    $0x1000,%edx
  800420266f:	be 00 00 00 00       	mov    $0x0,%esi
  8004202674:	48 89 c7             	mov    %rax,%rdi
  8004202677:	48 b8 37 0e 21 04 80 	movabs $0x8004210e37,%rax
  800420267e:	00 00 00 
  8004202681:	ff d0                	callq  *%rax
  8004202683:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  800420268a:	00 00 00 
  800420268d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202691:	48 89 10             	mov    %rdx,(%rax)
  8004202694:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202698:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420269c:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042026a3:	00 00 00 
  80042026a6:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  80042026aa:	77 32                	ja     80042026de <x64_vm_init+0xa1>
  80042026ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042026b0:	48 89 c1             	mov    %rax,%rcx
  80042026b3:	48 ba 08 e9 21 04 80 	movabs $0x800421e908,%rdx
  80042026ba:	00 00 00 
  80042026bd:	be 18 01 00 00       	mov    $0x118,%esi
  80042026c2:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  80042026c9:	00 00 00 
  80042026cc:	b8 00 00 00 00       	mov    $0x0,%eax
  80042026d1:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042026d8:	00 00 00 
  80042026db:	41 ff d0             	callq  *%r8
  80042026de:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042026e5:	ff ff ff 
  80042026e8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042026ec:	48 01 c2             	add    %rax,%rdx
  80042026ef:	48 b8 e8 e5 6d 04 80 	movabs $0x80046de5e8,%rax
  80042026f6:	00 00 00 
  80042026f9:	48 89 10             	mov    %rdx,(%rax)
  80042026fc:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  8004202703:	00 00 00 
  8004202706:	48 8b 00             	mov    (%rax),%rax
  8004202709:	48 c1 e0 04          	shl    $0x4,%rax
  800420270d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202711:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202715:	89 c7                	mov    %eax,%edi
  8004202717:	48 b8 e6 24 20 04 80 	movabs $0x80042024e6,%rax
  800420271e:	00 00 00 
  8004202721:	ff d0                	callq  *%rax
  8004202723:	48 ba 00 e6 6d 04 80 	movabs $0x80046de600,%rdx
  800420272a:	00 00 00 
  800420272d:	48 89 02             	mov    %rax,(%rdx)
  8004202730:	48 b8 00 e6 6d 04 80 	movabs $0x80046de600,%rax
  8004202737:	00 00 00 
  800420273a:	48 8b 00             	mov    (%rax),%rax
  800420273d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004202741:	be 00 00 00 00       	mov    $0x0,%esi
  8004202746:	48 89 c7             	mov    %rax,%rdi
  8004202749:	48 b8 37 0e 21 04 80 	movabs $0x8004210e37,%rax
  8004202750:	00 00 00 
  8004202753:	ff d0                	callq  *%rax
  8004202755:	bf 00 a0 05 00       	mov    $0x5a000,%edi
  800420275a:	48 b8 e6 24 20 04 80 	movabs $0x80042024e6,%rax
  8004202761:	00 00 00 
  8004202764:	ff d0                	callq  *%rax
  8004202766:	48 ba 58 f2 4d 04 80 	movabs $0x80044df258,%rdx
  800420276d:	00 00 00 
  8004202770:	48 89 02             	mov    %rax,(%rdx)
  8004202773:	48 b8 58 f2 4d 04 80 	movabs $0x80044df258,%rax
  800420277a:	00 00 00 
  800420277d:	48 8b 00             	mov    (%rax),%rax
  8004202780:	ba 00 a0 05 00       	mov    $0x5a000,%edx
  8004202785:	be 00 00 00 00       	mov    $0x0,%esi
  800420278a:	48 89 c7             	mov    %rax,%rdi
  800420278d:	48 b8 37 0e 21 04 80 	movabs $0x8004210e37,%rax
  8004202794:	00 00 00 
  8004202797:	ff d0                	callq  *%rax
  8004202799:	48 b8 f7 2b 20 04 80 	movabs $0x8004202bf7,%rax
  80042027a0:	00 00 00 
  80042027a3:	ff d0                	callq  *%rax
  80042027a5:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  80042027ac:	00 00 00 
  80042027af:	48 8b 00             	mov    (%rax),%rax
  80042027b2:	48 c1 e0 04          	shl    $0x4,%rax
  80042027b6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042027ba:	48 b8 00 e6 6d 04 80 	movabs $0x80046de600,%rax
  80042027c1:	00 00 00 
  80042027c4:	48 8b 00             	mov    (%rax),%rax
  80042027c7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042027cb:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042027d2:	00 00 00 
  80042027d5:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  80042027d9:	77 32                	ja     800420280d <x64_vm_init+0x1d0>
  80042027db:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042027df:	48 89 c1             	mov    %rax,%rcx
  80042027e2:	48 ba 08 e9 21 04 80 	movabs $0x800421e908,%rdx
  80042027e9:	00 00 00 
  80042027ec:	be 43 01 00 00       	mov    $0x143,%esi
  80042027f1:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  80042027f8:	00 00 00 
  80042027fb:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202800:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004202807:	00 00 00 
  800420280a:	41 ff d0             	callq  *%r8
  800420280d:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202814:	ff ff ff 
  8004202817:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420281b:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  800420281f:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  8004202826:	00 00 00 
  8004202829:	48 8b 00             	mov    (%rax),%rax
  800420282c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004202830:	41 b8 04 00 00 00    	mov    $0x4,%r8d
  8004202836:	48 be 00 00 a0 00 80 	movabs $0x8000a00000,%rsi
  800420283d:	00 00 00 
  8004202840:	48 89 c7             	mov    %rax,%rdi
  8004202843:	48 b8 36 37 20 04 80 	movabs $0x8004203736,%rax
  800420284a:	00 00 00 
  800420284d:	ff d0                	callq  *%rax
  800420284f:	48 c7 45 d8 00 10 00 	movq   $0x1000,-0x28(%rbp)
  8004202856:	00 
  8004202857:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420285b:	48 05 ff 9f 05 00    	add    $0x59fff,%rax
  8004202861:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004202865:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004202869:	ba 00 00 00 00       	mov    $0x0,%edx
  800420286e:	48 f7 75 d8          	divq   -0x28(%rbp)
  8004202872:	48 89 d0             	mov    %rdx,%rax
  8004202875:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004202879:	48 29 c2             	sub    %rax,%rdx
  800420287c:	48 89 d0             	mov    %rdx,%rax
  800420287f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202883:	48 b8 58 f2 4d 04 80 	movabs $0x80044df258,%rax
  800420288a:	00 00 00 
  800420288d:	48 8b 00             	mov    (%rax),%rax
  8004202890:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004202894:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420289b:	00 00 00 
  800420289e:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  80042028a2:	77 32                	ja     80042028d6 <x64_vm_init+0x299>
  80042028a4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042028a8:	48 89 c1             	mov    %rax,%rcx
  80042028ab:	48 ba 08 e9 21 04 80 	movabs $0x800421e908,%rdx
  80042028b2:	00 00 00 
  80042028b5:	be 51 01 00 00       	mov    $0x151,%esi
  80042028ba:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  80042028c1:	00 00 00 
  80042028c4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042028c9:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042028d0:	00 00 00 
  80042028d3:	41 ff d0             	callq  *%r8
  80042028d6:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042028dd:	ff ff ff 
  80042028e0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042028e4:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  80042028e8:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  80042028ef:	00 00 00 
  80042028f2:	48 8b 00             	mov    (%rax),%rax
  80042028f5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042028f9:	41 b8 05 00 00 00    	mov    $0x5,%r8d
  80042028ff:	48 be 00 00 80 00 80 	movabs $0x8000800000,%rsi
  8004202906:	00 00 00 
  8004202909:	48 89 c7             	mov    %rax,%rdi
  800420290c:	48 b8 36 37 20 04 80 	movabs $0x8004203736,%rax
  8004202913:	00 00 00 
  8004202916:	ff d0                	callq  *%rax
  8004202918:	48 b8 00 50 22 04 80 	movabs $0x8004225000,%rax
  800420291f:	00 00 00 
  8004202922:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004202926:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420292d:	00 00 00 
  8004202930:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  8004202934:	77 32                	ja     8004202968 <x64_vm_init+0x32b>
  8004202936:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420293a:	48 89 c1             	mov    %rax,%rcx
  800420293d:	48 ba 08 e9 21 04 80 	movabs $0x800421e908,%rdx
  8004202944:	00 00 00 
  8004202947:	be 62 01 00 00       	mov    $0x162,%esi
  800420294c:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004202953:	00 00 00 
  8004202956:	b8 00 00 00 00       	mov    $0x0,%eax
  800420295b:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004202962:	00 00 00 
  8004202965:	41 ff d0             	callq  *%r8
  8004202968:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800420296f:	ff ff ff 
  8004202972:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004202976:	48 01 c2             	add    %rax,%rdx
  8004202979:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  8004202980:	00 00 00 
  8004202983:	48 8b 00             	mov    (%rax),%rax
  8004202986:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  800420298c:	48 89 d1             	mov    %rdx,%rcx
  800420298f:	ba 00 00 01 00       	mov    $0x10000,%edx
  8004202994:	48 be 00 00 ff 03 80 	movabs $0x8003ff0000,%rsi
  800420299b:	00 00 00 
  800420299e:	48 89 c7             	mov    %rax,%rdi
  80042029a1:	48 b8 36 37 20 04 80 	movabs $0x8004203736,%rax
  80042029a8:	00 00 00 
  80042029ab:	ff d0                	callq  *%rax
  80042029ad:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  80042029b4:	00 00 00 
  80042029b7:	48 8b 00             	mov    (%rax),%rax
  80042029ba:	48 c1 e0 0c          	shl    $0xc,%rax
  80042029be:	48 89 c2             	mov    %rax,%rdx
  80042029c1:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  80042029c8:	00 00 00 
  80042029cb:	48 8b 00             	mov    (%rax),%rax
  80042029ce:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  80042029d4:	b9 00 00 00 00       	mov    $0x0,%ecx
  80042029d9:	48 be 00 00 00 04 80 	movabs $0x8004000000,%rsi
  80042029e0:	00 00 00 
  80042029e3:	48 89 c7             	mov    %rax,%rdi
  80042029e6:	48 b8 36 37 20 04 80 	movabs $0x8004203736,%rax
  80042029ed:	00 00 00 
  80042029f0:	ff d0                	callq  *%rax
  80042029f2:	48 b8 0c 2b 20 04 80 	movabs $0x8004202b0c,%rax
  80042029f9:	00 00 00 
  80042029fc:	ff d0                	callq  *%rax
  80042029fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202a02:	48 83 c0 08          	add    $0x8,%rax
  8004202a06:	48 8b 00             	mov    (%rax),%rax
  8004202a09:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004202a0f:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004202a13:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202a17:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202a1b:	89 45 b4             	mov    %eax,-0x4c(%rbp)
  8004202a1e:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  8004202a21:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  8004202a28:	00 00 00 
  8004202a2b:	48 8b 00             	mov    (%rax),%rax
  8004202a2e:	48 39 c2             	cmp    %rax,%rdx
  8004202a31:	72 32                	jb     8004202a65 <x64_vm_init+0x428>
  8004202a33:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202a37:	48 89 c1             	mov    %rax,%rcx
  8004202a3a:	48 ba 58 e7 21 04 80 	movabs $0x800421e758,%rdx
  8004202a41:	00 00 00 
  8004202a44:	be 82 01 00 00       	mov    $0x182,%esi
  8004202a49:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004202a50:	00 00 00 
  8004202a53:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202a58:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004202a5f:	00 00 00 
  8004202a62:	41 ff d0             	callq  *%r8
  8004202a65:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202a6c:	00 00 00 
  8004202a6f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202a73:	48 01 d0             	add    %rdx,%rax
  8004202a76:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  8004202a7a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004202a7e:	48 8b 00             	mov    (%rax),%rax
  8004202a81:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004202a87:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004202a8b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004202a8f:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202a93:	89 45 9c             	mov    %eax,-0x64(%rbp)
  8004202a96:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004202a99:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  8004202aa0:	00 00 00 
  8004202aa3:	48 8b 00             	mov    (%rax),%rax
  8004202aa6:	48 39 c2             	cmp    %rax,%rdx
  8004202aa9:	72 32                	jb     8004202add <x64_vm_init+0x4a0>
  8004202aab:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004202aaf:	48 89 c1             	mov    %rax,%rcx
  8004202ab2:	48 ba 58 e7 21 04 80 	movabs $0x800421e758,%rdx
  8004202ab9:	00 00 00 
  8004202abc:	be 83 01 00 00       	mov    $0x183,%esi
  8004202ac1:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004202ac8:	00 00 00 
  8004202acb:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202ad0:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004202ad7:	00 00 00 
  8004202ada:	41 ff d0             	callq  *%r8
  8004202add:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202ae4:	00 00 00 
  8004202ae7:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004202aeb:	48 01 d0             	add    %rdx,%rax
  8004202aee:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  8004202af2:	48 b8 e8 e5 6d 04 80 	movabs $0x80046de5e8,%rax
  8004202af9:	00 00 00 
  8004202afc:	48 8b 00             	mov    (%rax),%rax
  8004202aff:	48 89 45 88          	mov    %rax,-0x78(%rbp)
}

static __inline void
lcr3(uint64_t val)
{
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  8004202b03:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004202b07:	0f 22 d8             	mov    %rax,%cr3
  8004202b0a:	c9                   	leaveq 
  8004202b0b:	c3                   	retq   

0000008004202b0c <mem_init_mp>:
  8004202b0c:	55                   	push   %rbp
  8004202b0d:	48 89 e5             	mov    %rsp,%rbp
  8004202b10:	48 83 ec 20          	sub    $0x20,%rsp
  8004202b14:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004202b1b:	e9 cb 00 00 00       	jmpq   8004202beb <mem_init_mp+0xdf>
  8004202b20:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004202b23:	89 d0                	mov    %edx,%eax
  8004202b25:	01 c0                	add    %eax,%eax
  8004202b27:	01 d0                	add    %edx,%eax
  8004202b29:	c1 e0 0f             	shl    $0xf,%eax
  8004202b2c:	48 98                	cltq   
  8004202b2e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202b35:	00 00 00 
  8004202b38:	48 29 c2             	sub    %rax,%rdx
  8004202b3b:	48 89 d0             	mov    %rdx,%rax
  8004202b3e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004202b42:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004202b45:	48 98                	cltq   
  8004202b47:	48 c1 e0 10          	shl    $0x10,%rax
  8004202b4b:	48 89 c2             	mov    %rax,%rdx
  8004202b4e:	48 b8 00 10 6e 04 80 	movabs $0x80046e1000,%rax
  8004202b55:	00 00 00 
  8004202b58:	48 01 d0             	add    %rdx,%rax
  8004202b5b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202b5f:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004202b66:	00 00 00 
  8004202b69:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  8004202b6d:	77 32                	ja     8004202ba1 <mem_init_mp+0x95>
  8004202b6f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202b73:	48 89 c1             	mov    %rax,%rcx
  8004202b76:	48 ba 08 e9 21 04 80 	movabs $0x800421e908,%rdx
  8004202b7d:	00 00 00 
  8004202b80:	be a6 01 00 00       	mov    $0x1a6,%esi
  8004202b85:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004202b8c:	00 00 00 
  8004202b8f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202b94:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004202b9b:	00 00 00 
  8004202b9e:	41 ff d0             	callq  *%r8
  8004202ba1:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202ba8:	ff ff ff 
  8004202bab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202baf:	48 01 c2             	add    %rax,%rdx
  8004202bb2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004202bb6:	48 8d b0 00 00 ff ff 	lea    -0x10000(%rax),%rsi
  8004202bbd:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  8004202bc4:	00 00 00 
  8004202bc7:	48 8b 00             	mov    (%rax),%rax
  8004202bca:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  8004202bd0:	48 89 d1             	mov    %rdx,%rcx
  8004202bd3:	ba 00 00 01 00       	mov    $0x10000,%edx
  8004202bd8:	48 89 c7             	mov    %rax,%rdi
  8004202bdb:	48 b8 36 37 20 04 80 	movabs $0x8004203736,%rax
  8004202be2:	00 00 00 
  8004202be5:	ff d0                	callq  *%rax
  8004202be7:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004202beb:	83 7d fc 03          	cmpl   $0x3,-0x4(%rbp)
  8004202bef:	0f 8e 2b ff ff ff    	jle    8004202b20 <mem_init_mp+0x14>
  8004202bf5:	c9                   	leaveq 
  8004202bf6:	c3                   	retq   

0000008004202bf7 <page_init>:
  8004202bf7:	55                   	push   %rbp
  8004202bf8:	48 89 e5             	mov    %rsp,%rbp
  8004202bfb:	48 83 ec 50          	sub    $0x50,%rsp
  8004202bff:	bf 00 00 00 00       	mov    $0x0,%edi
  8004202c04:	48 b8 e6 24 20 04 80 	movabs $0x80042024e6,%rax
  8004202c0b:	00 00 00 
  8004202c0e:	ff d0                	callq  *%rax
  8004202c10:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004202c14:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004202c1b:	00 
  8004202c1c:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004202c23:	00 
  8004202c24:	e9 65 02 00 00       	jmpq   8004202e8e <page_init+0x297>
  8004202c29:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  8004202c30:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004202c35:	74 1a                	je     8004202c51 <page_init+0x5a>
  8004202c37:	48 b8 30 f2 4d 04 80 	movabs $0x80044df230,%rax
  8004202c3e:	00 00 00 
  8004202c41:	48 8b 00             	mov    (%rax),%rax
  8004202c44:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004202c48:	73 07                	jae    8004202c51 <page_init+0x5a>
  8004202c4a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004202c51:	48 83 7d f8 07       	cmpq   $0x7,-0x8(%rbp)
  8004202c56:	75 07                	jne    8004202c5f <page_init+0x68>
  8004202c58:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  8004202c5f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004202c63:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004202c67:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004202c6e:	00 00 00 
  8004202c71:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  8004202c75:	77 32                	ja     8004202ca9 <page_init+0xb2>
  8004202c77:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202c7b:	48 89 c1             	mov    %rax,%rcx
  8004202c7e:	48 ba 08 e9 21 04 80 	movabs $0x800421e908,%rdx
  8004202c85:	00 00 00 
  8004202c88:	be d5 01 00 00       	mov    $0x1d5,%esi
  8004202c8d:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004202c94:	00 00 00 
  8004202c97:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202c9c:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004202ca3:	00 00 00 
  8004202ca6:	41 ff d0             	callq  *%r8
  8004202ca9:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202cb0:	ff ff ff 
  8004202cb3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202cb7:	48 01 d0             	add    %rdx,%rax
  8004202cba:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202cbe:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004202cc2:	77 07                	ja     8004202ccb <page_init+0xd4>
  8004202cc4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004202ccb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202ccf:	48 05 00 40 00 08    	add    $0x8004000,%rax
  8004202cd5:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202cd9:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004202cdd:	48 b8 00 20 10 00 00 	movabs $0x102000,%rax
  8004202ce4:	00 00 00 
  8004202ce7:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004202ceb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202cef:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202cf3:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004202cf6:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004202cf9:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  8004202d00:	00 00 00 
  8004202d03:	48 8b 00             	mov    (%rax),%rax
  8004202d06:	48 39 c2             	cmp    %rax,%rdx
  8004202d09:	72 32                	jb     8004202d3d <page_init+0x146>
  8004202d0b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202d0f:	48 89 c1             	mov    %rax,%rcx
  8004202d12:	48 ba 58 e7 21 04 80 	movabs $0x800421e758,%rdx
  8004202d19:	00 00 00 
  8004202d1c:	be d9 01 00 00       	mov    $0x1d9,%esi
  8004202d21:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004202d28:	00 00 00 
  8004202d2b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202d30:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004202d37:	00 00 00 
  8004202d3a:	41 ff d0             	callq  *%r8
  8004202d3d:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202d44:	00 00 00 
  8004202d47:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202d4b:	48 01 d0             	add    %rdx,%rax
  8004202d4e:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004202d52:	0f 87 84 00 00 00    	ja     8004202ddc <page_init+0x1e5>
  8004202d58:	48 b8 00 20 10 00 00 	movabs $0x102000,%rax
  8004202d5f:	00 00 00 
  8004202d62:	48 05 00 50 00 00    	add    $0x5000,%rax
  8004202d68:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004202d6c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202d70:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202d74:	89 45 b4             	mov    %eax,-0x4c(%rbp)
  8004202d77:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  8004202d7a:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  8004202d81:	00 00 00 
  8004202d84:	48 8b 00             	mov    (%rax),%rax
  8004202d87:	48 39 c2             	cmp    %rax,%rdx
  8004202d8a:	72 32                	jb     8004202dbe <page_init+0x1c7>
  8004202d8c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202d90:	48 89 c1             	mov    %rax,%rcx
  8004202d93:	48 ba 58 e7 21 04 80 	movabs $0x800421e758,%rdx
  8004202d9a:	00 00 00 
  8004202d9d:	be d9 01 00 00       	mov    $0x1d9,%esi
  8004202da2:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004202da9:	00 00 00 
  8004202dac:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202db1:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004202db8:	00 00 00 
  8004202dbb:	41 ff d0             	callq  *%r8
  8004202dbe:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202dc5:	00 00 00 
  8004202dc8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202dcc:	48 01 d0             	add    %rdx,%rax
  8004202dcf:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004202dd3:	76 07                	jbe    8004202ddc <page_init+0x1e5>
  8004202dd5:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  8004202ddc:	48 b8 00 e6 6d 04 80 	movabs $0x80046de600,%rax
  8004202de3:	00 00 00 
  8004202de6:	48 8b 00             	mov    (%rax),%rax
  8004202de9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202ded:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202df1:	48 01 c2             	add    %rax,%rdx
  8004202df4:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004202df7:	66 89 42 08          	mov    %ax,0x8(%rdx)
  8004202dfb:	48 b8 00 e6 6d 04 80 	movabs $0x80046de600,%rax
  8004202e02:	00 00 00 
  8004202e05:	48 8b 00             	mov    (%rax),%rax
  8004202e08:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202e0c:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202e10:	48 01 d0             	add    %rdx,%rax
  8004202e13:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004202e1a:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  8004202e1e:	75 69                	jne    8004202e89 <page_init+0x292>
  8004202e20:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004202e25:	74 21                	je     8004202e48 <page_init+0x251>
  8004202e27:	48 b8 00 e6 6d 04 80 	movabs $0x80046de600,%rax
  8004202e2e:	00 00 00 
  8004202e31:	48 8b 00             	mov    (%rax),%rax
  8004202e34:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202e38:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202e3c:	48 01 c2             	add    %rax,%rdx
  8004202e3f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202e43:	48 89 10             	mov    %rdx,(%rax)
  8004202e46:	eb 25                	jmp    8004202e6d <page_init+0x276>
  8004202e48:	48 b8 00 e6 6d 04 80 	movabs $0x80046de600,%rax
  8004202e4f:	00 00 00 
  8004202e52:	48 8b 00             	mov    (%rax),%rax
  8004202e55:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202e59:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202e5d:	48 01 c2             	add    %rax,%rdx
  8004202e60:	48 b8 38 f2 4d 04 80 	movabs $0x80044df238,%rax
  8004202e67:	00 00 00 
  8004202e6a:	48 89 10             	mov    %rdx,(%rax)
  8004202e6d:	48 b8 00 e6 6d 04 80 	movabs $0x80046de600,%rax
  8004202e74:	00 00 00 
  8004202e77:	48 8b 00             	mov    (%rax),%rax
  8004202e7a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202e7e:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202e82:	48 01 d0             	add    %rdx,%rax
  8004202e85:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202e89:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004202e8e:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  8004202e95:	00 00 00 
  8004202e98:	48 8b 00             	mov    (%rax),%rax
  8004202e9b:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004202e9f:	0f 82 84 fd ff ff    	jb     8004202c29 <page_init+0x32>
  8004202ea5:	c9                   	leaveq 
  8004202ea6:	c3                   	retq   

0000008004202ea7 <page_alloc>:
  8004202ea7:	55                   	push   %rbp
  8004202ea8:	48 89 e5             	mov    %rsp,%rbp
  8004202eab:	48 83 ec 20          	sub    $0x20,%rsp
  8004202eaf:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004202eb2:	48 b8 38 f2 4d 04 80 	movabs $0x80044df238,%rax
  8004202eb9:	00 00 00 
  8004202ebc:	48 8b 00             	mov    (%rax),%rax
  8004202ebf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004202ec3:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004202ec8:	74 5e                	je     8004202f28 <page_alloc+0x81>
  8004202eca:	48 b8 38 f2 4d 04 80 	movabs $0x80044df238,%rax
  8004202ed1:	00 00 00 
  8004202ed4:	48 8b 00             	mov    (%rax),%rax
  8004202ed7:	48 8b 10             	mov    (%rax),%rdx
  8004202eda:	48 b8 38 f2 4d 04 80 	movabs $0x80044df238,%rax
  8004202ee1:	00 00 00 
  8004202ee4:	48 89 10             	mov    %rdx,(%rax)
  8004202ee7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202eeb:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004202ef2:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004202ef5:	83 e0 01             	and    $0x1,%eax
  8004202ef8:	85 c0                	test   %eax,%eax
  8004202efa:	74 2c                	je     8004202f28 <page_alloc+0x81>
  8004202efc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202f00:	48 89 c7             	mov    %rax,%rdi
  8004202f03:	48 b8 bd 1b 20 04 80 	movabs $0x8004201bbd,%rax
  8004202f0a:	00 00 00 
  8004202f0d:	ff d0                	callq  *%rax
  8004202f0f:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004202f14:	be 00 00 00 00       	mov    $0x0,%esi
  8004202f19:	48 89 c7             	mov    %rax,%rdi
  8004202f1c:	48 b8 37 0e 21 04 80 	movabs $0x8004210e37,%rax
  8004202f23:	00 00 00 
  8004202f26:	ff d0                	callq  *%rax
  8004202f28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202f2c:	c9                   	leaveq 
  8004202f2d:	c3                   	retq   

0000008004202f2e <page_initpp>:
  8004202f2e:	55                   	push   %rbp
  8004202f2f:	48 89 e5             	mov    %rsp,%rbp
  8004202f32:	48 83 ec 10          	sub    $0x10,%rsp
  8004202f36:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004202f3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202f3e:	ba 10 00 00 00       	mov    $0x10,%edx
  8004202f43:	be 00 00 00 00       	mov    $0x0,%esi
  8004202f48:	48 89 c7             	mov    %rax,%rdi
  8004202f4b:	48 b8 37 0e 21 04 80 	movabs $0x8004210e37,%rax
  8004202f52:	00 00 00 
  8004202f55:	ff d0                	callq  *%rax
  8004202f57:	c9                   	leaveq 
  8004202f58:	c3                   	retq   

0000008004202f59 <page_free>:
  8004202f59:	55                   	push   %rbp
  8004202f5a:	48 89 e5             	mov    %rsp,%rbp
  8004202f5d:	48 83 ec 10          	sub    $0x10,%rsp
  8004202f61:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004202f65:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202f69:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004202f6d:	66 85 c0             	test   %ax,%ax
  8004202f70:	75 0c                	jne    8004202f7e <page_free+0x25>
  8004202f72:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202f76:	48 8b 00             	mov    (%rax),%rax
  8004202f79:	48 85 c0             	test   %rax,%rax
  8004202f7c:	74 2c                	je     8004202faa <page_free+0x51>
  8004202f7e:	48 ba 30 e9 21 04 80 	movabs $0x800421e930,%rdx
  8004202f85:	00 00 00 
  8004202f88:	be 3d 02 00 00       	mov    $0x23d,%esi
  8004202f8d:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004202f94:	00 00 00 
  8004202f97:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202f9c:	48 b9 0c 06 20 04 80 	movabs $0x800420060c,%rcx
  8004202fa3:	00 00 00 
  8004202fa6:	ff d1                	callq  *%rcx
  8004202fa8:	eb 2f                	jmp    8004202fd9 <page_free+0x80>
  8004202faa:	48 b8 38 f2 4d 04 80 	movabs $0x80044df238,%rax
  8004202fb1:	00 00 00 
  8004202fb4:	48 8b 10             	mov    (%rax),%rdx
  8004202fb7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202fbb:	48 89 10             	mov    %rdx,(%rax)
  8004202fbe:	48 b8 38 f2 4d 04 80 	movabs $0x80044df238,%rax
  8004202fc5:	00 00 00 
  8004202fc8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202fcc:	48 89 10             	mov    %rdx,(%rax)
  8004202fcf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202fd3:	66 c7 40 08 00 00    	movw   $0x0,0x8(%rax)
  8004202fd9:	c9                   	leaveq 
  8004202fda:	c3                   	retq   

0000008004202fdb <page_decref>:
  8004202fdb:	55                   	push   %rbp
  8004202fdc:	48 89 e5             	mov    %rsp,%rbp
  8004202fdf:	48 83 ec 10          	sub    $0x10,%rsp
  8004202fe3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004202fe7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202feb:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004202fef:	8d 50 ff             	lea    -0x1(%rax),%edx
  8004202ff2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202ff6:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004202ffa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202ffe:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004203002:	66 85 c0             	test   %ax,%ax
  8004203005:	75 13                	jne    800420301a <page_decref+0x3f>
  8004203007:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420300b:	48 89 c7             	mov    %rax,%rdi
  800420300e:	48 b8 59 2f 20 04 80 	movabs $0x8004202f59,%rax
  8004203015:	00 00 00 
  8004203018:	ff d0                	callq  *%rax
  800420301a:	c9                   	leaveq 
  800420301b:	c3                   	retq   

000000800420301c <pml4e_walk>:
  800420301c:	55                   	push   %rbp
  800420301d:	48 89 e5             	mov    %rsp,%rbp
  8004203020:	53                   	push   %rbx
  8004203021:	48 83 ec 68          	sub    $0x68,%rsp
  8004203025:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  8004203029:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800420302d:	89 55 9c             	mov    %edx,-0x64(%rbp)
  8004203030:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
  8004203035:	0f 84 4e 02 00 00    	je     8004203289 <pml4e_walk+0x26d>
  800420303b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420303f:	48 c1 e8 27          	shr    $0x27,%rax
  8004203043:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203048:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420304f:	00 
  8004203050:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203054:	48 01 d0             	add    %rdx,%rax
  8004203057:	48 8b 00             	mov    (%rax),%rax
  800420305a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420305e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203062:	83 e0 01             	and    $0x1,%eax
  8004203065:	48 85 c0             	test   %rax,%rax
  8004203068:	0f 85 7f 01 00 00    	jne    80042031ed <pml4e_walk+0x1d1>
  800420306e:	83 7d 9c 00          	cmpl   $0x0,-0x64(%rbp)
  8004203072:	0f 84 75 01 00 00    	je     80042031ed <pml4e_walk+0x1d1>
  8004203078:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  800420307f:	00 
  8004203080:	bf 01 00 00 00       	mov    $0x1,%edi
  8004203085:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  800420308c:	00 00 00 
  800420308f:	ff d0                	callq  *%rax
  8004203091:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004203095:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420309a:	0f 84 43 01 00 00    	je     80042031e3 <pml4e_walk+0x1c7>
  80042030a0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042030a4:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042030a8:	8d 50 01             	lea    0x1(%rax),%edx
  80042030ab:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042030af:	66 89 50 08          	mov    %dx,0x8(%rax)
  80042030b3:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042030b7:	48 c1 e8 27          	shr    $0x27,%rax
  80042030bb:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042030c0:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042030c7:	00 
  80042030c8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042030cc:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  80042030d0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042030d4:	48 89 c7             	mov    %rax,%rdi
  80042030d7:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  80042030de:	00 00 00 
  80042030e1:	ff d0                	callq  *%rax
  80042030e3:	48 83 c8 07          	or     $0x7,%rax
  80042030e7:	48 89 03             	mov    %rax,(%rbx)
  80042030ea:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042030ee:	48 c1 e8 27          	shr    $0x27,%rax
  80042030f2:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042030f7:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042030fe:	00 
  80042030ff:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203103:	48 01 d0             	add    %rdx,%rax
  8004203106:	48 8b 00             	mov    (%rax),%rax
  8004203109:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420310f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004203113:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203117:	48 c1 e8 0c          	shr    $0xc,%rax
  800420311b:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  800420311e:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004203121:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  8004203128:	00 00 00 
  800420312b:	48 8b 00             	mov    (%rax),%rax
  800420312e:	48 39 c2             	cmp    %rax,%rdx
  8004203131:	72 32                	jb     8004203165 <pml4e_walk+0x149>
  8004203133:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203137:	48 89 c1             	mov    %rax,%rcx
  800420313a:	48 ba 58 e7 21 04 80 	movabs $0x800421e758,%rdx
  8004203141:	00 00 00 
  8004203144:	be 79 02 00 00       	mov    $0x279,%esi
  8004203149:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004203150:	00 00 00 
  8004203153:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203158:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420315f:	00 00 00 
  8004203162:	41 ff d0             	callq  *%r8
  8004203165:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420316c:	00 00 00 
  800420316f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203173:	48 01 d0             	add    %rdx,%rax
  8004203176:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004203179:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  800420317d:	48 89 ce             	mov    %rcx,%rsi
  8004203180:	48 89 c7             	mov    %rax,%rdi
  8004203183:	48 b8 95 32 20 04 80 	movabs $0x8004203295,%rax
  800420318a:	00 00 00 
  800420318d:	ff d0                	callq  *%rax
  800420318f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004203193:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004203198:	74 09                	je     80042031a3 <pml4e_walk+0x187>
  800420319a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420319e:	e9 eb 00 00 00       	jmpq   800420328e <pml4e_walk+0x272>
  80042031a3:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042031a7:	48 c1 e8 27          	shr    $0x27,%rax
  80042031ab:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042031b0:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042031b7:	00 
  80042031b8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042031bc:	48 01 d0             	add    %rdx,%rax
  80042031bf:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  80042031c6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042031ca:	48 89 c7             	mov    %rax,%rdi
  80042031cd:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  80042031d4:	00 00 00 
  80042031d7:	ff d0                	callq  *%rax
  80042031d9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042031de:	e9 ab 00 00 00       	jmpq   800420328e <pml4e_walk+0x272>
  80042031e3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042031e8:	e9 a1 00 00 00       	jmpq   800420328e <pml4e_walk+0x272>
  80042031ed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042031f1:	83 e0 01             	and    $0x1,%eax
  80042031f4:	48 85 c0             	test   %rax,%rax
  80042031f7:	0f 84 8c 00 00 00    	je     8004203289 <pml4e_walk+0x26d>
  80042031fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203201:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203207:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800420320b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420320f:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203213:	89 45 bc             	mov    %eax,-0x44(%rbp)
  8004203216:	8b 55 bc             	mov    -0x44(%rbp),%edx
  8004203219:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  8004203220:	00 00 00 
  8004203223:	48 8b 00             	mov    (%rax),%rax
  8004203226:	48 39 c2             	cmp    %rax,%rdx
  8004203229:	72 32                	jb     800420325d <pml4e_walk+0x241>
  800420322b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420322f:	48 89 c1             	mov    %rax,%rcx
  8004203232:	48 ba 58 e7 21 04 80 	movabs $0x800421e758,%rdx
  8004203239:	00 00 00 
  800420323c:	be 83 02 00 00       	mov    $0x283,%esi
  8004203241:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004203248:	00 00 00 
  800420324b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203250:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004203257:	00 00 00 
  800420325a:	41 ff d0             	callq  *%r8
  800420325d:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203264:	00 00 00 
  8004203267:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420326b:	48 01 d0             	add    %rdx,%rax
  800420326e:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004203271:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004203275:	48 89 ce             	mov    %rcx,%rsi
  8004203278:	48 89 c7             	mov    %rax,%rdi
  800420327b:	48 b8 95 32 20 04 80 	movabs $0x8004203295,%rax
  8004203282:	00 00 00 
  8004203285:	ff d0                	callq  *%rax
  8004203287:	eb 05                	jmp    800420328e <pml4e_walk+0x272>
  8004203289:	b8 00 00 00 00       	mov    $0x0,%eax
  800420328e:	48 83 c4 68          	add    $0x68,%rsp
  8004203292:	5b                   	pop    %rbx
  8004203293:	5d                   	pop    %rbp
  8004203294:	c3                   	retq   

0000008004203295 <pdpe_walk>:
  8004203295:	55                   	push   %rbp
  8004203296:	48 89 e5             	mov    %rsp,%rbp
  8004203299:	53                   	push   %rbx
  800420329a:	48 83 ec 68          	sub    $0x68,%rsp
  800420329e:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  80042032a2:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  80042032a6:	89 55 9c             	mov    %edx,-0x64(%rbp)
  80042032a9:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
  80042032ae:	0f 84 4e 02 00 00    	je     8004203502 <pdpe_walk+0x26d>
  80042032b4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042032b8:	48 c1 e8 1e          	shr    $0x1e,%rax
  80042032bc:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042032c1:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042032c8:	00 
  80042032c9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042032cd:	48 01 d0             	add    %rdx,%rax
  80042032d0:	48 8b 00             	mov    (%rax),%rax
  80042032d3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042032d7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042032db:	83 e0 01             	and    $0x1,%eax
  80042032de:	48 85 c0             	test   %rax,%rax
  80042032e1:	0f 85 7f 01 00 00    	jne    8004203466 <pdpe_walk+0x1d1>
  80042032e7:	83 7d 9c 00          	cmpl   $0x0,-0x64(%rbp)
  80042032eb:	0f 84 75 01 00 00    	je     8004203466 <pdpe_walk+0x1d1>
  80042032f1:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  80042032f8:	00 
  80042032f9:	bf 01 00 00 00       	mov    $0x1,%edi
  80042032fe:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  8004203305:	00 00 00 
  8004203308:	ff d0                	callq  *%rax
  800420330a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420330e:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004203313:	0f 84 43 01 00 00    	je     800420345c <pdpe_walk+0x1c7>
  8004203319:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420331d:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004203321:	8d 50 01             	lea    0x1(%rax),%edx
  8004203324:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203328:	66 89 50 08          	mov    %dx,0x8(%rax)
  800420332c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004203330:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203334:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203339:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203340:	00 
  8004203341:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203345:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  8004203349:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420334d:	48 89 c7             	mov    %rax,%rdi
  8004203350:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  8004203357:	00 00 00 
  800420335a:	ff d0                	callq  *%rax
  800420335c:	48 83 c8 07          	or     $0x7,%rax
  8004203360:	48 89 03             	mov    %rax,(%rbx)
  8004203363:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004203367:	48 c1 e8 1e          	shr    $0x1e,%rax
  800420336b:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203370:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203377:	00 
  8004203378:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420337c:	48 01 d0             	add    %rdx,%rax
  800420337f:	48 8b 00             	mov    (%rax),%rax
  8004203382:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203388:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420338c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203390:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203394:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  8004203397:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  800420339a:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  80042033a1:	00 00 00 
  80042033a4:	48 8b 00             	mov    (%rax),%rax
  80042033a7:	48 39 c2             	cmp    %rax,%rdx
  80042033aa:	72 32                	jb     80042033de <pdpe_walk+0x149>
  80042033ac:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042033b0:	48 89 c1             	mov    %rax,%rcx
  80042033b3:	48 ba 58 e7 21 04 80 	movabs $0x800421e758,%rdx
  80042033ba:	00 00 00 
  80042033bd:	be 9c 02 00 00       	mov    $0x29c,%esi
  80042033c2:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  80042033c9:	00 00 00 
  80042033cc:	b8 00 00 00 00       	mov    $0x0,%eax
  80042033d1:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042033d8:	00 00 00 
  80042033db:	41 ff d0             	callq  *%r8
  80042033de:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042033e5:	00 00 00 
  80042033e8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042033ec:	48 01 d0             	add    %rdx,%rax
  80042033ef:	8b 55 9c             	mov    -0x64(%rbp),%edx
  80042033f2:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042033f6:	48 89 ce             	mov    %rcx,%rsi
  80042033f9:	48 89 c7             	mov    %rax,%rdi
  80042033fc:	48 b8 0e 35 20 04 80 	movabs $0x800420350e,%rax
  8004203403:	00 00 00 
  8004203406:	ff d0                	callq  *%rax
  8004203408:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  800420340c:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004203411:	74 09                	je     800420341c <pdpe_walk+0x187>
  8004203413:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203417:	e9 eb 00 00 00       	jmpq   8004203507 <pdpe_walk+0x272>
  800420341c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004203420:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203424:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203429:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203430:	00 
  8004203431:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203435:	48 01 d0             	add    %rdx,%rax
  8004203438:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800420343f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203443:	48 89 c7             	mov    %rax,%rdi
  8004203446:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  800420344d:	00 00 00 
  8004203450:	ff d0                	callq  *%rax
  8004203452:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203457:	e9 ab 00 00 00       	jmpq   8004203507 <pdpe_walk+0x272>
  800420345c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203461:	e9 a1 00 00 00       	jmpq   8004203507 <pdpe_walk+0x272>
  8004203466:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420346a:	83 e0 01             	and    $0x1,%eax
  800420346d:	48 85 c0             	test   %rax,%rax
  8004203470:	0f 84 8c 00 00 00    	je     8004203502 <pdpe_walk+0x26d>
  8004203476:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420347a:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203480:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004203484:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004203488:	48 c1 e8 0c          	shr    $0xc,%rax
  800420348c:	89 45 bc             	mov    %eax,-0x44(%rbp)
  800420348f:	8b 55 bc             	mov    -0x44(%rbp),%edx
  8004203492:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  8004203499:	00 00 00 
  800420349c:	48 8b 00             	mov    (%rax),%rax
  800420349f:	48 39 c2             	cmp    %rax,%rdx
  80042034a2:	72 32                	jb     80042034d6 <pdpe_walk+0x241>
  80042034a4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042034a8:	48 89 c1             	mov    %rax,%rcx
  80042034ab:	48 ba 58 e7 21 04 80 	movabs $0x800421e758,%rdx
  80042034b2:	00 00 00 
  80042034b5:	be a6 02 00 00       	mov    $0x2a6,%esi
  80042034ba:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  80042034c1:	00 00 00 
  80042034c4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042034c9:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042034d0:	00 00 00 
  80042034d3:	41 ff d0             	callq  *%r8
  80042034d6:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042034dd:	00 00 00 
  80042034e0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042034e4:	48 01 d0             	add    %rdx,%rax
  80042034e7:	8b 55 9c             	mov    -0x64(%rbp),%edx
  80042034ea:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042034ee:	48 89 ce             	mov    %rcx,%rsi
  80042034f1:	48 89 c7             	mov    %rax,%rdi
  80042034f4:	48 b8 0e 35 20 04 80 	movabs $0x800420350e,%rax
  80042034fb:	00 00 00 
  80042034fe:	ff d0                	callq  *%rax
  8004203500:	eb 05                	jmp    8004203507 <pdpe_walk+0x272>
  8004203502:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203507:	48 83 c4 68          	add    $0x68,%rsp
  800420350b:	5b                   	pop    %rbx
  800420350c:	5d                   	pop    %rbp
  800420350d:	c3                   	retq   

000000800420350e <pgdir_walk>:
  800420350e:	55                   	push   %rbp
  800420350f:	48 89 e5             	mov    %rsp,%rbp
  8004203512:	53                   	push   %rbx
  8004203513:	48 83 ec 58          	sub    $0x58,%rsp
  8004203517:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  800420351b:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  800420351f:	89 55 ac             	mov    %edx,-0x54(%rbp)
  8004203522:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004203527:	0f 84 fd 01 00 00    	je     800420372a <pgdir_walk+0x21c>
  800420352d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203531:	48 c1 e8 15          	shr    $0x15,%rax
  8004203535:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420353a:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203541:	00 
  8004203542:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203546:	48 01 d0             	add    %rdx,%rax
  8004203549:	48 8b 00             	mov    (%rax),%rax
  800420354c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004203550:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203554:	83 e0 01             	and    $0x1,%eax
  8004203557:	48 85 c0             	test   %rax,%rax
  800420355a:	0f 85 2f 01 00 00    	jne    800420368f <pgdir_walk+0x181>
  8004203560:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  8004203564:	0f 84 25 01 00 00    	je     800420368f <pgdir_walk+0x181>
  800420356a:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  8004203571:	00 
  8004203572:	bf 01 00 00 00       	mov    $0x1,%edi
  8004203577:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  800420357e:	00 00 00 
  8004203581:	ff d0                	callq  *%rax
  8004203583:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004203587:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420358c:	0f 84 f3 00 00 00    	je     8004203685 <pgdir_walk+0x177>
  8004203592:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203596:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420359a:	8d 50 01             	lea    0x1(%rax),%edx
  800420359d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042035a1:	66 89 50 08          	mov    %dx,0x8(%rax)
  80042035a5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042035a9:	48 c1 e8 15          	shr    $0x15,%rax
  80042035ad:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042035b2:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042035b9:	00 
  80042035ba:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042035be:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  80042035c2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042035c6:	48 89 c7             	mov    %rax,%rdi
  80042035c9:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  80042035d0:	00 00 00 
  80042035d3:	ff d0                	callq  *%rax
  80042035d5:	48 83 c8 07          	or     $0x7,%rax
  80042035d9:	48 89 03             	mov    %rax,(%rbx)
  80042035dc:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042035e0:	48 c1 e8 0c          	shr    $0xc,%rax
  80042035e4:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042035e9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042035f0:	00 
  80042035f1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042035f5:	48 c1 e8 15          	shr    $0x15,%rax
  80042035f9:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042035fe:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
  8004203605:	00 
  8004203606:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420360a:	48 01 c8             	add    %rcx,%rax
  800420360d:	48 8b 00             	mov    (%rax),%rax
  8004203610:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203616:	48 01 d0             	add    %rdx,%rax
  8004203619:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420361d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203621:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203625:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  8004203628:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  800420362b:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  8004203632:	00 00 00 
  8004203635:	48 8b 00             	mov    (%rax),%rax
  8004203638:	48 39 c2             	cmp    %rax,%rdx
  800420363b:	72 32                	jb     800420366f <pgdir_walk+0x161>
  800420363d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203641:	48 89 c1             	mov    %rax,%rcx
  8004203644:	48 ba 58 e7 21 04 80 	movabs $0x800421e758,%rdx
  800420364b:	00 00 00 
  800420364e:	be be 02 00 00       	mov    $0x2be,%esi
  8004203653:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  800420365a:	00 00 00 
  800420365d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203662:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004203669:	00 00 00 
  800420366c:	41 ff d0             	callq  *%r8
  800420366f:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203676:	00 00 00 
  8004203679:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420367d:	48 01 d0             	add    %rdx,%rax
  8004203680:	e9 aa 00 00 00       	jmpq   800420372f <pgdir_walk+0x221>
  8004203685:	b8 00 00 00 00       	mov    $0x0,%eax
  800420368a:	e9 a0 00 00 00       	jmpq   800420372f <pgdir_walk+0x221>
  800420368f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203693:	83 e0 01             	and    $0x1,%eax
  8004203696:	48 85 c0             	test   %rax,%rax
  8004203699:	0f 84 8b 00 00 00    	je     800420372a <pgdir_walk+0x21c>
  800420369f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042036a3:	48 c1 e8 0c          	shr    $0xc,%rax
  80042036a7:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042036ac:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042036b3:	00 
  80042036b4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042036b8:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042036be:	48 01 d0             	add    %rdx,%rax
  80042036c1:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042036c5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042036c9:	48 c1 e8 0c          	shr    $0xc,%rax
  80042036cd:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  80042036d0:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  80042036d3:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  80042036da:	00 00 00 
  80042036dd:	48 8b 00             	mov    (%rax),%rax
  80042036e0:	48 39 c2             	cmp    %rax,%rdx
  80042036e3:	72 32                	jb     8004203717 <pgdir_walk+0x209>
  80042036e5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042036e9:	48 89 c1             	mov    %rax,%rcx
  80042036ec:	48 ba 58 e7 21 04 80 	movabs $0x800421e758,%rdx
  80042036f3:	00 00 00 
  80042036f6:	be c3 02 00 00       	mov    $0x2c3,%esi
  80042036fb:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004203702:	00 00 00 
  8004203705:	b8 00 00 00 00       	mov    $0x0,%eax
  800420370a:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004203711:	00 00 00 
  8004203714:	41 ff d0             	callq  *%r8
  8004203717:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420371e:	00 00 00 
  8004203721:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203725:	48 01 d0             	add    %rdx,%rax
  8004203728:	eb 05                	jmp    800420372f <pgdir_walk+0x221>
  800420372a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420372f:	48 83 c4 58          	add    $0x58,%rsp
  8004203733:	5b                   	pop    %rbx
  8004203734:	5d                   	pop    %rbp
  8004203735:	c3                   	retq   

0000008004203736 <boot_map_region>:
  8004203736:	55                   	push   %rbp
  8004203737:	48 89 e5             	mov    %rsp,%rbp
  800420373a:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  800420373e:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  8004203742:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  8004203746:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420374a:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  800420374e:	44 89 45 8c          	mov    %r8d,-0x74(%rbp)
  8004203752:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004203759:	00 
  800420375a:	e9 aa 02 00 00       	jmpq   8004203a09 <boot_map_region+0x2d3>
  800420375f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203763:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004203767:	48 01 d0             	add    %rdx,%rax
  800420376a:	48 89 c1             	mov    %rax,%rcx
  800420376d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203771:	ba 01 00 00 00       	mov    $0x1,%edx
  8004203776:	48 89 ce             	mov    %rcx,%rsi
  8004203779:	48 89 c7             	mov    %rax,%rdi
  800420377c:	48 b8 1c 30 20 04 80 	movabs $0x800420301c,%rax
  8004203783:	00 00 00 
  8004203786:	ff d0                	callq  *%rax
  8004203788:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420378c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203790:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  8004203794:	48 01 d0             	add    %rdx,%rax
  8004203797:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420379b:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  80042037a0:	74 23                	je     80042037c5 <boot_map_region+0x8f>
  80042037a2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042037a6:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042037ac:	48 89 c2             	mov    %rax,%rdx
  80042037af:	8b 45 8c             	mov    -0x74(%rbp),%eax
  80042037b2:	48 98                	cltq   
  80042037b4:	48 09 d0             	or     %rdx,%rax
  80042037b7:	48 83 c8 01          	or     $0x1,%rax
  80042037bb:	48 89 c2             	mov    %rax,%rdx
  80042037be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042037c2:	48 89 10             	mov    %rdx,(%rax)
  80042037c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042037c9:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042037cd:	48 01 d0             	add    %rdx,%rax
  80042037d0:	48 c1 e8 27          	shr    $0x27,%rax
  80042037d4:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042037d9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042037e0:	00 
  80042037e1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042037e5:	48 01 d0             	add    %rdx,%rax
  80042037e8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042037ec:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042037f0:	48 01 ca             	add    %rcx,%rdx
  80042037f3:	48 c1 ea 27          	shr    $0x27,%rdx
  80042037f7:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  80042037fd:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203804:	00 
  8004203805:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203809:	48 01 ca             	add    %rcx,%rdx
  800420380c:	48 8b 0a             	mov    (%rdx),%rcx
  800420380f:	8b 55 8c             	mov    -0x74(%rbp),%edx
  8004203812:	48 63 d2             	movslq %edx,%rdx
  8004203815:	48 09 ca             	or     %rcx,%rdx
  8004203818:	48 83 ca 01          	or     $0x1,%rdx
  800420381c:	48 89 10             	mov    %rdx,(%rax)
  800420381f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203823:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004203827:	48 01 d0             	add    %rdx,%rax
  800420382a:	48 c1 e8 27          	shr    $0x27,%rax
  800420382e:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203833:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420383a:	00 
  800420383b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420383f:	48 01 d0             	add    %rdx,%rax
  8004203842:	48 8b 00             	mov    (%rax),%rax
  8004203845:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420384b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420384f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203853:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203857:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800420385a:	8b 55 dc             	mov    -0x24(%rbp),%edx
  800420385d:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  8004203864:	00 00 00 
  8004203867:	48 8b 00             	mov    (%rax),%rax
  800420386a:	48 39 c2             	cmp    %rax,%rdx
  800420386d:	72 32                	jb     80042038a1 <boot_map_region+0x16b>
  800420386f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203873:	48 89 c1             	mov    %rax,%rcx
  8004203876:	48 ba 58 e7 21 04 80 	movabs $0x800421e758,%rdx
  800420387d:	00 00 00 
  8004203880:	be e6 02 00 00       	mov    $0x2e6,%esi
  8004203885:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  800420388c:	00 00 00 
  800420388f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203894:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420389b:	00 00 00 
  800420389e:	41 ff d0             	callq  *%r8
  80042038a1:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042038a8:	00 00 00 
  80042038ab:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042038af:	48 01 d0             	add    %rdx,%rax
  80042038b2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042038b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042038ba:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042038be:	48 01 d0             	add    %rdx,%rax
  80042038c1:	48 c1 e8 1e          	shr    $0x1e,%rax
  80042038c5:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042038ca:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042038d1:	00 
  80042038d2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042038d6:	48 01 d0             	add    %rdx,%rax
  80042038d9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042038dd:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042038e1:	48 01 ca             	add    %rcx,%rdx
  80042038e4:	48 c1 ea 1e          	shr    $0x1e,%rdx
  80042038e8:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  80042038ee:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  80042038f5:	00 
  80042038f6:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042038fa:	48 01 ca             	add    %rcx,%rdx
  80042038fd:	48 8b 0a             	mov    (%rdx),%rcx
  8004203900:	8b 55 8c             	mov    -0x74(%rbp),%edx
  8004203903:	48 63 d2             	movslq %edx,%rdx
  8004203906:	48 09 ca             	or     %rcx,%rdx
  8004203909:	48 83 ca 01          	or     $0x1,%rdx
  800420390d:	48 89 10             	mov    %rdx,(%rax)
  8004203910:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203914:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004203918:	48 01 d0             	add    %rdx,%rax
  800420391b:	48 c1 e8 1e          	shr    $0x1e,%rax
  800420391f:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203924:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420392b:	00 
  800420392c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004203930:	48 01 d0             	add    %rdx,%rax
  8004203933:	48 8b 00             	mov    (%rax),%rax
  8004203936:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420393c:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004203940:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203944:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203948:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  800420394b:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  800420394e:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  8004203955:	00 00 00 
  8004203958:	48 8b 00             	mov    (%rax),%rax
  800420395b:	48 39 c2             	cmp    %rax,%rdx
  800420395e:	72 32                	jb     8004203992 <boot_map_region+0x25c>
  8004203960:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203964:	48 89 c1             	mov    %rax,%rcx
  8004203967:	48 ba 58 e7 21 04 80 	movabs $0x800421e758,%rdx
  800420396e:	00 00 00 
  8004203971:	be e8 02 00 00       	mov    $0x2e8,%esi
  8004203976:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  800420397d:	00 00 00 
  8004203980:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203985:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420398c:	00 00 00 
  800420398f:	41 ff d0             	callq  *%r8
  8004203992:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203999:	00 00 00 
  800420399c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042039a0:	48 01 d0             	add    %rdx,%rax
  80042039a3:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  80042039a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042039ab:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042039af:	48 01 d0             	add    %rdx,%rax
  80042039b2:	48 c1 e8 15          	shr    $0x15,%rax
  80042039b6:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042039bb:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042039c2:	00 
  80042039c3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042039c7:	48 01 d0             	add    %rdx,%rax
  80042039ca:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042039ce:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042039d2:	48 01 ca             	add    %rcx,%rdx
  80042039d5:	48 c1 ea 15          	shr    $0x15,%rdx
  80042039d9:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  80042039df:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  80042039e6:	00 
  80042039e7:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  80042039eb:	48 01 ca             	add    %rcx,%rdx
  80042039ee:	48 8b 0a             	mov    (%rdx),%rcx
  80042039f1:	8b 55 8c             	mov    -0x74(%rbp),%edx
  80042039f4:	48 63 d2             	movslq %edx,%rdx
  80042039f7:	48 09 ca             	or     %rcx,%rdx
  80042039fa:	48 83 ca 01          	or     $0x1,%rdx
  80042039fe:	48 89 10             	mov    %rdx,(%rax)
  8004203a01:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  8004203a08:	00 
  8004203a09:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203a0d:	48 3b 45 98          	cmp    -0x68(%rbp),%rax
  8004203a11:	0f 82 48 fd ff ff    	jb     800420375f <boot_map_region+0x29>
  8004203a17:	c9                   	leaveq 
  8004203a18:	c3                   	retq   

0000008004203a19 <page_insert>:
  8004203a19:	55                   	push   %rbp
  8004203a1a:	48 89 e5             	mov    %rsp,%rbp
  8004203a1d:	48 83 ec 60          	sub    $0x60,%rsp
  8004203a21:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  8004203a25:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  8004203a29:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  8004203a2d:	89 4d a4             	mov    %ecx,-0x5c(%rbp)
  8004203a30:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004203a35:	0f 84 47 03 00 00    	je     8004203d82 <page_insert+0x369>
  8004203a3b:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  8004203a40:	0f 84 3c 03 00 00    	je     8004203d82 <page_insert+0x369>
  8004203a46:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  8004203a4a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203a4e:	ba 01 00 00 00       	mov    $0x1,%edx
  8004203a53:	48 89 ce             	mov    %rcx,%rsi
  8004203a56:	48 89 c7             	mov    %rax,%rdi
  8004203a59:	48 b8 1c 30 20 04 80 	movabs $0x800420301c,%rax
  8004203a60:	00 00 00 
  8004203a63:	ff d0                	callq  *%rax
  8004203a65:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203a69:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203a6e:	0f 84 07 03 00 00    	je     8004203d7b <page_insert+0x362>
  8004203a74:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203a78:	48 c1 e8 27          	shr    $0x27,%rax
  8004203a7c:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203a81:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203a88:	00 
  8004203a89:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203a8d:	48 01 d0             	add    %rdx,%rax
  8004203a90:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203a94:	48 c1 ea 27          	shr    $0x27,%rdx
  8004203a98:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203a9e:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203aa5:	00 
  8004203aa6:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004203aaa:	48 01 ca             	add    %rcx,%rdx
  8004203aad:	48 8b 0a             	mov    (%rdx),%rcx
  8004203ab0:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203ab3:	80 e6 f1             	and    $0xf1,%dh
  8004203ab6:	48 63 d2             	movslq %edx,%rdx
  8004203ab9:	48 09 ca             	or     %rcx,%rdx
  8004203abc:	48 89 10             	mov    %rdx,(%rax)
  8004203abf:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203ac3:	48 c1 e8 27          	shr    $0x27,%rax
  8004203ac7:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203acc:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203ad3:	00 
  8004203ad4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203ad8:	48 01 d0             	add    %rdx,%rax
  8004203adb:	48 8b 00             	mov    (%rax),%rax
  8004203ade:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203ae4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004203ae8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203aec:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203af0:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004203af3:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004203af6:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  8004203afd:	00 00 00 
  8004203b00:	48 8b 00             	mov    (%rax),%rax
  8004203b03:	48 39 c2             	cmp    %rax,%rdx
  8004203b06:	72 32                	jb     8004203b3a <page_insert+0x121>
  8004203b08:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203b0c:	48 89 c1             	mov    %rax,%rcx
  8004203b0f:	48 ba 58 e7 21 04 80 	movabs $0x800421e758,%rdx
  8004203b16:	00 00 00 
  8004203b19:	be 13 03 00 00       	mov    $0x313,%esi
  8004203b1e:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004203b25:	00 00 00 
  8004203b28:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203b2d:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004203b34:	00 00 00 
  8004203b37:	41 ff d0             	callq  *%r8
  8004203b3a:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203b41:	00 00 00 
  8004203b44:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203b48:	48 01 d0             	add    %rdx,%rax
  8004203b4b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004203b4f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203b53:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203b57:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203b5c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203b63:	00 
  8004203b64:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203b68:	48 01 d0             	add    %rdx,%rax
  8004203b6b:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203b6f:	48 c1 ea 1e          	shr    $0x1e,%rdx
  8004203b73:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203b79:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203b80:	00 
  8004203b81:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004203b85:	48 01 ca             	add    %rcx,%rdx
  8004203b88:	48 8b 0a             	mov    (%rdx),%rcx
  8004203b8b:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203b8e:	80 e6 f1             	and    $0xf1,%dh
  8004203b91:	48 63 d2             	movslq %edx,%rdx
  8004203b94:	48 09 ca             	or     %rcx,%rdx
  8004203b97:	48 89 10             	mov    %rdx,(%rax)
  8004203b9a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203b9e:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203ba2:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203ba7:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203bae:	00 
  8004203baf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203bb3:	48 01 d0             	add    %rdx,%rax
  8004203bb6:	48 8b 00             	mov    (%rax),%rax
  8004203bb9:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203bbf:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004203bc3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203bc7:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203bcb:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  8004203bce:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004203bd1:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  8004203bd8:	00 00 00 
  8004203bdb:	48 8b 00             	mov    (%rax),%rax
  8004203bde:	48 39 c2             	cmp    %rax,%rdx
  8004203be1:	72 32                	jb     8004203c15 <page_insert+0x1fc>
  8004203be3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203be7:	48 89 c1             	mov    %rax,%rcx
  8004203bea:	48 ba 58 e7 21 04 80 	movabs $0x800421e758,%rdx
  8004203bf1:	00 00 00 
  8004203bf4:	be 15 03 00 00       	mov    $0x315,%esi
  8004203bf9:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004203c00:	00 00 00 
  8004203c03:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203c08:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004203c0f:	00 00 00 
  8004203c12:	41 ff d0             	callq  *%r8
  8004203c15:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203c1c:	00 00 00 
  8004203c1f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203c23:	48 01 d0             	add    %rdx,%rax
  8004203c26:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004203c2a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203c2e:	48 c1 e8 15          	shr    $0x15,%rax
  8004203c32:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203c37:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203c3e:	00 
  8004203c3f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203c43:	48 01 d0             	add    %rdx,%rax
  8004203c46:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203c4a:	48 c1 ea 15          	shr    $0x15,%rdx
  8004203c4e:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203c54:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203c5b:	00 
  8004203c5c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004203c60:	48 01 ca             	add    %rcx,%rdx
  8004203c63:	48 8b 0a             	mov    (%rdx),%rcx
  8004203c66:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203c69:	80 e6 f1             	and    $0xf1,%dh
  8004203c6c:	48 63 d2             	movslq %edx,%rdx
  8004203c6f:	48 09 ca             	or     %rcx,%rdx
  8004203c72:	48 89 10             	mov    %rdx,(%rax)
  8004203c75:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203c79:	48 8b 00             	mov    (%rax),%rax
  8004203c7c:	83 e0 01             	and    $0x1,%eax
  8004203c7f:	48 85 c0             	test   %rax,%rax
  8004203c82:	74 70                	je     8004203cf4 <page_insert+0x2db>
  8004203c84:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203c88:	48 89 c7             	mov    %rax,%rdi
  8004203c8b:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  8004203c92:	00 00 00 
  8004203c95:	ff d0                	callq  *%rax
  8004203c97:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004203c9b:	48 8b 12             	mov    (%rdx),%rdx
  8004203c9e:	48 81 e2 00 f0 ff ff 	and    $0xfffffffffffff000,%rdx
  8004203ca5:	48 39 d0             	cmp    %rdx,%rax
  8004203ca8:	75 4a                	jne    8004203cf4 <page_insert+0x2db>
  8004203caa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203cae:	48 8b 00             	mov    (%rax),%rax
  8004203cb1:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203cb7:	48 89 c2             	mov    %rax,%rdx
  8004203cba:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  8004203cbd:	48 98                	cltq   
  8004203cbf:	48 09 d0             	or     %rdx,%rax
  8004203cc2:	48 83 c8 01          	or     $0x1,%rax
  8004203cc6:	48 89 c2             	mov    %rax,%rdx
  8004203cc9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203ccd:	48 89 10             	mov    %rdx,(%rax)
  8004203cd0:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203cd4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203cd8:	48 89 d6             	mov    %rdx,%rsi
  8004203cdb:	48 89 c7             	mov    %rax,%rdi
  8004203cde:	48 b8 87 3e 20 04 80 	movabs $0x8004203e87,%rax
  8004203ce5:	00 00 00 
  8004203ce8:	ff d0                	callq  *%rax
  8004203cea:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203cef:	e9 93 00 00 00       	jmpq   8004203d87 <page_insert+0x36e>
  8004203cf4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203cf8:	48 8b 00             	mov    (%rax),%rax
  8004203cfb:	83 e0 01             	and    $0x1,%eax
  8004203cfe:	48 85 c0             	test   %rax,%rax
  8004203d01:	74 1a                	je     8004203d1d <page_insert+0x304>
  8004203d03:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203d07:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203d0b:	48 89 d6             	mov    %rdx,%rsi
  8004203d0e:	48 89 c7             	mov    %rax,%rdi
  8004203d11:	48 b8 14 3e 20 04 80 	movabs $0x8004203e14,%rax
  8004203d18:	00 00 00 
  8004203d1b:	ff d0                	callq  *%rax
  8004203d1d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203d21:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004203d25:	8d 50 01             	lea    0x1(%rax),%edx
  8004203d28:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203d2c:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004203d30:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203d34:	48 89 c7             	mov    %rax,%rdi
  8004203d37:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  8004203d3e:	00 00 00 
  8004203d41:	ff d0                	callq  *%rax
  8004203d43:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203d46:	48 63 d2             	movslq %edx,%rdx
  8004203d49:	48 09 d0             	or     %rdx,%rax
  8004203d4c:	48 83 c8 01          	or     $0x1,%rax
  8004203d50:	48 89 c2             	mov    %rax,%rdx
  8004203d53:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203d57:	48 89 10             	mov    %rdx,(%rax)
  8004203d5a:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203d5e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203d62:	48 89 d6             	mov    %rdx,%rsi
  8004203d65:	48 89 c7             	mov    %rax,%rdi
  8004203d68:	48 b8 87 3e 20 04 80 	movabs $0x8004203e87,%rax
  8004203d6f:	00 00 00 
  8004203d72:	ff d0                	callq  *%rax
  8004203d74:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203d79:	eb 0c                	jmp    8004203d87 <page_insert+0x36e>
  8004203d7b:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004203d80:	eb 05                	jmp    8004203d87 <page_insert+0x36e>
  8004203d82:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004203d87:	c9                   	leaveq 
  8004203d88:	c3                   	retq   

0000008004203d89 <page_lookup>:
  8004203d89:	55                   	push   %rbp
  8004203d8a:	48 89 e5             	mov    %rsp,%rbp
  8004203d8d:	48 83 ec 30          	sub    $0x30,%rsp
  8004203d91:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004203d95:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004203d99:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004203d9d:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004203da2:	74 69                	je     8004203e0d <page_lookup+0x84>
  8004203da4:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  8004203da8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203dac:	ba 00 00 00 00       	mov    $0x0,%edx
  8004203db1:	48 89 ce             	mov    %rcx,%rsi
  8004203db4:	48 89 c7             	mov    %rax,%rdi
  8004203db7:	48 b8 1c 30 20 04 80 	movabs $0x800420301c,%rax
  8004203dbe:	00 00 00 
  8004203dc1:	ff d0                	callq  *%rax
  8004203dc3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203dc7:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203dcc:	74 3f                	je     8004203e0d <page_lookup+0x84>
  8004203dce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203dd2:	48 8b 00             	mov    (%rax),%rax
  8004203dd5:	83 e0 01             	and    $0x1,%eax
  8004203dd8:	48 85 c0             	test   %rax,%rax
  8004203ddb:	74 30                	je     8004203e0d <page_lookup+0x84>
  8004203ddd:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004203de2:	74 0b                	je     8004203def <page_lookup+0x66>
  8004203de4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203de8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004203dec:	48 89 10             	mov    %rdx,(%rax)
  8004203def:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203df3:	48 8b 00             	mov    (%rax),%rax
  8004203df6:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203dfc:	48 89 c7             	mov    %rax,%rdi
  8004203dff:	48 b8 4c 1b 20 04 80 	movabs $0x8004201b4c,%rax
  8004203e06:	00 00 00 
  8004203e09:	ff d0                	callq  *%rax
  8004203e0b:	eb 05                	jmp    8004203e12 <page_lookup+0x89>
  8004203e0d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203e12:	c9                   	leaveq 
  8004203e13:	c3                   	retq   

0000008004203e14 <page_remove>:
  8004203e14:	55                   	push   %rbp
  8004203e15:	48 89 e5             	mov    %rsp,%rbp
  8004203e18:	48 83 ec 20          	sub    $0x20,%rsp
  8004203e1c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004203e20:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004203e24:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
  8004203e28:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  8004203e2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203e30:	48 89 ce             	mov    %rcx,%rsi
  8004203e33:	48 89 c7             	mov    %rax,%rdi
  8004203e36:	48 b8 89 3d 20 04 80 	movabs $0x8004203d89,%rax
  8004203e3d:	00 00 00 
  8004203e40:	ff d0                	callq  *%rax
  8004203e42:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203e46:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203e4b:	74 38                	je     8004203e85 <page_remove+0x71>
  8004203e4d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004203e51:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203e55:	48 89 d6             	mov    %rdx,%rsi
  8004203e58:	48 89 c7             	mov    %rax,%rdi
  8004203e5b:	48 b8 87 3e 20 04 80 	movabs $0x8004203e87,%rax
  8004203e62:	00 00 00 
  8004203e65:	ff d0                	callq  *%rax
  8004203e67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203e6b:	48 89 c7             	mov    %rax,%rdi
  8004203e6e:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  8004203e75:	00 00 00 
  8004203e78:	ff d0                	callq  *%rax
  8004203e7a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203e7e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004203e85:	c9                   	leaveq 
  8004203e86:	c3                   	retq   

0000008004203e87 <tlb_invalidate>:
  8004203e87:	55                   	push   %rbp
  8004203e88:	48 89 e5             	mov    %rsp,%rbp
  8004203e8b:	48 83 ec 20          	sub    $0x20,%rsp
  8004203e8f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004203e93:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004203e97:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004203e9c:	75 35                	jne    8004203ed3 <tlb_invalidate+0x4c>
  8004203e9e:	48 b9 57 e9 21 04 80 	movabs $0x800421e957,%rcx
  8004203ea5:	00 00 00 
  8004203ea8:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004203eaf:	00 00 00 
  8004203eb2:	be 72 03 00 00       	mov    $0x372,%esi
  8004203eb7:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004203ebe:	00 00 00 
  8004203ec1:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203ec6:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004203ecd:	00 00 00 
  8004203ed0:	41 ff d0             	callq  *%r8
  8004203ed3:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  8004203eda:	00 00 00 
  8004203edd:	ff d0                	callq  *%rax
  8004203edf:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  8004203ee6:	00 00 00 
  8004203ee9:	48 98                	cltq   
  8004203eeb:	48 c1 e0 03          	shl    $0x3,%rax
  8004203eef:	48 89 c1             	mov    %rax,%rcx
  8004203ef2:	48 c1 e1 04          	shl    $0x4,%rcx
  8004203ef6:	48 01 c8             	add    %rcx,%rax
  8004203ef9:	48 01 d0             	add    %rdx,%rax
  8004203efc:	48 83 c0 08          	add    $0x8,%rax
  8004203f00:	48 8b 00             	mov    (%rax),%rax
  8004203f03:	48 85 c0             	test   %rax,%rax
  8004203f06:	74 3d                	je     8004203f45 <tlb_invalidate+0xbe>
  8004203f08:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  8004203f0f:	00 00 00 
  8004203f12:	ff d0                	callq  *%rax
  8004203f14:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  8004203f1b:	00 00 00 
  8004203f1e:	48 98                	cltq   
  8004203f20:	48 c1 e0 03          	shl    $0x3,%rax
  8004203f24:	48 89 c1             	mov    %rax,%rcx
  8004203f27:	48 c1 e1 04          	shl    $0x4,%rcx
  8004203f2b:	48 01 c8             	add    %rcx,%rax
  8004203f2e:	48 01 d0             	add    %rdx,%rax
  8004203f31:	48 83 c0 08          	add    $0x8,%rax
  8004203f35:	48 8b 00             	mov    (%rax),%rax
  8004203f38:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004203f3f:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004203f43:	75 0f                	jne    8004203f54 <tlb_invalidate+0xcd>
  8004203f45:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203f49:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
}

static __inline void 
invlpg(void *addr)
{
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
  8004203f4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203f51:	0f 01 38             	invlpg (%rax)
  8004203f54:	c9                   	leaveq 
  8004203f55:	c3                   	retq   

0000008004203f56 <mmio_map_region>:
  8004203f56:	55                   	push   %rbp
  8004203f57:	48 89 e5             	mov    %rsp,%rbp
  8004203f5a:	48 83 ec 30          	sub    $0x30,%rsp
  8004203f5e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004203f62:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004203f66:	48 b8 e0 55 23 04 80 	movabs $0x80042355e0,%rax
  8004203f6d:	00 00 00 
  8004203f70:	48 8b 00             	mov    (%rax),%rax
  8004203f73:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203f77:	48 c7 45 f0 00 10 00 	movq   $0x1000,-0x10(%rbp)
  8004203f7e:	00 
  8004203f7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203f83:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004203f87:	48 01 d0             	add    %rdx,%rax
  8004203f8a:	48 83 e8 01          	sub    $0x1,%rax
  8004203f8e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004203f92:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203f96:	ba 00 00 00 00       	mov    $0x0,%edx
  8004203f9b:	48 f7 75 f0          	divq   -0x10(%rbp)
  8004203f9f:	48 89 d0             	mov    %rdx,%rax
  8004203fa2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004203fa6:	48 29 c2             	sub    %rax,%rdx
  8004203fa9:	48 89 d0             	mov    %rdx,%rax
  8004203fac:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004203fb0:	48 b8 e0 55 23 04 80 	movabs $0x80042355e0,%rax
  8004203fb7:	00 00 00 
  8004203fba:	48 8b 10             	mov    (%rax),%rdx
  8004203fbd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004203fc1:	48 01 c2             	add    %rax,%rdx
  8004203fc4:	48 b8 e0 55 23 04 80 	movabs $0x80042355e0,%rax
  8004203fcb:	00 00 00 
  8004203fce:	48 89 10             	mov    %rdx,(%rax)
  8004203fd1:	48 b8 e0 55 23 04 80 	movabs $0x80042355e0,%rax
  8004203fd8:	00 00 00 
  8004203fdb:	48 8b 10             	mov    (%rax),%rdx
  8004203fde:	48 b8 ff ff df 03 80 	movabs $0x8003dfffff,%rax
  8004203fe5:	00 00 00 
  8004203fe8:	48 39 c2             	cmp    %rax,%rdx
  8004203feb:	76 2a                	jbe    8004204017 <mmio_map_region+0xc1>
  8004203fed:	48 ba 68 e9 21 04 80 	movabs $0x800421e968,%rdx
  8004203ff4:	00 00 00 
  8004203ff7:	be a2 03 00 00       	mov    $0x3a2,%esi
  8004203ffc:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004204003:	00 00 00 
  8004204006:	b8 00 00 00 00       	mov    $0x0,%eax
  800420400b:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  8004204012:	00 00 00 
  8004204015:	ff d1                	callq  *%rcx
  8004204017:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  800420401e:	00 00 00 
  8004204021:	48 8b 00             	mov    (%rax),%rax
  8004204024:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004204028:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420402c:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  8004204030:	41 b8 1b 00 00 00    	mov    $0x1b,%r8d
  8004204036:	48 89 c7             	mov    %rax,%rdi
  8004204039:	48 b8 36 37 20 04 80 	movabs $0x8004203736,%rax
  8004204040:	00 00 00 
  8004204043:	ff d0                	callq  *%rax
  8004204045:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204049:	c9                   	leaveq 
  800420404a:	c3                   	retq   

000000800420404b <user_mem_check>:
  800420404b:	55                   	push   %rbp
  800420404c:	48 89 e5             	mov    %rsp,%rbp
  800420404f:	48 83 ec 40          	sub    $0x40,%rsp
  8004204053:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004204057:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800420405b:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  800420405f:	89 4d c4             	mov    %ecx,-0x3c(%rbp)
  8004204062:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004204066:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420406a:	48 01 d0             	add    %rdx,%rax
  800420406d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204071:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004204075:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  800420407c:	00 00 00 
  800420407f:	48 39 c2             	cmp    %rax,%rdx
  8004204082:	77 0a                	ja     800420408e <user_mem_check+0x43>
  8004204084:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004204088:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  800420408c:	76 1b                	jbe    80042040a9 <user_mem_check+0x5e>
  800420408e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004204092:	48 b8 40 f2 4d 04 80 	movabs $0x80044df240,%rax
  8004204099:	00 00 00 
  800420409c:	48 89 10             	mov    %rdx,(%rax)
  800420409f:	b8 fa ff ff ff       	mov    $0xfffffffa,%eax
  80042040a4:	e9 c0 00 00 00       	jmpq   8004204169 <user_mem_check+0x11e>
  80042040a9:	e9 a8 00 00 00       	jmpq   8004204156 <user_mem_check+0x10b>
  80042040ae:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042040b2:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  80042040b9:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  80042040bd:	ba 00 00 00 00       	mov    $0x0,%edx
  80042040c2:	48 89 ce             	mov    %rcx,%rsi
  80042040c5:	48 89 c7             	mov    %rax,%rdi
  80042040c8:	48 b8 1c 30 20 04 80 	movabs $0x800420301c,%rax
  80042040cf:	00 00 00 
  80042040d2:	ff d0                	callq  *%rax
  80042040d4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042040d8:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  80042040dd:	74 1f                	je     80042040fe <user_mem_check+0xb3>
  80042040df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042040e3:	48 8b 10             	mov    (%rax),%rdx
  80042040e6:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  80042040e9:	83 c8 01             	or     $0x1,%eax
  80042040ec:	48 98                	cltq   
  80042040ee:	48 21 c2             	and    %rax,%rdx
  80042040f1:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  80042040f4:	83 c8 01             	or     $0x1,%eax
  80042040f7:	48 98                	cltq   
  80042040f9:	48 39 c2             	cmp    %rax,%rdx
  80042040fc:	74 18                	je     8004204116 <user_mem_check+0xcb>
  80042040fe:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004204102:	48 b8 40 f2 4d 04 80 	movabs $0x80044df240,%rax
  8004204109:	00 00 00 
  800420410c:	48 89 10             	mov    %rdx,(%rax)
  800420410f:	b8 fa ff ff ff       	mov    $0xfffffffa,%eax
  8004204114:	eb 53                	jmp    8004204169 <user_mem_check+0x11e>
  8004204116:	48 c7 45 e8 00 10 00 	movq   $0x1000,-0x18(%rbp)
  800420411d:	00 
  800420411e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004204122:	48 83 c0 01          	add    $0x1,%rax
  8004204126:	48 89 c2             	mov    %rax,%rdx
  8004204129:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420412d:	48 01 d0             	add    %rdx,%rax
  8004204130:	48 83 e8 01          	sub    $0x1,%rax
  8004204134:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204138:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420413c:	ba 00 00 00 00       	mov    $0x0,%edx
  8004204141:	48 f7 75 e8          	divq   -0x18(%rbp)
  8004204145:	48 89 d0             	mov    %rdx,%rax
  8004204148:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420414c:	48 29 c2             	sub    %rax,%rdx
  800420414f:	48 89 d0             	mov    %rdx,%rax
  8004204152:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004204156:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420415a:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  800420415e:	0f 82 4a ff ff ff    	jb     80042040ae <user_mem_check+0x63>
  8004204164:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204169:	c9                   	leaveq 
  800420416a:	c3                   	retq   

000000800420416b <user_mem_assert>:
  800420416b:	55                   	push   %rbp
  800420416c:	48 89 e5             	mov    %rsp,%rbp
  800420416f:	48 83 ec 20          	sub    $0x20,%rsp
  8004204173:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004204177:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420417b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800420417f:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
  8004204182:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004204185:	83 c8 04             	or     $0x4,%eax
  8004204188:	89 c1                	mov    %eax,%ecx
  800420418a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420418e:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  8004204192:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204196:	48 89 c7             	mov    %rax,%rdi
  8004204199:	48 b8 4b 40 20 04 80 	movabs $0x800420404b,%rax
  80042041a0:	00 00 00 
  80042041a3:	ff d0                	callq  *%rax
  80042041a5:	85 c0                	test   %eax,%eax
  80042041a7:	79 47                	jns    80042041f0 <user_mem_assert+0x85>
  80042041a9:	48 b8 40 f2 4d 04 80 	movabs $0x80044df240,%rax
  80042041b0:	00 00 00 
  80042041b3:	48 8b 10             	mov    (%rax),%rdx
  80042041b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042041ba:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  80042041c0:	89 c6                	mov    %eax,%esi
  80042041c2:	48 bf 88 e9 21 04 80 	movabs $0x800421e988,%rdi
  80042041c9:	00 00 00 
  80042041cc:	b8 00 00 00 00       	mov    $0x0,%eax
  80042041d1:	48 b9 83 9c 20 04 80 	movabs $0x8004209c83,%rcx
  80042041d8:	00 00 00 
  80042041db:	ff d1                	callq  *%rcx
  80042041dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042041e1:	48 89 c7             	mov    %rax,%rdi
  80042041e4:	48 b8 1f 95 20 04 80 	movabs $0x800420951f,%rax
  80042041eb:	00 00 00 
  80042041ee:	ff d0                	callq  *%rax
  80042041f0:	c9                   	leaveq 
  80042041f1:	c3                   	retq   

00000080042041f2 <check_page_free_list>:
  80042041f2:	55                   	push   %rbp
  80042041f3:	48 89 e5             	mov    %rsp,%rbp
  80042041f6:	48 83 ec 60          	sub    $0x60,%rsp
  80042041fa:	89 f8                	mov    %edi,%eax
  80042041fc:	88 45 ac             	mov    %al,-0x54(%rbp)
  80042041ff:	80 7d ac 00          	cmpb   $0x0,-0x54(%rbp)
  8004204203:	74 07                	je     800420420c <check_page_free_list+0x1a>
  8004204205:	b8 01 00 00 00       	mov    $0x1,%eax
  800420420a:	eb 05                	jmp    8004204211 <check_page_free_list+0x1f>
  800420420c:	b8 00 02 00 00       	mov    $0x200,%eax
  8004204211:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004204214:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420421b:	00 
  800420421c:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004204223:	00 
  8004204224:	48 b8 38 f2 4d 04 80 	movabs $0x80044df238,%rax
  800420422b:	00 00 00 
  800420422e:	48 8b 00             	mov    (%rax),%rax
  8004204231:	48 85 c0             	test   %rax,%rax
  8004204234:	75 2a                	jne    8004204260 <check_page_free_list+0x6e>
  8004204236:	48 ba c0 e9 21 04 80 	movabs $0x800421e9c0,%rdx
  800420423d:	00 00 00 
  8004204240:	be fd 03 00 00       	mov    $0x3fd,%esi
  8004204245:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  800420424c:	00 00 00 
  800420424f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204254:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  800420425b:	00 00 00 
  800420425e:	ff d1                	callq  *%rcx
  8004204260:	80 7d ac 00          	cmpb   $0x0,-0x54(%rbp)
  8004204264:	0f 84 a9 00 00 00    	je     8004204313 <check_page_free_list+0x121>
  800420426a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  800420426e:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004204272:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  8004204276:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  800420427a:	48 b8 38 f2 4d 04 80 	movabs $0x80044df238,%rax
  8004204281:	00 00 00 
  8004204284:	48 8b 00             	mov    (%rax),%rax
  8004204287:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420428b:	eb 58                	jmp    80042042e5 <check_page_free_list+0xf3>
  800420428d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204291:	48 89 c7             	mov    %rax,%rdi
  8004204294:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  800420429b:	00 00 00 
  800420429e:	ff d0                	callq  *%rax
  80042042a0:	48 c1 e8 15          	shr    $0x15,%rax
  80042042a4:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042042a9:	48 89 c2             	mov    %rax,%rdx
  80042042ac:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042042af:	48 39 c2             	cmp    %rax,%rdx
  80042042b2:	0f 93 c0             	setae  %al
  80042042b5:	0f b6 c0             	movzbl %al,%eax
  80042042b8:	89 45 e0             	mov    %eax,-0x20(%rbp)
  80042042bb:	8b 45 e0             	mov    -0x20(%rbp),%eax
  80042042be:	48 98                	cltq   
  80042042c0:	48 8b 44 c5 b0       	mov    -0x50(%rbp,%rax,8),%rax
  80042042c5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042042c9:	48 89 10             	mov    %rdx,(%rax)
  80042042cc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042042d0:	8b 45 e0             	mov    -0x20(%rbp),%eax
  80042042d3:	48 98                	cltq   
  80042042d5:	48 89 54 c5 b0       	mov    %rdx,-0x50(%rbp,%rax,8)
  80042042da:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042042de:	48 8b 00             	mov    (%rax),%rax
  80042042e1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042042e5:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042042ea:	75 a1                	jne    800420428d <check_page_free_list+0x9b>
  80042042ec:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042042f0:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  80042042f7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042042fb:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042042ff:	48 89 10             	mov    %rdx,(%rax)
  8004204302:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004204306:	48 b8 38 f2 4d 04 80 	movabs $0x80044df238,%rax
  800420430d:	00 00 00 
  8004204310:	48 89 10             	mov    %rdx,(%rax)
  8004204313:	48 b8 38 f2 4d 04 80 	movabs $0x80044df238,%rax
  800420431a:	00 00 00 
  800420431d:	48 8b 00             	mov    (%rax),%rax
  8004204320:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204324:	eb 5e                	jmp    8004204384 <check_page_free_list+0x192>
  8004204326:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420432a:	48 89 c7             	mov    %rax,%rdi
  800420432d:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  8004204334:	00 00 00 
  8004204337:	ff d0                	callq  *%rax
  8004204339:	48 c1 e8 15          	shr    $0x15,%rax
  800420433d:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004204342:	48 89 c2             	mov    %rax,%rdx
  8004204345:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004204348:	48 39 c2             	cmp    %rax,%rdx
  800420434b:	73 2c                	jae    8004204379 <check_page_free_list+0x187>
  800420434d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204351:	48 89 c7             	mov    %rax,%rdi
  8004204354:	48 b8 bd 1b 20 04 80 	movabs $0x8004201bbd,%rax
  800420435b:	00 00 00 
  800420435e:	ff d0                	callq  *%rax
  8004204360:	ba 80 00 00 00       	mov    $0x80,%edx
  8004204365:	be 97 00 00 00       	mov    $0x97,%esi
  800420436a:	48 89 c7             	mov    %rax,%rdi
  800420436d:	48 b8 37 0e 21 04 80 	movabs $0x8004210e37,%rax
  8004204374:	00 00 00 
  8004204377:	ff d0                	callq  *%rax
  8004204379:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420437d:	48 8b 00             	mov    (%rax),%rax
  8004204380:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204384:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204389:	75 9b                	jne    8004204326 <check_page_free_list+0x134>
  800420438b:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204390:	48 b8 e6 24 20 04 80 	movabs $0x80042024e6,%rax
  8004204397:	00 00 00 
  800420439a:	ff d0                	callq  *%rax
  800420439c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042043a0:	48 b8 38 f2 4d 04 80 	movabs $0x80044df238,%rax
  80042043a7:	00 00 00 
  80042043aa:	48 8b 00             	mov    (%rax),%rax
  80042043ad:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042043b1:	e9 20 03 00 00       	jmpq   80042046d6 <check_page_free_list+0x4e4>
  80042043b6:	48 b8 00 e6 6d 04 80 	movabs $0x80046de600,%rax
  80042043bd:	00 00 00 
  80042043c0:	48 8b 00             	mov    (%rax),%rax
  80042043c3:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  80042043c7:	73 35                	jae    80042043fe <check_page_free_list+0x20c>
  80042043c9:	48 b9 e4 e9 21 04 80 	movabs $0x800421e9e4,%rcx
  80042043d0:	00 00 00 
  80042043d3:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  80042043da:	00 00 00 
  80042043dd:	be 17 04 00 00       	mov    $0x417,%esi
  80042043e2:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  80042043e9:	00 00 00 
  80042043ec:	b8 00 00 00 00       	mov    $0x0,%eax
  80042043f1:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042043f8:	00 00 00 
  80042043fb:	41 ff d0             	callq  *%r8
  80042043fe:	48 b8 00 e6 6d 04 80 	movabs $0x80046de600,%rax
  8004204405:	00 00 00 
  8004204408:	48 8b 10             	mov    (%rax),%rdx
  800420440b:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  8004204412:	00 00 00 
  8004204415:	48 8b 00             	mov    (%rax),%rax
  8004204418:	48 c1 e0 04          	shl    $0x4,%rax
  800420441c:	48 01 d0             	add    %rdx,%rax
  800420441f:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204423:	77 35                	ja     800420445a <check_page_free_list+0x268>
  8004204425:	48 b9 f0 e9 21 04 80 	movabs $0x800421e9f0,%rcx
  800420442c:	00 00 00 
  800420442f:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004204436:	00 00 00 
  8004204439:	be 18 04 00 00       	mov    $0x418,%esi
  800420443e:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004204445:	00 00 00 
  8004204448:	b8 00 00 00 00       	mov    $0x0,%eax
  800420444d:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204454:	00 00 00 
  8004204457:	41 ff d0             	callq  *%r8
  800420445a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420445e:	48 b8 00 e6 6d 04 80 	movabs $0x80046de600,%rax
  8004204465:	00 00 00 
  8004204468:	48 8b 00             	mov    (%rax),%rax
  800420446b:	48 29 c2             	sub    %rax,%rdx
  800420446e:	48 89 d0             	mov    %rdx,%rax
  8004204471:	83 e0 0f             	and    $0xf,%eax
  8004204474:	48 85 c0             	test   %rax,%rax
  8004204477:	74 35                	je     80042044ae <check_page_free_list+0x2bc>
  8004204479:	48 b9 08 ea 21 04 80 	movabs $0x800421ea08,%rcx
  8004204480:	00 00 00 
  8004204483:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  800420448a:	00 00 00 
  800420448d:	be 19 04 00 00       	mov    $0x419,%esi
  8004204492:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004204499:	00 00 00 
  800420449c:	b8 00 00 00 00       	mov    $0x0,%eax
  80042044a1:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042044a8:	00 00 00 
  80042044ab:	41 ff d0             	callq  *%r8
  80042044ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042044b2:	48 89 c7             	mov    %rax,%rdi
  80042044b5:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  80042044bc:	00 00 00 
  80042044bf:	ff d0                	callq  *%rax
  80042044c1:	48 85 c0             	test   %rax,%rax
  80042044c4:	75 35                	jne    80042044fb <check_page_free_list+0x309>
  80042044c6:	48 b9 3a ea 21 04 80 	movabs $0x800421ea3a,%rcx
  80042044cd:	00 00 00 
  80042044d0:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  80042044d7:	00 00 00 
  80042044da:	be 1c 04 00 00       	mov    $0x41c,%esi
  80042044df:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  80042044e6:	00 00 00 
  80042044e9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042044ee:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042044f5:	00 00 00 
  80042044f8:	41 ff d0             	callq  *%r8
  80042044fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042044ff:	48 89 c7             	mov    %rax,%rdi
  8004204502:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  8004204509:	00 00 00 
  800420450c:	ff d0                	callq  *%rax
  800420450e:	48 3d 00 00 0a 00    	cmp    $0xa0000,%rax
  8004204514:	75 35                	jne    800420454b <check_page_free_list+0x359>
  8004204516:	48 b9 4b ea 21 04 80 	movabs $0x800421ea4b,%rcx
  800420451d:	00 00 00 
  8004204520:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004204527:	00 00 00 
  800420452a:	be 1d 04 00 00       	mov    $0x41d,%esi
  800420452f:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004204536:	00 00 00 
  8004204539:	b8 00 00 00 00       	mov    $0x0,%eax
  800420453e:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204545:	00 00 00 
  8004204548:	41 ff d0             	callq  *%r8
  800420454b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420454f:	48 89 c7             	mov    %rax,%rdi
  8004204552:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  8004204559:	00 00 00 
  800420455c:	ff d0                	callq  *%rax
  800420455e:	48 3d 00 f0 0f 00    	cmp    $0xff000,%rax
  8004204564:	75 35                	jne    800420459b <check_page_free_list+0x3a9>
  8004204566:	48 b9 68 ea 21 04 80 	movabs $0x800421ea68,%rcx
  800420456d:	00 00 00 
  8004204570:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004204577:	00 00 00 
  800420457a:	be 1e 04 00 00       	mov    $0x41e,%esi
  800420457f:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004204586:	00 00 00 
  8004204589:	b8 00 00 00 00       	mov    $0x0,%eax
  800420458e:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204595:	00 00 00 
  8004204598:	41 ff d0             	callq  *%r8
  800420459b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420459f:	48 89 c7             	mov    %rax,%rdi
  80042045a2:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  80042045a9:	00 00 00 
  80042045ac:	ff d0                	callq  *%rax
  80042045ae:	48 3d 00 00 10 00    	cmp    $0x100000,%rax
  80042045b4:	75 35                	jne    80042045eb <check_page_free_list+0x3f9>
  80042045b6:	48 b9 8b ea 21 04 80 	movabs $0x800421ea8b,%rcx
  80042045bd:	00 00 00 
  80042045c0:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  80042045c7:	00 00 00 
  80042045ca:	be 1f 04 00 00       	mov    $0x41f,%esi
  80042045cf:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  80042045d6:	00 00 00 
  80042045d9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042045de:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042045e5:	00 00 00 
  80042045e8:	41 ff d0             	callq  *%r8
  80042045eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042045ef:	48 89 c7             	mov    %rax,%rdi
  80042045f2:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  80042045f9:	00 00 00 
  80042045fc:	ff d0                	callq  *%rax
  80042045fe:	48 3d ff ff 0f 00    	cmp    $0xfffff,%rax
  8004204604:	76 4e                	jbe    8004204654 <check_page_free_list+0x462>
  8004204606:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420460a:	48 89 c7             	mov    %rax,%rdi
  800420460d:	48 b8 bd 1b 20 04 80 	movabs $0x8004201bbd,%rax
  8004204614:	00 00 00 
  8004204617:	ff d0                	callq  *%rax
  8004204619:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  800420461d:	73 35                	jae    8004204654 <check_page_free_list+0x462>
  800420461f:	48 b9 a8 ea 21 04 80 	movabs $0x800421eaa8,%rcx
  8004204626:	00 00 00 
  8004204629:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004204630:	00 00 00 
  8004204633:	be 20 04 00 00       	mov    $0x420,%esi
  8004204638:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  800420463f:	00 00 00 
  8004204642:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204647:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420464e:	00 00 00 
  8004204651:	41 ff d0             	callq  *%r8
  8004204654:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204658:	48 89 c7             	mov    %rax,%rdi
  800420465b:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  8004204662:	00 00 00 
  8004204665:	ff d0                	callq  *%rax
  8004204667:	48 3d 00 70 00 00    	cmp    $0x7000,%rax
  800420466d:	75 35                	jne    80042046a4 <check_page_free_list+0x4b2>
  800420466f:	48 b9 ed ea 21 04 80 	movabs $0x800421eaed,%rcx
  8004204676:	00 00 00 
  8004204679:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004204680:	00 00 00 
  8004204683:	be 23 04 00 00       	mov    $0x423,%esi
  8004204688:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  800420468f:	00 00 00 
  8004204692:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204697:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420469e:	00 00 00 
  80042046a1:	41 ff d0             	callq  *%r8
  80042046a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042046a8:	48 89 c7             	mov    %rax,%rdi
  80042046ab:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  80042046b2:	00 00 00 
  80042046b5:	ff d0                	callq  *%rax
  80042046b7:	48 3d ff ff 0f 00    	cmp    $0xfffff,%rax
  80042046bd:	77 07                	ja     80042046c6 <check_page_free_list+0x4d4>
  80042046bf:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  80042046c4:	eb 05                	jmp    80042046cb <check_page_free_list+0x4d9>
  80042046c6:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  80042046cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042046cf:	48 8b 00             	mov    (%rax),%rax
  80042046d2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042046d6:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042046db:	0f 85 d5 fc ff ff    	jne    80042043b6 <check_page_free_list+0x1c4>
  80042046e1:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042046e6:	75 35                	jne    800420471d <check_page_free_list+0x52b>
  80042046e8:	48 b9 0a eb 21 04 80 	movabs $0x800421eb0a,%rcx
  80042046ef:	00 00 00 
  80042046f2:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  80042046f9:	00 00 00 
  80042046fc:	be 2c 04 00 00       	mov    $0x42c,%esi
  8004204701:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004204708:	00 00 00 
  800420470b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204710:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204717:	00 00 00 
  800420471a:	41 ff d0             	callq  *%r8
  800420471d:	c9                   	leaveq 
  800420471e:	c3                   	retq   

000000800420471f <check_page_alloc>:
  800420471f:	55                   	push   %rbp
  8004204720:	48 89 e5             	mov    %rsp,%rbp
  8004204723:	48 83 ec 40          	sub    $0x40,%rsp
  8004204727:	48 b8 38 f2 4d 04 80 	movabs $0x80044df238,%rax
  800420472e:	00 00 00 
  8004204731:	48 8b 00             	mov    (%rax),%rax
  8004204734:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204738:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  800420473f:	eb 37                	jmp    8004204778 <check_page_alloc+0x59>
  8004204741:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204745:	48 89 c7             	mov    %rax,%rdi
  8004204748:	48 b8 bd 1b 20 04 80 	movabs $0x8004201bbd,%rax
  800420474f:	00 00 00 
  8004204752:	ff d0                	callq  *%rax
  8004204754:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004204759:	be 97 00 00 00       	mov    $0x97,%esi
  800420475e:	48 89 c7             	mov    %rax,%rdi
  8004204761:	48 b8 37 0e 21 04 80 	movabs $0x8004210e37,%rax
  8004204768:	00 00 00 
  800420476b:	ff d0                	callq  *%rax
  800420476d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204771:	48 8b 00             	mov    (%rax),%rax
  8004204774:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204778:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800420477d:	75 c2                	jne    8004204741 <check_page_alloc+0x22>
  800420477f:	48 b8 38 f2 4d 04 80 	movabs $0x80044df238,%rax
  8004204786:	00 00 00 
  8004204789:	48 8b 00             	mov    (%rax),%rax
  800420478c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204790:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  8004204797:	e9 ec 01 00 00       	jmpq   8004204988 <check_page_alloc+0x269>
  800420479c:	48 b8 00 e6 6d 04 80 	movabs $0x80046de600,%rax
  80042047a3:	00 00 00 
  80042047a6:	48 8b 00             	mov    (%rax),%rax
  80042047a9:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  80042047ad:	73 35                	jae    80042047e4 <check_page_alloc+0xc5>
  80042047af:	48 b9 1b eb 21 04 80 	movabs $0x800421eb1b,%rcx
  80042047b6:	00 00 00 
  80042047b9:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  80042047c0:	00 00 00 
  80042047c3:	be 46 04 00 00       	mov    $0x446,%esi
  80042047c8:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  80042047cf:	00 00 00 
  80042047d2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042047d7:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042047de:	00 00 00 
  80042047e1:	41 ff d0             	callq  *%r8
  80042047e4:	48 b8 00 e6 6d 04 80 	movabs $0x80046de600,%rax
  80042047eb:	00 00 00 
  80042047ee:	48 8b 10             	mov    (%rax),%rdx
  80042047f1:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  80042047f8:	00 00 00 
  80042047fb:	48 8b 00             	mov    (%rax),%rax
  80042047fe:	48 c1 e0 04          	shl    $0x4,%rax
  8004204802:	48 01 d0             	add    %rdx,%rax
  8004204805:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204809:	77 35                	ja     8004204840 <check_page_alloc+0x121>
  800420480b:	48 b9 28 eb 21 04 80 	movabs $0x800421eb28,%rcx
  8004204812:	00 00 00 
  8004204815:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  800420481c:	00 00 00 
  800420481f:	be 47 04 00 00       	mov    $0x447,%esi
  8004204824:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  800420482b:	00 00 00 
  800420482e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204833:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420483a:	00 00 00 
  800420483d:	41 ff d0             	callq  *%r8
  8004204840:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204844:	48 89 c7             	mov    %rax,%rdi
  8004204847:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  800420484e:	00 00 00 
  8004204851:	ff d0                	callq  *%rax
  8004204853:	48 85 c0             	test   %rax,%rax
  8004204856:	75 35                	jne    800420488d <check_page_alloc+0x16e>
  8004204858:	48 b9 3d eb 21 04 80 	movabs $0x800421eb3d,%rcx
  800420485f:	00 00 00 
  8004204862:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004204869:	00 00 00 
  800420486c:	be 4a 04 00 00       	mov    $0x44a,%esi
  8004204871:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004204878:	00 00 00 
  800420487b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204880:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204887:	00 00 00 
  800420488a:	41 ff d0             	callq  *%r8
  800420488d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204891:	48 89 c7             	mov    %rax,%rdi
  8004204894:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  800420489b:	00 00 00 
  800420489e:	ff d0                	callq  *%rax
  80042048a0:	48 3d 00 00 0a 00    	cmp    $0xa0000,%rax
  80042048a6:	75 35                	jne    80042048dd <check_page_alloc+0x1be>
  80042048a8:	48 b9 4f eb 21 04 80 	movabs $0x800421eb4f,%rcx
  80042048af:	00 00 00 
  80042048b2:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  80042048b9:	00 00 00 
  80042048bc:	be 4b 04 00 00       	mov    $0x44b,%esi
  80042048c1:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  80042048c8:	00 00 00 
  80042048cb:	b8 00 00 00 00       	mov    $0x0,%eax
  80042048d0:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042048d7:	00 00 00 
  80042048da:	41 ff d0             	callq  *%r8
  80042048dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042048e1:	48 89 c7             	mov    %rax,%rdi
  80042048e4:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  80042048eb:	00 00 00 
  80042048ee:	ff d0                	callq  *%rax
  80042048f0:	48 3d 00 f0 0f 00    	cmp    $0xff000,%rax
  80042048f6:	75 35                	jne    800420492d <check_page_alloc+0x20e>
  80042048f8:	48 b9 70 eb 21 04 80 	movabs $0x800421eb70,%rcx
  80042048ff:	00 00 00 
  8004204902:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004204909:	00 00 00 
  800420490c:	be 4c 04 00 00       	mov    $0x44c,%esi
  8004204911:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004204918:	00 00 00 
  800420491b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204920:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204927:	00 00 00 
  800420492a:	41 ff d0             	callq  *%r8
  800420492d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204931:	48 89 c7             	mov    %rax,%rdi
  8004204934:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  800420493b:	00 00 00 
  800420493e:	ff d0                	callq  *%rax
  8004204940:	48 3d 00 00 10 00    	cmp    $0x100000,%rax
  8004204946:	75 35                	jne    800420497d <check_page_alloc+0x25e>
  8004204948:	48 b9 94 eb 21 04 80 	movabs $0x800421eb94,%rcx
  800420494f:	00 00 00 
  8004204952:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004204959:	00 00 00 
  800420495c:	be 4d 04 00 00       	mov    $0x44d,%esi
  8004204961:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004204968:	00 00 00 
  800420496b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204970:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204977:	00 00 00 
  800420497a:	41 ff d0             	callq  *%r8
  800420497d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204981:	48 8b 00             	mov    (%rax),%rax
  8004204984:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204988:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800420498d:	0f 85 09 fe ff ff    	jne    800420479c <check_page_alloc+0x7d>
  8004204993:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  800420499a:	00 
  800420499b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420499f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042049a3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042049a7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042049ab:	bf 00 00 00 00       	mov    $0x0,%edi
  80042049b0:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  80042049b7:	00 00 00 
  80042049ba:	ff d0                	callq  *%rax
  80042049bc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042049c0:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042049c5:	75 35                	jne    80042049fc <check_page_alloc+0x2dd>
  80042049c7:	48 b9 af eb 21 04 80 	movabs $0x800421ebaf,%rcx
  80042049ce:	00 00 00 
  80042049d1:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  80042049d8:	00 00 00 
  80042049db:	be 51 04 00 00       	mov    $0x451,%esi
  80042049e0:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  80042049e7:	00 00 00 
  80042049ea:	b8 00 00 00 00       	mov    $0x0,%eax
  80042049ef:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042049f6:	00 00 00 
  80042049f9:	41 ff d0             	callq  *%r8
  80042049fc:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204a01:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  8004204a08:	00 00 00 
  8004204a0b:	ff d0                	callq  *%rax
  8004204a0d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204a11:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204a16:	75 35                	jne    8004204a4d <check_page_alloc+0x32e>
  8004204a18:	48 b9 c5 eb 21 04 80 	movabs $0x800421ebc5,%rcx
  8004204a1f:	00 00 00 
  8004204a22:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004204a29:	00 00 00 
  8004204a2c:	be 52 04 00 00       	mov    $0x452,%esi
  8004204a31:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004204a38:	00 00 00 
  8004204a3b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204a40:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204a47:	00 00 00 
  8004204a4a:	41 ff d0             	callq  *%r8
  8004204a4d:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204a52:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  8004204a59:	00 00 00 
  8004204a5c:	ff d0                	callq  *%rax
  8004204a5e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004204a62:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204a67:	75 35                	jne    8004204a9e <check_page_alloc+0x37f>
  8004204a69:	48 b9 db eb 21 04 80 	movabs $0x800421ebdb,%rcx
  8004204a70:	00 00 00 
  8004204a73:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004204a7a:	00 00 00 
  8004204a7d:	be 53 04 00 00       	mov    $0x453,%esi
  8004204a82:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004204a89:	00 00 00 
  8004204a8c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204a91:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204a98:	00 00 00 
  8004204a9b:	41 ff d0             	callq  *%r8
  8004204a9e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204aa3:	75 35                	jne    8004204ada <check_page_alloc+0x3bb>
  8004204aa5:	48 b9 f1 eb 21 04 80 	movabs $0x800421ebf1,%rcx
  8004204aac:	00 00 00 
  8004204aaf:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004204ab6:	00 00 00 
  8004204ab9:	be 54 04 00 00       	mov    $0x454,%esi
  8004204abe:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004204ac5:	00 00 00 
  8004204ac8:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204acd:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204ad4:	00 00 00 
  8004204ad7:	41 ff d0             	callq  *%r8
  8004204ada:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204adf:	74 0a                	je     8004204aeb <check_page_alloc+0x3cc>
  8004204ae1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204ae5:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204ae9:	75 35                	jne    8004204b20 <check_page_alloc+0x401>
  8004204aeb:	48 b9 f5 eb 21 04 80 	movabs $0x800421ebf5,%rcx
  8004204af2:	00 00 00 
  8004204af5:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004204afc:	00 00 00 
  8004204aff:	be 55 04 00 00       	mov    $0x455,%esi
  8004204b04:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004204b0b:	00 00 00 
  8004204b0e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204b13:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204b1a:	00 00 00 
  8004204b1d:	41 ff d0             	callq  *%r8
  8004204b20:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204b25:	74 14                	je     8004204b3b <check_page_alloc+0x41c>
  8004204b27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204b2b:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004204b2f:	74 0a                	je     8004204b3b <check_page_alloc+0x41c>
  8004204b31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204b35:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204b39:	75 35                	jne    8004204b70 <check_page_alloc+0x451>
  8004204b3b:	48 b9 08 ec 21 04 80 	movabs $0x800421ec08,%rcx
  8004204b42:	00 00 00 
  8004204b45:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004204b4c:	00 00 00 
  8004204b4f:	be 56 04 00 00       	mov    $0x456,%esi
  8004204b54:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004204b5b:	00 00 00 
  8004204b5e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204b63:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204b6a:	00 00 00 
  8004204b6d:	41 ff d0             	callq  *%r8
  8004204b70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204b74:	48 89 c7             	mov    %rax,%rdi
  8004204b77:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  8004204b7e:	00 00 00 
  8004204b81:	ff d0                	callq  *%rax
  8004204b83:	48 ba f8 e5 6d 04 80 	movabs $0x80046de5f8,%rdx
  8004204b8a:	00 00 00 
  8004204b8d:	48 8b 12             	mov    (%rdx),%rdx
  8004204b90:	48 c1 e2 0c          	shl    $0xc,%rdx
  8004204b94:	48 39 d0             	cmp    %rdx,%rax
  8004204b97:	72 35                	jb     8004204bce <check_page_alloc+0x4af>
  8004204b99:	48 b9 28 ec 21 04 80 	movabs $0x800421ec28,%rcx
  8004204ba0:	00 00 00 
  8004204ba3:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004204baa:	00 00 00 
  8004204bad:	be 57 04 00 00       	mov    $0x457,%esi
  8004204bb2:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004204bb9:	00 00 00 
  8004204bbc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204bc1:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204bc8:	00 00 00 
  8004204bcb:	41 ff d0             	callq  *%r8
  8004204bce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204bd2:	48 89 c7             	mov    %rax,%rdi
  8004204bd5:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  8004204bdc:	00 00 00 
  8004204bdf:	ff d0                	callq  *%rax
  8004204be1:	48 ba f8 e5 6d 04 80 	movabs $0x80046de5f8,%rdx
  8004204be8:	00 00 00 
  8004204beb:	48 8b 12             	mov    (%rdx),%rdx
  8004204bee:	48 c1 e2 0c          	shl    $0xc,%rdx
  8004204bf2:	48 39 d0             	cmp    %rdx,%rax
  8004204bf5:	72 35                	jb     8004204c2c <check_page_alloc+0x50d>
  8004204bf7:	48 b9 45 ec 21 04 80 	movabs $0x800421ec45,%rcx
  8004204bfe:	00 00 00 
  8004204c01:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004204c08:	00 00 00 
  8004204c0b:	be 58 04 00 00       	mov    $0x458,%esi
  8004204c10:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004204c17:	00 00 00 
  8004204c1a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204c1f:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204c26:	00 00 00 
  8004204c29:	41 ff d0             	callq  *%r8
  8004204c2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204c30:	48 89 c7             	mov    %rax,%rdi
  8004204c33:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  8004204c3a:	00 00 00 
  8004204c3d:	ff d0                	callq  *%rax
  8004204c3f:	48 ba f8 e5 6d 04 80 	movabs $0x80046de5f8,%rdx
  8004204c46:	00 00 00 
  8004204c49:	48 8b 12             	mov    (%rdx),%rdx
  8004204c4c:	48 c1 e2 0c          	shl    $0xc,%rdx
  8004204c50:	48 39 d0             	cmp    %rdx,%rax
  8004204c53:	72 35                	jb     8004204c8a <check_page_alloc+0x56b>
  8004204c55:	48 b9 62 ec 21 04 80 	movabs $0x800421ec62,%rcx
  8004204c5c:	00 00 00 
  8004204c5f:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004204c66:	00 00 00 
  8004204c69:	be 59 04 00 00       	mov    $0x459,%esi
  8004204c6e:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004204c75:	00 00 00 
  8004204c78:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204c7d:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204c84:	00 00 00 
  8004204c87:	41 ff d0             	callq  *%r8
  8004204c8a:	48 b8 38 f2 4d 04 80 	movabs $0x80044df238,%rax
  8004204c91:	00 00 00 
  8004204c94:	48 8b 00             	mov    (%rax),%rax
  8004204c97:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004204c9b:	48 b8 38 f2 4d 04 80 	movabs $0x80044df238,%rax
  8004204ca2:	00 00 00 
  8004204ca5:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004204cac:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204cb1:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  8004204cb8:	00 00 00 
  8004204cbb:	ff d0                	callq  *%rax
  8004204cbd:	48 85 c0             	test   %rax,%rax
  8004204cc0:	74 35                	je     8004204cf7 <check_page_alloc+0x5d8>
  8004204cc2:	48 b9 7f ec 21 04 80 	movabs $0x800421ec7f,%rcx
  8004204cc9:	00 00 00 
  8004204ccc:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004204cd3:	00 00 00 
  8004204cd6:	be 60 04 00 00       	mov    $0x460,%esi
  8004204cdb:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004204ce2:	00 00 00 
  8004204ce5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204cea:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204cf1:	00 00 00 
  8004204cf4:	41 ff d0             	callq  *%r8
  8004204cf7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204cfb:	48 89 c7             	mov    %rax,%rdi
  8004204cfe:	48 b8 59 2f 20 04 80 	movabs $0x8004202f59,%rax
  8004204d05:	00 00 00 
  8004204d08:	ff d0                	callq  *%rax
  8004204d0a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204d0e:	48 89 c7             	mov    %rax,%rdi
  8004204d11:	48 b8 59 2f 20 04 80 	movabs $0x8004202f59,%rax
  8004204d18:	00 00 00 
  8004204d1b:	ff d0                	callq  *%rax
  8004204d1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204d21:	48 89 c7             	mov    %rax,%rdi
  8004204d24:	48 b8 59 2f 20 04 80 	movabs $0x8004202f59,%rax
  8004204d2b:	00 00 00 
  8004204d2e:	ff d0                	callq  *%rax
  8004204d30:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004204d37:	00 
  8004204d38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204d3c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204d40:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204d44:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204d48:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204d4d:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  8004204d54:	00 00 00 
  8004204d57:	ff d0                	callq  *%rax
  8004204d59:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204d5d:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204d62:	75 35                	jne    8004204d99 <check_page_alloc+0x67a>
  8004204d64:	48 b9 af eb 21 04 80 	movabs $0x800421ebaf,%rcx
  8004204d6b:	00 00 00 
  8004204d6e:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004204d75:	00 00 00 
  8004204d78:	be 67 04 00 00       	mov    $0x467,%esi
  8004204d7d:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004204d84:	00 00 00 
  8004204d87:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204d8c:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204d93:	00 00 00 
  8004204d96:	41 ff d0             	callq  *%r8
  8004204d99:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204d9e:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  8004204da5:	00 00 00 
  8004204da8:	ff d0                	callq  *%rax
  8004204daa:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204dae:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204db3:	75 35                	jne    8004204dea <check_page_alloc+0x6cb>
  8004204db5:	48 b9 c5 eb 21 04 80 	movabs $0x800421ebc5,%rcx
  8004204dbc:	00 00 00 
  8004204dbf:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004204dc6:	00 00 00 
  8004204dc9:	be 68 04 00 00       	mov    $0x468,%esi
  8004204dce:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004204dd5:	00 00 00 
  8004204dd8:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204ddd:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204de4:	00 00 00 
  8004204de7:	41 ff d0             	callq  *%r8
  8004204dea:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204def:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  8004204df6:	00 00 00 
  8004204df9:	ff d0                	callq  *%rax
  8004204dfb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004204dff:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204e04:	75 35                	jne    8004204e3b <check_page_alloc+0x71c>
  8004204e06:	48 b9 db eb 21 04 80 	movabs $0x800421ebdb,%rcx
  8004204e0d:	00 00 00 
  8004204e10:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004204e17:	00 00 00 
  8004204e1a:	be 69 04 00 00       	mov    $0x469,%esi
  8004204e1f:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004204e26:	00 00 00 
  8004204e29:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204e2e:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204e35:	00 00 00 
  8004204e38:	41 ff d0             	callq  *%r8
  8004204e3b:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204e40:	75 35                	jne    8004204e77 <check_page_alloc+0x758>
  8004204e42:	48 b9 f1 eb 21 04 80 	movabs $0x800421ebf1,%rcx
  8004204e49:	00 00 00 
  8004204e4c:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004204e53:	00 00 00 
  8004204e56:	be 6a 04 00 00       	mov    $0x46a,%esi
  8004204e5b:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004204e62:	00 00 00 
  8004204e65:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204e6a:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204e71:	00 00 00 
  8004204e74:	41 ff d0             	callq  *%r8
  8004204e77:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204e7c:	74 0a                	je     8004204e88 <check_page_alloc+0x769>
  8004204e7e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204e82:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204e86:	75 35                	jne    8004204ebd <check_page_alloc+0x79e>
  8004204e88:	48 b9 f5 eb 21 04 80 	movabs $0x800421ebf5,%rcx
  8004204e8f:	00 00 00 
  8004204e92:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004204e99:	00 00 00 
  8004204e9c:	be 6b 04 00 00       	mov    $0x46b,%esi
  8004204ea1:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004204ea8:	00 00 00 
  8004204eab:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204eb0:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204eb7:	00 00 00 
  8004204eba:	41 ff d0             	callq  *%r8
  8004204ebd:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204ec2:	74 14                	je     8004204ed8 <check_page_alloc+0x7b9>
  8004204ec4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204ec8:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004204ecc:	74 0a                	je     8004204ed8 <check_page_alloc+0x7b9>
  8004204ece:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204ed2:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204ed6:	75 35                	jne    8004204f0d <check_page_alloc+0x7ee>
  8004204ed8:	48 b9 08 ec 21 04 80 	movabs $0x800421ec08,%rcx
  8004204edf:	00 00 00 
  8004204ee2:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004204ee9:	00 00 00 
  8004204eec:	be 6c 04 00 00       	mov    $0x46c,%esi
  8004204ef1:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004204ef8:	00 00 00 
  8004204efb:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204f00:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204f07:	00 00 00 
  8004204f0a:	41 ff d0             	callq  *%r8
  8004204f0d:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204f12:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  8004204f19:	00 00 00 
  8004204f1c:	ff d0                	callq  *%rax
  8004204f1e:	48 85 c0             	test   %rax,%rax
  8004204f21:	74 35                	je     8004204f58 <check_page_alloc+0x839>
  8004204f23:	48 b9 7f ec 21 04 80 	movabs $0x800421ec7f,%rcx
  8004204f2a:	00 00 00 
  8004204f2d:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004204f34:	00 00 00 
  8004204f37:	be 6d 04 00 00       	mov    $0x46d,%esi
  8004204f3c:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004204f43:	00 00 00 
  8004204f46:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204f4b:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204f52:	00 00 00 
  8004204f55:	41 ff d0             	callq  *%r8
  8004204f58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204f5c:	48 89 c7             	mov    %rax,%rdi
  8004204f5f:	48 b8 bd 1b 20 04 80 	movabs $0x8004201bbd,%rax
  8004204f66:	00 00 00 
  8004204f69:	ff d0                	callq  *%rax
  8004204f6b:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004204f70:	be 01 00 00 00       	mov    $0x1,%esi
  8004204f75:	48 89 c7             	mov    %rax,%rdi
  8004204f78:	48 b8 37 0e 21 04 80 	movabs $0x8004210e37,%rax
  8004204f7f:	00 00 00 
  8004204f82:	ff d0                	callq  *%rax
  8004204f84:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204f88:	48 89 c7             	mov    %rax,%rdi
  8004204f8b:	48 b8 59 2f 20 04 80 	movabs $0x8004202f59,%rax
  8004204f92:	00 00 00 
  8004204f95:	ff d0                	callq  *%rax
  8004204f97:	bf 01 00 00 00       	mov    $0x1,%edi
  8004204f9c:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  8004204fa3:	00 00 00 
  8004204fa6:	ff d0                	callq  *%rax
  8004204fa8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004204fac:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004204fb1:	75 35                	jne    8004204fe8 <check_page_alloc+0x8c9>
  8004204fb3:	48 b9 8e ec 21 04 80 	movabs $0x800421ec8e,%rcx
  8004204fba:	00 00 00 
  8004204fbd:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004204fc4:	00 00 00 
  8004204fc7:	be 72 04 00 00       	mov    $0x472,%esi
  8004204fcc:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004204fd3:	00 00 00 
  8004204fd6:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204fdb:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204fe2:	00 00 00 
  8004204fe5:	41 ff d0             	callq  *%r8
  8004204fe8:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004204fed:	74 0a                	je     8004204ff9 <check_page_alloc+0x8da>
  8004204fef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204ff3:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004204ff7:	74 35                	je     800420502e <check_page_alloc+0x90f>
  8004204ff9:	48 b9 ac ec 21 04 80 	movabs $0x800421ecac,%rcx
  8004205000:	00 00 00 
  8004205003:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  800420500a:	00 00 00 
  800420500d:	be 73 04 00 00       	mov    $0x473,%esi
  8004205012:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004205019:	00 00 00 
  800420501c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205021:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004205028:	00 00 00 
  800420502b:	41 ff d0             	callq  *%r8
  800420502e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205032:	48 89 c7             	mov    %rax,%rdi
  8004205035:	48 b8 bd 1b 20 04 80 	movabs $0x8004201bbd,%rax
  800420503c:	00 00 00 
  800420503f:	ff d0                	callq  *%rax
  8004205041:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004205045:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  800420504c:	eb 4d                	jmp    800420509b <check_page_alloc+0x97c>
  800420504e:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004205051:	48 63 d0             	movslq %eax,%rdx
  8004205054:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205058:	48 01 d0             	add    %rdx,%rax
  800420505b:	0f b6 00             	movzbl (%rax),%eax
  800420505e:	84 c0                	test   %al,%al
  8004205060:	74 35                	je     8004205097 <check_page_alloc+0x978>
  8004205062:	48 b9 bc ec 21 04 80 	movabs $0x800421ecbc,%rcx
  8004205069:	00 00 00 
  800420506c:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004205073:	00 00 00 
  8004205076:	be 76 04 00 00       	mov    $0x476,%esi
  800420507b:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004205082:	00 00 00 
  8004205085:	b8 00 00 00 00       	mov    $0x0,%eax
  800420508a:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004205091:	00 00 00 
  8004205094:	41 ff d0             	callq  *%r8
  8004205097:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  800420509b:	81 7d f4 ff 0f 00 00 	cmpl   $0xfff,-0xc(%rbp)
  80042050a2:	7e aa                	jle    800420504e <check_page_alloc+0x92f>
  80042050a4:	48 b8 38 f2 4d 04 80 	movabs $0x80044df238,%rax
  80042050ab:	00 00 00 
  80042050ae:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042050b2:	48 89 10             	mov    %rdx,(%rax)
  80042050b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042050b9:	48 89 c7             	mov    %rax,%rdi
  80042050bc:	48 b8 59 2f 20 04 80 	movabs $0x8004202f59,%rax
  80042050c3:	00 00 00 
  80042050c6:	ff d0                	callq  *%rax
  80042050c8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042050cc:	48 89 c7             	mov    %rax,%rdi
  80042050cf:	48 b8 59 2f 20 04 80 	movabs $0x8004202f59,%rax
  80042050d6:	00 00 00 
  80042050d9:	ff d0                	callq  *%rax
  80042050db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042050df:	48 89 c7             	mov    %rax,%rdi
  80042050e2:	48 b8 59 2f 20 04 80 	movabs $0x8004202f59,%rax
  80042050e9:	00 00 00 
  80042050ec:	ff d0                	callq  *%rax
  80042050ee:	48 bf c8 ec 21 04 80 	movabs $0x800421ecc8,%rdi
  80042050f5:	00 00 00 
  80042050f8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042050fd:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004205104:	00 00 00 
  8004205107:	ff d2                	callq  *%rdx
  8004205109:	c9                   	leaveq 
  800420510a:	c3                   	retq   

000000800420510b <check_boot_pml4e>:
  800420510b:	55                   	push   %rbp
  800420510c:	48 89 e5             	mov    %rsp,%rbp
  800420510f:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
  8004205116:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  800420511d:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  8004205124:	00 00 00 
  8004205127:	48 8b 00             	mov    (%rax),%rax
  800420512a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420512e:	48 c7 45 e0 00 10 00 	movq   $0x1000,-0x20(%rbp)
  8004205135:	00 
  8004205136:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  800420513d:	00 00 00 
  8004205140:	48 8b 00             	mov    (%rax),%rax
  8004205143:	48 c1 e0 04          	shl    $0x4,%rax
  8004205147:	48 89 c2             	mov    %rax,%rdx
  800420514a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420514e:	48 01 d0             	add    %rdx,%rax
  8004205151:	48 83 e8 01          	sub    $0x1,%rax
  8004205155:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004205159:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420515d:	ba 00 00 00 00       	mov    $0x0,%edx
  8004205162:	48 f7 75 e0          	divq   -0x20(%rbp)
  8004205166:	48 89 d0             	mov    %rdx,%rax
  8004205169:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  800420516d:	48 29 c2             	sub    %rax,%rdx
  8004205170:	48 89 d0             	mov    %rdx,%rax
  8004205173:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004205177:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800420517e:	00 
  800420517f:	e9 d4 00 00 00       	jmpq   8004205258 <check_boot_pml4e+0x14d>
  8004205184:	48 ba 00 00 a0 00 80 	movabs $0x8000a00000,%rdx
  800420518b:	00 00 00 
  800420518e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205192:	48 01 c2             	add    %rax,%rdx
  8004205195:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004205199:	48 89 d6             	mov    %rdx,%rsi
  800420519c:	48 89 c7             	mov    %rax,%rdi
  800420519f:	48 b8 59 58 20 04 80 	movabs $0x8004205859,%rax
  80042051a6:	00 00 00 
  80042051a9:	ff d0                	callq  *%rax
  80042051ab:	48 ba 00 e6 6d 04 80 	movabs $0x80046de600,%rdx
  80042051b2:	00 00 00 
  80042051b5:	48 8b 12             	mov    (%rdx),%rdx
  80042051b8:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  80042051bc:	48 ba ff ff ff 03 80 	movabs $0x8003ffffff,%rdx
  80042051c3:	00 00 00 
  80042051c6:	48 39 55 d0          	cmp    %rdx,-0x30(%rbp)
  80042051ca:	77 32                	ja     80042051fe <check_boot_pml4e+0xf3>
  80042051cc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042051d0:	48 89 c1             	mov    %rax,%rcx
  80042051d3:	48 ba 08 e9 21 04 80 	movabs $0x800421e908,%rdx
  80042051da:	00 00 00 
  80042051dd:	be 96 04 00 00       	mov    $0x496,%esi
  80042051e2:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  80042051e9:	00 00 00 
  80042051ec:	b8 00 00 00 00       	mov    $0x0,%eax
  80042051f1:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042051f8:	00 00 00 
  80042051fb:	41 ff d0             	callq  *%r8
  80042051fe:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  8004205205:	ff ff ff 
  8004205208:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420520c:	48 01 d1             	add    %rdx,%rcx
  800420520f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004205213:	48 01 ca             	add    %rcx,%rdx
  8004205216:	48 39 d0             	cmp    %rdx,%rax
  8004205219:	74 35                	je     8004205250 <check_boot_pml4e+0x145>
  800420521b:	48 b9 e8 ec 21 04 80 	movabs $0x800421ece8,%rcx
  8004205222:	00 00 00 
  8004205225:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  800420522c:	00 00 00 
  800420522f:	be 96 04 00 00       	mov    $0x496,%esi
  8004205234:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  800420523b:	00 00 00 
  800420523e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205243:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420524a:	00 00 00 
  800420524d:	41 ff d0             	callq  *%r8
  8004205250:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  8004205257:	00 
  8004205258:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420525c:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  8004205260:	0f 82 1e ff ff ff    	jb     8004205184 <check_boot_pml4e+0x79>
  8004205266:	48 c7 45 c8 00 10 00 	movq   $0x1000,-0x38(%rbp)
  800420526d:	00 
  800420526e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205272:	48 05 ff 9f 05 00    	add    $0x59fff,%rax
  8004205278:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800420527c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004205280:	ba 00 00 00 00       	mov    $0x0,%edx
  8004205285:	48 f7 75 c8          	divq   -0x38(%rbp)
  8004205289:	48 89 d0             	mov    %rdx,%rax
  800420528c:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004205290:	48 29 c2             	sub    %rax,%rdx
  8004205293:	48 89 d0             	mov    %rdx,%rax
  8004205296:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420529a:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042052a1:	00 
  80042052a2:	e9 d4 00 00 00       	jmpq   800420537b <check_boot_pml4e+0x270>
  80042052a7:	48 ba 00 00 80 00 80 	movabs $0x8000800000,%rdx
  80042052ae:	00 00 00 
  80042052b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042052b5:	48 01 c2             	add    %rax,%rdx
  80042052b8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042052bc:	48 89 d6             	mov    %rdx,%rsi
  80042052bf:	48 89 c7             	mov    %rax,%rdi
  80042052c2:	48 b8 59 58 20 04 80 	movabs $0x8004205859,%rax
  80042052c9:	00 00 00 
  80042052cc:	ff d0                	callq  *%rax
  80042052ce:	48 ba 58 f2 4d 04 80 	movabs $0x80044df258,%rdx
  80042052d5:	00 00 00 
  80042052d8:	48 8b 12             	mov    (%rdx),%rdx
  80042052db:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  80042052df:	48 ba ff ff ff 03 80 	movabs $0x8003ffffff,%rdx
  80042052e6:	00 00 00 
  80042052e9:	48 39 55 b8          	cmp    %rdx,-0x48(%rbp)
  80042052ed:	77 32                	ja     8004205321 <check_boot_pml4e+0x216>
  80042052ef:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042052f3:	48 89 c1             	mov    %rax,%rcx
  80042052f6:	48 ba 08 e9 21 04 80 	movabs $0x800421e908,%rdx
  80042052fd:	00 00 00 
  8004205300:	be 9d 04 00 00       	mov    $0x49d,%esi
  8004205305:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  800420530c:	00 00 00 
  800420530f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205314:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420531b:	00 00 00 
  800420531e:	41 ff d0             	callq  *%r8
  8004205321:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  8004205328:	ff ff ff 
  800420532b:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  800420532f:	48 01 d1             	add    %rdx,%rcx
  8004205332:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004205336:	48 01 ca             	add    %rcx,%rdx
  8004205339:	48 39 d0             	cmp    %rdx,%rax
  800420533c:	74 35                	je     8004205373 <check_boot_pml4e+0x268>
  800420533e:	48 b9 20 ed 21 04 80 	movabs $0x800421ed20,%rcx
  8004205345:	00 00 00 
  8004205348:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  800420534f:	00 00 00 
  8004205352:	be 9d 04 00 00       	mov    $0x49d,%esi
  8004205357:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  800420535e:	00 00 00 
  8004205361:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205366:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420536d:	00 00 00 
  8004205370:	41 ff d0             	callq  *%r8
  8004205373:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  800420537a:	00 
  800420537b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420537f:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  8004205383:	0f 82 1e ff ff ff    	jb     80042052a7 <check_boot_pml4e+0x19c>
  8004205389:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004205390:	00 
  8004205391:	eb 6a                	jmp    80042053fd <check_boot_pml4e+0x2f2>
  8004205393:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420539a:	00 00 00 
  800420539d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042053a1:	48 01 c2             	add    %rax,%rdx
  80042053a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042053a8:	48 89 d6             	mov    %rdx,%rsi
  80042053ab:	48 89 c7             	mov    %rax,%rdi
  80042053ae:	48 b8 59 58 20 04 80 	movabs $0x8004205859,%rax
  80042053b5:	00 00 00 
  80042053b8:	ff d0                	callq  *%rax
  80042053ba:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042053be:	74 35                	je     80042053f5 <check_boot_pml4e+0x2ea>
  80042053c0:	48 b9 58 ed 21 04 80 	movabs $0x800421ed58,%rcx
  80042053c7:	00 00 00 
  80042053ca:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  80042053d1:	00 00 00 
  80042053d4:	be a2 04 00 00       	mov    $0x4a2,%esi
  80042053d9:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  80042053e0:	00 00 00 
  80042053e3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042053e8:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042053ef:	00 00 00 
  80042053f2:	41 ff d0             	callq  *%r8
  80042053f5:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  80042053fc:	00 
  80042053fd:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  8004205404:	00 00 00 
  8004205407:	48 8b 00             	mov    (%rax),%rax
  800420540a:	48 c1 e0 0c          	shl    $0xc,%rax
  800420540e:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004205412:	0f 87 7b ff ff ff    	ja     8004205393 <check_boot_pml4e+0x288>
  8004205418:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420541f:	00 
  8004205420:	e9 a1 01 00 00       	jmpq   80042055c6 <check_boot_pml4e+0x4bb>
  8004205425:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004205429:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420542d:	48 89 d0             	mov    %rdx,%rax
  8004205430:	48 01 c0             	add    %rax,%rax
  8004205433:	48 01 d0             	add    %rdx,%rax
  8004205436:	48 c1 e0 0f          	shl    $0xf,%rax
  800420543a:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004205441:	00 00 00 
  8004205444:	48 29 c2             	sub    %rax,%rdx
  8004205447:	48 89 d0             	mov    %rdx,%rax
  800420544a:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  800420544e:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004205455:	00 
  8004205456:	e9 e0 00 00 00       	jmpq   800420553b <check_boot_pml4e+0x430>
  800420545b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420545f:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004205463:	48 01 d0             	add    %rdx,%rax
  8004205466:	48 8d 90 00 80 00 00 	lea    0x8000(%rax),%rdx
  800420546d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004205471:	48 89 d6             	mov    %rdx,%rsi
  8004205474:	48 89 c7             	mov    %rax,%rdi
  8004205477:	48 b8 59 58 20 04 80 	movabs $0x8004205859,%rax
  800420547e:	00 00 00 
  8004205481:	ff d0                	callq  *%rax
  8004205483:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004205487:	48 89 d1             	mov    %rdx,%rcx
  800420548a:	48 c1 e1 10          	shl    $0x10,%rcx
  800420548e:	48 ba 00 10 6e 04 80 	movabs $0x80046e1000,%rdx
  8004205495:	00 00 00 
  8004205498:	48 01 ca             	add    %rcx,%rdx
  800420549b:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  800420549f:	48 ba ff ff ff 03 80 	movabs $0x8003ffffff,%rdx
  80042054a6:	00 00 00 
  80042054a9:	48 39 55 a8          	cmp    %rdx,-0x58(%rbp)
  80042054ad:	77 32                	ja     80042054e1 <check_boot_pml4e+0x3d6>
  80042054af:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042054b3:	48 89 c1             	mov    %rax,%rcx
  80042054b6:	48 ba 08 e9 21 04 80 	movabs $0x800421e908,%rdx
  80042054bd:	00 00 00 
  80042054c0:	be ab 04 00 00       	mov    $0x4ab,%esi
  80042054c5:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  80042054cc:	00 00 00 
  80042054cf:	b8 00 00 00 00       	mov    $0x0,%eax
  80042054d4:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042054db:	00 00 00 
  80042054de:	41 ff d0             	callq  *%r8
  80042054e1:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  80042054e8:	ff ff ff 
  80042054eb:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  80042054ef:	48 01 d1             	add    %rdx,%rcx
  80042054f2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042054f6:	48 01 ca             	add    %rcx,%rdx
  80042054f9:	48 39 d0             	cmp    %rdx,%rax
  80042054fc:	74 35                	je     8004205533 <check_boot_pml4e+0x428>
  80042054fe:	48 b9 80 ed 21 04 80 	movabs $0x800421ed80,%rcx
  8004205505:	00 00 00 
  8004205508:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  800420550f:	00 00 00 
  8004205512:	be ab 04 00 00       	mov    $0x4ab,%esi
  8004205517:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  800420551e:	00 00 00 
  8004205521:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205526:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420552d:	00 00 00 
  8004205530:	41 ff d0             	callq  *%r8
  8004205533:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  800420553a:	00 
  800420553b:	48 81 7d f8 ff ff 00 	cmpq   $0xffff,-0x8(%rbp)
  8004205542:	00 
  8004205543:	0f 86 12 ff ff ff    	jbe    800420545b <check_boot_pml4e+0x350>
  8004205549:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004205550:	00 
  8004205551:	eb 64                	jmp    80042055b7 <check_boot_pml4e+0x4ac>
  8004205553:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205557:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800420555b:	48 01 c2             	add    %rax,%rdx
  800420555e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004205562:	48 89 d6             	mov    %rdx,%rsi
  8004205565:	48 89 c7             	mov    %rax,%rdi
  8004205568:	48 b8 59 58 20 04 80 	movabs $0x8004205859,%rax
  800420556f:	00 00 00 
  8004205572:	ff d0                	callq  *%rax
  8004205574:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004205578:	74 35                	je     80042055af <check_boot_pml4e+0x4a4>
  800420557a:	48 b9 c8 ed 21 04 80 	movabs $0x800421edc8,%rcx
  8004205581:	00 00 00 
  8004205584:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  800420558b:	00 00 00 
  800420558e:	be ad 04 00 00       	mov    $0x4ad,%esi
  8004205593:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  800420559a:	00 00 00 
  800420559d:	b8 00 00 00 00       	mov    $0x0,%eax
  80042055a2:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042055a9:	00 00 00 
  80042055ac:	41 ff d0             	callq  *%r8
  80042055af:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  80042055b6:	00 
  80042055b7:	48 81 7d f8 ff 7f 00 	cmpq   $0x7fff,-0x8(%rbp)
  80042055be:	00 
  80042055bf:	76 92                	jbe    8004205553 <check_boot_pml4e+0x448>
  80042055c1:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  80042055c6:	48 83 7d f0 03       	cmpq   $0x3,-0x10(%rbp)
  80042055cb:	0f 86 54 fe ff ff    	jbe    8004205425 <check_boot_pml4e+0x31a>
  80042055d1:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  80042055d8:	00 00 00 
  80042055db:	48 8b 00             	mov    (%rax),%rax
  80042055de:	48 83 c0 08          	add    $0x8,%rax
  80042055e2:	48 8b 00             	mov    (%rax),%rax
  80042055e5:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042055eb:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  80042055ef:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042055f3:	48 c1 e8 0c          	shr    $0xc,%rax
  80042055f7:	89 45 9c             	mov    %eax,-0x64(%rbp)
  80042055fa:	8b 55 9c             	mov    -0x64(%rbp),%edx
  80042055fd:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  8004205604:	00 00 00 
  8004205607:	48 8b 00             	mov    (%rax),%rax
  800420560a:	48 39 c2             	cmp    %rax,%rdx
  800420560d:	72 32                	jb     8004205641 <check_boot_pml4e+0x536>
  800420560f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205613:	48 89 c1             	mov    %rax,%rcx
  8004205616:	48 ba 58 e7 21 04 80 	movabs $0x800421e758,%rdx
  800420561d:	00 00 00 
  8004205620:	be b7 04 00 00       	mov    $0x4b7,%esi
  8004205625:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  800420562c:	00 00 00 
  800420562f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205634:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420563b:	00 00 00 
  800420563e:	41 ff d0             	callq  *%r8
  8004205641:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004205648:	00 00 00 
  800420564b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420564f:	48 01 d0             	add    %rdx,%rax
  8004205652:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  8004205656:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420565a:	48 8b 00             	mov    (%rax),%rax
  800420565d:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205663:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  8004205667:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  800420566b:	48 c1 e8 0c          	shr    $0xc,%rax
  800420566f:	89 45 84             	mov    %eax,-0x7c(%rbp)
  8004205672:	8b 55 84             	mov    -0x7c(%rbp),%edx
  8004205675:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  800420567c:	00 00 00 
  800420567f:	48 8b 00             	mov    (%rax),%rax
  8004205682:	48 39 c2             	cmp    %rax,%rdx
  8004205685:	72 32                	jb     80042056b9 <check_boot_pml4e+0x5ae>
  8004205687:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  800420568b:	48 89 c1             	mov    %rax,%rcx
  800420568e:	48 ba 58 e7 21 04 80 	movabs $0x800421e758,%rdx
  8004205695:	00 00 00 
  8004205698:	be b8 04 00 00       	mov    $0x4b8,%esi
  800420569d:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  80042056a4:	00 00 00 
  80042056a7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042056ac:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042056b3:	00 00 00 
  80042056b6:	41 ff d0             	callq  *%r8
  80042056b9:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042056c0:	00 00 00 
  80042056c3:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042056c7:	48 01 d0             	add    %rdx,%rax
  80042056ca:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  80042056d1:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042056d8:	00 
  80042056d9:	e9 50 01 00 00       	jmpq   800420582e <check_boot_pml4e+0x723>
  80042056de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042056e2:	48 83 f8 04          	cmp    $0x4,%rax
  80042056e6:	72 67                	jb     800420574f <check_boot_pml4e+0x644>
  80042056e8:	48 83 f8 05          	cmp    $0x5,%rax
  80042056ec:	76 06                	jbe    80042056f4 <check_boot_pml4e+0x5e9>
  80042056ee:	48 83 f8 1f          	cmp    $0x1f,%rax
  80042056f2:	75 5b                	jne    800420574f <check_boot_pml4e+0x644>
  80042056f4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042056f8:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042056ff:	00 
  8004205700:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004205707:	48 01 d0             	add    %rdx,%rax
  800420570a:	48 8b 00             	mov    (%rax),%rax
  800420570d:	83 e0 01             	and    $0x1,%eax
  8004205710:	48 85 c0             	test   %rax,%rax
  8004205713:	75 35                	jne    800420574a <check_boot_pml4e+0x63f>
  8004205715:	48 b9 eb ed 21 04 80 	movabs $0x800421edeb,%rcx
  800420571c:	00 00 00 
  800420571f:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004205726:	00 00 00 
  8004205729:	be c2 04 00 00       	mov    $0x4c2,%esi
  800420572e:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004205735:	00 00 00 
  8004205738:	b8 00 00 00 00       	mov    $0x0,%eax
  800420573d:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004205744:	00 00 00 
  8004205747:	41 ff d0             	callq  *%r8
  800420574a:	e9 da 00 00 00       	jmpq   8004205829 <check_boot_pml4e+0x71e>
  800420574f:	48 83 7d f8 1f       	cmpq   $0x1f,-0x8(%rbp)
  8004205754:	0f 86 ce 00 00 00    	jbe    8004205828 <check_boot_pml4e+0x71d>
  800420575a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420575e:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205765:	00 
  8004205766:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420576d:	48 01 d0             	add    %rdx,%rax
  8004205770:	48 8b 00             	mov    (%rax),%rax
  8004205773:	83 e0 01             	and    $0x1,%eax
  8004205776:	48 85 c0             	test   %rax,%rax
  8004205779:	74 5a                	je     80042057d5 <check_boot_pml4e+0x6ca>
  800420577b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420577f:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205786:	00 
  8004205787:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420578e:	48 01 d0             	add    %rdx,%rax
  8004205791:	48 8b 00             	mov    (%rax),%rax
  8004205794:	83 e0 02             	and    $0x2,%eax
  8004205797:	48 85 c0             	test   %rax,%rax
  800420579a:	0f 85 88 00 00 00    	jne    8004205828 <check_boot_pml4e+0x71d>
  80042057a0:	48 b9 fc ed 21 04 80 	movabs $0x800421edfc,%rcx
  80042057a7:	00 00 00 
  80042057aa:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  80042057b1:	00 00 00 
  80042057b4:	be c7 04 00 00       	mov    $0x4c7,%esi
  80042057b9:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  80042057c0:	00 00 00 
  80042057c3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042057c8:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042057cf:	00 00 00 
  80042057d2:	41 ff d0             	callq  *%r8
  80042057d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042057d9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042057e0:	00 
  80042057e1:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042057e8:	48 01 d0             	add    %rdx,%rax
  80042057eb:	48 8b 00             	mov    (%rax),%rax
  80042057ee:	48 85 c0             	test   %rax,%rax
  80042057f1:	74 35                	je     8004205828 <check_boot_pml4e+0x71d>
  80042057f3:	48 b9 0d ee 21 04 80 	movabs $0x800421ee0d,%rcx
  80042057fa:	00 00 00 
  80042057fd:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004205804:	00 00 00 
  8004205807:	be c9 04 00 00       	mov    $0x4c9,%esi
  800420580c:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004205813:	00 00 00 
  8004205816:	b8 00 00 00 00       	mov    $0x0,%eax
  800420581b:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004205822:	00 00 00 
  8004205825:	41 ff d0             	callq  *%r8
  8004205828:	90                   	nop
  8004205829:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  800420582e:	48 81 7d f8 ff 01 00 	cmpq   $0x1ff,-0x8(%rbp)
  8004205835:	00 
  8004205836:	0f 86 a2 fe ff ff    	jbe    80042056de <check_boot_pml4e+0x5d3>
  800420583c:	48 bf 20 ee 21 04 80 	movabs $0x800421ee20,%rdi
  8004205843:	00 00 00 
  8004205846:	b8 00 00 00 00       	mov    $0x0,%eax
  800420584b:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004205852:	00 00 00 
  8004205855:	ff d2                	callq  *%rdx
  8004205857:	c9                   	leaveq 
  8004205858:	c3                   	retq   

0000008004205859 <check_va2pa>:
  8004205859:	55                   	push   %rbp
  800420585a:	48 89 e5             	mov    %rsp,%rbp
  800420585d:	48 83 ec 60          	sub    $0x60,%rsp
  8004205861:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  8004205865:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  8004205869:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420586d:	48 c1 e8 27          	shr    $0x27,%rax
  8004205871:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205876:	48 c1 e0 03          	shl    $0x3,%rax
  800420587a:	48 01 45 a8          	add    %rax,-0x58(%rbp)
  800420587e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004205882:	48 8b 00             	mov    (%rax),%rax
  8004205885:	83 e0 01             	and    $0x1,%eax
  8004205888:	48 85 c0             	test   %rax,%rax
  800420588b:	75 0c                	jne    8004205899 <check_va2pa+0x40>
  800420588d:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  8004205894:	e9 38 02 00 00       	jmpq   8004205ad1 <check_va2pa+0x278>
  8004205899:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420589d:	48 8b 00             	mov    (%rax),%rax
  80042058a0:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042058a6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042058aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042058ae:	48 c1 e8 0c          	shr    $0xc,%rax
  80042058b2:	89 45 f4             	mov    %eax,-0xc(%rbp)
  80042058b5:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042058b8:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  80042058bf:	00 00 00 
  80042058c2:	48 8b 00             	mov    (%rax),%rax
  80042058c5:	48 39 c2             	cmp    %rax,%rdx
  80042058c8:	72 32                	jb     80042058fc <check_va2pa+0xa3>
  80042058ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042058ce:	48 89 c1             	mov    %rax,%rcx
  80042058d1:	48 ba 58 e7 21 04 80 	movabs $0x800421e758,%rdx
  80042058d8:	00 00 00 
  80042058db:	be e1 04 00 00       	mov    $0x4e1,%esi
  80042058e0:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  80042058e7:	00 00 00 
  80042058ea:	b8 00 00 00 00       	mov    $0x0,%eax
  80042058ef:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042058f6:	00 00 00 
  80042058f9:	41 ff d0             	callq  *%r8
  80042058fc:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004205903:	00 00 00 
  8004205906:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420590a:	48 01 d0             	add    %rdx,%rax
  800420590d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004205911:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205915:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004205919:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420591e:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205925:	00 
  8004205926:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420592a:	48 01 d0             	add    %rdx,%rax
  800420592d:	48 8b 00             	mov    (%rax),%rax
  8004205930:	83 e0 01             	and    $0x1,%eax
  8004205933:	48 85 c0             	test   %rax,%rax
  8004205936:	75 0c                	jne    8004205944 <check_va2pa+0xeb>
  8004205938:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  800420593f:	e9 8d 01 00 00       	jmpq   8004205ad1 <check_va2pa+0x278>
  8004205944:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205948:	48 c1 e8 1e          	shr    $0x1e,%rax
  800420594c:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205951:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205958:	00 
  8004205959:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420595d:	48 01 d0             	add    %rdx,%rax
  8004205960:	48 8b 00             	mov    (%rax),%rax
  8004205963:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205969:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420596d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205971:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205975:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004205978:	8b 55 dc             	mov    -0x24(%rbp),%edx
  800420597b:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  8004205982:	00 00 00 
  8004205985:	48 8b 00             	mov    (%rax),%rax
  8004205988:	48 39 c2             	cmp    %rax,%rdx
  800420598b:	72 32                	jb     80042059bf <check_va2pa+0x166>
  800420598d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205991:	48 89 c1             	mov    %rax,%rcx
  8004205994:	48 ba 58 e7 21 04 80 	movabs $0x800421e758,%rdx
  800420599b:	00 00 00 
  800420599e:	be e5 04 00 00       	mov    $0x4e5,%esi
  80042059a3:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  80042059aa:	00 00 00 
  80042059ad:	b8 00 00 00 00       	mov    $0x0,%eax
  80042059b2:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042059b9:	00 00 00 
  80042059bc:	41 ff d0             	callq  *%r8
  80042059bf:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042059c6:	00 00 00 
  80042059c9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042059cd:	48 01 d0             	add    %rdx,%rax
  80042059d0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042059d4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042059d8:	48 c1 e8 15          	shr    $0x15,%rax
  80042059dc:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042059e1:	48 c1 e0 03          	shl    $0x3,%rax
  80042059e5:	48 01 45 d0          	add    %rax,-0x30(%rbp)
  80042059e9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042059ed:	48 8b 00             	mov    (%rax),%rax
  80042059f0:	83 e0 01             	and    $0x1,%eax
  80042059f3:	48 85 c0             	test   %rax,%rax
  80042059f6:	75 0c                	jne    8004205a04 <check_va2pa+0x1ab>
  80042059f8:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  80042059ff:	e9 cd 00 00 00       	jmpq   8004205ad1 <check_va2pa+0x278>
  8004205a04:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205a08:	48 8b 00             	mov    (%rax),%rax
  8004205a0b:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205a11:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004205a15:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205a19:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205a1d:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004205a20:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004205a23:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  8004205a2a:	00 00 00 
  8004205a2d:	48 8b 00             	mov    (%rax),%rax
  8004205a30:	48 39 c2             	cmp    %rax,%rdx
  8004205a33:	72 32                	jb     8004205a67 <check_va2pa+0x20e>
  8004205a35:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205a39:	48 89 c1             	mov    %rax,%rcx
  8004205a3c:	48 ba 58 e7 21 04 80 	movabs $0x800421e758,%rdx
  8004205a43:	00 00 00 
  8004205a46:	be ea 04 00 00       	mov    $0x4ea,%esi
  8004205a4b:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004205a52:	00 00 00 
  8004205a55:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205a5a:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004205a61:	00 00 00 
  8004205a64:	41 ff d0             	callq  *%r8
  8004205a67:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004205a6e:	00 00 00 
  8004205a71:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205a75:	48 01 d0             	add    %rdx,%rax
  8004205a78:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004205a7c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205a80:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205a84:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205a89:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205a90:	00 
  8004205a91:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004205a95:	48 01 d0             	add    %rdx,%rax
  8004205a98:	48 8b 00             	mov    (%rax),%rax
  8004205a9b:	83 e0 01             	and    $0x1,%eax
  8004205a9e:	48 85 c0             	test   %rax,%rax
  8004205aa1:	75 09                	jne    8004205aac <check_va2pa+0x253>
  8004205aa3:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  8004205aaa:	eb 25                	jmp    8004205ad1 <check_va2pa+0x278>
  8004205aac:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205ab0:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205ab4:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205ab9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205ac0:	00 
  8004205ac1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004205ac5:	48 01 d0             	add    %rdx,%rax
  8004205ac8:	48 8b 00             	mov    (%rax),%rax
  8004205acb:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205ad1:	c9                   	leaveq 
  8004205ad2:	c3                   	retq   

0000008004205ad3 <page_check>:
  8004205ad3:	55                   	push   %rbp
  8004205ad4:	48 89 e5             	mov    %rsp,%rbp
  8004205ad7:	53                   	push   %rbx
  8004205ad8:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
  8004205adf:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  8004205ae6:	00 
  8004205ae7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205aeb:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004205aef:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205af3:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004205af7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205afb:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004205aff:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205b03:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004205b07:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004205b0b:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004205b0f:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205b14:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  8004205b1b:	00 00 00 
  8004205b1e:	ff d0                	callq  *%rax
  8004205b20:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004205b24:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004205b29:	75 35                	jne    8004205b60 <page_check+0x8d>
  8004205b2b:	48 b9 3f ee 21 04 80 	movabs $0x800421ee3f,%rcx
  8004205b32:	00 00 00 
  8004205b35:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004205b3c:	00 00 00 
  8004205b3f:	be 02 05 00 00       	mov    $0x502,%esi
  8004205b44:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004205b4b:	00 00 00 
  8004205b4e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205b53:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004205b5a:	00 00 00 
  8004205b5d:	41 ff d0             	callq  *%r8
  8004205b60:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205b65:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  8004205b6c:	00 00 00 
  8004205b6f:	ff d0                	callq  *%rax
  8004205b71:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004205b75:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  8004205b7a:	75 35                	jne    8004205bb1 <page_check+0xde>
  8004205b7c:	48 b9 53 ee 21 04 80 	movabs $0x800421ee53,%rcx
  8004205b83:	00 00 00 
  8004205b86:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004205b8d:	00 00 00 
  8004205b90:	be 03 05 00 00       	mov    $0x503,%esi
  8004205b95:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004205b9c:	00 00 00 
  8004205b9f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205ba4:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004205bab:	00 00 00 
  8004205bae:	41 ff d0             	callq  *%r8
  8004205bb1:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205bb6:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  8004205bbd:	00 00 00 
  8004205bc0:	ff d0                	callq  *%rax
  8004205bc2:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004205bc6:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004205bcb:	75 35                	jne    8004205c02 <page_check+0x12f>
  8004205bcd:	48 b9 67 ee 21 04 80 	movabs $0x800421ee67,%rcx
  8004205bd4:	00 00 00 
  8004205bd7:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004205bde:	00 00 00 
  8004205be1:	be 04 05 00 00       	mov    $0x504,%esi
  8004205be6:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004205bed:	00 00 00 
  8004205bf0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205bf5:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004205bfc:	00 00 00 
  8004205bff:	41 ff d0             	callq  *%r8
  8004205c02:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205c07:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  8004205c0e:	00 00 00 
  8004205c11:	ff d0                	callq  *%rax
  8004205c13:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004205c17:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004205c1c:	75 35                	jne    8004205c53 <page_check+0x180>
  8004205c1e:	48 b9 7b ee 21 04 80 	movabs $0x800421ee7b,%rcx
  8004205c25:	00 00 00 
  8004205c28:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004205c2f:	00 00 00 
  8004205c32:	be 05 05 00 00       	mov    $0x505,%esi
  8004205c37:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004205c3e:	00 00 00 
  8004205c41:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205c46:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004205c4d:	00 00 00 
  8004205c50:	41 ff d0             	callq  *%r8
  8004205c53:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205c58:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  8004205c5f:	00 00 00 
  8004205c62:	ff d0                	callq  *%rax
  8004205c64:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004205c68:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004205c6d:	75 35                	jne    8004205ca4 <page_check+0x1d1>
  8004205c6f:	48 b9 8f ee 21 04 80 	movabs $0x800421ee8f,%rcx
  8004205c76:	00 00 00 
  8004205c79:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004205c80:	00 00 00 
  8004205c83:	be 06 05 00 00       	mov    $0x506,%esi
  8004205c88:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004205c8f:	00 00 00 
  8004205c92:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205c97:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004205c9e:	00 00 00 
  8004205ca1:	41 ff d0             	callq  *%r8
  8004205ca4:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205ca9:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  8004205cb0:	00 00 00 
  8004205cb3:	ff d0                	callq  *%rax
  8004205cb5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004205cb9:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004205cbe:	75 35                	jne    8004205cf5 <page_check+0x222>
  8004205cc0:	48 b9 a3 ee 21 04 80 	movabs $0x800421eea3,%rcx
  8004205cc7:	00 00 00 
  8004205cca:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004205cd1:	00 00 00 
  8004205cd4:	be 07 05 00 00       	mov    $0x507,%esi
  8004205cd9:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004205ce0:	00 00 00 
  8004205ce3:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205ce8:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004205cef:	00 00 00 
  8004205cf2:	41 ff d0             	callq  *%r8
  8004205cf5:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004205cfa:	75 35                	jne    8004205d31 <page_check+0x25e>
  8004205cfc:	48 b9 f1 eb 21 04 80 	movabs $0x800421ebf1,%rcx
  8004205d03:	00 00 00 
  8004205d06:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004205d0d:	00 00 00 
  8004205d10:	be 09 05 00 00       	mov    $0x509,%esi
  8004205d15:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004205d1c:	00 00 00 
  8004205d1f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205d24:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004205d2b:	00 00 00 
  8004205d2e:	41 ff d0             	callq  *%r8
  8004205d31:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  8004205d36:	74 0a                	je     8004205d42 <page_check+0x26f>
  8004205d38:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004205d3c:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205d40:	75 35                	jne    8004205d77 <page_check+0x2a4>
  8004205d42:	48 b9 f5 eb 21 04 80 	movabs $0x800421ebf5,%rcx
  8004205d49:	00 00 00 
  8004205d4c:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004205d53:	00 00 00 
  8004205d56:	be 0a 05 00 00       	mov    $0x50a,%esi
  8004205d5b:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004205d62:	00 00 00 
  8004205d65:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205d6a:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004205d71:	00 00 00 
  8004205d74:	41 ff d0             	callq  *%r8
  8004205d77:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004205d7c:	74 14                	je     8004205d92 <page_check+0x2bf>
  8004205d7e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205d82:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205d86:	74 0a                	je     8004205d92 <page_check+0x2bf>
  8004205d88:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205d8c:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205d90:	75 35                	jne    8004205dc7 <page_check+0x2f4>
  8004205d92:	48 b9 08 ec 21 04 80 	movabs $0x800421ec08,%rcx
  8004205d99:	00 00 00 
  8004205d9c:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004205da3:	00 00 00 
  8004205da6:	be 0b 05 00 00       	mov    $0x50b,%esi
  8004205dab:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004205db2:	00 00 00 
  8004205db5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205dba:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004205dc1:	00 00 00 
  8004205dc4:	41 ff d0             	callq  *%r8
  8004205dc7:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004205dcc:	74 1e                	je     8004205dec <page_check+0x319>
  8004205dce:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205dd2:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004205dd6:	74 14                	je     8004205dec <page_check+0x319>
  8004205dd8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205ddc:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205de0:	74 0a                	je     8004205dec <page_check+0x319>
  8004205de2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205de6:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205dea:	75 35                	jne    8004205e21 <page_check+0x34e>
  8004205dec:	48 b9 b8 ee 21 04 80 	movabs $0x800421eeb8,%rcx
  8004205df3:	00 00 00 
  8004205df6:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004205dfd:	00 00 00 
  8004205e00:	be 0c 05 00 00       	mov    $0x50c,%esi
  8004205e05:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004205e0c:	00 00 00 
  8004205e0f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205e14:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004205e1b:	00 00 00 
  8004205e1e:	41 ff d0             	callq  *%r8
  8004205e21:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004205e26:	74 28                	je     8004205e50 <page_check+0x37d>
  8004205e28:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205e2c:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004205e30:	74 1e                	je     8004205e50 <page_check+0x37d>
  8004205e32:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205e36:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004205e3a:	74 14                	je     8004205e50 <page_check+0x37d>
  8004205e3c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205e40:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205e44:	74 0a                	je     8004205e50 <page_check+0x37d>
  8004205e46:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205e4a:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205e4e:	75 35                	jne    8004205e85 <page_check+0x3b2>
  8004205e50:	48 b9 e8 ee 21 04 80 	movabs $0x800421eee8,%rcx
  8004205e57:	00 00 00 
  8004205e5a:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004205e61:	00 00 00 
  8004205e64:	be 0d 05 00 00       	mov    $0x50d,%esi
  8004205e69:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004205e70:	00 00 00 
  8004205e73:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205e78:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004205e7f:	00 00 00 
  8004205e82:	41 ff d0             	callq  *%r8
  8004205e85:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004205e8a:	74 32                	je     8004205ebe <page_check+0x3eb>
  8004205e8c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205e90:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  8004205e94:	74 28                	je     8004205ebe <page_check+0x3eb>
  8004205e96:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205e9a:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004205e9e:	74 1e                	je     8004205ebe <page_check+0x3eb>
  8004205ea0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205ea4:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004205ea8:	74 14                	je     8004205ebe <page_check+0x3eb>
  8004205eaa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205eae:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205eb2:	74 0a                	je     8004205ebe <page_check+0x3eb>
  8004205eb4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205eb8:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205ebc:	75 35                	jne    8004205ef3 <page_check+0x420>
  8004205ebe:	48 b9 28 ef 21 04 80 	movabs $0x800421ef28,%rcx
  8004205ec5:	00 00 00 
  8004205ec8:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004205ecf:	00 00 00 
  8004205ed2:	be 0e 05 00 00       	mov    $0x50e,%esi
  8004205ed7:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004205ede:	00 00 00 
  8004205ee1:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205ee6:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004205eed:	00 00 00 
  8004205ef0:	41 ff d0             	callq  *%r8
  8004205ef3:	48 b8 38 f2 4d 04 80 	movabs $0x80044df238,%rax
  8004205efa:	00 00 00 
  8004205efd:	48 8b 00             	mov    (%rax),%rax
  8004205f00:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004205f04:	48 b8 38 f2 4d 04 80 	movabs $0x80044df238,%rax
  8004205f0b:	00 00 00 
  8004205f0e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004205f15:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205f1a:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  8004205f21:	00 00 00 
  8004205f24:	ff d0                	callq  *%rax
  8004205f26:	48 85 c0             	test   %rax,%rax
  8004205f29:	74 35                	je     8004205f60 <page_check+0x48d>
  8004205f2b:	48 b9 7f ec 21 04 80 	movabs $0x800421ec7f,%rcx
  8004205f32:	00 00 00 
  8004205f35:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004205f3c:	00 00 00 
  8004205f3f:	be 15 05 00 00       	mov    $0x515,%esi
  8004205f44:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004205f4b:	00 00 00 
  8004205f4e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205f53:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004205f5a:	00 00 00 
  8004205f5d:	41 ff d0             	callq  *%r8
  8004205f60:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  8004205f67:	00 00 00 
  8004205f6a:	48 8b 00             	mov    (%rax),%rax
  8004205f6d:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
  8004205f74:	be 00 00 00 00       	mov    $0x0,%esi
  8004205f79:	48 89 c7             	mov    %rax,%rdi
  8004205f7c:	48 b8 89 3d 20 04 80 	movabs $0x8004203d89,%rax
  8004205f83:	00 00 00 
  8004205f86:	ff d0                	callq  *%rax
  8004205f88:	48 85 c0             	test   %rax,%rax
  8004205f8b:	74 35                	je     8004205fc2 <page_check+0x4ef>
  8004205f8d:	48 b9 78 ef 21 04 80 	movabs $0x800421ef78,%rcx
  8004205f94:	00 00 00 
  8004205f97:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004205f9e:	00 00 00 
  8004205fa1:	be 18 05 00 00       	mov    $0x518,%esi
  8004205fa6:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004205fad:	00 00 00 
  8004205fb0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205fb5:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004205fbc:	00 00 00 
  8004205fbf:	41 ff d0             	callq  *%r8
  8004205fc2:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  8004205fc9:	00 00 00 
  8004205fcc:	48 8b 00             	mov    (%rax),%rax
  8004205fcf:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004205fd3:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004205fd8:	ba 00 00 00 00       	mov    $0x0,%edx
  8004205fdd:	48 89 c7             	mov    %rax,%rdi
  8004205fe0:	48 b8 19 3a 20 04 80 	movabs $0x8004203a19,%rax
  8004205fe7:	00 00 00 
  8004205fea:	ff d0                	callq  *%rax
  8004205fec:	85 c0                	test   %eax,%eax
  8004205fee:	78 35                	js     8004206025 <page_check+0x552>
  8004205ff0:	48 b9 b0 ef 21 04 80 	movabs $0x800421efb0,%rcx
  8004205ff7:	00 00 00 
  8004205ffa:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004206001:	00 00 00 
  8004206004:	be 1b 05 00 00       	mov    $0x51b,%esi
  8004206009:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004206010:	00 00 00 
  8004206013:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206018:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420601f:	00 00 00 
  8004206022:	41 ff d0             	callq  *%r8
  8004206025:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004206029:	48 89 c7             	mov    %rax,%rdi
  800420602c:	48 b8 59 2f 20 04 80 	movabs $0x8004202f59,%rax
  8004206033:	00 00 00 
  8004206036:	ff d0                	callq  *%rax
  8004206038:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  800420603f:	00 00 00 
  8004206042:	48 8b 00             	mov    (%rax),%rax
  8004206045:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004206049:	b9 00 00 00 00       	mov    $0x0,%ecx
  800420604e:	ba 00 00 00 00       	mov    $0x0,%edx
  8004206053:	48 89 c7             	mov    %rax,%rdi
  8004206056:	48 b8 19 3a 20 04 80 	movabs $0x8004203a19,%rax
  800420605d:	00 00 00 
  8004206060:	ff d0                	callq  *%rax
  8004206062:	85 c0                	test   %eax,%eax
  8004206064:	78 35                	js     800420609b <page_check+0x5c8>
  8004206066:	48 b9 b0 ef 21 04 80 	movabs $0x800421efb0,%rcx
  800420606d:	00 00 00 
  8004206070:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004206077:	00 00 00 
  800420607a:	be 1f 05 00 00       	mov    $0x51f,%esi
  800420607f:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004206086:	00 00 00 
  8004206089:	b8 00 00 00 00       	mov    $0x0,%eax
  800420608e:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206095:	00 00 00 
  8004206098:	41 ff d0             	callq  *%r8
  800420609b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420609f:	48 89 c7             	mov    %rax,%rdi
  80042060a2:	48 b8 59 2f 20 04 80 	movabs $0x8004202f59,%rax
  80042060a9:	00 00 00 
  80042060ac:	ff d0                	callq  *%rax
  80042060ae:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042060b2:	48 89 c7             	mov    %rax,%rdi
  80042060b5:	48 b8 59 2f 20 04 80 	movabs $0x8004202f59,%rax
  80042060bc:	00 00 00 
  80042060bf:	ff d0                	callq  *%rax
  80042060c1:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  80042060c8:	00 00 00 
  80042060cb:	48 8b 00             	mov    (%rax),%rax
  80042060ce:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  80042060d2:	b9 00 00 00 00       	mov    $0x0,%ecx
  80042060d7:	ba 00 00 00 00       	mov    $0x0,%edx
  80042060dc:	48 89 c7             	mov    %rax,%rdi
  80042060df:	48 b8 19 3a 20 04 80 	movabs $0x8004203a19,%rax
  80042060e6:	00 00 00 
  80042060e9:	ff d0                	callq  *%rax
  80042060eb:	85 c0                	test   %eax,%eax
  80042060ed:	74 35                	je     8004206124 <page_check+0x651>
  80042060ef:	48 b9 e0 ef 21 04 80 	movabs $0x800421efe0,%rcx
  80042060f6:	00 00 00 
  80042060f9:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004206100:	00 00 00 
  8004206103:	be 25 05 00 00       	mov    $0x525,%esi
  8004206108:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  800420610f:	00 00 00 
  8004206112:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206117:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420611e:	00 00 00 
  8004206121:	41 ff d0             	callq  *%r8
  8004206124:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  800420612b:	00 00 00 
  800420612e:	48 8b 00             	mov    (%rax),%rax
  8004206131:	48 8b 00             	mov    (%rax),%rax
  8004206134:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420613a:	48 89 c3             	mov    %rax,%rbx
  800420613d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004206141:	48 89 c7             	mov    %rax,%rdi
  8004206144:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  800420614b:	00 00 00 
  800420614e:	ff d0                	callq  *%rax
  8004206150:	48 39 c3             	cmp    %rax,%rbx
  8004206153:	0f 84 97 00 00 00    	je     80042061f0 <page_check+0x71d>
  8004206159:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  8004206160:	00 00 00 
  8004206163:	48 8b 00             	mov    (%rax),%rax
  8004206166:	48 8b 00             	mov    (%rax),%rax
  8004206169:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420616f:	48 89 c3             	mov    %rax,%rbx
  8004206172:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004206176:	48 89 c7             	mov    %rax,%rdi
  8004206179:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  8004206180:	00 00 00 
  8004206183:	ff d0                	callq  *%rax
  8004206185:	48 39 c3             	cmp    %rax,%rbx
  8004206188:	74 66                	je     80042061f0 <page_check+0x71d>
  800420618a:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  8004206191:	00 00 00 
  8004206194:	48 8b 00             	mov    (%rax),%rax
  8004206197:	48 8b 00             	mov    (%rax),%rax
  800420619a:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042061a0:	48 89 c3             	mov    %rax,%rbx
  80042061a3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042061a7:	48 89 c7             	mov    %rax,%rdi
  80042061aa:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  80042061b1:	00 00 00 
  80042061b4:	ff d0                	callq  *%rax
  80042061b6:	48 39 c3             	cmp    %rax,%rbx
  80042061b9:	74 35                	je     80042061f0 <page_check+0x71d>
  80042061bb:	48 b9 10 f0 21 04 80 	movabs $0x800421f010,%rcx
  80042061c2:	00 00 00 
  80042061c5:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  80042061cc:	00 00 00 
  80042061cf:	be 26 05 00 00       	mov    $0x526,%esi
  80042061d4:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  80042061db:	00 00 00 
  80042061de:	b8 00 00 00 00       	mov    $0x0,%eax
  80042061e3:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042061ea:	00 00 00 
  80042061ed:	41 ff d0             	callq  *%r8
  80042061f0:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  80042061f7:	00 00 00 
  80042061fa:	48 8b 00             	mov    (%rax),%rax
  80042061fd:	be 00 00 00 00       	mov    $0x0,%esi
  8004206202:	48 89 c7             	mov    %rax,%rdi
  8004206205:	48 b8 59 58 20 04 80 	movabs $0x8004205859,%rax
  800420620c:	00 00 00 
  800420620f:	ff d0                	callq  *%rax
  8004206211:	48 89 c3             	mov    %rax,%rbx
  8004206214:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206218:	48 89 c7             	mov    %rax,%rdi
  800420621b:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  8004206222:	00 00 00 
  8004206225:	ff d0                	callq  *%rax
  8004206227:	48 39 c3             	cmp    %rax,%rbx
  800420622a:	74 35                	je     8004206261 <page_check+0x78e>
  800420622c:	48 b9 98 f0 21 04 80 	movabs $0x800421f098,%rcx
  8004206233:	00 00 00 
  8004206236:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  800420623d:	00 00 00 
  8004206240:	be 27 05 00 00       	mov    $0x527,%esi
  8004206245:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  800420624c:	00 00 00 
  800420624f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206254:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420625b:	00 00 00 
  800420625e:	41 ff d0             	callq  *%r8
  8004206261:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206265:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206269:	66 83 f8 01          	cmp    $0x1,%ax
  800420626d:	74 35                	je     80042062a4 <page_check+0x7d1>
  800420626f:	48 b9 c5 f0 21 04 80 	movabs $0x800421f0c5,%rcx
  8004206276:	00 00 00 
  8004206279:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004206280:	00 00 00 
  8004206283:	be 28 05 00 00       	mov    $0x528,%esi
  8004206288:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  800420628f:	00 00 00 
  8004206292:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206297:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420629e:	00 00 00 
  80042062a1:	41 ff d0             	callq  *%r8
  80042062a4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042062a8:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042062ac:	66 83 f8 01          	cmp    $0x1,%ax
  80042062b0:	74 35                	je     80042062e7 <page_check+0x814>
  80042062b2:	48 b9 d6 f0 21 04 80 	movabs $0x800421f0d6,%rcx
  80042062b9:	00 00 00 
  80042062bc:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  80042062c3:	00 00 00 
  80042062c6:	be 29 05 00 00       	mov    $0x529,%esi
  80042062cb:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  80042062d2:	00 00 00 
  80042062d5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042062da:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042062e1:	00 00 00 
  80042062e4:	41 ff d0             	callq  *%r8
  80042062e7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042062eb:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042062ef:	66 83 f8 01          	cmp    $0x1,%ax
  80042062f3:	74 35                	je     800420632a <page_check+0x857>
  80042062f5:	48 b9 e7 f0 21 04 80 	movabs $0x800421f0e7,%rcx
  80042062fc:	00 00 00 
  80042062ff:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004206306:	00 00 00 
  8004206309:	be 2a 05 00 00       	mov    $0x52a,%esi
  800420630e:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004206315:	00 00 00 
  8004206318:	b8 00 00 00 00       	mov    $0x0,%eax
  800420631d:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206324:	00 00 00 
  8004206327:	41 ff d0             	callq  *%r8
  800420632a:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  8004206331:	00 00 00 
  8004206334:	48 8b 00             	mov    (%rax),%rax
  8004206337:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  800420633b:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206340:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004206345:	48 89 c7             	mov    %rax,%rdi
  8004206348:	48 b8 19 3a 20 04 80 	movabs $0x8004203a19,%rax
  800420634f:	00 00 00 
  8004206352:	ff d0                	callq  *%rax
  8004206354:	85 c0                	test   %eax,%eax
  8004206356:	74 35                	je     800420638d <page_check+0x8ba>
  8004206358:	48 b9 f8 f0 21 04 80 	movabs $0x800421f0f8,%rcx
  800420635f:	00 00 00 
  8004206362:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004206369:	00 00 00 
  800420636c:	be 2c 05 00 00       	mov    $0x52c,%esi
  8004206371:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004206378:	00 00 00 
  800420637b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206380:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206387:	00 00 00 
  800420638a:	41 ff d0             	callq  *%r8
  800420638d:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  8004206394:	00 00 00 
  8004206397:	48 8b 00             	mov    (%rax),%rax
  800420639a:	be 00 10 00 00       	mov    $0x1000,%esi
  800420639f:	48 89 c7             	mov    %rax,%rdi
  80042063a2:	48 b8 59 58 20 04 80 	movabs $0x8004205859,%rax
  80042063a9:	00 00 00 
  80042063ac:	ff d0                	callq  *%rax
  80042063ae:	48 89 c3             	mov    %rax,%rbx
  80042063b1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042063b5:	48 89 c7             	mov    %rax,%rdi
  80042063b8:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  80042063bf:	00 00 00 
  80042063c2:	ff d0                	callq  *%rax
  80042063c4:	48 39 c3             	cmp    %rax,%rbx
  80042063c7:	74 35                	je     80042063fe <page_check+0x92b>
  80042063c9:	48 b9 30 f1 21 04 80 	movabs $0x800421f130,%rcx
  80042063d0:	00 00 00 
  80042063d3:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  80042063da:	00 00 00 
  80042063dd:	be 2d 05 00 00       	mov    $0x52d,%esi
  80042063e2:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  80042063e9:	00 00 00 
  80042063ec:	b8 00 00 00 00       	mov    $0x0,%eax
  80042063f1:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042063f8:	00 00 00 
  80042063fb:	41 ff d0             	callq  *%r8
  80042063fe:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206402:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206406:	66 83 f8 02          	cmp    $0x2,%ax
  800420640a:	74 35                	je     8004206441 <page_check+0x96e>
  800420640c:	48 b9 60 f1 21 04 80 	movabs $0x800421f160,%rcx
  8004206413:	00 00 00 
  8004206416:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  800420641d:	00 00 00 
  8004206420:	be 2e 05 00 00       	mov    $0x52e,%esi
  8004206425:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  800420642c:	00 00 00 
  800420642f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206434:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420643b:	00 00 00 
  800420643e:	41 ff d0             	callq  *%r8
  8004206441:	bf 00 00 00 00       	mov    $0x0,%edi
  8004206446:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  800420644d:	00 00 00 
  8004206450:	ff d0                	callq  *%rax
  8004206452:	48 85 c0             	test   %rax,%rax
  8004206455:	74 35                	je     800420648c <page_check+0x9b9>
  8004206457:	48 b9 7f ec 21 04 80 	movabs $0x800421ec7f,%rcx
  800420645e:	00 00 00 
  8004206461:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004206468:	00 00 00 
  800420646b:	be 31 05 00 00       	mov    $0x531,%esi
  8004206470:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004206477:	00 00 00 
  800420647a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420647f:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206486:	00 00 00 
  8004206489:	41 ff d0             	callq  *%r8
  800420648c:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  8004206493:	00 00 00 
  8004206496:	48 8b 00             	mov    (%rax),%rax
  8004206499:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  800420649d:	b9 00 00 00 00       	mov    $0x0,%ecx
  80042064a2:	ba 00 10 00 00       	mov    $0x1000,%edx
  80042064a7:	48 89 c7             	mov    %rax,%rdi
  80042064aa:	48 b8 19 3a 20 04 80 	movabs $0x8004203a19,%rax
  80042064b1:	00 00 00 
  80042064b4:	ff d0                	callq  *%rax
  80042064b6:	85 c0                	test   %eax,%eax
  80042064b8:	74 35                	je     80042064ef <page_check+0xa1c>
  80042064ba:	48 b9 f8 f0 21 04 80 	movabs $0x800421f0f8,%rcx
  80042064c1:	00 00 00 
  80042064c4:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  80042064cb:	00 00 00 
  80042064ce:	be 34 05 00 00       	mov    $0x534,%esi
  80042064d3:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  80042064da:	00 00 00 
  80042064dd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042064e2:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042064e9:	00 00 00 
  80042064ec:	41 ff d0             	callq  *%r8
  80042064ef:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  80042064f6:	00 00 00 
  80042064f9:	48 8b 00             	mov    (%rax),%rax
  80042064fc:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206501:	48 89 c7             	mov    %rax,%rdi
  8004206504:	48 b8 59 58 20 04 80 	movabs $0x8004205859,%rax
  800420650b:	00 00 00 
  800420650e:	ff d0                	callq  *%rax
  8004206510:	48 89 c3             	mov    %rax,%rbx
  8004206513:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206517:	48 89 c7             	mov    %rax,%rdi
  800420651a:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  8004206521:	00 00 00 
  8004206524:	ff d0                	callq  *%rax
  8004206526:	48 39 c3             	cmp    %rax,%rbx
  8004206529:	74 35                	je     8004206560 <page_check+0xa8d>
  800420652b:	48 b9 30 f1 21 04 80 	movabs $0x800421f130,%rcx
  8004206532:	00 00 00 
  8004206535:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  800420653c:	00 00 00 
  800420653f:	be 35 05 00 00       	mov    $0x535,%esi
  8004206544:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  800420654b:	00 00 00 
  800420654e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206553:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420655a:	00 00 00 
  800420655d:	41 ff d0             	callq  *%r8
  8004206560:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206564:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206568:	66 83 f8 02          	cmp    $0x2,%ax
  800420656c:	74 35                	je     80042065a3 <page_check+0xad0>
  800420656e:	48 b9 60 f1 21 04 80 	movabs $0x800421f160,%rcx
  8004206575:	00 00 00 
  8004206578:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  800420657f:	00 00 00 
  8004206582:	be 36 05 00 00       	mov    $0x536,%esi
  8004206587:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  800420658e:	00 00 00 
  8004206591:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206596:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420659d:	00 00 00 
  80042065a0:	41 ff d0             	callq  *%r8
  80042065a3:	bf 00 00 00 00       	mov    $0x0,%edi
  80042065a8:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  80042065af:	00 00 00 
  80042065b2:	ff d0                	callq  *%rax
  80042065b4:	48 85 c0             	test   %rax,%rax
  80042065b7:	74 35                	je     80042065ee <page_check+0xb1b>
  80042065b9:	48 b9 7f ec 21 04 80 	movabs $0x800421ec7f,%rcx
  80042065c0:	00 00 00 
  80042065c3:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  80042065ca:	00 00 00 
  80042065cd:	be 3a 05 00 00       	mov    $0x53a,%esi
  80042065d2:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  80042065d9:	00 00 00 
  80042065dc:	b8 00 00 00 00       	mov    $0x0,%eax
  80042065e1:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042065e8:	00 00 00 
  80042065eb:	41 ff d0             	callq  *%r8
  80042065ee:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  80042065f5:	00 00 00 
  80042065f8:	48 8b 00             	mov    (%rax),%rax
  80042065fb:	48 8b 00             	mov    (%rax),%rax
  80042065fe:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004206604:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  8004206608:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420660c:	48 c1 e8 0c          	shr    $0xc,%rax
  8004206610:	89 45 a4             	mov    %eax,-0x5c(%rbp)
  8004206613:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004206616:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  800420661d:	00 00 00 
  8004206620:	48 8b 00             	mov    (%rax),%rax
  8004206623:	48 39 c2             	cmp    %rax,%rdx
  8004206626:	72 32                	jb     800420665a <page_check+0xb87>
  8004206628:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420662c:	48 89 c1             	mov    %rax,%rcx
  800420662f:	48 ba 58 e7 21 04 80 	movabs $0x800421e758,%rdx
  8004206636:	00 00 00 
  8004206639:	be 3c 05 00 00       	mov    $0x53c,%esi
  800420663e:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004206645:	00 00 00 
  8004206648:	b8 00 00 00 00       	mov    $0x0,%eax
  800420664d:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206654:	00 00 00 
  8004206657:	41 ff d0             	callq  *%r8
  800420665a:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004206661:	00 00 00 
  8004206664:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004206668:	48 01 d0             	add    %rdx,%rax
  800420666b:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800420666f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004206673:	48 8b 00             	mov    (%rax),%rax
  8004206676:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420667c:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  8004206680:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004206684:	48 c1 e8 0c          	shr    $0xc,%rax
  8004206688:	89 45 8c             	mov    %eax,-0x74(%rbp)
  800420668b:	8b 55 8c             	mov    -0x74(%rbp),%edx
  800420668e:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  8004206695:	00 00 00 
  8004206698:	48 8b 00             	mov    (%rax),%rax
  800420669b:	48 39 c2             	cmp    %rax,%rdx
  800420669e:	72 32                	jb     80042066d2 <page_check+0xbff>
  80042066a0:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042066a4:	48 89 c1             	mov    %rax,%rcx
  80042066a7:	48 ba 58 e7 21 04 80 	movabs $0x800421e758,%rdx
  80042066ae:	00 00 00 
  80042066b1:	be 3d 05 00 00       	mov    $0x53d,%esi
  80042066b6:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  80042066bd:	00 00 00 
  80042066c0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042066c5:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042066cc:	00 00 00 
  80042066cf:	41 ff d0             	callq  *%r8
  80042066d2:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042066d9:	00 00 00 
  80042066dc:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042066e0:	48 01 d0             	add    %rdx,%rax
  80042066e3:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  80042066e7:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042066eb:	48 8b 00             	mov    (%rax),%rax
  80042066ee:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042066f4:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  80042066fb:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004206702:	48 c1 e8 0c          	shr    $0xc,%rax
  8004206706:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%rbp)
  800420670c:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
  8004206712:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  8004206719:	00 00 00 
  800420671c:	48 8b 00             	mov    (%rax),%rax
  800420671f:	48 39 c2             	cmp    %rax,%rdx
  8004206722:	72 35                	jb     8004206759 <page_check+0xc86>
  8004206724:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420672b:	48 89 c1             	mov    %rax,%rcx
  800420672e:	48 ba 58 e7 21 04 80 	movabs $0x800421e758,%rdx
  8004206735:	00 00 00 
  8004206738:	be 3e 05 00 00       	mov    $0x53e,%esi
  800420673d:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004206744:	00 00 00 
  8004206747:	b8 00 00 00 00       	mov    $0x0,%eax
  800420674c:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206753:	00 00 00 
  8004206756:	41 ff d0             	callq  *%r8
  8004206759:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004206760:	00 00 00 
  8004206763:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420676a:	48 01 d0             	add    %rdx,%rax
  800420676d:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  8004206774:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  800420677b:	00 00 00 
  800420677e:	48 8b 00             	mov    (%rax),%rax
  8004206781:	ba 00 00 00 00       	mov    $0x0,%edx
  8004206786:	be 00 10 00 00       	mov    $0x1000,%esi
  800420678b:	48 89 c7             	mov    %rax,%rdi
  800420678e:	48 b8 1c 30 20 04 80 	movabs $0x800420301c,%rax
  8004206795:	00 00 00 
  8004206798:	ff d0                	callq  *%rax
  800420679a:	48 8b 95 e0 fe ff ff 	mov    -0x120(%rbp),%rdx
  80042067a1:	48 83 c2 08          	add    $0x8,%rdx
  80042067a5:	48 39 d0             	cmp    %rdx,%rax
  80042067a8:	74 35                	je     80042067df <page_check+0xd0c>
  80042067aa:	48 b9 78 f1 21 04 80 	movabs $0x800421f178,%rcx
  80042067b1:	00 00 00 
  80042067b4:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  80042067bb:	00 00 00 
  80042067be:	be 3f 05 00 00       	mov    $0x53f,%esi
  80042067c3:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  80042067ca:	00 00 00 
  80042067cd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042067d2:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042067d9:	00 00 00 
  80042067dc:	41 ff d0             	callq  *%r8
  80042067df:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  80042067e6:	00 00 00 
  80042067e9:	48 8b 00             	mov    (%rax),%rax
  80042067ec:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  80042067f0:	b9 04 00 00 00       	mov    $0x4,%ecx
  80042067f5:	ba 00 10 00 00       	mov    $0x1000,%edx
  80042067fa:	48 89 c7             	mov    %rax,%rdi
  80042067fd:	48 b8 19 3a 20 04 80 	movabs $0x8004203a19,%rax
  8004206804:	00 00 00 
  8004206807:	ff d0                	callq  *%rax
  8004206809:	85 c0                	test   %eax,%eax
  800420680b:	74 35                	je     8004206842 <page_check+0xd6f>
  800420680d:	48 b9 b8 f1 21 04 80 	movabs $0x800421f1b8,%rcx
  8004206814:	00 00 00 
  8004206817:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  800420681e:	00 00 00 
  8004206821:	be 42 05 00 00       	mov    $0x542,%esi
  8004206826:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  800420682d:	00 00 00 
  8004206830:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206835:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420683c:	00 00 00 
  800420683f:	41 ff d0             	callq  *%r8
  8004206842:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  8004206849:	00 00 00 
  800420684c:	48 8b 00             	mov    (%rax),%rax
  800420684f:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206854:	48 89 c7             	mov    %rax,%rdi
  8004206857:	48 b8 59 58 20 04 80 	movabs $0x8004205859,%rax
  800420685e:	00 00 00 
  8004206861:	ff d0                	callq  *%rax
  8004206863:	48 89 c3             	mov    %rax,%rbx
  8004206866:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420686a:	48 89 c7             	mov    %rax,%rdi
  800420686d:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  8004206874:	00 00 00 
  8004206877:	ff d0                	callq  *%rax
  8004206879:	48 39 c3             	cmp    %rax,%rbx
  800420687c:	74 35                	je     80042068b3 <page_check+0xde0>
  800420687e:	48 b9 30 f1 21 04 80 	movabs $0x800421f130,%rcx
  8004206885:	00 00 00 
  8004206888:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  800420688f:	00 00 00 
  8004206892:	be 43 05 00 00       	mov    $0x543,%esi
  8004206897:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  800420689e:	00 00 00 
  80042068a1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042068a6:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042068ad:	00 00 00 
  80042068b0:	41 ff d0             	callq  *%r8
  80042068b3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042068b7:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042068bb:	66 83 f8 02          	cmp    $0x2,%ax
  80042068bf:	74 35                	je     80042068f6 <page_check+0xe23>
  80042068c1:	48 b9 60 f1 21 04 80 	movabs $0x800421f160,%rcx
  80042068c8:	00 00 00 
  80042068cb:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  80042068d2:	00 00 00 
  80042068d5:	be 44 05 00 00       	mov    $0x544,%esi
  80042068da:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  80042068e1:	00 00 00 
  80042068e4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042068e9:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042068f0:	00 00 00 
  80042068f3:	41 ff d0             	callq  *%r8
  80042068f6:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  80042068fd:	00 00 00 
  8004206900:	48 8b 00             	mov    (%rax),%rax
  8004206903:	ba 00 00 00 00       	mov    $0x0,%edx
  8004206908:	be 00 10 00 00       	mov    $0x1000,%esi
  800420690d:	48 89 c7             	mov    %rax,%rdi
  8004206910:	48 b8 1c 30 20 04 80 	movabs $0x800420301c,%rax
  8004206917:	00 00 00 
  800420691a:	ff d0                	callq  *%rax
  800420691c:	48 8b 00             	mov    (%rax),%rax
  800420691f:	83 e0 04             	and    $0x4,%eax
  8004206922:	48 85 c0             	test   %rax,%rax
  8004206925:	75 35                	jne    800420695c <page_check+0xe89>
  8004206927:	48 b9 f8 f1 21 04 80 	movabs $0x800421f1f8,%rcx
  800420692e:	00 00 00 
  8004206931:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004206938:	00 00 00 
  800420693b:	be 45 05 00 00       	mov    $0x545,%esi
  8004206940:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004206947:	00 00 00 
  800420694a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420694f:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206956:	00 00 00 
  8004206959:	41 ff d0             	callq  *%r8
  800420695c:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  8004206963:	00 00 00 
  8004206966:	48 8b 00             	mov    (%rax),%rax
  8004206969:	48 8b 00             	mov    (%rax),%rax
  800420696c:	83 e0 04             	and    $0x4,%eax
  800420696f:	48 85 c0             	test   %rax,%rax
  8004206972:	75 35                	jne    80042069a9 <page_check+0xed6>
  8004206974:	48 b9 2b f2 21 04 80 	movabs $0x800421f22b,%rcx
  800420697b:	00 00 00 
  800420697e:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004206985:	00 00 00 
  8004206988:	be 46 05 00 00       	mov    $0x546,%esi
  800420698d:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004206994:	00 00 00 
  8004206997:	b8 00 00 00 00       	mov    $0x0,%eax
  800420699c:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042069a3:	00 00 00 
  80042069a6:	41 ff d0             	callq  *%r8
  80042069a9:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  80042069b0:	00 00 00 
  80042069b3:	48 8b 00             	mov    (%rax),%rax
  80042069b6:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  80042069ba:	b9 00 00 00 00       	mov    $0x0,%ecx
  80042069bf:	ba 00 00 20 00       	mov    $0x200000,%edx
  80042069c4:	48 89 c7             	mov    %rax,%rdi
  80042069c7:	48 b8 19 3a 20 04 80 	movabs $0x8004203a19,%rax
  80042069ce:	00 00 00 
  80042069d1:	ff d0                	callq  *%rax
  80042069d3:	85 c0                	test   %eax,%eax
  80042069d5:	78 35                	js     8004206a0c <page_check+0xf39>
  80042069d7:	48 b9 48 f2 21 04 80 	movabs $0x800421f248,%rcx
  80042069de:	00 00 00 
  80042069e1:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  80042069e8:	00 00 00 
  80042069eb:	be 4a 05 00 00       	mov    $0x54a,%esi
  80042069f0:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  80042069f7:	00 00 00 
  80042069fa:	b8 00 00 00 00       	mov    $0x0,%eax
  80042069ff:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206a06:	00 00 00 
  8004206a09:	41 ff d0             	callq  *%r8
  8004206a0c:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  8004206a13:	00 00 00 
  8004206a16:	48 8b 00             	mov    (%rax),%rax
  8004206a19:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004206a1d:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206a22:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004206a27:	48 89 c7             	mov    %rax,%rdi
  8004206a2a:	48 b8 19 3a 20 04 80 	movabs $0x8004203a19,%rax
  8004206a31:	00 00 00 
  8004206a34:	ff d0                	callq  *%rax
  8004206a36:	85 c0                	test   %eax,%eax
  8004206a38:	74 35                	je     8004206a6f <page_check+0xf9c>
  8004206a3a:	48 b9 80 f2 21 04 80 	movabs $0x800421f280,%rcx
  8004206a41:	00 00 00 
  8004206a44:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004206a4b:	00 00 00 
  8004206a4e:	be 4d 05 00 00       	mov    $0x54d,%esi
  8004206a53:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004206a5a:	00 00 00 
  8004206a5d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206a62:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206a69:	00 00 00 
  8004206a6c:	41 ff d0             	callq  *%r8
  8004206a6f:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  8004206a76:	00 00 00 
  8004206a79:	48 8b 00             	mov    (%rax),%rax
  8004206a7c:	ba 00 00 00 00       	mov    $0x0,%edx
  8004206a81:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206a86:	48 89 c7             	mov    %rax,%rdi
  8004206a89:	48 b8 1c 30 20 04 80 	movabs $0x800420301c,%rax
  8004206a90:	00 00 00 
  8004206a93:	ff d0                	callq  *%rax
  8004206a95:	48 8b 00             	mov    (%rax),%rax
  8004206a98:	83 e0 04             	and    $0x4,%eax
  8004206a9b:	48 85 c0             	test   %rax,%rax
  8004206a9e:	74 35                	je     8004206ad5 <page_check+0x1002>
  8004206aa0:	48 b9 b8 f2 21 04 80 	movabs $0x800421f2b8,%rcx
  8004206aa7:	00 00 00 
  8004206aaa:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004206ab1:	00 00 00 
  8004206ab4:	be 4e 05 00 00       	mov    $0x54e,%esi
  8004206ab9:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004206ac0:	00 00 00 
  8004206ac3:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206ac8:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206acf:	00 00 00 
  8004206ad2:	41 ff d0             	callq  *%r8
  8004206ad5:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  8004206adc:	00 00 00 
  8004206adf:	48 8b 00             	mov    (%rax),%rax
  8004206ae2:	be 00 00 00 00       	mov    $0x0,%esi
  8004206ae7:	48 89 c7             	mov    %rax,%rdi
  8004206aea:	48 b8 59 58 20 04 80 	movabs $0x8004205859,%rax
  8004206af1:	00 00 00 
  8004206af4:	ff d0                	callq  *%rax
  8004206af6:	48 89 c3             	mov    %rax,%rbx
  8004206af9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206afd:	48 89 c7             	mov    %rax,%rdi
  8004206b00:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  8004206b07:	00 00 00 
  8004206b0a:	ff d0                	callq  *%rax
  8004206b0c:	48 39 c3             	cmp    %rax,%rbx
  8004206b0f:	74 35                	je     8004206b46 <page_check+0x1073>
  8004206b11:	48 b9 f0 f2 21 04 80 	movabs $0x800421f2f0,%rcx
  8004206b18:	00 00 00 
  8004206b1b:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004206b22:	00 00 00 
  8004206b25:	be 51 05 00 00       	mov    $0x551,%esi
  8004206b2a:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004206b31:	00 00 00 
  8004206b34:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206b39:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206b40:	00 00 00 
  8004206b43:	41 ff d0             	callq  *%r8
  8004206b46:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  8004206b4d:	00 00 00 
  8004206b50:	48 8b 00             	mov    (%rax),%rax
  8004206b53:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206b58:	48 89 c7             	mov    %rax,%rdi
  8004206b5b:	48 b8 59 58 20 04 80 	movabs $0x8004205859,%rax
  8004206b62:	00 00 00 
  8004206b65:	ff d0                	callq  *%rax
  8004206b67:	48 89 c3             	mov    %rax,%rbx
  8004206b6a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206b6e:	48 89 c7             	mov    %rax,%rdi
  8004206b71:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  8004206b78:	00 00 00 
  8004206b7b:	ff d0                	callq  *%rax
  8004206b7d:	48 39 c3             	cmp    %rax,%rbx
  8004206b80:	74 35                	je     8004206bb7 <page_check+0x10e4>
  8004206b82:	48 b9 20 f3 21 04 80 	movabs $0x800421f320,%rcx
  8004206b89:	00 00 00 
  8004206b8c:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004206b93:	00 00 00 
  8004206b96:	be 52 05 00 00       	mov    $0x552,%esi
  8004206b9b:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004206ba2:	00 00 00 
  8004206ba5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206baa:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206bb1:	00 00 00 
  8004206bb4:	41 ff d0             	callq  *%r8
  8004206bb7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206bbb:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206bbf:	66 83 f8 02          	cmp    $0x2,%ax
  8004206bc3:	74 35                	je     8004206bfa <page_check+0x1127>
  8004206bc5:	48 b9 50 f3 21 04 80 	movabs $0x800421f350,%rcx
  8004206bcc:	00 00 00 
  8004206bcf:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004206bd6:	00 00 00 
  8004206bd9:	be 54 05 00 00       	mov    $0x554,%esi
  8004206bde:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004206be5:	00 00 00 
  8004206be8:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206bed:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206bf4:	00 00 00 
  8004206bf7:	41 ff d0             	callq  *%r8
  8004206bfa:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206bfe:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206c02:	66 83 f8 01          	cmp    $0x1,%ax
  8004206c06:	74 35                	je     8004206c3d <page_check+0x116a>
  8004206c08:	48 b9 61 f3 21 04 80 	movabs $0x800421f361,%rcx
  8004206c0f:	00 00 00 
  8004206c12:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004206c19:	00 00 00 
  8004206c1c:	be 55 05 00 00       	mov    $0x555,%esi
  8004206c21:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004206c28:	00 00 00 
  8004206c2b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206c30:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206c37:	00 00 00 
  8004206c3a:	41 ff d0             	callq  *%r8
  8004206c3d:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  8004206c44:	00 00 00 
  8004206c47:	48 8b 00             	mov    (%rax),%rax
  8004206c4a:	be 00 00 00 00       	mov    $0x0,%esi
  8004206c4f:	48 89 c7             	mov    %rax,%rdi
  8004206c52:	48 b8 14 3e 20 04 80 	movabs $0x8004203e14,%rax
  8004206c59:	00 00 00 
  8004206c5c:	ff d0                	callq  *%rax
  8004206c5e:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  8004206c65:	00 00 00 
  8004206c68:	48 8b 00             	mov    (%rax),%rax
  8004206c6b:	be 00 00 00 00       	mov    $0x0,%esi
  8004206c70:	48 89 c7             	mov    %rax,%rdi
  8004206c73:	48 b8 59 58 20 04 80 	movabs $0x8004205859,%rax
  8004206c7a:	00 00 00 
  8004206c7d:	ff d0                	callq  *%rax
  8004206c7f:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004206c83:	74 35                	je     8004206cba <page_check+0x11e7>
  8004206c85:	48 b9 78 f3 21 04 80 	movabs $0x800421f378,%rcx
  8004206c8c:	00 00 00 
  8004206c8f:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004206c96:	00 00 00 
  8004206c99:	be 5a 05 00 00       	mov    $0x55a,%esi
  8004206c9e:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004206ca5:	00 00 00 
  8004206ca8:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206cad:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206cb4:	00 00 00 
  8004206cb7:	41 ff d0             	callq  *%r8
  8004206cba:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  8004206cc1:	00 00 00 
  8004206cc4:	48 8b 00             	mov    (%rax),%rax
  8004206cc7:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206ccc:	48 89 c7             	mov    %rax,%rdi
  8004206ccf:	48 b8 59 58 20 04 80 	movabs $0x8004205859,%rax
  8004206cd6:	00 00 00 
  8004206cd9:	ff d0                	callq  *%rax
  8004206cdb:	48 89 c3             	mov    %rax,%rbx
  8004206cde:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206ce2:	48 89 c7             	mov    %rax,%rdi
  8004206ce5:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  8004206cec:	00 00 00 
  8004206cef:	ff d0                	callq  *%rax
  8004206cf1:	48 39 c3             	cmp    %rax,%rbx
  8004206cf4:	74 35                	je     8004206d2b <page_check+0x1258>
  8004206cf6:	48 b9 20 f3 21 04 80 	movabs $0x800421f320,%rcx
  8004206cfd:	00 00 00 
  8004206d00:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004206d07:	00 00 00 
  8004206d0a:	be 5b 05 00 00       	mov    $0x55b,%esi
  8004206d0f:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004206d16:	00 00 00 
  8004206d19:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206d1e:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206d25:	00 00 00 
  8004206d28:	41 ff d0             	callq  *%r8
  8004206d2b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206d2f:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206d33:	66 83 f8 01          	cmp    $0x1,%ax
  8004206d37:	74 35                	je     8004206d6e <page_check+0x129b>
  8004206d39:	48 b9 c5 f0 21 04 80 	movabs $0x800421f0c5,%rcx
  8004206d40:	00 00 00 
  8004206d43:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004206d4a:	00 00 00 
  8004206d4d:	be 5c 05 00 00       	mov    $0x55c,%esi
  8004206d52:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004206d59:	00 00 00 
  8004206d5c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206d61:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206d68:	00 00 00 
  8004206d6b:	41 ff d0             	callq  *%r8
  8004206d6e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206d72:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206d76:	66 83 f8 01          	cmp    $0x1,%ax
  8004206d7a:	74 35                	je     8004206db1 <page_check+0x12de>
  8004206d7c:	48 b9 61 f3 21 04 80 	movabs $0x800421f361,%rcx
  8004206d83:	00 00 00 
  8004206d86:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004206d8d:	00 00 00 
  8004206d90:	be 5d 05 00 00       	mov    $0x55d,%esi
  8004206d95:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004206d9c:	00 00 00 
  8004206d9f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206da4:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206dab:	00 00 00 
  8004206dae:	41 ff d0             	callq  *%r8
  8004206db1:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  8004206db8:	00 00 00 
  8004206dbb:	48 8b 00             	mov    (%rax),%rax
  8004206dbe:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004206dc2:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206dc7:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004206dcc:	48 89 c7             	mov    %rax,%rdi
  8004206dcf:	48 b8 19 3a 20 04 80 	movabs $0x8004203a19,%rax
  8004206dd6:	00 00 00 
  8004206dd9:	ff d0                	callq  *%rax
  8004206ddb:	85 c0                	test   %eax,%eax
  8004206ddd:	74 35                	je     8004206e14 <page_check+0x1341>
  8004206ddf:	48 b9 80 f2 21 04 80 	movabs $0x800421f280,%rcx
  8004206de6:	00 00 00 
  8004206de9:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004206df0:	00 00 00 
  8004206df3:	be 61 05 00 00       	mov    $0x561,%esi
  8004206df8:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004206dff:	00 00 00 
  8004206e02:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206e07:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206e0e:	00 00 00 
  8004206e11:	41 ff d0             	callq  *%r8
  8004206e14:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206e18:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206e1c:	66 85 c0             	test   %ax,%ax
  8004206e1f:	75 35                	jne    8004206e56 <page_check+0x1383>
  8004206e21:	48 b9 9b f3 21 04 80 	movabs $0x800421f39b,%rcx
  8004206e28:	00 00 00 
  8004206e2b:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004206e32:	00 00 00 
  8004206e35:	be 62 05 00 00       	mov    $0x562,%esi
  8004206e3a:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004206e41:	00 00 00 
  8004206e44:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206e49:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206e50:	00 00 00 
  8004206e53:	41 ff d0             	callq  *%r8
  8004206e56:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206e5a:	48 8b 00             	mov    (%rax),%rax
  8004206e5d:	48 85 c0             	test   %rax,%rax
  8004206e60:	74 35                	je     8004206e97 <page_check+0x13c4>
  8004206e62:	48 b9 a7 f3 21 04 80 	movabs $0x800421f3a7,%rcx
  8004206e69:	00 00 00 
  8004206e6c:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004206e73:	00 00 00 
  8004206e76:	be 63 05 00 00       	mov    $0x563,%esi
  8004206e7b:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004206e82:	00 00 00 
  8004206e85:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206e8a:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206e91:	00 00 00 
  8004206e94:	41 ff d0             	callq  *%r8
  8004206e97:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  8004206e9e:	00 00 00 
  8004206ea1:	48 8b 00             	mov    (%rax),%rax
  8004206ea4:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206ea9:	48 89 c7             	mov    %rax,%rdi
  8004206eac:	48 b8 14 3e 20 04 80 	movabs $0x8004203e14,%rax
  8004206eb3:	00 00 00 
  8004206eb6:	ff d0                	callq  *%rax
  8004206eb8:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  8004206ebf:	00 00 00 
  8004206ec2:	48 8b 00             	mov    (%rax),%rax
  8004206ec5:	be 00 00 00 00       	mov    $0x0,%esi
  8004206eca:	48 89 c7             	mov    %rax,%rdi
  8004206ecd:	48 b8 59 58 20 04 80 	movabs $0x8004205859,%rax
  8004206ed4:	00 00 00 
  8004206ed7:	ff d0                	callq  *%rax
  8004206ed9:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004206edd:	74 35                	je     8004206f14 <page_check+0x1441>
  8004206edf:	48 b9 78 f3 21 04 80 	movabs $0x800421f378,%rcx
  8004206ee6:	00 00 00 
  8004206ee9:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004206ef0:	00 00 00 
  8004206ef3:	be 67 05 00 00       	mov    $0x567,%esi
  8004206ef8:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004206eff:	00 00 00 
  8004206f02:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206f07:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206f0e:	00 00 00 
  8004206f11:	41 ff d0             	callq  *%r8
  8004206f14:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  8004206f1b:	00 00 00 
  8004206f1e:	48 8b 00             	mov    (%rax),%rax
  8004206f21:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206f26:	48 89 c7             	mov    %rax,%rdi
  8004206f29:	48 b8 59 58 20 04 80 	movabs $0x8004205859,%rax
  8004206f30:	00 00 00 
  8004206f33:	ff d0                	callq  *%rax
  8004206f35:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004206f39:	74 35                	je     8004206f70 <page_check+0x149d>
  8004206f3b:	48 b9 c0 f3 21 04 80 	movabs $0x800421f3c0,%rcx
  8004206f42:	00 00 00 
  8004206f45:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004206f4c:	00 00 00 
  8004206f4f:	be 68 05 00 00       	mov    $0x568,%esi
  8004206f54:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004206f5b:	00 00 00 
  8004206f5e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206f63:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206f6a:	00 00 00 
  8004206f6d:	41 ff d0             	callq  *%r8
  8004206f70:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206f74:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206f78:	66 85 c0             	test   %ax,%ax
  8004206f7b:	74 35                	je     8004206fb2 <page_check+0x14df>
  8004206f7d:	48 b9 e6 f3 21 04 80 	movabs $0x800421f3e6,%rcx
  8004206f84:	00 00 00 
  8004206f87:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004206f8e:	00 00 00 
  8004206f91:	be 69 05 00 00       	mov    $0x569,%esi
  8004206f96:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004206f9d:	00 00 00 
  8004206fa0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206fa5:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206fac:	00 00 00 
  8004206faf:	41 ff d0             	callq  *%r8
  8004206fb2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206fb6:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206fba:	66 83 f8 01          	cmp    $0x1,%ax
  8004206fbe:	74 35                	je     8004206ff5 <page_check+0x1522>
  8004206fc0:	48 b9 61 f3 21 04 80 	movabs $0x800421f361,%rcx
  8004206fc7:	00 00 00 
  8004206fca:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004206fd1:	00 00 00 
  8004206fd4:	be 6a 05 00 00       	mov    $0x56a,%esi
  8004206fd9:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004206fe0:	00 00 00 
  8004206fe3:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206fe8:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206fef:	00 00 00 
  8004206ff2:	41 ff d0             	callq  *%r8
  8004206ff5:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  8004206ffc:	00 00 00 
  8004206fff:	48 8b 00             	mov    (%rax),%rax
  8004207002:	48 8b 00             	mov    (%rax),%rax
  8004207005:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420700b:	48 89 c7             	mov    %rax,%rdi
  800420700e:	48 b8 4c 1b 20 04 80 	movabs $0x8004201b4c,%rax
  8004207015:	00 00 00 
  8004207018:	ff d0                	callq  *%rax
  800420701a:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  8004207021:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  8004207028:	00 00 00 
  800420702b:	48 8b 00             	mov    (%rax),%rax
  800420702e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207035:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207039:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420703d:	66 83 f8 01          	cmp    $0x1,%ax
  8004207041:	74 35                	je     8004207078 <page_check+0x15a5>
  8004207043:	48 b9 61 f3 21 04 80 	movabs $0x800421f361,%rcx
  800420704a:	00 00 00 
  800420704d:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004207054:	00 00 00 
  8004207057:	be 80 05 00 00       	mov    $0x580,%esi
  800420705c:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004207063:	00 00 00 
  8004207066:	b8 00 00 00 00       	mov    $0x0,%eax
  800420706b:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004207072:	00 00 00 
  8004207075:	41 ff d0             	callq  *%r8
  8004207078:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420707f:	48 89 c7             	mov    %rax,%rdi
  8004207082:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  8004207089:	00 00 00 
  800420708c:	ff d0                	callq  *%rax
  800420708e:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004207095:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004207099:	74 13                	je     80042070ae <page_check+0x15db>
  800420709b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420709f:	48 89 c7             	mov    %rax,%rdi
  80042070a2:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  80042070a9:	00 00 00 
  80042070ac:	ff d0                	callq  *%rax
  80042070ae:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042070b5:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  80042070b9:	74 13                	je     80042070ce <page_check+0x15fb>
  80042070bb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042070bf:	48 89 c7             	mov    %rax,%rdi
  80042070c2:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  80042070c9:	00 00 00 
  80042070cc:	ff d0                	callq  *%rax
  80042070ce:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042070d5:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  80042070d9:	74 13                	je     80042070ee <page_check+0x161b>
  80042070db:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042070df:	48 89 c7             	mov    %rax,%rdi
  80042070e2:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  80042070e9:	00 00 00 
  80042070ec:	ff d0                	callq  *%rax
  80042070ee:	48 c7 85 60 ff ff ff 	movq   $0x64000,-0xa0(%rbp)
  80042070f5:	00 40 06 00 
  80042070f9:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  8004207100:	00 00 00 
  8004207103:	48 8b 00             	mov    (%rax),%rax
  8004207106:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  800420710d:	ba 01 00 00 00       	mov    $0x1,%edx
  8004207112:	48 89 ce             	mov    %rcx,%rsi
  8004207115:	48 89 c7             	mov    %rax,%rdi
  8004207118:	48 b8 1c 30 20 04 80 	movabs $0x800420301c,%rax
  800420711f:	00 00 00 
  8004207122:	ff d0                	callq  *%rax
  8004207124:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  800420712b:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  8004207132:	00 00 00 
  8004207135:	48 8b 00             	mov    (%rax),%rax
  8004207138:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  800420713f:	48 c1 ea 27          	shr    $0x27,%rdx
  8004207143:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004207149:	48 c1 e2 03          	shl    $0x3,%rdx
  800420714d:	48 01 d0             	add    %rdx,%rax
  8004207150:	48 8b 00             	mov    (%rax),%rax
  8004207153:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004207159:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  8004207160:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004207167:	48 c1 e8 0c          	shr    $0xc,%rax
  800420716b:	89 85 54 ff ff ff    	mov    %eax,-0xac(%rbp)
  8004207171:	8b 95 54 ff ff ff    	mov    -0xac(%rbp),%edx
  8004207177:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  800420717e:	00 00 00 
  8004207181:	48 8b 00             	mov    (%rax),%rax
  8004207184:	48 39 c2             	cmp    %rax,%rdx
  8004207187:	72 35                	jb     80042071be <page_check+0x16eb>
  8004207189:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004207190:	48 89 c1             	mov    %rax,%rcx
  8004207193:	48 ba 58 e7 21 04 80 	movabs $0x800421e758,%rdx
  800420719a:	00 00 00 
  800420719d:	be 88 05 00 00       	mov    $0x588,%esi
  80042071a2:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  80042071a9:	00 00 00 
  80042071ac:	b8 00 00 00 00       	mov    $0x0,%eax
  80042071b1:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042071b8:	00 00 00 
  80042071bb:	41 ff d0             	callq  *%r8
  80042071be:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042071c5:	00 00 00 
  80042071c8:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  80042071cf:	48 01 d0             	add    %rdx,%rax
  80042071d2:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  80042071d6:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042071dd:	48 c1 e8 1e          	shr    $0x1e,%rax
  80042071e1:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042071e6:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042071ed:	00 
  80042071ee:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042071f2:	48 01 d0             	add    %rdx,%rax
  80042071f5:	48 8b 00             	mov    (%rax),%rax
  80042071f8:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042071fe:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  8004207205:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  800420720c:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207210:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%rbp)
  8004207216:	8b 95 44 ff ff ff    	mov    -0xbc(%rbp),%edx
  800420721c:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  8004207223:	00 00 00 
  8004207226:	48 8b 00             	mov    (%rax),%rax
  8004207229:	48 39 c2             	cmp    %rax,%rdx
  800420722c:	72 35                	jb     8004207263 <page_check+0x1790>
  800420722e:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004207235:	48 89 c1             	mov    %rax,%rcx
  8004207238:	48 ba 58 e7 21 04 80 	movabs $0x800421e758,%rdx
  800420723f:	00 00 00 
  8004207242:	be 89 05 00 00       	mov    $0x589,%esi
  8004207247:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  800420724e:	00 00 00 
  8004207251:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207256:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420725d:	00 00 00 
  8004207260:	41 ff d0             	callq  *%r8
  8004207263:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420726a:	00 00 00 
  800420726d:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004207274:	48 01 d0             	add    %rdx,%rax
  8004207277:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  800420727b:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004207282:	48 c1 e8 15          	shr    $0x15,%rax
  8004207286:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420728b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004207292:	00 
  8004207293:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004207297:	48 01 d0             	add    %rdx,%rax
  800420729a:	48 8b 00             	mov    (%rax),%rax
  800420729d:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042072a3:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  80042072aa:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  80042072b1:	48 c1 e8 0c          	shr    $0xc,%rax
  80042072b5:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%rbp)
  80042072bb:	8b 95 34 ff ff ff    	mov    -0xcc(%rbp),%edx
  80042072c1:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  80042072c8:	00 00 00 
  80042072cb:	48 8b 00             	mov    (%rax),%rax
  80042072ce:	48 39 c2             	cmp    %rax,%rdx
  80042072d1:	72 35                	jb     8004207308 <page_check+0x1835>
  80042072d3:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  80042072da:	48 89 c1             	mov    %rax,%rcx
  80042072dd:	48 ba 58 e7 21 04 80 	movabs $0x800421e758,%rdx
  80042072e4:	00 00 00 
  80042072e7:	be 8a 05 00 00       	mov    $0x58a,%esi
  80042072ec:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  80042072f3:	00 00 00 
  80042072f6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042072fb:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004207302:	00 00 00 
  8004207305:	41 ff d0             	callq  *%r8
  8004207308:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420730f:	00 00 00 
  8004207312:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  8004207319:	48 01 d0             	add    %rdx,%rax
  800420731c:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  8004207323:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  800420732a:	48 c1 e8 0c          	shr    $0xc,%rax
  800420732e:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004207333:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420733a:	00 
  800420733b:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004207342:	48 01 c2             	add    %rax,%rdx
  8004207345:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  800420734c:	48 39 c2             	cmp    %rax,%rdx
  800420734f:	74 35                	je     8004207386 <page_check+0x18b3>
  8004207351:	48 b9 f7 f3 21 04 80 	movabs $0x800421f3f7,%rcx
  8004207358:	00 00 00 
  800420735b:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004207362:	00 00 00 
  8004207365:	be 8b 05 00 00       	mov    $0x58b,%esi
  800420736a:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004207371:	00 00 00 
  8004207374:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207379:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004207380:	00 00 00 
  8004207383:	41 ff d0             	callq  *%r8
  8004207386:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420738a:	48 89 c7             	mov    %rax,%rdi
  800420738d:	48 b8 bd 1b 20 04 80 	movabs $0x8004201bbd,%rax
  8004207394:	00 00 00 
  8004207397:	ff d0                	callq  *%rax
  8004207399:	ba 00 10 00 00       	mov    $0x1000,%edx
  800420739e:	be ff 00 00 00       	mov    $0xff,%esi
  80042073a3:	48 89 c7             	mov    %rax,%rdi
  80042073a6:	48 b8 37 0e 21 04 80 	movabs $0x8004210e37,%rax
  80042073ad:	00 00 00 
  80042073b0:	ff d0                	callq  *%rax
  80042073b2:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  80042073b9:	00 00 00 
  80042073bc:	48 8b 00             	mov    (%rax),%rax
  80042073bf:	ba 01 00 00 00       	mov    $0x1,%edx
  80042073c4:	be 00 00 00 00       	mov    $0x0,%esi
  80042073c9:	48 89 c7             	mov    %rax,%rdi
  80042073cc:	48 b8 1c 30 20 04 80 	movabs $0x800420301c,%rax
  80042073d3:	00 00 00 
  80042073d6:	ff d0                	callq  *%rax
  80042073d8:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  80042073df:	00 00 00 
  80042073e2:	48 8b 00             	mov    (%rax),%rax
  80042073e5:	48 8b 00             	mov    (%rax),%rax
  80042073e8:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042073ee:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  80042073f5:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  80042073fc:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207400:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
  8004207406:	8b 95 1c ff ff ff    	mov    -0xe4(%rbp),%edx
  800420740c:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  8004207413:	00 00 00 
  8004207416:	48 8b 00             	mov    (%rax),%rax
  8004207419:	48 39 c2             	cmp    %rax,%rdx
  800420741c:	72 35                	jb     8004207453 <page_check+0x1980>
  800420741e:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  8004207425:	48 89 c1             	mov    %rax,%rcx
  8004207428:	48 ba 58 e7 21 04 80 	movabs $0x800421e758,%rdx
  800420742f:	00 00 00 
  8004207432:	be 90 05 00 00       	mov    $0x590,%esi
  8004207437:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  800420743e:	00 00 00 
  8004207441:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207446:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420744d:	00 00 00 
  8004207450:	41 ff d0             	callq  *%r8
  8004207453:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420745a:	00 00 00 
  800420745d:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  8004207464:	48 01 d0             	add    %rdx,%rax
  8004207467:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800420746b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420746f:	48 8b 00             	mov    (%rax),%rax
  8004207472:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004207478:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  800420747f:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  8004207486:	48 c1 e8 0c          	shr    $0xc,%rax
  800420748a:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
  8004207490:	8b 95 0c ff ff ff    	mov    -0xf4(%rbp),%edx
  8004207496:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  800420749d:	00 00 00 
  80042074a0:	48 8b 00             	mov    (%rax),%rax
  80042074a3:	48 39 c2             	cmp    %rax,%rdx
  80042074a6:	72 35                	jb     80042074dd <page_check+0x1a0a>
  80042074a8:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  80042074af:	48 89 c1             	mov    %rax,%rcx
  80042074b2:	48 ba 58 e7 21 04 80 	movabs $0x800421e758,%rdx
  80042074b9:	00 00 00 
  80042074bc:	be 91 05 00 00       	mov    $0x591,%esi
  80042074c1:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  80042074c8:	00 00 00 
  80042074cb:	b8 00 00 00 00       	mov    $0x0,%eax
  80042074d0:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042074d7:	00 00 00 
  80042074da:	41 ff d0             	callq  *%r8
  80042074dd:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042074e4:	00 00 00 
  80042074e7:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  80042074ee:	48 01 d0             	add    %rdx,%rax
  80042074f1:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  80042074f5:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042074f9:	48 8b 00             	mov    (%rax),%rax
  80042074fc:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004207502:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  8004207509:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  8004207510:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207514:	89 85 fc fe ff ff    	mov    %eax,-0x104(%rbp)
  800420751a:	8b 95 fc fe ff ff    	mov    -0x104(%rbp),%edx
  8004207520:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  8004207527:	00 00 00 
  800420752a:	48 8b 00             	mov    (%rax),%rax
  800420752d:	48 39 c2             	cmp    %rax,%rdx
  8004207530:	72 35                	jb     8004207567 <page_check+0x1a94>
  8004207532:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  8004207539:	48 89 c1             	mov    %rax,%rcx
  800420753c:	48 ba 58 e7 21 04 80 	movabs $0x800421e758,%rdx
  8004207543:	00 00 00 
  8004207546:	be 92 05 00 00       	mov    $0x592,%esi
  800420754b:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004207552:	00 00 00 
  8004207555:	b8 00 00 00 00       	mov    $0x0,%eax
  800420755a:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004207561:	00 00 00 
  8004207564:	41 ff d0             	callq  *%r8
  8004207567:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420756e:	00 00 00 
  8004207571:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  8004207578:	48 01 d0             	add    %rdx,%rax
  800420757b:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  8004207582:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  8004207589:	eb 58                	jmp    80042075e3 <page_check+0x1b10>
  800420758b:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  8004207592:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004207595:	48 63 d2             	movslq %edx,%rdx
  8004207598:	48 c1 e2 03          	shl    $0x3,%rdx
  800420759c:	48 01 d0             	add    %rdx,%rax
  800420759f:	48 8b 00             	mov    (%rax),%rax
  80042075a2:	83 e0 01             	and    $0x1,%eax
  80042075a5:	48 85 c0             	test   %rax,%rax
  80042075a8:	74 35                	je     80042075df <page_check+0x1b0c>
  80042075aa:	48 b9 0f f4 21 04 80 	movabs $0x800421f40f,%rcx
  80042075b1:	00 00 00 
  80042075b4:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  80042075bb:	00 00 00 
  80042075be:	be 94 05 00 00       	mov    $0x594,%esi
  80042075c3:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  80042075ca:	00 00 00 
  80042075cd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042075d2:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042075d9:	00 00 00 
  80042075dc:	41 ff d0             	callq  *%r8
  80042075df:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  80042075e3:	81 7d ec ff 01 00 00 	cmpl   $0x1ff,-0x14(%rbp)
  80042075ea:	7e 9f                	jle    800420758b <page_check+0x1ab8>
  80042075ec:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  80042075f3:	00 00 00 
  80042075f6:	48 8b 00             	mov    (%rax),%rax
  80042075f9:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207600:	48 b8 38 f2 4d 04 80 	movabs $0x80044df238,%rax
  8004207607:	00 00 00 
  800420760a:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800420760e:	48 89 10             	mov    %rdx,(%rax)
  8004207611:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004207615:	48 89 c7             	mov    %rax,%rdi
  8004207618:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  800420761f:	00 00 00 
  8004207622:	ff d0                	callq  *%rax
  8004207624:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004207628:	48 89 c7             	mov    %rax,%rdi
  800420762b:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  8004207632:	00 00 00 
  8004207635:	ff d0                	callq  *%rax
  8004207637:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420763b:	48 89 c7             	mov    %rax,%rdi
  800420763e:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  8004207645:	00 00 00 
  8004207648:	ff d0                	callq  *%rax
  800420764a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420764e:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004207652:	66 85 c0             	test   %ax,%ax
  8004207655:	74 35                	je     800420768c <page_check+0x1bb9>
  8004207657:	48 b9 26 f4 21 04 80 	movabs $0x800421f426,%rcx
  800420765e:	00 00 00 
  8004207661:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004207668:	00 00 00 
  800420766b:	be a0 05 00 00       	mov    $0x5a0,%esi
  8004207670:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004207677:	00 00 00 
  800420767a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420767f:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004207686:	00 00 00 
  8004207689:	41 ff d0             	callq  *%r8
  800420768c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004207690:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004207694:	66 85 c0             	test   %ax,%ax
  8004207697:	74 35                	je     80042076ce <page_check+0x1bfb>
  8004207699:	48 b9 e6 f3 21 04 80 	movabs $0x800421f3e6,%rcx
  80042076a0:	00 00 00 
  80042076a3:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  80042076aa:	00 00 00 
  80042076ad:	be a1 05 00 00       	mov    $0x5a1,%esi
  80042076b2:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  80042076b9:	00 00 00 
  80042076bc:	b8 00 00 00 00       	mov    $0x0,%eax
  80042076c1:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042076c8:	00 00 00 
  80042076cb:	41 ff d0             	callq  *%r8
  80042076ce:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042076d2:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042076d6:	66 85 c0             	test   %ax,%ax
  80042076d9:	74 35                	je     8004207710 <page_check+0x1c3d>
  80042076db:	48 b9 37 f4 21 04 80 	movabs $0x800421f437,%rcx
  80042076e2:	00 00 00 
  80042076e5:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  80042076ec:	00 00 00 
  80042076ef:	be a2 05 00 00       	mov    $0x5a2,%esi
  80042076f4:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  80042076fb:	00 00 00 
  80042076fe:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207703:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420770a:	00 00 00 
  800420770d:	41 ff d0             	callq  *%r8
  8004207710:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207714:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004207718:	66 85 c0             	test   %ax,%ax
  800420771b:	74 35                	je     8004207752 <page_check+0x1c7f>
  800420771d:	48 b9 48 f4 21 04 80 	movabs $0x800421f448,%rcx
  8004207724:	00 00 00 
  8004207727:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  800420772e:	00 00 00 
  8004207731:	be a3 05 00 00       	mov    $0x5a3,%esi
  8004207736:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  800420773d:	00 00 00 
  8004207740:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207745:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420774c:	00 00 00 
  800420774f:	41 ff d0             	callq  *%r8
  8004207752:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004207756:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420775a:	66 85 c0             	test   %ax,%ax
  800420775d:	74 35                	je     8004207794 <page_check+0x1cc1>
  800420775f:	48 b9 59 f4 21 04 80 	movabs $0x800421f459,%rcx
  8004207766:	00 00 00 
  8004207769:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004207770:	00 00 00 
  8004207773:	be a4 05 00 00       	mov    $0x5a4,%esi
  8004207778:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  800420777f:	00 00 00 
  8004207782:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207787:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420778e:	00 00 00 
  8004207791:	41 ff d0             	callq  *%r8
  8004207794:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004207798:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420779c:	66 85 c0             	test   %ax,%ax
  800420779f:	74 35                	je     80042077d6 <page_check+0x1d03>
  80042077a1:	48 b9 6a f4 21 04 80 	movabs $0x800421f46a,%rcx
  80042077a8:	00 00 00 
  80042077ab:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  80042077b2:	00 00 00 
  80042077b5:	be a5 05 00 00       	mov    $0x5a5,%esi
  80042077ba:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  80042077c1:	00 00 00 
  80042077c4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042077c9:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042077d0:	00 00 00 
  80042077d3:	41 ff d0             	callq  *%r8
  80042077d6:	be 01 10 00 00       	mov    $0x1001,%esi
  80042077db:	bf 00 00 00 00       	mov    $0x0,%edi
  80042077e0:	48 b8 56 3f 20 04 80 	movabs $0x8004203f56,%rax
  80042077e7:	00 00 00 
  80042077ea:	ff d0                	callq  *%rax
  80042077ec:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
  80042077f3:	be 00 10 00 00       	mov    $0x1000,%esi
  80042077f8:	bf 00 00 00 00       	mov    $0x0,%edi
  80042077fd:	48 b8 56 3f 20 04 80 	movabs $0x8004203f56,%rax
  8004207804:	00 00 00 
  8004207807:	ff d0                	callq  *%rax
  8004207809:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  8004207810:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  8004207817:	00 00 00 
  800420781a:	48 39 85 f0 fe ff ff 	cmp    %rax,-0x110(%rbp)
  8004207821:	76 1d                	jbe    8004207840 <page_check+0x1d6d>
  8004207823:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  800420782a:	48 8d 90 a0 1f 00 00 	lea    0x1fa0(%rax),%rdx
  8004207831:	48 b8 ff ff df 03 80 	movabs $0x8003dfffff,%rax
  8004207838:	00 00 00 
  800420783b:	48 39 c2             	cmp    %rax,%rdx
  800420783e:	76 35                	jbe    8004207875 <page_check+0x1da2>
  8004207840:	48 b9 80 f4 21 04 80 	movabs $0x800421f480,%rcx
  8004207847:	00 00 00 
  800420784a:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004207851:	00 00 00 
  8004207854:	be ac 05 00 00       	mov    $0x5ac,%esi
  8004207859:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004207860:	00 00 00 
  8004207863:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207868:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420786f:	00 00 00 
  8004207872:	41 ff d0             	callq  *%r8
  8004207875:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  800420787c:	00 00 00 
  800420787f:	48 39 85 e8 fe ff ff 	cmp    %rax,-0x118(%rbp)
  8004207886:	76 1d                	jbe    80042078a5 <page_check+0x1dd2>
  8004207888:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  800420788f:	48 8d 90 a0 1f 00 00 	lea    0x1fa0(%rax),%rdx
  8004207896:	48 b8 ff ff df 03 80 	movabs $0x8003dfffff,%rax
  800420789d:	00 00 00 
  80042078a0:	48 39 c2             	cmp    %rax,%rdx
  80042078a3:	76 35                	jbe    80042078da <page_check+0x1e07>
  80042078a5:	48 b9 a8 f4 21 04 80 	movabs $0x800421f4a8,%rcx
  80042078ac:	00 00 00 
  80042078af:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  80042078b6:	00 00 00 
  80042078b9:	be ad 05 00 00       	mov    $0x5ad,%esi
  80042078be:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  80042078c5:	00 00 00 
  80042078c8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042078cd:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042078d4:	00 00 00 
  80042078d7:	41 ff d0             	callq  *%r8
  80042078da:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  80042078e1:	25 ff 0f 00 00       	and    $0xfff,%eax
  80042078e6:	48 85 c0             	test   %rax,%rax
  80042078e9:	75 11                	jne    80042078fc <page_check+0x1e29>
  80042078eb:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  80042078f2:	25 ff 0f 00 00       	and    $0xfff,%eax
  80042078f7:	48 85 c0             	test   %rax,%rax
  80042078fa:	74 35                	je     8004207931 <page_check+0x1e5e>
  80042078fc:	48 b9 d0 f4 21 04 80 	movabs $0x800421f4d0,%rcx
  8004207903:	00 00 00 
  8004207906:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  800420790d:	00 00 00 
  8004207910:	be af 05 00 00       	mov    $0x5af,%esi
  8004207915:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  800420791c:	00 00 00 
  800420791f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207924:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420792b:	00 00 00 
  800420792e:	41 ff d0             	callq  *%r8
  8004207931:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  8004207938:	48 05 a0 1f 00 00    	add    $0x1fa0,%rax
  800420793e:	48 3b 85 e8 fe ff ff 	cmp    -0x118(%rbp),%rax
  8004207945:	76 35                	jbe    800420797c <page_check+0x1ea9>
  8004207947:	48 b9 f7 f4 21 04 80 	movabs $0x800421f4f7,%rcx
  800420794e:	00 00 00 
  8004207951:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004207958:	00 00 00 
  800420795b:	be b1 05 00 00       	mov    $0x5b1,%esi
  8004207960:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004207967:	00 00 00 
  800420796a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420796f:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004207976:	00 00 00 
  8004207979:	41 ff d0             	callq  *%r8
  800420797c:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  8004207983:	00 00 00 
  8004207986:	48 8b 00             	mov    (%rax),%rax
  8004207989:	48 8b 95 f0 fe ff ff 	mov    -0x110(%rbp),%rdx
  8004207990:	48 89 d6             	mov    %rdx,%rsi
  8004207993:	48 89 c7             	mov    %rax,%rdi
  8004207996:	48 b8 59 58 20 04 80 	movabs $0x8004205859,%rax
  800420799d:	00 00 00 
  80042079a0:	ff d0                	callq  *%rax
  80042079a2:	48 85 c0             	test   %rax,%rax
  80042079a5:	74 35                	je     80042079dc <page_check+0x1f09>
  80042079a7:	48 b9 10 f5 21 04 80 	movabs $0x800421f510,%rcx
  80042079ae:	00 00 00 
  80042079b1:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  80042079b8:	00 00 00 
  80042079bb:	be b4 05 00 00       	mov    $0x5b4,%esi
  80042079c0:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  80042079c7:	00 00 00 
  80042079ca:	b8 00 00 00 00       	mov    $0x0,%eax
  80042079cf:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042079d6:	00 00 00 
  80042079d9:	41 ff d0             	callq  *%r8
  80042079dc:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  80042079e3:	48 8d 90 00 10 00 00 	lea    0x1000(%rax),%rdx
  80042079ea:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  80042079f1:	00 00 00 
  80042079f4:	48 8b 00             	mov    (%rax),%rax
  80042079f7:	48 89 d6             	mov    %rdx,%rsi
  80042079fa:	48 89 c7             	mov    %rax,%rdi
  80042079fd:	48 b8 59 58 20 04 80 	movabs $0x8004205859,%rax
  8004207a04:	00 00 00 
  8004207a07:	ff d0                	callq  *%rax
  8004207a09:	48 3d 00 10 00 00    	cmp    $0x1000,%rax
  8004207a0f:	74 35                	je     8004207a46 <page_check+0x1f73>
  8004207a11:	48 b9 38 f5 21 04 80 	movabs $0x800421f538,%rcx
  8004207a18:	00 00 00 
  8004207a1b:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004207a22:	00 00 00 
  8004207a25:	be b5 05 00 00       	mov    $0x5b5,%esi
  8004207a2a:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004207a31:	00 00 00 
  8004207a34:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207a39:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004207a40:	00 00 00 
  8004207a43:	41 ff d0             	callq  *%r8
  8004207a46:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  8004207a4d:	00 00 00 
  8004207a50:	48 8b 00             	mov    (%rax),%rax
  8004207a53:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
  8004207a5a:	48 89 d6             	mov    %rdx,%rsi
  8004207a5d:	48 89 c7             	mov    %rax,%rdi
  8004207a60:	48 b8 59 58 20 04 80 	movabs $0x8004205859,%rax
  8004207a67:	00 00 00 
  8004207a6a:	ff d0                	callq  *%rax
  8004207a6c:	48 85 c0             	test   %rax,%rax
  8004207a6f:	74 35                	je     8004207aa6 <page_check+0x1fd3>
  8004207a71:	48 b9 68 f5 21 04 80 	movabs $0x800421f568,%rcx
  8004207a78:	00 00 00 
  8004207a7b:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004207a82:	00 00 00 
  8004207a85:	be b6 05 00 00       	mov    $0x5b6,%esi
  8004207a8a:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004207a91:	00 00 00 
  8004207a94:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207a99:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004207aa0:	00 00 00 
  8004207aa3:	41 ff d0             	callq  *%r8
  8004207aa6:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  8004207aad:	48 8d 90 00 10 00 00 	lea    0x1000(%rax),%rdx
  8004207ab4:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  8004207abb:	00 00 00 
  8004207abe:	48 8b 00             	mov    (%rax),%rax
  8004207ac1:	48 89 d6             	mov    %rdx,%rsi
  8004207ac4:	48 89 c7             	mov    %rax,%rdi
  8004207ac7:	48 b8 59 58 20 04 80 	movabs $0x8004205859,%rax
  8004207ace:	00 00 00 
  8004207ad1:	ff d0                	callq  *%rax
  8004207ad3:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004207ad7:	74 35                	je     8004207b0e <page_check+0x203b>
  8004207ad9:	48 b9 90 f5 21 04 80 	movabs $0x800421f590,%rcx
  8004207ae0:	00 00 00 
  8004207ae3:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004207aea:	00 00 00 
  8004207aed:	be b7 05 00 00       	mov    $0x5b7,%esi
  8004207af2:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004207af9:	00 00 00 
  8004207afc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207b01:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004207b08:	00 00 00 
  8004207b0b:	41 ff d0             	callq  *%r8
  8004207b0e:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  8004207b15:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  8004207b1c:	00 00 00 
  8004207b1f:	48 8b 00             	mov    (%rax),%rax
  8004207b22:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207b27:	48 89 ce             	mov    %rcx,%rsi
  8004207b2a:	48 89 c7             	mov    %rax,%rdi
  8004207b2d:	48 b8 1c 30 20 04 80 	movabs $0x800420301c,%rax
  8004207b34:	00 00 00 
  8004207b37:	ff d0                	callq  *%rax
  8004207b39:	48 8b 00             	mov    (%rax),%rax
  8004207b3c:	83 e0 1a             	and    $0x1a,%eax
  8004207b3f:	48 85 c0             	test   %rax,%rax
  8004207b42:	75 35                	jne    8004207b79 <page_check+0x20a6>
  8004207b44:	48 b9 c0 f5 21 04 80 	movabs $0x800421f5c0,%rcx
  8004207b4b:	00 00 00 
  8004207b4e:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004207b55:	00 00 00 
  8004207b58:	be b9 05 00 00       	mov    $0x5b9,%esi
  8004207b5d:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004207b64:	00 00 00 
  8004207b67:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207b6c:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004207b73:	00 00 00 
  8004207b76:	41 ff d0             	callq  *%r8
  8004207b79:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  8004207b80:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  8004207b87:	00 00 00 
  8004207b8a:	48 8b 00             	mov    (%rax),%rax
  8004207b8d:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207b92:	48 89 ce             	mov    %rcx,%rsi
  8004207b95:	48 89 c7             	mov    %rax,%rdi
  8004207b98:	48 b8 1c 30 20 04 80 	movabs $0x800420301c,%rax
  8004207b9f:	00 00 00 
  8004207ba2:	ff d0                	callq  *%rax
  8004207ba4:	48 8b 00             	mov    (%rax),%rax
  8004207ba7:	83 e0 04             	and    $0x4,%eax
  8004207baa:	48 85 c0             	test   %rax,%rax
  8004207bad:	74 35                	je     8004207be4 <page_check+0x2111>
  8004207baf:	48 b9 08 f6 21 04 80 	movabs $0x800421f608,%rcx
  8004207bb6:	00 00 00 
  8004207bb9:	48 ba d1 e7 21 04 80 	movabs $0x800421e7d1,%rdx
  8004207bc0:	00 00 00 
  8004207bc3:	be ba 05 00 00       	mov    $0x5ba,%esi
  8004207bc8:	48 bf e6 e7 21 04 80 	movabs $0x800421e7e6,%rdi
  8004207bcf:	00 00 00 
  8004207bd2:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207bd7:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004207bde:	00 00 00 
  8004207be1:	41 ff d0             	callq  *%r8
  8004207be4:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  8004207beb:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  8004207bf2:	00 00 00 
  8004207bf5:	48 8b 00             	mov    (%rax),%rax
  8004207bf8:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207bfd:	48 89 ce             	mov    %rcx,%rsi
  8004207c00:	48 89 c7             	mov    %rax,%rdi
  8004207c03:	48 b8 1c 30 20 04 80 	movabs $0x800420301c,%rax
  8004207c0a:	00 00 00 
  8004207c0d:	ff d0                	callq  *%rax
  8004207c0f:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207c16:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  8004207c1d:	48 05 00 10 00 00    	add    $0x1000,%rax
  8004207c23:	48 89 c1             	mov    %rax,%rcx
  8004207c26:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  8004207c2d:	00 00 00 
  8004207c30:	48 8b 00             	mov    (%rax),%rax
  8004207c33:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207c38:	48 89 ce             	mov    %rcx,%rsi
  8004207c3b:	48 89 c7             	mov    %rax,%rdi
  8004207c3e:	48 b8 1c 30 20 04 80 	movabs $0x800420301c,%rax
  8004207c45:	00 00 00 
  8004207c48:	ff d0                	callq  *%rax
  8004207c4a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207c51:	48 8b 8d e8 fe ff ff 	mov    -0x118(%rbp),%rcx
  8004207c58:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  8004207c5f:	00 00 00 
  8004207c62:	48 8b 00             	mov    (%rax),%rax
  8004207c65:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207c6a:	48 89 ce             	mov    %rcx,%rsi
  8004207c6d:	48 89 c7             	mov    %rax,%rdi
  8004207c70:	48 b8 1c 30 20 04 80 	movabs $0x800420301c,%rax
  8004207c77:	00 00 00 
  8004207c7a:	ff d0                	callq  *%rax
  8004207c7c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207c83:	48 bf 3b f6 21 04 80 	movabs $0x800421f63b,%rdi
  8004207c8a:	00 00 00 
  8004207c8d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207c92:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004207c99:	00 00 00 
  8004207c9c:	ff d2                	callq  *%rdx
  8004207c9e:	48 81 c4 18 01 00 00 	add    $0x118,%rsp
  8004207ca5:	5b                   	pop    %rbx
  8004207ca6:	5d                   	pop    %rbp
  8004207ca7:	c3                   	retq   

0000008004207ca8 <page2ppn>:
  8004207ca8:	55                   	push   %rbp
  8004207ca9:	48 89 e5             	mov    %rsp,%rbp
  8004207cac:	48 83 ec 08          	sub    $0x8,%rsp
  8004207cb0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004207cb4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004207cb8:	48 b8 00 e6 6d 04 80 	movabs $0x80046de600,%rax
  8004207cbf:	00 00 00 
  8004207cc2:	48 8b 00             	mov    (%rax),%rax
  8004207cc5:	48 29 c2             	sub    %rax,%rdx
  8004207cc8:	48 89 d0             	mov    %rdx,%rax
  8004207ccb:	48 c1 f8 04          	sar    $0x4,%rax
  8004207ccf:	c9                   	leaveq 
  8004207cd0:	c3                   	retq   

0000008004207cd1 <page2pa>:
  8004207cd1:	55                   	push   %rbp
  8004207cd2:	48 89 e5             	mov    %rsp,%rbp
  8004207cd5:	48 83 ec 08          	sub    $0x8,%rsp
  8004207cd9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004207cdd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207ce1:	48 89 c7             	mov    %rax,%rdi
  8004207ce4:	48 b8 a8 7c 20 04 80 	movabs $0x8004207ca8,%rax
  8004207ceb:	00 00 00 
  8004207cee:	ff d0                	callq  *%rax
  8004207cf0:	48 c1 e0 0c          	shl    $0xc,%rax
  8004207cf4:	c9                   	leaveq 
  8004207cf5:	c3                   	retq   

0000008004207cf6 <pa2page>:
  8004207cf6:	55                   	push   %rbp
  8004207cf7:	48 89 e5             	mov    %rsp,%rbp
  8004207cfa:	48 83 ec 10          	sub    $0x10,%rsp
  8004207cfe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004207d02:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207d06:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207d0a:	48 89 c2             	mov    %rax,%rdx
  8004207d0d:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  8004207d14:	00 00 00 
  8004207d17:	48 8b 00             	mov    (%rax),%rax
  8004207d1a:	48 39 c2             	cmp    %rax,%rdx
  8004207d1d:	72 2a                	jb     8004207d49 <pa2page+0x53>
  8004207d1f:	48 ba 58 f6 21 04 80 	movabs $0x800421f658,%rdx
  8004207d26:	00 00 00 
  8004207d29:	be 5b 00 00 00       	mov    $0x5b,%esi
  8004207d2e:	48 bf 77 f6 21 04 80 	movabs $0x800421f677,%rdi
  8004207d35:	00 00 00 
  8004207d38:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207d3d:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  8004207d44:	00 00 00 
  8004207d47:	ff d1                	callq  *%rcx
  8004207d49:	48 b8 00 e6 6d 04 80 	movabs $0x80046de600,%rax
  8004207d50:	00 00 00 
  8004207d53:	48 8b 00             	mov    (%rax),%rax
  8004207d56:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004207d5a:	48 c1 ea 0c          	shr    $0xc,%rdx
  8004207d5e:	48 c1 e2 04          	shl    $0x4,%rdx
  8004207d62:	48 01 d0             	add    %rdx,%rax
  8004207d65:	c9                   	leaveq 
  8004207d66:	c3                   	retq   

0000008004207d67 <page2kva>:
  8004207d67:	55                   	push   %rbp
  8004207d68:	48 89 e5             	mov    %rsp,%rbp
  8004207d6b:	48 83 ec 20          	sub    $0x20,%rsp
  8004207d6f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004207d73:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207d77:	48 89 c7             	mov    %rax,%rdi
  8004207d7a:	48 b8 d1 7c 20 04 80 	movabs $0x8004207cd1,%rax
  8004207d81:	00 00 00 
  8004207d84:	ff d0                	callq  *%rax
  8004207d86:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004207d8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207d8e:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207d92:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004207d95:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004207d98:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  8004207d9f:	00 00 00 
  8004207da2:	48 8b 00             	mov    (%rax),%rax
  8004207da5:	48 39 c2             	cmp    %rax,%rdx
  8004207da8:	72 32                	jb     8004207ddc <page2kva+0x75>
  8004207daa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207dae:	48 89 c1             	mov    %rax,%rcx
  8004207db1:	48 ba 88 f6 21 04 80 	movabs $0x800421f688,%rdx
  8004207db8:	00 00 00 
  8004207dbb:	be 62 00 00 00       	mov    $0x62,%esi
  8004207dc0:	48 bf 77 f6 21 04 80 	movabs $0x800421f677,%rdi
  8004207dc7:	00 00 00 
  8004207dca:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207dcf:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004207dd6:	00 00 00 
  8004207dd9:	41 ff d0             	callq  *%r8
  8004207ddc:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004207de3:	00 00 00 
  8004207de6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207dea:	48 01 d0             	add    %rdx,%rax
  8004207ded:	c9                   	leaveq 
  8004207dee:	c3                   	retq   

0000008004207def <unlock_kernel>:
  8004207def:	55                   	push   %rbp
  8004207df0:	48 89 e5             	mov    %rsp,%rbp
  8004207df3:	48 bf 60 57 23 04 80 	movabs $0x8004235760,%rdi
  8004207dfa:	00 00 00 
  8004207dfd:	48 b8 94 82 21 04 80 	movabs $0x8004218294,%rax
  8004207e04:	00 00 00 
  8004207e07:	ff d0                	callq  *%rax
  8004207e09:	f3 90                	pause  
  8004207e0b:	5d                   	pop    %rbp
  8004207e0c:	c3                   	retq   

0000008004207e0d <envid2env>:
//   On error, sets *env_store to NULL.
//
// CHANGED FOR LAB 0
int
envid2env(envid_t envid, struct Env **env_store, bool checkperm)
{
  8004207e0d:	55                   	push   %rbp
  8004207e0e:	48 89 e5             	mov    %rsp,%rbp
  8004207e11:	53                   	push   %rbx
  8004207e12:	48 83 ec 28          	sub    $0x28,%rsp
  8004207e16:	89 7d dc             	mov    %edi,-0x24(%rbp)
  8004207e19:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004207e1d:	89 d0                	mov    %edx,%eax
  8004207e1f:	88 45 d8             	mov    %al,-0x28(%rbp)
	struct Env *e;

	// if envid is 0, the function should return the current environment
	// it doesn't actually return the env - it puts the env in *env_store
	if (envid == 0) {
  8004207e22:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004207e26:	75 41                	jne    8004207e69 <envid2env+0x5c>
		*env_store = curenv;
  8004207e28:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  8004207e2f:	00 00 00 
  8004207e32:	ff d0                	callq  *%rax
  8004207e34:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  8004207e3b:	00 00 00 
  8004207e3e:	48 98                	cltq   
  8004207e40:	48 c1 e0 03          	shl    $0x3,%rax
  8004207e44:	48 89 c1             	mov    %rax,%rcx
  8004207e47:	48 c1 e1 04          	shl    $0x4,%rcx
  8004207e4b:	48 01 c8             	add    %rcx,%rax
  8004207e4e:	48 01 d0             	add    %rdx,%rax
  8004207e51:	48 83 c0 08          	add    $0x8,%rax
  8004207e55:	48 8b 10             	mov    (%rax),%rdx
  8004207e58:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207e5c:	48 89 10             	mov    %rdx,(%rax)
		return 0;
  8004207e5f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207e64:	e9 fd 00 00 00       	jmpq   8004207f66 <envid2env+0x159>

	// it should use the ENVX() macro found in inc/env.h, not straight reference
	// e = &envs[envid];
	// use ENVX() macro to get the correct index in the envs variable 
	// and use that to look stuff up
	e = &envs[ENVX(envid)];
  8004207e69:	48 b8 58 f2 4d 04 80 	movabs $0x80044df258,%rax
  8004207e70:	00 00 00 
  8004207e73:	48 8b 10             	mov    (%rax),%rdx
  8004207e76:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004207e79:	48 98                	cltq   
  8004207e7b:	25 ff 03 00 00       	and    $0x3ff,%eax
  8004207e80:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004207e87:	48 01 d0             	add    %rdx,%rax
  8004207e8a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
  8004207e8e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207e92:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  8004207e98:	85 c0                	test   %eax,%eax
  8004207e9a:	74 0f                	je     8004207eab <envid2env+0x9e>
  8004207e9c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207ea0:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004207ea6:	3b 45 dc             	cmp    -0x24(%rbp),%eax
  8004207ea9:	74 15                	je     8004207ec0 <envid2env+0xb3>
		*env_store = 0;
  8004207eab:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207eaf:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		return -E_BAD_ENV;
  8004207eb6:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  8004207ebb:	e9 a6 00 00 00       	jmpq   8004207f66 <envid2env+0x159>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
  8004207ec0:	80 7d d8 00          	cmpb   $0x0,-0x28(%rbp)
  8004207ec4:	0f 84 8c 00 00 00    	je     8004207f56 <envid2env+0x149>
  8004207eca:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  8004207ed1:	00 00 00 
  8004207ed4:	ff d0                	callq  *%rax
  8004207ed6:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  8004207edd:	00 00 00 
  8004207ee0:	48 98                	cltq   
  8004207ee2:	48 c1 e0 03          	shl    $0x3,%rax
  8004207ee6:	48 89 c1             	mov    %rax,%rcx
  8004207ee9:	48 c1 e1 04          	shl    $0x4,%rcx
  8004207eed:	48 01 c8             	add    %rcx,%rax
  8004207ef0:	48 01 d0             	add    %rdx,%rax
  8004207ef3:	48 83 c0 08          	add    $0x8,%rax
  8004207ef7:	48 8b 00             	mov    (%rax),%rax
  8004207efa:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004207efe:	74 56                	je     8004207f56 <envid2env+0x149>
  8004207f00:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207f04:	8b 98 cc 00 00 00    	mov    0xcc(%rax),%ebx
  8004207f0a:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  8004207f11:	00 00 00 
  8004207f14:	ff d0                	callq  *%rax
  8004207f16:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  8004207f1d:	00 00 00 
  8004207f20:	48 98                	cltq   
  8004207f22:	48 c1 e0 03          	shl    $0x3,%rax
  8004207f26:	48 89 c1             	mov    %rax,%rcx
  8004207f29:	48 c1 e1 04          	shl    $0x4,%rcx
  8004207f2d:	48 01 c8             	add    %rcx,%rax
  8004207f30:	48 01 d0             	add    %rdx,%rax
  8004207f33:	48 83 c0 08          	add    $0x8,%rax
  8004207f37:	48 8b 00             	mov    (%rax),%rax
  8004207f3a:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004207f40:	39 c3                	cmp    %eax,%ebx
  8004207f42:	74 12                	je     8004207f56 <envid2env+0x149>
		*env_store = 0;
  8004207f44:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207f48:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		return -E_BAD_ENV;
  8004207f4f:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  8004207f54:	eb 10                	jmp    8004207f66 <envid2env+0x159>
	}

	// should be *env_store = e;, this might literaly work tho
	// env_store = &e;
	*env_store = e;
  8004207f56:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207f5a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004207f5e:	48 89 10             	mov    %rdx,(%rax)
	return 0;
  8004207f61:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004207f66:	48 83 c4 28          	add    $0x28,%rsp
  8004207f6a:	5b                   	pop    %rbx
  8004207f6b:	5d                   	pop    %rbp
  8004207f6c:	c3                   	retq   

0000008004207f6d <env_init>:
// they are in the envs array (i.e., so that the first call to
// env_alloc() returns envs[0]).
//
void
env_init(void)
{
  8004207f6d:	55                   	push   %rbp
  8004207f6e:	48 89 e5             	mov    %rsp,%rbp
  8004207f71:	48 83 ec 10          	sub    $0x10,%rsp
	// Set up envs array
	// LAB 3: Your code here.
	int i;
	for (i = 0; i < NENV; i++) {
  8004207f75:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004207f7c:	eb 6d                	jmp    8004207feb <env_init+0x7e>
		envs[i].env_status = ENV_FREE;
  8004207f7e:	48 b8 58 f2 4d 04 80 	movabs $0x80044df258,%rax
  8004207f85:	00 00 00 
  8004207f88:	48 8b 10             	mov    (%rax),%rdx
  8004207f8b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004207f8e:	48 98                	cltq   
  8004207f90:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004207f97:	48 01 d0             	add    %rdx,%rax
  8004207f9a:	c7 80 d4 00 00 00 00 	movl   $0x0,0xd4(%rax)
  8004207fa1:	00 00 00 
		envs[i].env_link = &envs[i+1];
  8004207fa4:	48 b8 58 f2 4d 04 80 	movabs $0x80044df258,%rax
  8004207fab:	00 00 00 
  8004207fae:	48 8b 10             	mov    (%rax),%rdx
  8004207fb1:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004207fb4:	48 98                	cltq   
  8004207fb6:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004207fbd:	48 01 c2             	add    %rax,%rdx
  8004207fc0:	48 b8 58 f2 4d 04 80 	movabs $0x80044df258,%rax
  8004207fc7:	00 00 00 
  8004207fca:	48 8b 08             	mov    (%rax),%rcx
  8004207fcd:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004207fd0:	48 98                	cltq   
  8004207fd2:	48 83 c0 01          	add    $0x1,%rax
  8004207fd6:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004207fdd:	48 01 c8             	add    %rcx,%rax
  8004207fe0:	48 89 82 c0 00 00 00 	mov    %rax,0xc0(%rdx)
env_init(void)
{
	// Set up envs array
	// LAB 3: Your code here.
	int i;
	for (i = 0; i < NENV; i++) {
  8004207fe7:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004207feb:	81 7d fc ff 03 00 00 	cmpl   $0x3ff,-0x4(%rbp)
  8004207ff2:	7e 8a                	jle    8004207f7e <env_init+0x11>
		envs[i].env_status = ENV_FREE;
		envs[i].env_link = &envs[i+1];
	}
	envs[NENV-1].env_link = NULL;
  8004207ff4:	48 b8 58 f2 4d 04 80 	movabs $0x80044df258,%rax
  8004207ffb:	00 00 00 
  8004207ffe:	48 8b 00             	mov    (%rax),%rax
  8004208001:	48 05 98 9e 05 00    	add    $0x59e98,%rax
  8004208007:	48 c7 80 c0 00 00 00 	movq   $0x0,0xc0(%rax)
  800420800e:	00 00 00 00 
	env_free_list = &envs[0];
  8004208012:	48 b8 58 f2 4d 04 80 	movabs $0x80044df258,%rax
  8004208019:	00 00 00 
  800420801c:	48 8b 10             	mov    (%rax),%rdx
  800420801f:	48 b8 60 f2 4d 04 80 	movabs $0x80044df260,%rax
  8004208026:	00 00 00 
  8004208029:	48 89 10             	mov    %rdx,(%rax)

	// Per-CPU part of the initialization
	env_init_percpu();
  800420802c:	48 b8 3a 80 20 04 80 	movabs $0x800420803a,%rax
  8004208033:	00 00 00 
  8004208036:	ff d0                	callq  *%rax
}
  8004208038:	c9                   	leaveq 
  8004208039:	c3                   	retq   

000000800420803a <env_init_percpu>:

// Load GDT and segment descriptors.
void
env_init_percpu(void)
{
  800420803a:	55                   	push   %rbp
  800420803b:	48 89 e5             	mov    %rsp,%rbp
  800420803e:	53                   	push   %rbx
  800420803f:	48 83 ec 10          	sub    $0x10,%rsp
  8004208043:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420804a:	00 00 00 
  800420804d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
}

static __inline void
lgdt(void *p)
{
	__asm __volatile("lgdt (%0)" : : "r" (p));
  8004208051:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208055:	0f 01 10             	lgdt   (%rax)
	lgdt(&gdt_pd);

	// The kernel never uses GS or FS, so we leave those set to
	// the user data segment.
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
  8004208058:	b8 23 00 00 00       	mov    $0x23,%eax
  800420805d:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
  800420805f:	b8 23 00 00 00       	mov    $0x23,%eax
  8004208064:	8e e0                	mov    %eax,%fs
	// The kernel does use ES, DS, and SS.  We'll change between
	// the kernel and user data segments as needed.
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
  8004208066:	b8 10 00 00 00       	mov    $0x10,%eax
  800420806b:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
  800420806d:	b8 10 00 00 00       	mov    $0x10,%eax
  8004208072:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
  8004208074:	b8 10 00 00 00       	mov    $0x10,%eax
  8004208079:	8e d0                	mov    %eax,%ss
	// Load the kernel text segment into CS.
	asm volatile("pushq %%rbx \n \t movabs $1f,%%rax \n \t pushq %%rax \n\t lretq \n 1:\n" :: "b" (GD_KT):"cc","memory");
  800420807b:	b8 08 00 00 00       	mov    $0x8,%eax
  8004208080:	89 c3                	mov    %eax,%ebx
  8004208082:	53                   	push   %rbx
  8004208083:	48 b8 90 80 20 04 80 	movabs $0x8004208090,%rax
  800420808a:	00 00 00 
  800420808d:	50                   	push   %rax
  800420808e:	48 cb                	lretq  
  8004208090:	66 c7 45 ee 00 00    	movw   $0x0,-0x12(%rbp)
}

static __inline void
lldt(uint16_t sel)
{
	__asm __volatile("lldt %0" : : "r" (sel));
  8004208096:	0f b7 45 ee          	movzwl -0x12(%rbp),%eax
  800420809a:	0f 00 d0             	lldt   %ax
	// For good measure, clear the local descriptor table (LDT),
	// since we don't use it.
	lldt(0);
}
  800420809d:	48 83 c4 10          	add    $0x10,%rsp
  80042080a1:	5b                   	pop    %rbx
  80042080a2:	5d                   	pop    %rbp
  80042080a3:	c3                   	retq   

00000080042080a4 <env_setup_vm>:
// Returns 0 on success, < 0 on error.  Errors include:
//	-E_NO_MEM if page directory or table could not be allocated.
//
static int
env_setup_vm(struct Env *e)
{
  80042080a4:	55                   	push   %rbp
  80042080a5:	48 89 e5             	mov    %rsp,%rbp
  80042080a8:	48 83 ec 20          	sub    $0x20,%rsp
  80042080ac:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	int r;
	int i;
	struct PageInfo *p = NULL;
  80042080b0:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042080b7:	00 

	// Allocate a page for the page directory
	if (!(p = page_alloc(ALLOC_ZERO)))
  80042080b8:	bf 01 00 00 00       	mov    $0x1,%edi
  80042080bd:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  80042080c4:	00 00 00 
  80042080c7:	ff d0                	callq  *%rax
  80042080c9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042080cd:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042080d2:	75 0a                	jne    80042080de <env_setup_vm+0x3a>
		return -E_NO_MEM;
  80042080d4:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  80042080d9:	e9 bc 00 00 00       	jmpq   800420819a <env_setup_vm+0xf6>
	//	is an exception -- you need to increment env_pml4e's
	//	pp_ref for env_free to work correctly.
	//    - The functions in kern/pmap.h are handy.

	// LAB 3: Your code here.
	p->pp_ref       += 1;
  80042080de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042080e2:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042080e6:	8d 50 01             	lea    0x1(%rax),%edx
  80042080e9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042080ed:	66 89 50 08          	mov    %dx,0x8(%rax)
	e->env_pml4e    = page2kva(p);
  80042080f1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042080f5:	48 89 c7             	mov    %rax,%rdi
  80042080f8:	48 b8 67 7d 20 04 80 	movabs $0x8004207d67,%rax
  80042080ff:	00 00 00 
  8004208102:	ff d0                	callq  *%rax
  8004208104:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004208108:	48 89 82 e0 00 00 00 	mov    %rax,0xe0(%rdx)
	e->env_cr3      = page2pa(p);
  800420810f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208113:	48 89 c7             	mov    %rax,%rdi
  8004208116:	48 b8 d1 7c 20 04 80 	movabs $0x8004207cd1,%rax
  800420811d:	00 00 00 
  8004208120:	ff d0                	callq  *%rax
  8004208122:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004208126:	48 89 82 e8 00 00 00 	mov    %rax,0xe8(%rdx)

	memset(e->env_pml4e, 0, PGSIZE);
  800420812d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208131:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208138:	ba 00 10 00 00       	mov    $0x1000,%edx
  800420813d:	be 00 00 00 00       	mov    $0x0,%esi
  8004208142:	48 89 c7             	mov    %rax,%rdi
  8004208145:	48 b8 37 0e 21 04 80 	movabs $0x8004210e37,%rax
  800420814c:	00 00 00 
  800420814f:	ff d0                	callq  *%rax
	e->env_pml4e[1] = boot_pml4e[1];
  8004208151:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208155:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420815c:	48 8d 50 08          	lea    0x8(%rax),%rdx
  8004208160:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  8004208167:	00 00 00 
  800420816a:	48 8b 00             	mov    (%rax),%rax
  800420816d:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004208171:	48 89 02             	mov    %rax,(%rdx)

	// UVPT maps the env's own page table read-only.
	// Permissions: kernel R, user R
	e->env_pml4e[PML4(UVPT)] = e->env_cr3 | PTE_P | PTE_U;
  8004208174:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208178:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420817f:	48 8d 50 10          	lea    0x10(%rax),%rdx
  8004208183:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208187:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  800420818e:	48 83 c8 05          	or     $0x5,%rax
  8004208192:	48 89 02             	mov    %rax,(%rdx)

	return 0;
  8004208195:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420819a:	c9                   	leaveq 
  800420819b:	c3                   	retq   

000000800420819c <env_guest_alloc>:

#ifndef VMM_GUEST
int
env_guest_alloc(struct Env **newenv_store, envid_t parent_id)
{
  800420819c:	55                   	push   %rbp
  800420819d:	48 89 e5             	mov    %rsp,%rbp
  80042081a0:	48 83 ec 50          	sub    $0x50,%rsp
  80042081a4:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  80042081a8:	89 75 b4             	mov    %esi,-0x4c(%rbp)
	int32_t generation;
	struct Env *e;

	if (!(e = env_free_list))
  80042081ab:	48 b8 60 f2 4d 04 80 	movabs $0x80044df260,%rax
  80042081b2:	00 00 00 
  80042081b5:	48 8b 00             	mov    (%rax),%rax
  80042081b8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042081bc:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  80042081c1:	75 0a                	jne    80042081cd <env_guest_alloc+0x31>
		return -E_NO_FREE_ENV;
  80042081c3:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
  80042081c8:	e9 47 04 00 00       	jmpq   8004208614 <env_guest_alloc+0x478>

	memset(&e->env_vmxinfo, 0, sizeof(struct VmxGuestInfo));
  80042081cd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042081d1:	48 05 20 01 00 00    	add    $0x120,%rax
  80042081d7:	ba 48 00 00 00       	mov    $0x48,%edx
  80042081dc:	be 00 00 00 00       	mov    $0x0,%esi
  80042081e1:	48 89 c7             	mov    %rax,%rdi
  80042081e4:	48 b8 37 0e 21 04 80 	movabs $0x8004210e37,%rax
  80042081eb:	00 00 00 
  80042081ee:	ff d0                	callq  *%rax

	// allocate a page for the EPT PML4..
	struct PageInfo *p = NULL;
  80042081f0:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  80042081f7:	00 

	if (!(p = page_alloc(ALLOC_ZERO)))
  80042081f8:	bf 01 00 00 00       	mov    $0x1,%edi
  80042081fd:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  8004208204:	00 00 00 
  8004208207:	ff d0                	callq  *%rax
  8004208209:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420820d:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004208212:	75 0a                	jne    800420821e <env_guest_alloc+0x82>
		return -E_NO_MEM;
  8004208214:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004208219:	e9 f6 03 00 00       	jmpq   8004208614 <env_guest_alloc+0x478>

	memset(p, 0, sizeof(struct PageInfo));
  800420821e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208222:	ba 10 00 00 00       	mov    $0x10,%edx
  8004208227:	be 00 00 00 00       	mov    $0x0,%esi
  800420822c:	48 89 c7             	mov    %rax,%rdi
  800420822f:	48 b8 37 0e 21 04 80 	movabs $0x8004210e37,%rax
  8004208236:	00 00 00 
  8004208239:	ff d0                	callq  *%rax
	p->pp_ref       += 1;
  800420823b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420823f:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004208243:	8d 50 01             	lea    0x1(%rax),%edx
  8004208246:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420824a:	66 89 50 08          	mov    %dx,0x8(%rax)
	e->env_pml4e    = page2kva(p);
  800420824e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208252:	48 89 c7             	mov    %rax,%rdi
  8004208255:	48 b8 67 7d 20 04 80 	movabs $0x8004207d67,%rax
  800420825c:	00 00 00 
  800420825f:	ff d0                	callq  *%rax
  8004208261:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208265:	48 89 82 e0 00 00 00 	mov    %rax,0xe0(%rdx)
	e->env_cr3      = page2pa(p);
  800420826c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208270:	48 89 c7             	mov    %rax,%rdi
  8004208273:	48 b8 d1 7c 20 04 80 	movabs $0x8004207cd1,%rax
  800420827a:	00 00 00 
  800420827d:	ff d0                	callq  *%rax
  800420827f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208283:	48 89 82 e8 00 00 00 	mov    %rax,0xe8(%rdx)

	// Allocate a VMCS.
	struct PageInfo *q = vmx_init_vmcs();
  800420828a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420828f:	48 ba 3a b2 21 04 80 	movabs $0x800421b23a,%rdx
  8004208296:	00 00 00 
  8004208299:	ff d2                	callq  *%rdx
  800420829b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (!q) {
  800420829f:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  80042082a4:	75 1d                	jne    80042082c3 <env_guest_alloc+0x127>
		page_decref(p);
  80042082a6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042082aa:	48 89 c7             	mov    %rax,%rdi
  80042082ad:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  80042082b4:	00 00 00 
  80042082b7:	ff d0                	callq  *%rax
		return -E_NO_MEM;
  80042082b9:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  80042082be:	e9 51 03 00 00       	jmpq   8004208614 <env_guest_alloc+0x478>
	}
	q->pp_ref += 1;
  80042082c3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042082c7:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042082cb:	8d 50 01             	lea    0x1(%rax),%edx
  80042082ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042082d2:	66 89 50 08          	mov    %dx,0x8(%rax)
	e->env_vmxinfo.vmcs = page2kva(q);
  80042082d6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042082da:	48 89 c7             	mov    %rax,%rdi
  80042082dd:	48 b8 67 7d 20 04 80 	movabs $0x8004207d67,%rax
  80042082e4:	00 00 00 
  80042082e7:	ff d0                	callq  *%rax
  80042082e9:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042082ed:	48 89 82 28 01 00 00 	mov    %rax,0x128(%rdx)

	// Allocate a page for msr load/store area.
	struct PageInfo *r = NULL;
  80042082f4:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  80042082fb:	00 
	if (!(r = page_alloc(ALLOC_ZERO))) {
  80042082fc:	bf 01 00 00 00       	mov    $0x1,%edi
  8004208301:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  8004208308:	00 00 00 
  800420830b:	ff d0                	callq  *%rax
  800420830d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004208311:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004208316:	75 30                	jne    8004208348 <env_guest_alloc+0x1ac>
		page_decref(p);
  8004208318:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420831c:	48 89 c7             	mov    %rax,%rdi
  800420831f:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  8004208326:	00 00 00 
  8004208329:	ff d0                	callq  *%rax
		page_decref(q);
  800420832b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420832f:	48 89 c7             	mov    %rax,%rdi
  8004208332:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  8004208339:	00 00 00 
  800420833c:	ff d0                	callq  *%rax
		return -E_NO_MEM;
  800420833e:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004208343:	e9 cc 02 00 00       	jmpq   8004208614 <env_guest_alloc+0x478>
	}
	r->pp_ref += 1;
  8004208348:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420834c:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004208350:	8d 50 01             	lea    0x1(%rax),%edx
  8004208353:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208357:	66 89 50 08          	mov    %dx,0x8(%rax)
	e->env_vmxinfo.msr_host_area = page2kva(r);
  800420835b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420835f:	48 89 c7             	mov    %rax,%rdi
  8004208362:	48 b8 67 7d 20 04 80 	movabs $0x8004207d67,%rax
  8004208369:	00 00 00 
  800420836c:	ff d0                	callq  *%rax
  800420836e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208372:	48 89 82 50 01 00 00 	mov    %rax,0x150(%rdx)
	e->env_vmxinfo.msr_guest_area = page2kva(r) + PGSIZE / 2;
  8004208379:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420837d:	48 89 c7             	mov    %rax,%rdi
  8004208380:	48 b8 67 7d 20 04 80 	movabs $0x8004207d67,%rax
  8004208387:	00 00 00 
  800420838a:	ff d0                	callq  *%rax
  800420838c:	48 8d 90 00 08 00 00 	lea    0x800(%rax),%rdx
  8004208393:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208397:	48 89 90 58 01 00 00 	mov    %rdx,0x158(%rax)

	// Allocate pages for IO bitmaps.
	struct PageInfo *s = NULL;
  800420839e:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  80042083a5:	00 
	if (!(s = page_alloc(ALLOC_ZERO))) {
  80042083a6:	bf 01 00 00 00       	mov    $0x1,%edi
  80042083ab:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  80042083b2:	00 00 00 
  80042083b5:	ff d0                	callq  *%rax
  80042083b7:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042083bb:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  80042083c0:	75 43                	jne    8004208405 <env_guest_alloc+0x269>
		page_decref(p);
  80042083c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042083c6:	48 89 c7             	mov    %rax,%rdi
  80042083c9:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  80042083d0:	00 00 00 
  80042083d3:	ff d0                	callq  *%rax
		page_decref(q);
  80042083d5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042083d9:	48 89 c7             	mov    %rax,%rdi
  80042083dc:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  80042083e3:	00 00 00 
  80042083e6:	ff d0                	callq  *%rax
		page_decref(r);
  80042083e8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042083ec:	48 89 c7             	mov    %rax,%rdi
  80042083ef:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  80042083f6:	00 00 00 
  80042083f9:	ff d0                	callq  *%rax
		return -E_NO_MEM;
  80042083fb:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004208400:	e9 0f 02 00 00       	jmpq   8004208614 <env_guest_alloc+0x478>
	}
	s->pp_ref += 1;
  8004208405:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208409:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420840d:	8d 50 01             	lea    0x1(%rax),%edx
  8004208410:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208414:	66 89 50 08          	mov    %dx,0x8(%rax)
	e->env_vmxinfo.io_bmap_a = page2kva(s);
  8004208418:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420841c:	48 89 c7             	mov    %rax,%rdi
  800420841f:	48 b8 67 7d 20 04 80 	movabs $0x8004207d67,%rax
  8004208426:	00 00 00 
  8004208429:	ff d0                	callq  *%rax
  800420842b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420842f:	48 89 82 38 01 00 00 	mov    %rax,0x138(%rdx)

	struct PageInfo *t = NULL;
  8004208436:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  800420843d:	00 
	if (!(t = page_alloc(ALLOC_ZERO))) {
  800420843e:	bf 01 00 00 00       	mov    $0x1,%edi
  8004208443:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  800420844a:	00 00 00 
  800420844d:	ff d0                	callq  *%rax
  800420844f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004208453:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004208458:	75 56                	jne    80042084b0 <env_guest_alloc+0x314>
		page_decref(p);
  800420845a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420845e:	48 89 c7             	mov    %rax,%rdi
  8004208461:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  8004208468:	00 00 00 
  800420846b:	ff d0                	callq  *%rax
		page_decref(q);
  800420846d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208471:	48 89 c7             	mov    %rax,%rdi
  8004208474:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  800420847b:	00 00 00 
  800420847e:	ff d0                	callq  *%rax
		page_decref(r);
  8004208480:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208484:	48 89 c7             	mov    %rax,%rdi
  8004208487:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  800420848e:	00 00 00 
  8004208491:	ff d0                	callq  *%rax
		page_decref(s);
  8004208493:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208497:	48 89 c7             	mov    %rax,%rdi
  800420849a:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  80042084a1:	00 00 00 
  80042084a4:	ff d0                	callq  *%rax
		return -E_NO_MEM;
  80042084a6:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  80042084ab:	e9 64 01 00 00       	jmpq   8004208614 <env_guest_alloc+0x478>
	}
	t->pp_ref += 1;
  80042084b0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042084b4:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042084b8:	8d 50 01             	lea    0x1(%rax),%edx
  80042084bb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042084bf:	66 89 50 08          	mov    %dx,0x8(%rax)
	e->env_vmxinfo.io_bmap_b = page2kva(t);
  80042084c3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042084c7:	48 89 c7             	mov    %rax,%rdi
  80042084ca:	48 b8 67 7d 20 04 80 	movabs $0x8004207d67,%rax
  80042084d1:	00 00 00 
  80042084d4:	ff d0                	callq  *%rax
  80042084d6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042084da:	48 89 82 40 01 00 00 	mov    %rax,0x140(%rdx)

	// Generate an env_id for this environment.
	generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NENV - 1);
  80042084e1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042084e5:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  80042084eb:	05 00 10 00 00       	add    $0x1000,%eax
  80042084f0:	25 00 fc ff ff       	and    $0xfffffc00,%eax
  80042084f5:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if (generation <= 0)	// Don't create a negative env_id.
  80042084f8:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  80042084fc:	7f 07                	jg     8004208505 <env_guest_alloc+0x369>
		generation = 1 << ENVGENSHIFT;
  80042084fe:	c7 45 fc 00 10 00 00 	movl   $0x1000,-0x4(%rbp)
	e->env_id = generation | (e - envs);
  8004208505:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208509:	48 b8 58 f2 4d 04 80 	movabs $0x80044df258,%rax
  8004208510:	00 00 00 
  8004208513:	48 8b 00             	mov    (%rax),%rax
  8004208516:	48 29 c2             	sub    %rax,%rdx
  8004208519:	48 89 d0             	mov    %rdx,%rax
  800420851c:	48 c1 f8 03          	sar    $0x3,%rax
  8004208520:	48 89 c2             	mov    %rax,%rdx
  8004208523:	48 b8 a5 4f fa a4 4f 	movabs $0x4fa4fa4fa4fa4fa5,%rax
  800420852a:	fa a4 4f 
  800420852d:	48 0f af c2          	imul   %rdx,%rax
  8004208531:	0b 45 fc             	or     -0x4(%rbp),%eax
  8004208534:	89 c2                	mov    %eax,%edx
  8004208536:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420853a:	89 90 c8 00 00 00    	mov    %edx,0xc8(%rax)

	// Set the basic status variables.
	e->env_parent_id = parent_id;
  8004208540:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208544:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  8004208547:	89 90 cc 00 00 00    	mov    %edx,0xcc(%rax)
	e->env_type = ENV_TYPE_GUEST;
  800420854d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208551:	c7 80 d0 00 00 00 03 	movl   $0x3,0xd0(%rax)
  8004208558:	00 00 00 
	e->env_status = ENV_RUNNABLE;
  800420855b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420855f:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  8004208566:	00 00 00 

	e->env_vmxinfo.vcpunum = vcpu_count++;
  8004208569:	48 b8 50 f2 4d 04 80 	movabs $0x80044df250,%rax
  8004208570:	00 00 00 
  8004208573:	8b 00                	mov    (%rax),%eax
  8004208575:	8d 48 01             	lea    0x1(%rax),%ecx
  8004208578:	48 ba 50 f2 4d 04 80 	movabs $0x80044df250,%rdx
  800420857f:	00 00 00 
  8004208582:	89 0a                	mov    %ecx,(%rdx)
  8004208584:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208588:	89 82 60 01 00 00    	mov    %eax,0x160(%rdx)
    	cprintf("VCPUNUM allocated: %d\n", e->env_vmxinfo.vcpunum);
  800420858e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208592:	8b 80 60 01 00 00    	mov    0x160(%rax),%eax
  8004208598:	89 c6                	mov    %eax,%esi
  800420859a:	48 bf ab f6 21 04 80 	movabs $0x800421f6ab,%rdi
  80042085a1:	00 00 00 
  80042085a4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042085a9:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  80042085b0:	00 00 00 
  80042085b3:	ff d2                	callq  *%rdx

	memset(&e->env_tf, 0, sizeof(e->env_tf));
  80042085b5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042085b9:	ba c0 00 00 00       	mov    $0xc0,%edx
  80042085be:	be 00 00 00 00       	mov    $0x0,%esi
  80042085c3:	48 89 c7             	mov    %rax,%rdi
  80042085c6:	48 b8 37 0e 21 04 80 	movabs $0x8004210e37,%rax
  80042085cd:	00 00 00 
  80042085d0:	ff d0                	callq  *%rax

	e->env_pgfault_upcall = 0;
  80042085d2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042085d6:	48 c7 80 f0 00 00 00 	movq   $0x0,0xf0(%rax)
  80042085dd:	00 00 00 00 
	e->env_ipc_recving = 0;
  80042085e1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042085e5:	c6 80 f8 00 00 00 00 	movb   $0x0,0xf8(%rax)

	// commit the allocation
	env_free_list = e->env_link;
  80042085ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042085f0:	48 8b 90 c0 00 00 00 	mov    0xc0(%rax),%rdx
  80042085f7:	48 b8 60 f2 4d 04 80 	movabs $0x80044df260,%rax
  80042085fe:	00 00 00 
  8004208601:	48 89 10             	mov    %rdx,(%rax)
	*newenv_store = e;
  8004208604:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004208608:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420860c:	48 89 10             	mov    %rdx,(%rax)

	return 0;
  800420860f:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004208614:	c9                   	leaveq 
  8004208615:	c3                   	retq   

0000008004208616 <env_guest_free>:

void env_guest_free(struct Env *e) {
  8004208616:	55                   	push   %rbp
  8004208617:	48 89 e5             	mov    %rsp,%rbp
  800420861a:	53                   	push   %rbx
  800420861b:	48 83 ec 38          	sub    $0x38,%rsp
  800420861f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
	// Free the VMCS.
	page_decref(pa2page(PADDR(e->env_vmxinfo.vmcs)));
  8004208623:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208627:	48 8b 80 28 01 00 00 	mov    0x128(%rax),%rax
  800420862e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004208632:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004208639:	00 00 00 
  800420863c:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  8004208640:	77 32                	ja     8004208674 <env_guest_free+0x5e>
  8004208642:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208646:	48 89 c1             	mov    %rax,%rcx
  8004208649:	48 ba c8 f6 21 04 80 	movabs $0x800421f6c8,%rdx
  8004208650:	00 00 00 
  8004208653:	be 40 01 00 00       	mov    $0x140,%esi
  8004208658:	48 bf ec f6 21 04 80 	movabs $0x800421f6ec,%rdi
  800420865f:	00 00 00 
  8004208662:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208667:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420866e:	00 00 00 
  8004208671:	41 ff d0             	callq  *%r8
  8004208674:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800420867b:	ff ff ff 
  800420867e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208682:	48 01 d0             	add    %rdx,%rax
  8004208685:	48 89 c7             	mov    %rax,%rdi
  8004208688:	48 b8 f6 7c 20 04 80 	movabs $0x8004207cf6,%rax
  800420868f:	00 00 00 
  8004208692:	ff d0                	callq  *%rax
  8004208694:	48 89 c7             	mov    %rax,%rdi
  8004208697:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  800420869e:	00 00 00 
  80042086a1:	ff d0                	callq  *%rax
	// Free msr load/store area.
	page_decref(pa2page(PADDR(e->env_vmxinfo.msr_host_area)));
  80042086a3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042086a7:	48 8b 80 50 01 00 00 	mov    0x150(%rax),%rax
  80042086ae:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042086b2:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042086b9:	00 00 00 
  80042086bc:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  80042086c0:	77 32                	ja     80042086f4 <env_guest_free+0xde>
  80042086c2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042086c6:	48 89 c1             	mov    %rax,%rcx
  80042086c9:	48 ba c8 f6 21 04 80 	movabs $0x800421f6c8,%rdx
  80042086d0:	00 00 00 
  80042086d3:	be 42 01 00 00       	mov    $0x142,%esi
  80042086d8:	48 bf ec f6 21 04 80 	movabs $0x800421f6ec,%rdi
  80042086df:	00 00 00 
  80042086e2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042086e7:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042086ee:	00 00 00 
  80042086f1:	41 ff d0             	callq  *%r8
  80042086f4:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042086fb:	ff ff ff 
  80042086fe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208702:	48 01 d0             	add    %rdx,%rax
  8004208705:	48 89 c7             	mov    %rax,%rdi
  8004208708:	48 b8 f6 7c 20 04 80 	movabs $0x8004207cf6,%rax
  800420870f:	00 00 00 
  8004208712:	ff d0                	callq  *%rax
  8004208714:	48 89 c7             	mov    %rax,%rdi
  8004208717:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  800420871e:	00 00 00 
  8004208721:	ff d0                	callq  *%rax
	// Free IO bitmaps page.
	page_decref(pa2page(PADDR(e->env_vmxinfo.io_bmap_a)));
  8004208723:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208727:	48 8b 80 38 01 00 00 	mov    0x138(%rax),%rax
  800420872e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004208732:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004208739:	00 00 00 
  800420873c:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  8004208740:	77 32                	ja     8004208774 <env_guest_free+0x15e>
  8004208742:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208746:	48 89 c1             	mov    %rax,%rcx
  8004208749:	48 ba c8 f6 21 04 80 	movabs $0x800421f6c8,%rdx
  8004208750:	00 00 00 
  8004208753:	be 44 01 00 00       	mov    $0x144,%esi
  8004208758:	48 bf ec f6 21 04 80 	movabs $0x800421f6ec,%rdi
  800420875f:	00 00 00 
  8004208762:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208767:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420876e:	00 00 00 
  8004208771:	41 ff d0             	callq  *%r8
  8004208774:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800420877b:	ff ff ff 
  800420877e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208782:	48 01 d0             	add    %rdx,%rax
  8004208785:	48 89 c7             	mov    %rax,%rdi
  8004208788:	48 b8 f6 7c 20 04 80 	movabs $0x8004207cf6,%rax
  800420878f:	00 00 00 
  8004208792:	ff d0                	callq  *%rax
  8004208794:	48 89 c7             	mov    %rax,%rdi
  8004208797:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  800420879e:	00 00 00 
  80042087a1:	ff d0                	callq  *%rax
	page_decref(pa2page(PADDR(e->env_vmxinfo.io_bmap_b)));
  80042087a3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042087a7:	48 8b 80 40 01 00 00 	mov    0x140(%rax),%rax
  80042087ae:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042087b2:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042087b9:	00 00 00 
  80042087bc:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  80042087c0:	77 32                	ja     80042087f4 <env_guest_free+0x1de>
  80042087c2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042087c6:	48 89 c1             	mov    %rax,%rcx
  80042087c9:	48 ba c8 f6 21 04 80 	movabs $0x800421f6c8,%rdx
  80042087d0:	00 00 00 
  80042087d3:	be 45 01 00 00       	mov    $0x145,%esi
  80042087d8:	48 bf ec f6 21 04 80 	movabs $0x800421f6ec,%rdi
  80042087df:	00 00 00 
  80042087e2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042087e7:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042087ee:	00 00 00 
  80042087f1:	41 ff d0             	callq  *%r8
  80042087f4:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042087fb:	ff ff ff 
  80042087fe:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208802:	48 01 d0             	add    %rdx,%rax
  8004208805:	48 89 c7             	mov    %rax,%rdi
  8004208808:	48 b8 f6 7c 20 04 80 	movabs $0x8004207cf6,%rax
  800420880f:	00 00 00 
  8004208812:	ff d0                	callq  *%rax
  8004208814:	48 89 c7             	mov    %rax,%rdi
  8004208817:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  800420881e:	00 00 00 
  8004208821:	ff d0                	callq  *%rax

	// Free the host pages that were allocated for the guest and
	// the EPT tables itself.
	free_guest_mem(e->env_pml4e);
  8004208823:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208827:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420882e:	48 89 c7             	mov    %rax,%rdi
  8004208831:	48 b8 bc 9d 21 04 80 	movabs $0x8004219dbc,%rax
  8004208838:	00 00 00 
  800420883b:	ff d0                	callq  *%rax

	// Free the EPT PML4 page.
	page_decref(pa2page(e->env_cr3));
  800420883d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208841:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  8004208848:	48 89 c7             	mov    %rax,%rdi
  800420884b:	48 b8 f6 7c 20 04 80 	movabs $0x8004207cf6,%rax
  8004208852:	00 00 00 
  8004208855:	ff d0                	callq  *%rax
  8004208857:	48 89 c7             	mov    %rax,%rdi
  800420885a:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  8004208861:	00 00 00 
  8004208864:	ff d0                	callq  *%rax
	e->env_pml4e = 0;
  8004208866:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420886a:	48 c7 80 e0 00 00 00 	movq   $0x0,0xe0(%rax)
  8004208871:	00 00 00 00 
	e->env_cr3 = 0;
  8004208875:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208879:	48 c7 80 e8 00 00 00 	movq   $0x0,0xe8(%rax)
  8004208880:	00 00 00 00 

	// return the environment to the free list
	e->env_status = ENV_FREE;
  8004208884:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208888:	c7 80 d4 00 00 00 00 	movl   $0x0,0xd4(%rax)
  800420888f:	00 00 00 
	e->env_link = env_free_list;
  8004208892:	48 b8 60 f2 4d 04 80 	movabs $0x80044df260,%rax
  8004208899:	00 00 00 
  800420889c:	48 8b 10             	mov    (%rax),%rdx
  800420889f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042088a3:	48 89 90 c0 00 00 00 	mov    %rdx,0xc0(%rax)
	env_free_list = e;
  80042088aa:	48 b8 60 f2 4d 04 80 	movabs $0x80044df260,%rax
  80042088b1:	00 00 00 
  80042088b4:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042088b8:	48 89 10             	mov    %rdx,(%rax)

	cprintf("[%08x] free vmx guest env %08x\n", curenv ? curenv->env_id : 0, e->env_id);
  80042088bb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042088bf:	8b 98 c8 00 00 00    	mov    0xc8(%rax),%ebx
  80042088c5:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  80042088cc:	00 00 00 
  80042088cf:	ff d0                	callq  *%rax
  80042088d1:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  80042088d8:	00 00 00 
  80042088db:	48 98                	cltq   
  80042088dd:	48 c1 e0 03          	shl    $0x3,%rax
  80042088e1:	48 89 c1             	mov    %rax,%rcx
  80042088e4:	48 c1 e1 04          	shl    $0x4,%rcx
  80042088e8:	48 01 c8             	add    %rcx,%rax
  80042088eb:	48 01 d0             	add    %rdx,%rax
  80042088ee:	48 83 c0 08          	add    $0x8,%rax
  80042088f2:	48 8b 00             	mov    (%rax),%rax
  80042088f5:	48 85 c0             	test   %rax,%rax
  80042088f8:	74 38                	je     8004208932 <env_guest_free+0x31c>
  80042088fa:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  8004208901:	00 00 00 
  8004208904:	ff d0                	callq  *%rax
  8004208906:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420890d:	00 00 00 
  8004208910:	48 98                	cltq   
  8004208912:	48 c1 e0 03          	shl    $0x3,%rax
  8004208916:	48 89 c1             	mov    %rax,%rcx
  8004208919:	48 c1 e1 04          	shl    $0x4,%rcx
  800420891d:	48 01 c8             	add    %rcx,%rax
  8004208920:	48 01 d0             	add    %rdx,%rax
  8004208923:	48 83 c0 08          	add    $0x8,%rax
  8004208927:	48 8b 00             	mov    (%rax),%rax
  800420892a:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004208930:	eb 05                	jmp    8004208937 <env_guest_free+0x321>
  8004208932:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208937:	89 da                	mov    %ebx,%edx
  8004208939:	89 c6                	mov    %eax,%esi
  800420893b:	48 bf f8 f6 21 04 80 	movabs $0x800421f6f8,%rdi
  8004208942:	00 00 00 
  8004208945:	b8 00 00 00 00       	mov    $0x0,%eax
  800420894a:	48 b9 83 9c 20 04 80 	movabs $0x8004209c83,%rcx
  8004208951:	00 00 00 
  8004208954:	ff d1                	callq  *%rcx
}
  8004208956:	48 83 c4 38          	add    $0x38,%rsp
  800420895a:	5b                   	pop    %rbx
  800420895b:	5d                   	pop    %rbp
  800420895c:	c3                   	retq   

000000800420895d <env_alloc>:
//	-E_NO_MEM on memory exhaustion
//
// CHANGED FOR LAB 0
int
env_alloc(struct Env **newenv_store, envid_t parent_id)
{
  800420895d:	55                   	push   %rbp
  800420895e:	48 89 e5             	mov    %rsp,%rbp
  8004208961:	48 83 ec 30          	sub    $0x30,%rsp
  8004208965:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004208969:	89 75 d4             	mov    %esi,-0x2c(%rbp)
	int32_t generation;
	int r;
	struct Env *e;

	if (!(e = env_free_list))
  800420896c:	48 b8 60 f2 4d 04 80 	movabs $0x80044df260,%rax
  8004208973:	00 00 00 
  8004208976:	48 8b 00             	mov    (%rax),%rax
  8004208979:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420897d:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  8004208982:	75 0a                	jne    800420898e <env_alloc+0x31>
		return -E_NO_FREE_ENV;
  8004208984:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
  8004208989:	e9 5b 01 00 00       	jmpq   8004208ae9 <env_alloc+0x18c>

	// Allocate and set up the page directory for this environment.
	if ((r = env_setup_vm(e)) < 0)
  800420898e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208992:	48 89 c7             	mov    %rax,%rdi
  8004208995:	48 b8 a4 80 20 04 80 	movabs $0x80042080a4,%rax
  800420899c:	00 00 00 
  800420899f:	ff d0                	callq  *%rax
  80042089a1:	89 45 ec             	mov    %eax,-0x14(%rbp)
  80042089a4:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  80042089a8:	79 08                	jns    80042089b2 <env_alloc+0x55>
		return r;
  80042089aa:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042089ad:	e9 37 01 00 00       	jmpq   8004208ae9 <env_alloc+0x18c>

	// Generate an env_id for this environment.
	generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NENV - 1);
  80042089b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042089b6:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  80042089bc:	05 00 10 00 00       	add    $0x1000,%eax
  80042089c1:	25 00 fc ff ff       	and    $0xfffffc00,%eax
  80042089c6:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if (generation <= 0)	// Don't create a negative env_id.
  80042089c9:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  80042089cd:	7f 07                	jg     80042089d6 <env_alloc+0x79>
		generation = 1 << ENVGENSHIFT;
  80042089cf:	c7 45 fc 00 10 00 00 	movl   $0x1000,-0x4(%rbp)
	e->env_id = generation | (e - envs);
  80042089d6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042089da:	48 b8 58 f2 4d 04 80 	movabs $0x80044df258,%rax
  80042089e1:	00 00 00 
  80042089e4:	48 8b 00             	mov    (%rax),%rax
  80042089e7:	48 29 c2             	sub    %rax,%rdx
  80042089ea:	48 89 d0             	mov    %rdx,%rax
  80042089ed:	48 c1 f8 03          	sar    $0x3,%rax
  80042089f1:	48 89 c2             	mov    %rax,%rdx
  80042089f4:	48 b8 a5 4f fa a4 4f 	movabs $0x4fa4fa4fa4fa4fa5,%rax
  80042089fb:	fa a4 4f 
  80042089fe:	48 0f af c2          	imul   %rdx,%rax
  8004208a02:	0b 45 fc             	or     -0x4(%rbp),%eax
  8004208a05:	89 c2                	mov    %eax,%edx
  8004208a07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a0b:	89 90 c8 00 00 00    	mov    %edx,0xc8(%rax)

	// Set the basic status variables.
	e->env_parent_id = parent_id;
  8004208a11:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a15:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004208a18:	89 90 cc 00 00 00    	mov    %edx,0xcc(%rax)
	e->env_type = ENV_TYPE_USER;
  8004208a1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a22:	c7 80 d0 00 00 00 00 	movl   $0x0,0xd0(%rax)
  8004208a29:	00 00 00 
	e->env_status = ENV_RUNNABLE;
  8004208a2c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a30:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  8004208a37:	00 00 00 

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
  8004208a3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a3e:	ba c0 00 00 00       	mov    $0xc0,%edx
  8004208a43:	be 00 00 00 00       	mov    $0x0,%esi
  8004208a48:	48 89 c7             	mov    %rax,%rdi
  8004208a4b:	48 b8 37 0e 21 04 80 	movabs $0x8004210e37,%rax
  8004208a52:	00 00 00 
  8004208a55:	ff d0                	callq  *%rax
	// The low 2 bits of each segment register contains the
	// Requestor Privilege Level (RPL); 3 means user mode.  When
	// we switch privilege levels, the hardware does various
	// checks involving the RPL and the Descriptor Privilege Level
	// (DPL) stored in the descriptors themselves.
	e->env_tf.tf_ds = GD_UD | 3;
  8004208a57:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a5b:	66 c7 80 80 00 00 00 	movw   $0x23,0x80(%rax)
  8004208a62:	23 00 
	e->env_tf.tf_es = GD_UD | 3;
  8004208a64:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a68:	66 c7 40 78 23 00    	movw   $0x23,0x78(%rax)
	e->env_tf.tf_ss = GD_UD | 3;
  8004208a6e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a72:	66 c7 80 b8 00 00 00 	movw   $0x23,0xb8(%rax)
  8004208a79:	23 00 
	e->env_tf.tf_rsp = USTACKTOP;
  8004208a7b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a7f:	b9 00 e0 7f ef       	mov    $0xef7fe000,%ecx
  8004208a84:	48 89 88 b0 00 00 00 	mov    %rcx,0xb0(%rax)
	e->env_tf.tf_cs = GD_UT | 3;
  8004208a8b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a8f:	66 c7 80 a0 00 00 00 	movw   $0x1b,0xa0(%rax)
  8004208a96:	1b 00 
	// You will set e->env_tf.tf_rip later.

	// Enable interrupts while in user mode.
	e->env_tf.tf_eflags = FL_IF; // interrupts enabled
  8004208a98:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a9c:	48 c7 80 a8 00 00 00 	movq   $0x200,0xa8(%rax)
  8004208aa3:	00 02 00 00 

	// Clear the page fault handler until user installs one.
	e->env_pgfault_upcall = 0;
  8004208aa7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208aab:	48 c7 80 f0 00 00 00 	movq   $0x0,0xf0(%rax)
  8004208ab2:	00 00 00 00 

	// Also clear the IPC receiving flag.
	e->env_ipc_recving = 0;
  8004208ab6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208aba:	c6 80 f8 00 00 00 00 	movb   $0x0,0xf8(%rax)

	// commit the allocation
	env_free_list = e->env_link;
  8004208ac1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208ac5:	48 8b 90 c0 00 00 00 	mov    0xc0(%rax),%rdx
  8004208acc:	48 b8 60 f2 4d 04 80 	movabs $0x80044df260,%rax
  8004208ad3:	00 00 00 
  8004208ad6:	48 89 10             	mov    %rdx,(%rax)
	*newenv_store = e;
  8004208ad9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208add:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208ae1:	48 89 10             	mov    %rdx,(%rax)

	// cprintf("[%08x] new env %08x\n", curenv ? curenv->env_id : 0, e->env_id);
	return 0;
  8004208ae4:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004208ae9:	c9                   	leaveq 
  8004208aea:	c3                   	retq   

0000008004208aeb <region_alloc>:
// Pages should be writable by user and kernel.
// Panic if any allocation attempt fails.
//
static void
region_alloc(struct Env *e, void *va, size_t len)
{
  8004208aeb:	55                   	push   %rbp
  8004208aec:	48 89 e5             	mov    %rsp,%rbp
  8004208aef:	48 83 ec 40          	sub    $0x40,%rsp
  8004208af3:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004208af7:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004208afb:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	int r;
	struct PageInfo *pp;
	void *endva = (uint8_t*) va + len;
  8004208aff:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208b03:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004208b07:	48 01 d0             	add    %rdx,%rax
  8004208b0a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	while (va < endva) {
  8004208b0e:	e9 c8 00 00 00       	jmpq   8004208bdb <region_alloc+0xf0>
		// Allocate and map a page covering virtual address va.
		if (!(pp = page_alloc(0)))
  8004208b13:	bf 00 00 00 00       	mov    $0x0,%edi
  8004208b18:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  8004208b1f:	00 00 00 
  8004208b22:	ff d0                	callq  *%rax
  8004208b24:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004208b28:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  8004208b2d:	75 30                	jne    8004208b5f <region_alloc+0x74>
			panic("map_segment: could not alloc page: %e\n", -E_NO_MEM);
  8004208b2f:	b9 fc ff ff ff       	mov    $0xfffffffc,%ecx
  8004208b34:	48 ba 18 f7 21 04 80 	movabs $0x800421f718,%rdx
  8004208b3b:	00 00 00 
  8004208b3e:	be b2 01 00 00       	mov    $0x1b2,%esi
  8004208b43:	48 bf ec f6 21 04 80 	movabs $0x800421f6ec,%rdi
  8004208b4a:	00 00 00 
  8004208b4d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208b52:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004208b59:	00 00 00 
  8004208b5c:	41 ff d0             	callq  *%r8

		// Insert the page into the env's address space
		if ((r = page_insert(e->env_pml4e, pp, va, PTE_P|PTE_W|PTE_U)) < 0)
  8004208b5f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208b63:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208b6a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004208b6e:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  8004208b72:	b9 07 00 00 00       	mov    $0x7,%ecx
  8004208b77:	48 89 c7             	mov    %rax,%rdi
  8004208b7a:	48 b8 19 3a 20 04 80 	movabs $0x8004203a19,%rax
  8004208b81:	00 00 00 
  8004208b84:	ff d0                	callq  *%rax
  8004208b86:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004208b89:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  8004208b8d:	79 30                	jns    8004208bbf <region_alloc+0xd4>
			panic("map_segment: could not insert page: %e\n", r);
  8004208b8f:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004208b92:	89 c1                	mov    %eax,%ecx
  8004208b94:	48 ba 40 f7 21 04 80 	movabs $0x800421f740,%rdx
  8004208b9b:	00 00 00 
  8004208b9e:	be b6 01 00 00       	mov    $0x1b6,%esi
  8004208ba3:	48 bf ec f6 21 04 80 	movabs $0x800421f6ec,%rdi
  8004208baa:	00 00 00 
  8004208bad:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208bb2:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004208bb9:	00 00 00 
  8004208bbc:	41 ff d0             	callq  *%r8

		va = ROUNDDOWN((uint8_t*) va + PGSIZE, PGSIZE);
  8004208bbf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208bc3:	48 05 00 10 00 00    	add    $0x1000,%rax
  8004208bc9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004208bcd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208bd1:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004208bd7:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
{
	int r;
	struct PageInfo *pp;
	void *endva = (uint8_t*) va + len;

	while (va < endva) {
  8004208bdb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208bdf:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004208be3:	0f 82 2a ff ff ff    	jb     8004208b13 <region_alloc+0x28>
		if ((r = page_insert(e->env_pml4e, pp, va, PTE_P|PTE_W|PTE_U)) < 0)
			panic("map_segment: could not insert page: %e\n", r);

		va = ROUNDDOWN((uint8_t*) va + PGSIZE, PGSIZE);
	}
}
  8004208be9:	c9                   	leaveq 
  8004208bea:	c3                   	retq   

0000008004208beb <load_icode>:
//
// load_icode panics if it encounters problems.
//
void
load_icode(struct Env *e, uint8_t *binary)
{
  8004208beb:	55                   	push   %rbp
  8004208bec:	48 89 e5             	mov    %rsp,%rbp
  8004208bef:	53                   	push   %rbx
  8004208bf0:	48 83 ec 78          	sub    $0x78,%rsp
  8004208bf4:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  8004208bf8:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
	struct Elf *elf = (struct Elf *)binary;
  8004208bfc:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004208c00:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	struct Proghdr *ph, *eph;

	if (elf && elf->e_magic == ELF_MAGIC) {
  8004208c04:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004208c09:	0f 84 6f 03 00 00    	je     8004208f7e <load_icode+0x393>
  8004208c0f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208c13:	8b 00                	mov    (%rax),%eax
  8004208c15:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
  8004208c1a:	0f 85 5e 03 00 00    	jne    8004208f7e <load_icode+0x393>
		lcr3(PADDR((uint64_t)e->env_pml4e));
  8004208c20:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208c24:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208c2b:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004208c2f:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004208c36:	00 00 00 
  8004208c39:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  8004208c3d:	77 32                	ja     8004208c71 <load_icode+0x86>
  8004208c3f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208c43:	48 89 c1             	mov    %rax,%rcx
  8004208c46:	48 ba c8 f6 21 04 80 	movabs $0x800421f6c8,%rdx
  8004208c4d:	00 00 00 
  8004208c50:	be d8 01 00 00       	mov    $0x1d8,%esi
  8004208c55:	48 bf ec f6 21 04 80 	movabs $0x800421f6ec,%rdi
  8004208c5c:	00 00 00 
  8004208c5f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208c64:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004208c6b:	00 00 00 
  8004208c6e:	41 ff d0             	callq  *%r8
  8004208c71:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004208c78:	ff ff ff 
  8004208c7b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208c7f:	48 01 d0             	add    %rdx,%rax
  8004208c82:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
}

static __inline void
lcr3(uint64_t val)
{
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  8004208c86:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004208c8a:	0f 22 d8             	mov    %rax,%cr3
		ph  = (struct Proghdr *)((uint8_t *)elf + elf->e_phoff);
  8004208c8d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208c91:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208c95:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208c99:	48 01 d0             	add    %rdx,%rax
  8004208c9c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		eph = ph + elf->e_phnum;
  8004208ca0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208ca4:	0f b7 40 38          	movzwl 0x38(%rax),%eax
  8004208ca8:	0f b7 c0             	movzwl %ax,%eax
  8004208cab:	48 c1 e0 03          	shl    $0x3,%rax
  8004208caf:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208cb6:	00 
  8004208cb7:	48 29 c2             	sub    %rax,%rdx
  8004208cba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208cbe:	48 01 d0             	add    %rdx,%rax
  8004208cc1:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
		for(;ph < eph; ph++) {
  8004208cc5:	e9 bd 00 00 00       	jmpq   8004208d87 <load_icode+0x19c>
			if (ph->p_type == ELF_PROG_LOAD) {
  8004208cca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208cce:	8b 00                	mov    (%rax),%eax
  8004208cd0:	83 f8 01             	cmp    $0x1,%eax
  8004208cd3:	0f 85 a9 00 00 00    	jne    8004208d82 <load_icode+0x197>
				region_alloc(e, (void *)ph->p_va, ph->p_memsz);
  8004208cd9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208cdd:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004208ce1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208ce5:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004208ce9:	48 89 c1             	mov    %rax,%rcx
  8004208cec:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208cf0:	48 89 ce             	mov    %rcx,%rsi
  8004208cf3:	48 89 c7             	mov    %rax,%rdi
  8004208cf6:	48 b8 eb 8a 20 04 80 	movabs $0x8004208aeb,%rax
  8004208cfd:	00 00 00 
  8004208d00:	ff d0                	callq  *%rax
				memcpy((void *)ph->p_va, (void *)((uint8_t *)elf + ph->p_offset), ph->p_filesz);
  8004208d02:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d06:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208d0a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d0e:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004208d12:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208d16:	48 01 c1             	add    %rax,%rcx
  8004208d19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d1d:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004208d21:	48 89 ce             	mov    %rcx,%rsi
  8004208d24:	48 89 c7             	mov    %rax,%rdi
  8004208d27:	48 b8 d9 0f 21 04 80 	movabs $0x8004210fd9,%rax
  8004208d2e:	00 00 00 
  8004208d31:	ff d0                	callq  *%rax
				if (ph->p_filesz < ph->p_memsz) {
  8004208d33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d37:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208d3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d3f:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004208d43:	48 39 c2             	cmp    %rax,%rdx
  8004208d46:	73 3a                	jae    8004208d82 <load_icode+0x197>
					memset((void *)(ph->p_va + ph->p_filesz), 0, ph->p_memsz-ph->p_filesz);
  8004208d48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d4c:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004208d50:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d54:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004208d58:	48 29 c2             	sub    %rax,%rdx
  8004208d5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d5f:	48 8b 48 10          	mov    0x10(%rax),%rcx
  8004208d63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d67:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004208d6b:	48 01 c8             	add    %rcx,%rax
  8004208d6e:	be 00 00 00 00       	mov    $0x0,%esi
  8004208d73:	48 89 c7             	mov    %rax,%rdi
  8004208d76:	48 b8 37 0e 21 04 80 	movabs $0x8004210e37,%rax
  8004208d7d:	00 00 00 
  8004208d80:	ff d0                	callq  *%rax

	if (elf && elf->e_magic == ELF_MAGIC) {
		lcr3(PADDR((uint64_t)e->env_pml4e));
		ph  = (struct Proghdr *)((uint8_t *)elf + elf->e_phoff);
		eph = ph + elf->e_phnum;
		for(;ph < eph; ph++) {
  8004208d82:	48 83 45 e8 38       	addq   $0x38,-0x18(%rbp)
  8004208d87:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d8b:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004208d8f:	0f 82 35 ff ff ff    	jb     8004208cca <load_icode+0xdf>
				if (ph->p_filesz < ph->p_memsz) {
					memset((void *)(ph->p_va + ph->p_filesz), 0, ph->p_memsz-ph->p_filesz);
				}
			}
		}
		region_alloc(e, (void*) (USTACKTOP - PGSIZE), PGSIZE);
  8004208d95:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208d99:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004208d9e:	be 00 d0 7f ef       	mov    $0xef7fd000,%esi
  8004208da3:	48 89 c7             	mov    %rax,%rdi
  8004208da6:	48 b8 eb 8a 20 04 80 	movabs $0x8004208aeb,%rax
  8004208dad:	00 00 00 
  8004208db0:	ff d0                	callq  *%rax
		e->env_tf.tf_rip    = elf->e_entry;
  8004208db2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208db6:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004208dba:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208dbe:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
		e->env_tf.tf_rsp    = USTACKTOP; //keeping stack 8 byte aligned
  8004208dc5:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208dc9:	bb 00 e0 7f ef       	mov    $0xef7fe000,%ebx
  8004208dce:	48 89 98 b0 00 00 00 	mov    %rbx,0xb0(%rax)

		uintptr_t debug_address = USTABDATA;
  8004208dd5:	48 c7 45 e0 00 00 20 	movq   $0x200000,-0x20(%rbp)
  8004208ddc:	00 
		struct Secthdr *sh = (struct Secthdr *)(((uint8_t *)elf + elf->e_shoff));
  8004208ddd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208de1:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004208de5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208de9:	48 01 d0             	add    %rdx,%rax
  8004208dec:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		struct Secthdr *shstr_tab = sh + elf->e_shstrndx;
  8004208df0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208df4:	0f b7 40 3e          	movzwl 0x3e(%rax),%eax
  8004208df8:	0f b7 c0             	movzwl %ax,%eax
  8004208dfb:	48 c1 e0 06          	shl    $0x6,%rax
  8004208dff:	48 89 c2             	mov    %rax,%rdx
  8004208e02:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208e06:	48 01 d0             	add    %rdx,%rax
  8004208e09:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
		struct Secthdr* esh = sh + elf->e_shnum;
  8004208e0d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208e11:	0f b7 40 3c          	movzwl 0x3c(%rax),%eax
  8004208e15:	0f b7 c0             	movzwl %ax,%eax
  8004208e18:	48 c1 e0 06          	shl    $0x6,%rax
  8004208e1c:	48 89 c2             	mov    %rax,%rdx
  8004208e1f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208e23:	48 01 d0             	add    %rdx,%rax
  8004208e26:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
		for(;sh < esh; sh++) {
  8004208e2a:	e9 27 01 00 00       	jmpq   8004208f56 <load_icode+0x36b>
			char* name = (char*)((uint8_t*)elf + shstr_tab->sh_offset) + sh->sh_name;
  8004208e2f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004208e33:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004208e37:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208e3b:	8b 00                	mov    (%rax),%eax
  8004208e3d:	89 c0                	mov    %eax,%eax
  8004208e3f:	48 01 c2             	add    %rax,%rdx
  8004208e42:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208e46:	48 01 d0             	add    %rdx,%rax
  8004208e49:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			if(!strcmp(name, ".debug_info") || !strcmp(name, ".debug_abbrev")
  8004208e4d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208e51:	48 be 68 f7 21 04 80 	movabs $0x800421f768,%rsi
  8004208e58:	00 00 00 
  8004208e5b:	48 89 c7             	mov    %rax,%rdi
  8004208e5e:	48 b8 00 0d 21 04 80 	movabs $0x8004210d00,%rax
  8004208e65:	00 00 00 
  8004208e68:	ff d0                	callq  *%rax
  8004208e6a:	85 c0                	test   %eax,%eax
  8004208e6c:	0f 84 84 00 00 00    	je     8004208ef6 <load_icode+0x30b>
  8004208e72:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208e76:	48 be 74 f7 21 04 80 	movabs $0x800421f774,%rsi
  8004208e7d:	00 00 00 
  8004208e80:	48 89 c7             	mov    %rax,%rdi
  8004208e83:	48 b8 00 0d 21 04 80 	movabs $0x8004210d00,%rax
  8004208e8a:	00 00 00 
  8004208e8d:	ff d0                	callq  *%rax
  8004208e8f:	85 c0                	test   %eax,%eax
  8004208e91:	74 63                	je     8004208ef6 <load_icode+0x30b>
			   || !strcmp(name, ".debug_line") || !strcmp(name, ".eh_frame")
  8004208e93:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208e97:	48 be 82 f7 21 04 80 	movabs $0x800421f782,%rsi
  8004208e9e:	00 00 00 
  8004208ea1:	48 89 c7             	mov    %rax,%rdi
  8004208ea4:	48 b8 00 0d 21 04 80 	movabs $0x8004210d00,%rax
  8004208eab:	00 00 00 
  8004208eae:	ff d0                	callq  *%rax
  8004208eb0:	85 c0                	test   %eax,%eax
  8004208eb2:	74 42                	je     8004208ef6 <load_icode+0x30b>
  8004208eb4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208eb8:	48 be 8e f7 21 04 80 	movabs $0x800421f78e,%rsi
  8004208ebf:	00 00 00 
  8004208ec2:	48 89 c7             	mov    %rax,%rdi
  8004208ec5:	48 b8 00 0d 21 04 80 	movabs $0x8004210d00,%rax
  8004208ecc:	00 00 00 
  8004208ecf:	ff d0                	callq  *%rax
  8004208ed1:	85 c0                	test   %eax,%eax
  8004208ed3:	74 21                	je     8004208ef6 <load_icode+0x30b>
			   || !strcmp(name, ".debug_str")) {
  8004208ed5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208ed9:	48 be 98 f7 21 04 80 	movabs $0x800421f798,%rsi
  8004208ee0:	00 00 00 
  8004208ee3:	48 89 c7             	mov    %rax,%rdi
  8004208ee6:	48 b8 00 0d 21 04 80 	movabs $0x8004210d00,%rax
  8004208eed:	00 00 00 
  8004208ef0:	ff d0                	callq  *%rax
  8004208ef2:	85 c0                	test   %eax,%eax
  8004208ef4:	75 5b                	jne    8004208f51 <load_icode+0x366>
				region_alloc(e ,(void*)debug_address, sh->sh_size);
  8004208ef6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208efa:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208efe:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  8004208f02:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208f06:	48 89 ce             	mov    %rcx,%rsi
  8004208f09:	48 89 c7             	mov    %rax,%rdi
  8004208f0c:	48 b8 eb 8a 20 04 80 	movabs $0x8004208aeb,%rax
  8004208f13:	00 00 00 
  8004208f16:	ff d0                	callq  *%rax
				memcpy((void *)debug_address, (void *)((uint8_t *)elf + sh->sh_offset),
  8004208f18:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208f1c:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208f20:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208f24:	48 8b 48 18          	mov    0x18(%rax),%rcx
  8004208f28:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208f2c:	48 01 c1             	add    %rax,%rcx
  8004208f2f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208f33:	48 89 ce             	mov    %rcx,%rsi
  8004208f36:	48 89 c7             	mov    %rax,%rdi
  8004208f39:	48 b8 d9 0f 21 04 80 	movabs $0x8004210fd9,%rax
  8004208f40:	00 00 00 
  8004208f43:	ff d0                	callq  *%rax
				       sh->sh_size);
				debug_address += sh->sh_size;
  8004208f45:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208f49:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004208f4d:	48 01 45 e0          	add    %rax,-0x20(%rbp)

		uintptr_t debug_address = USTABDATA;
		struct Secthdr *sh = (struct Secthdr *)(((uint8_t *)elf + elf->e_shoff));
		struct Secthdr *shstr_tab = sh + elf->e_shstrndx;
		struct Secthdr* esh = sh + elf->e_shnum;
		for(;sh < esh; sh++) {
  8004208f51:	48 83 45 d8 40       	addq   $0x40,-0x28(%rbp)
  8004208f56:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208f5a:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  8004208f5e:	0f 82 cb fe ff ff    	jb     8004208e2f <load_icode+0x244>
				memcpy((void *)debug_address, (void *)((uint8_t *)elf + sh->sh_offset),
				       sh->sh_size);
				debug_address += sh->sh_size;
			}
		}
		lcr3(boot_cr3);
  8004208f64:	48 b8 e8 e5 6d 04 80 	movabs $0x80046de5e8,%rax
  8004208f6b:	00 00 00 
  8004208f6e:	48 8b 00             	mov    (%rax),%rax
  8004208f71:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  8004208f75:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004208f79:	0f 22 d8             	mov    %rax,%cr3
load_icode(struct Env *e, uint8_t *binary)
{
	struct Elf *elf = (struct Elf *)binary;
	struct Proghdr *ph, *eph;

	if (elf && elf->e_magic == ELF_MAGIC) {
  8004208f7c:	eb 2a                	jmp    8004208fa8 <load_icode+0x3bd>
				debug_address += sh->sh_size;
			}
		}
		lcr3(boot_cr3);
	} else {
		panic("Invalid Binary");
  8004208f7e:	48 ba a3 f7 21 04 80 	movabs $0x800421f7a3,%rdx
  8004208f85:	00 00 00 
  8004208f88:	be f9 01 00 00       	mov    $0x1f9,%esi
  8004208f8d:	48 bf ec f6 21 04 80 	movabs $0x800421f6ec,%rdi
  8004208f94:	00 00 00 
  8004208f97:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208f9c:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  8004208fa3:	00 00 00 
  8004208fa6:	ff d1                	callq  *%rcx
	}
	// Give environment a stack
	e->elf = binary;
  8004208fa8:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208fac:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  8004208fb0:	48 89 90 18 01 00 00 	mov    %rdx,0x118(%rax)
}
  8004208fb7:	48 83 c4 78          	add    $0x78,%rsp
  8004208fbb:	5b                   	pop    %rbx
  8004208fbc:	5d                   	pop    %rbp
  8004208fbd:	c3                   	retq   

0000008004208fbe <env_create>:
// before running the first user-mode environment.
// The new env's parent ID is set to 0.
//
void
env_create(uint8_t *binary, enum EnvType type)
{
  8004208fbe:	55                   	push   %rbp
  8004208fbf:	48 89 e5             	mov    %rsp,%rbp
  8004208fc2:	48 83 ec 20          	sub    $0x20,%rsp
  8004208fc6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004208fca:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	// LAB 3: Your code here.
	int r;
	struct Env *e;
	if ((r = env_alloc(&e, 0)) < 0)
  8004208fcd:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  8004208fd1:	be 00 00 00 00       	mov    $0x0,%esi
  8004208fd6:	48 89 c7             	mov    %rax,%rdi
  8004208fd9:	48 b8 5d 89 20 04 80 	movabs $0x800420895d,%rax
  8004208fe0:	00 00 00 
  8004208fe3:	ff d0                	callq  *%rax
  8004208fe5:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004208fe8:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004208fec:	79 30                	jns    800420901e <env_create+0x60>
		panic("env_create: could not allocate env: %e\n", r);
  8004208fee:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004208ff1:	89 c1                	mov    %eax,%ecx
  8004208ff3:	48 ba b8 f7 21 04 80 	movabs $0x800421f7b8,%rdx
  8004208ffa:	00 00 00 
  8004208ffd:	be 0d 02 00 00       	mov    $0x20d,%esi
  8004209002:	48 bf ec f6 21 04 80 	movabs $0x800421f6ec,%rdi
  8004209009:	00 00 00 
  800420900c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209011:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004209018:	00 00 00 
  800420901b:	41 ff d0             	callq  *%r8
	load_icode(e, binary);
  800420901e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004209022:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004209026:	48 89 d6             	mov    %rdx,%rsi
  8004209029:	48 89 c7             	mov    %rax,%rdi
  800420902c:	48 b8 eb 8b 20 04 80 	movabs $0x8004208beb,%rax
  8004209033:	00 00 00 
  8004209036:	ff d0                	callq  *%rax
	e->env_type = type;
  8004209038:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420903c:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  800420903f:	89 90 d0 00 00 00    	mov    %edx,0xd0(%rax)

	// If this is the file server (type == ENV_TYPE_FS) give it I/O privileges.
	// LAB 5: Your code here.
	if (type == ENV_TYPE_FS)
  8004209045:	83 7d e4 01          	cmpl   $0x1,-0x1c(%rbp)
  8004209049:	75 19                	jne    8004209064 <env_create+0xa6>
		e->env_tf.tf_eflags |= FL_IOPL_3;
  800420904b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420904f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004209053:	48 8b 92 a8 00 00 00 	mov    0xa8(%rdx),%rdx
  800420905a:	80 ce 30             	or     $0x30,%dh
  800420905d:	48 89 90 a8 00 00 00 	mov    %rdx,0xa8(%rax)
}
  8004209064:	c9                   	leaveq 
  8004209065:	c3                   	retq   

0000008004209066 <env_free>:
//
// Frees env e and all memory it uses.
//
void
env_free(struct Env *e)
{
  8004209066:	55                   	push   %rbp
  8004209067:	48 89 e5             	mov    %rsp,%rbp
  800420906a:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
  8004209071:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
	pte_t *pt;
	uint64_t pdeno, pteno;
	physaddr_t pa;

#ifndef VMM_GUEST
	if(e->env_type == ENV_TYPE_GUEST) {
  8004209078:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420907f:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  8004209085:	83 f8 03             	cmp    $0x3,%eax
  8004209088:	75 1b                	jne    80042090a5 <env_free+0x3f>
		env_guest_free(e);
  800420908a:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004209091:	48 89 c7             	mov    %rax,%rdi
  8004209094:	48 b8 16 86 20 04 80 	movabs $0x8004208616,%rax
  800420909b:	00 00 00 
  800420909e:	ff d0                	callq  *%rax
		return;
  80042090a0:	e9 78 04 00 00       	jmpq   800420951d <env_free+0x4b7>
#endif

	// If freeing the current environment, switch to kern_pgdir
	// before freeing the page directory, just in case the page
	// gets reused.
	if (e == curenv)
  80042090a5:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  80042090ac:	00 00 00 
  80042090af:	ff d0                	callq  *%rax
  80042090b1:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  80042090b8:	00 00 00 
  80042090bb:	48 98                	cltq   
  80042090bd:	48 c1 e0 03          	shl    $0x3,%rax
  80042090c1:	48 89 c1             	mov    %rax,%rcx
  80042090c4:	48 c1 e1 04          	shl    $0x4,%rcx
  80042090c8:	48 01 c8             	add    %rcx,%rax
  80042090cb:	48 01 d0             	add    %rdx,%rax
  80042090ce:	48 83 c0 08          	add    $0x8,%rax
  80042090d2:	48 8b 00             	mov    (%rax),%rax
  80042090d5:	48 3b 85 78 ff ff ff 	cmp    -0x88(%rbp),%rax
  80042090dc:	75 18                	jne    80042090f6 <env_free+0x90>
		lcr3(boot_cr3);
  80042090de:	48 b8 e8 e5 6d 04 80 	movabs $0x80046de5e8,%rax
  80042090e5:	00 00 00 
  80042090e8:	48 8b 00             	mov    (%rax),%rax
  80042090eb:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  80042090ef:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042090f3:	0f 22 d8             	mov    %rax,%cr3

	// Note the environment's demise.
	// cprintf("[%08x] free env %08x\n", curenv ? curenv->env_id : 0, e->env_id);

	// Flush all mapped pages in the user portion of the address space
	pdpe_t *env_pdpe = KADDR(PTE_ADDR(e->env_pml4e[0]));
  80042090f6:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042090fd:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004209104:	48 8b 00             	mov    (%rax),%rax
  8004209107:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420910d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004209111:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004209115:	48 c1 e8 0c          	shr    $0xc,%rax
  8004209119:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800420911c:	8b 55 dc             	mov    -0x24(%rbp),%edx
  800420911f:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  8004209126:	00 00 00 
  8004209129:	48 8b 00             	mov    (%rax),%rax
  800420912c:	48 39 c2             	cmp    %rax,%rdx
  800420912f:	72 32                	jb     8004209163 <env_free+0xfd>
  8004209131:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004209135:	48 89 c1             	mov    %rax,%rcx
  8004209138:	48 ba 88 f6 21 04 80 	movabs $0x800421f688,%rdx
  800420913f:	00 00 00 
  8004209142:	be 32 02 00 00       	mov    $0x232,%esi
  8004209147:	48 bf ec f6 21 04 80 	movabs $0x800421f6ec,%rdi
  800420914e:	00 00 00 
  8004209151:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209156:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420915d:	00 00 00 
  8004209160:	41 ff d0             	callq  *%r8
  8004209163:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420916a:	00 00 00 
  800420916d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004209171:	48 01 d0             	add    %rdx,%rax
  8004209174:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	int pdeno_limit;
	uint64_t pdpe_index;
	// using 3 instead of NPDPENTRIES as we have only first three indices
	// set for 4GB of address space.
	for(pdpe_index=0;pdpe_index<=3;pdpe_index++){
  8004209178:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  800420917f:	00 
  8004209180:	e9 ab 02 00 00       	jmpq   8004209430 <env_free+0x3ca>
		if(!(env_pdpe[pdpe_index] & PTE_P))
  8004209185:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209189:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004209190:	00 
  8004209191:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004209195:	48 01 d0             	add    %rdx,%rax
  8004209198:	48 8b 00             	mov    (%rax),%rax
  800420919b:	83 e0 01             	and    $0x1,%eax
  800420919e:	48 85 c0             	test   %rax,%rax
  80042091a1:	75 05                	jne    80042091a8 <env_free+0x142>
			continue;
  80042091a3:	e9 83 02 00 00       	jmpq   800420942b <env_free+0x3c5>
		pde_t *env_pgdir = KADDR(PTE_ADDR(env_pdpe[pdpe_index]));
  80042091a8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042091ac:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042091b3:	00 
  80042091b4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042091b8:	48 01 d0             	add    %rdx,%rax
  80042091bb:	48 8b 00             	mov    (%rax),%rax
  80042091be:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042091c4:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042091c8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042091cc:	48 c1 e8 0c          	shr    $0xc,%rax
  80042091d0:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  80042091d3:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  80042091d6:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  80042091dd:	00 00 00 
  80042091e0:	48 8b 00             	mov    (%rax),%rax
  80042091e3:	48 39 c2             	cmp    %rax,%rdx
  80042091e6:	72 32                	jb     800420921a <env_free+0x1b4>
  80042091e8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042091ec:	48 89 c1             	mov    %rax,%rcx
  80042091ef:	48 ba 88 f6 21 04 80 	movabs $0x800421f688,%rdx
  80042091f6:	00 00 00 
  80042091f9:	be 3a 02 00 00       	mov    $0x23a,%esi
  80042091fe:	48 bf ec f6 21 04 80 	movabs $0x800421f6ec,%rdi
  8004209205:	00 00 00 
  8004209208:	b8 00 00 00 00       	mov    $0x0,%eax
  800420920d:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004209214:	00 00 00 
  8004209217:	41 ff d0             	callq  *%r8
  800420921a:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004209221:	00 00 00 
  8004209224:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004209228:	48 01 d0             	add    %rdx,%rax
  800420922b:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
		pdeno_limit  = pdpe_index==3?PDX(UTOP):PDX(0xFFFFFFFF);
  800420922f:	48 83 7d e8 03       	cmpq   $0x3,-0x18(%rbp)
  8004209234:	75 07                	jne    800420923d <env_free+0x1d7>
  8004209236:	b8 04 00 00 00       	mov    $0x4,%eax
  800420923b:	eb 05                	jmp    8004209242 <env_free+0x1dc>
  800420923d:	b8 ff 01 00 00       	mov    $0x1ff,%eax
  8004209242:	89 45 b4             	mov    %eax,-0x4c(%rbp)
		static_assert(UTOP % PTSIZE == 0);
		for (pdeno = 0; pdeno < pdeno_limit; pdeno++) {
  8004209245:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800420924c:	00 
  800420924d:	e9 6e 01 00 00       	jmpq   80042093c0 <env_free+0x35a>

			// only look at mapped page tables
			if (!(env_pgdir[pdeno] & PTE_P))
  8004209252:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209256:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420925d:	00 
  800420925e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004209262:	48 01 d0             	add    %rdx,%rax
  8004209265:	48 8b 00             	mov    (%rax),%rax
  8004209268:	83 e0 01             	and    $0x1,%eax
  800420926b:	48 85 c0             	test   %rax,%rax
  800420926e:	75 05                	jne    8004209275 <env_free+0x20f>
				continue;
  8004209270:	e9 46 01 00 00       	jmpq   80042093bb <env_free+0x355>
			// find the pa and va of the page table
			pa = PTE_ADDR(env_pgdir[pdeno]);
  8004209275:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209279:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004209280:	00 
  8004209281:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004209285:	48 01 d0             	add    %rdx,%rax
  8004209288:	48 8b 00             	mov    (%rax),%rax
  800420928b:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004209291:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			pt = (pte_t*) KADDR(pa);
  8004209295:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004209299:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  800420929d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042092a1:	48 c1 e8 0c          	shr    $0xc,%rax
  80042092a5:	89 45 9c             	mov    %eax,-0x64(%rbp)
  80042092a8:	8b 55 9c             	mov    -0x64(%rbp),%edx
  80042092ab:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  80042092b2:	00 00 00 
  80042092b5:	48 8b 00             	mov    (%rax),%rax
  80042092b8:	48 39 c2             	cmp    %rax,%rdx
  80042092bb:	72 32                	jb     80042092ef <env_free+0x289>
  80042092bd:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042092c1:	48 89 c1             	mov    %rax,%rcx
  80042092c4:	48 ba 88 f6 21 04 80 	movabs $0x800421f688,%rdx
  80042092cb:	00 00 00 
  80042092ce:	be 44 02 00 00       	mov    $0x244,%esi
  80042092d3:	48 bf ec f6 21 04 80 	movabs $0x800421f6ec,%rdi
  80042092da:	00 00 00 
  80042092dd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042092e2:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042092e9:	00 00 00 
  80042092ec:	41 ff d0             	callq  *%r8
  80042092ef:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042092f6:	00 00 00 
  80042092f9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042092fd:	48 01 d0             	add    %rdx,%rax
  8004209300:	48 89 45 90          	mov    %rax,-0x70(%rbp)

			// unmap all PTEs in this page table
			for (pteno = 0; pteno < PTX(~0); pteno++) {
  8004209304:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420930b:	00 
  800420930c:	eb 67                	jmp    8004209375 <env_free+0x30f>
				if (pt[pteno] & PTE_P){
  800420930e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004209312:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004209319:	00 
  800420931a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420931e:	48 01 d0             	add    %rdx,%rax
  8004209321:	48 8b 00             	mov    (%rax),%rax
  8004209324:	83 e0 01             	and    $0x1,%eax
  8004209327:	48 85 c0             	test   %rax,%rax
  800420932a:	74 44                	je     8004209370 <env_free+0x30a>
					page_remove(e->env_pml4e, PGADDR((uint64_t)0,pdpe_index,pdeno, pteno, 0));
  800420932c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209330:	48 c1 e0 1e          	shl    $0x1e,%rax
  8004209334:	48 89 c2             	mov    %rax,%rdx
  8004209337:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420933b:	48 c1 e0 15          	shl    $0x15,%rax
  800420933f:	48 09 c2             	or     %rax,%rdx
  8004209342:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004209346:	48 c1 e0 0c          	shl    $0xc,%rax
  800420934a:	48 09 d0             	or     %rdx,%rax
  800420934d:	48 89 c2             	mov    %rax,%rdx
  8004209350:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004209357:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420935e:	48 89 d6             	mov    %rdx,%rsi
  8004209361:	48 89 c7             	mov    %rax,%rdi
  8004209364:	48 b8 14 3e 20 04 80 	movabs $0x8004203e14,%rax
  800420936b:	00 00 00 
  800420936e:	ff d0                	callq  *%rax
			// find the pa and va of the page table
			pa = PTE_ADDR(env_pgdir[pdeno]);
			pt = (pte_t*) KADDR(pa);

			// unmap all PTEs in this page table
			for (pteno = 0; pteno < PTX(~0); pteno++) {
  8004209370:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  8004209375:	48 81 7d f0 fe 01 00 	cmpq   $0x1fe,-0x10(%rbp)
  800420937c:	00 
  800420937d:	76 8f                	jbe    800420930e <env_free+0x2a8>
					page_remove(e->env_pml4e, PGADDR((uint64_t)0,pdpe_index,pdeno, pteno, 0));
				}
			}

			// free the page table itself
			env_pgdir[pdeno] = 0;
  800420937f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209383:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420938a:	00 
  800420938b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420938f:	48 01 d0             	add    %rdx,%rax
  8004209392:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
			page_decref(pa2page(pa));
  8004209399:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420939d:	48 89 c7             	mov    %rax,%rdi
  80042093a0:	48 b8 f6 7c 20 04 80 	movabs $0x8004207cf6,%rax
  80042093a7:	00 00 00 
  80042093aa:	ff d0                	callq  *%rax
  80042093ac:	48 89 c7             	mov    %rax,%rdi
  80042093af:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  80042093b6:	00 00 00 
  80042093b9:	ff d0                	callq  *%rax
		if(!(env_pdpe[pdpe_index] & PTE_P))
			continue;
		pde_t *env_pgdir = KADDR(PTE_ADDR(env_pdpe[pdpe_index]));
		pdeno_limit  = pdpe_index==3?PDX(UTOP):PDX(0xFFFFFFFF);
		static_assert(UTOP % PTSIZE == 0);
		for (pdeno = 0; pdeno < pdeno_limit; pdeno++) {
  80042093bb:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  80042093c0:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  80042093c3:	48 98                	cltq   
  80042093c5:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042093c9:	0f 87 83 fe ff ff    	ja     8004209252 <env_free+0x1ec>
			// free the page table itself
			env_pgdir[pdeno] = 0;
			page_decref(pa2page(pa));
		}
		// free the page directory
		pa = PTE_ADDR(env_pdpe[pdpe_index]);
  80042093cf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042093d3:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042093da:	00 
  80042093db:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042093df:	48 01 d0             	add    %rdx,%rax
  80042093e2:	48 8b 00             	mov    (%rax),%rax
  80042093e5:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042093eb:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		env_pdpe[pdpe_index] = 0;
  80042093ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042093f3:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042093fa:	00 
  80042093fb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042093ff:	48 01 d0             	add    %rdx,%rax
  8004209402:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		page_decref(pa2page(pa));
  8004209409:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420940d:	48 89 c7             	mov    %rax,%rdi
  8004209410:	48 b8 f6 7c 20 04 80 	movabs $0x8004207cf6,%rax
  8004209417:	00 00 00 
  800420941a:	ff d0                	callq  *%rax
  800420941c:	48 89 c7             	mov    %rax,%rdi
  800420941f:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  8004209426:	00 00 00 
  8004209429:	ff d0                	callq  *%rax
	pdpe_t *env_pdpe = KADDR(PTE_ADDR(e->env_pml4e[0]));
	int pdeno_limit;
	uint64_t pdpe_index;
	// using 3 instead of NPDPENTRIES as we have only first three indices
	// set for 4GB of address space.
	for(pdpe_index=0;pdpe_index<=3;pdpe_index++){
  800420942b:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  8004209430:	48 83 7d e8 03       	cmpq   $0x3,-0x18(%rbp)
  8004209435:	0f 86 4a fd ff ff    	jbe    8004209185 <env_free+0x11f>
		pa = PTE_ADDR(env_pdpe[pdpe_index]);
		env_pdpe[pdpe_index] = 0;
		page_decref(pa2page(pa));
	}
	// free the page directory pointer
	page_decref(pa2page(PTE_ADDR(e->env_pml4e[0])));
  800420943b:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004209442:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004209449:	48 8b 00             	mov    (%rax),%rax
  800420944c:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004209452:	48 89 c7             	mov    %rax,%rdi
  8004209455:	48 b8 f6 7c 20 04 80 	movabs $0x8004207cf6,%rax
  800420945c:	00 00 00 
  800420945f:	ff d0                	callq  *%rax
  8004209461:	48 89 c7             	mov    %rax,%rdi
  8004209464:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  800420946b:	00 00 00 
  800420946e:	ff d0                	callq  *%rax
	// free the page map level 4 (PML4)
	e->env_pml4e[0] = 0;
  8004209470:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004209477:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420947e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	pa = e->env_cr3;
  8004209485:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420948c:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  8004209493:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	e->env_pml4e = 0;
  8004209497:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420949e:	48 c7 80 e0 00 00 00 	movq   $0x0,0xe0(%rax)
  80042094a5:	00 00 00 00 
	e->env_cr3 = 0;
  80042094a9:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042094b0:	48 c7 80 e8 00 00 00 	movq   $0x0,0xe8(%rax)
  80042094b7:	00 00 00 00 
	page_decref(pa2page(pa));
  80042094bb:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042094bf:	48 89 c7             	mov    %rax,%rdi
  80042094c2:	48 b8 f6 7c 20 04 80 	movabs $0x8004207cf6,%rax
  80042094c9:	00 00 00 
  80042094cc:	ff d0                	callq  *%rax
  80042094ce:	48 89 c7             	mov    %rax,%rdi
  80042094d1:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  80042094d8:	00 00 00 
  80042094db:	ff d0                	callq  *%rax

	// return the environment to the free list
	e->env_status = ENV_FREE;
  80042094dd:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042094e4:	c7 80 d4 00 00 00 00 	movl   $0x0,0xd4(%rax)
  80042094eb:	00 00 00 
	e->env_link = env_free_list;
  80042094ee:	48 b8 60 f2 4d 04 80 	movabs $0x80044df260,%rax
  80042094f5:	00 00 00 
  80042094f8:	48 8b 10             	mov    (%rax),%rdx
  80042094fb:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004209502:	48 89 90 c0 00 00 00 	mov    %rdx,0xc0(%rax)
	env_free_list = e;
  8004209509:	48 b8 60 f2 4d 04 80 	movabs $0x80044df260,%rax
  8004209510:	00 00 00 
  8004209513:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  800420951a:	48 89 10             	mov    %rdx,(%rax)
}
  800420951d:	c9                   	leaveq 
  800420951e:	c3                   	retq   

000000800420951f <env_destroy>:
// If e was the current env, then runs a new environment (and does not return
// to the caller).
//
void
env_destroy(struct Env *e)
{
  800420951f:	55                   	push   %rbp
  8004209520:	48 89 e5             	mov    %rsp,%rbp
  8004209523:	48 83 ec 10          	sub    $0x10,%rsp
  8004209527:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	// If e is currently running on other CPUs, we change its state to
	// ENV_DYING. A zombie environment will be freed the next time
	// it traps to the kernel.
	if (e->env_status == ENV_RUNNING && curenv != e) {
  800420952b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420952f:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  8004209535:	83 f8 03             	cmp    $0x3,%eax
  8004209538:	75 49                	jne    8004209583 <env_destroy+0x64>
  800420953a:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  8004209541:	00 00 00 
  8004209544:	ff d0                	callq  *%rax
  8004209546:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420954d:	00 00 00 
  8004209550:	48 98                	cltq   
  8004209552:	48 c1 e0 03          	shl    $0x3,%rax
  8004209556:	48 89 c1             	mov    %rax,%rcx
  8004209559:	48 c1 e1 04          	shl    $0x4,%rcx
  800420955d:	48 01 c8             	add    %rcx,%rax
  8004209560:	48 01 d0             	add    %rdx,%rax
  8004209563:	48 83 c0 08          	add    $0x8,%rax
  8004209567:	48 8b 00             	mov    (%rax),%rax
  800420956a:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  800420956e:	74 13                	je     8004209583 <env_destroy+0x64>
		e->env_status = ENV_DYING;
  8004209570:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209574:	c7 80 d4 00 00 00 01 	movl   $0x1,0xd4(%rax)
  800420957b:	00 00 00 
		return;
  800420957e:	e9 89 00 00 00       	jmpq   800420960c <env_destroy+0xed>
	}

	env_free(e);
  8004209583:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209587:	48 89 c7             	mov    %rax,%rdi
  800420958a:	48 b8 66 90 20 04 80 	movabs $0x8004209066,%rax
  8004209591:	00 00 00 
  8004209594:	ff d0                	callq  *%rax
	if (curenv == e) {
  8004209596:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420959d:	00 00 00 
  80042095a0:	ff d0                	callq  *%rax
  80042095a2:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  80042095a9:	00 00 00 
  80042095ac:	48 98                	cltq   
  80042095ae:	48 c1 e0 03          	shl    $0x3,%rax
  80042095b2:	48 89 c1             	mov    %rax,%rcx
  80042095b5:	48 c1 e1 04          	shl    $0x4,%rcx
  80042095b9:	48 01 c8             	add    %rcx,%rax
  80042095bc:	48 01 d0             	add    %rdx,%rax
  80042095bf:	48 83 c0 08          	add    $0x8,%rax
  80042095c3:	48 8b 00             	mov    (%rax),%rax
  80042095c6:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042095ca:	75 40                	jne    800420960c <env_destroy+0xed>
		curenv = NULL;
  80042095cc:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  80042095d3:	00 00 00 
  80042095d6:	ff d0                	callq  *%rax
  80042095d8:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  80042095df:	00 00 00 
  80042095e2:	48 98                	cltq   
  80042095e4:	48 c1 e0 03          	shl    $0x3,%rax
  80042095e8:	48 89 c1             	mov    %rax,%rcx
  80042095eb:	48 c1 e1 04          	shl    $0x4,%rcx
  80042095ef:	48 01 c8             	add    %rcx,%rax
  80042095f2:	48 01 d0             	add    %rdx,%rax
  80042095f5:	48 83 c0 08          	add    $0x8,%rax
  80042095f9:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		sched_yield();
  8004209600:	48 b8 76 da 20 04 80 	movabs $0x800420da76,%rax
  8004209607:	00 00 00 
  800420960a:	ff d0                	callq  *%rax
	}
}
  800420960c:	c9                   	leaveq 
  800420960d:	c3                   	retq   

000000800420960e <env_pop_tf>:
//
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
  800420960e:	55                   	push   %rbp
  800420960f:	48 89 e5             	mov    %rsp,%rbp
  8004209612:	53                   	push   %rbx
  8004209613:	48 83 ec 18          	sub    $0x18,%rsp
  8004209617:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	// Record the CPU we are running on for user-space debugging
	curenv->env_cpunum = cpunum();
  800420961b:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  8004209622:	00 00 00 
  8004209625:	ff d0                	callq  *%rax
  8004209627:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420962e:	00 00 00 
  8004209631:	48 98                	cltq   
  8004209633:	48 c1 e0 03          	shl    $0x3,%rax
  8004209637:	48 89 c1             	mov    %rax,%rcx
  800420963a:	48 c1 e1 04          	shl    $0x4,%rcx
  800420963e:	48 01 c8             	add    %rcx,%rax
  8004209641:	48 01 d0             	add    %rdx,%rax
  8004209644:	48 83 c0 08          	add    $0x8,%rax
  8004209648:	48 8b 18             	mov    (%rax),%rbx
  800420964b:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  8004209652:	00 00 00 
  8004209655:	ff d0                	callq  *%rax
  8004209657:	89 83 dc 00 00 00    	mov    %eax,0xdc(%rbx)
	__asm __volatile("movq %0,%%rsp\n"
  800420965d:	48 8b 65 e8          	mov    -0x18(%rbp),%rsp
  8004209661:	4c 8b 3c 24          	mov    (%rsp),%r15
  8004209665:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
  800420966a:	4c 8b 6c 24 10       	mov    0x10(%rsp),%r13
  800420966f:	4c 8b 64 24 18       	mov    0x18(%rsp),%r12
  8004209674:	4c 8b 5c 24 20       	mov    0x20(%rsp),%r11
  8004209679:	4c 8b 54 24 28       	mov    0x28(%rsp),%r10
  800420967e:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
  8004209683:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
  8004209688:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  800420968d:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  8004209692:	48 8b 6c 24 50       	mov    0x50(%rsp),%rbp
  8004209697:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  800420969c:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  80042096a1:	48 8b 5c 24 68       	mov    0x68(%rsp),%rbx
  80042096a6:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  80042096ab:	48 83 c4 78          	add    $0x78,%rsp
  80042096af:	8e 04 24             	mov    (%rsp),%es
  80042096b2:	8e 5c 24 08          	mov    0x8(%rsp),%ds
  80042096b6:	48 83 c4 10          	add    $0x10,%rsp
  80042096ba:	48 83 c4 10          	add    $0x10,%rsp
  80042096be:	48 cf                	iretq  
			 "movw 8(%%rsp),%%ds\n"
			 "addq $16,%%rsp\n"
			 "\taddq $16,%%rsp\n" /* skip tf_trapno and tf_errcode */
			 "\tiretq"
			 : : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
  80042096c0:	48 ba e0 f7 21 04 80 	movabs $0x800421f7e0,%rdx
  80042096c7:	00 00 00 
  80042096ca:	be 90 02 00 00       	mov    $0x290,%esi
  80042096cf:	48 bf ec f6 21 04 80 	movabs $0x800421f6ec,%rdi
  80042096d6:	00 00 00 
  80042096d9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042096de:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  80042096e5:	00 00 00 
  80042096e8:	ff d1                	callq  *%rcx

00000080042096ea <env_run>:
// This function does not return.
//
// CHANGED FOR LAB 0
void
env_run(struct Env *e)
{
  80042096ea:	55                   	push   %rbp
  80042096eb:	48 89 e5             	mov    %rsp,%rbp
  80042096ee:	48 83 ec 20          	sub    $0x20,%rsp
  80042096f2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	// Is this a context switch or just a return?
	if (curenv != e) {
  80042096f6:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  80042096fd:	00 00 00 
  8004209700:	ff d0                	callq  *%rax
  8004209702:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  8004209709:	00 00 00 
  800420970c:	48 98                	cltq   
  800420970e:	48 c1 e0 03          	shl    $0x3,%rax
  8004209712:	48 89 c1             	mov    %rax,%rcx
  8004209715:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209719:	48 01 c8             	add    %rcx,%rax
  800420971c:	48 01 d0             	add    %rdx,%rax
  800420971f:	48 83 c0 08          	add    $0x8,%rax
  8004209723:	48 8b 00             	mov    (%rax),%rax
  8004209726:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  800420972a:	0f 84 28 01 00 00    	je     8004209858 <env_run+0x16e>
		if (curenv && curenv->env_status == ENV_RUNNING)
  8004209730:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  8004209737:	00 00 00 
  800420973a:	ff d0                	callq  *%rax
  800420973c:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  8004209743:	00 00 00 
  8004209746:	48 98                	cltq   
  8004209748:	48 c1 e0 03          	shl    $0x3,%rax
  800420974c:	48 89 c1             	mov    %rax,%rcx
  800420974f:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209753:	48 01 c8             	add    %rcx,%rax
  8004209756:	48 01 d0             	add    %rdx,%rax
  8004209759:	48 83 c0 08          	add    $0x8,%rax
  800420975d:	48 8b 00             	mov    (%rax),%rax
  8004209760:	48 85 c0             	test   %rax,%rax
  8004209763:	74 75                	je     80042097da <env_run+0xf0>
  8004209765:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420976c:	00 00 00 
  800420976f:	ff d0                	callq  *%rax
  8004209771:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  8004209778:	00 00 00 
  800420977b:	48 98                	cltq   
  800420977d:	48 c1 e0 03          	shl    $0x3,%rax
  8004209781:	48 89 c1             	mov    %rax,%rcx
  8004209784:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209788:	48 01 c8             	add    %rcx,%rax
  800420978b:	48 01 d0             	add    %rdx,%rax
  800420978e:	48 83 c0 08          	add    $0x8,%rax
  8004209792:	48 8b 00             	mov    (%rax),%rax
  8004209795:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420979b:	83 f8 03             	cmp    $0x3,%eax
  800420979e:	75 3a                	jne    80042097da <env_run+0xf0>
			curenv->env_status = ENV_RUNNABLE;
  80042097a0:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  80042097a7:	00 00 00 
  80042097aa:	ff d0                	callq  *%rax
  80042097ac:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  80042097b3:	00 00 00 
  80042097b6:	48 98                	cltq   
  80042097b8:	48 c1 e0 03          	shl    $0x3,%rax
  80042097bc:	48 89 c1             	mov    %rax,%rcx
  80042097bf:	48 c1 e1 04          	shl    $0x4,%rcx
  80042097c3:	48 01 c8             	add    %rcx,%rax
  80042097c6:	48 01 d0             	add    %rdx,%rax
  80042097c9:	48 83 c0 08          	add    $0x8,%rax
  80042097cd:	48 8b 00             	mov    (%rax),%rax
  80042097d0:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  80042097d7:	00 00 00 
		// cprintf("cpu %d switch from env %d to env %d\n",
		// 	cpunum(), curenv ? curenv - envs : -1, e - envs);

		// keep track of which environment we're currently
		// running
		curenv = e;
  80042097da:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  80042097e1:	00 00 00 
  80042097e4:	ff d0                	callq  *%rax
  80042097e6:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  80042097ed:	00 00 00 
  80042097f0:	48 98                	cltq   
  80042097f2:	48 c1 e0 03          	shl    $0x3,%rax
  80042097f6:	48 89 c1             	mov    %rax,%rcx
  80042097f9:	48 c1 e1 04          	shl    $0x4,%rcx
  80042097fd:	48 01 c8             	add    %rcx,%rax
  8004209800:	48 01 d0             	add    %rdx,%rax
  8004209803:	48 8d 50 08          	lea    0x8(%rax),%rdx
  8004209807:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420980b:	48 89 02             	mov    %rax,(%rdx)
		e->env_status = ENV_RUNNING;
  800420980e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209812:	c7 80 d4 00 00 00 03 	movl   $0x3,0xd4(%rax)
  8004209819:	00 00 00 

		// Hint, Lab 0: An environment has started running. We should keep track of that somewhere, right?
		e->env_runs++; // increment the number of times the env has been run
  800420981c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209820:	8b 80 d8 00 00 00    	mov    0xd8(%rax),%eax
  8004209826:	8d 50 01             	lea    0x1(%rax),%edx
  8004209829:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420982d:	89 90 d8 00 00 00    	mov    %edx,0xd8(%rax)

		// restore e's address space
		if(e->env_type != ENV_TYPE_GUEST)
  8004209833:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209837:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800420983d:	83 f8 03             	cmp    $0x3,%eax
  8004209840:	74 16                	je     8004209858 <env_run+0x16e>
			lcr3(e->env_cr3);
  8004209842:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209846:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  800420984d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004209851:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209855:	0f 22 d8             	mov    %rax,%cr3
	}

	assert(e->env_status == ENV_RUNNING);
  8004209858:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420985c:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  8004209862:	83 f8 03             	cmp    $0x3,%eax
  8004209865:	74 35                	je     800420989c <env_run+0x1b2>
  8004209867:	48 b9 ec f7 21 04 80 	movabs $0x800421f7ec,%rcx
  800420986e:	00 00 00 
  8004209871:	48 ba 09 f8 21 04 80 	movabs $0x800421f809,%rdx
  8004209878:	00 00 00 
  800420987b:	be b2 02 00 00       	mov    $0x2b2,%esi
  8004209880:	48 bf ec f6 21 04 80 	movabs $0x800421f6ec,%rdi
  8004209887:	00 00 00 
  800420988a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420988f:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004209896:	00 00 00 
  8004209899:	41 ff d0             	callq  *%r8


#ifndef VMM_GUEST
	if(e->env_type == ENV_TYPE_GUEST) {
  800420989c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042098a0:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  80042098a6:	83 f8 03             	cmp    $0x3,%eax
  80042098a9:	75 3d                	jne    80042098e8 <env_run+0x1fe>
		vmx_vmrun(e);
  80042098ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042098af:	48 89 c7             	mov    %rax,%rdi
  80042098b2:	48 b8 35 d6 21 04 80 	movabs $0x800421d635,%rax
  80042098b9:	00 00 00 
  80042098bc:	ff d0                	callq  *%rax
		panic ("vmx_run never returns\n");
  80042098be:	48 ba 1e f8 21 04 80 	movabs $0x800421f81e,%rdx
  80042098c5:	00 00 00 
  80042098c8:	be b8 02 00 00       	mov    $0x2b8,%esi
  80042098cd:	48 bf ec f6 21 04 80 	movabs $0x800421f6ec,%rdi
  80042098d4:	00 00 00 
  80042098d7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042098dc:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  80042098e3:	00 00 00 
  80042098e6:	ff d1                	callq  *%rcx
	}
	else {
		unlock_kernel();
  80042098e8:	48 b8 ef 7d 20 04 80 	movabs $0x8004207def,%rax
  80042098ef:	00 00 00 
  80042098f2:	ff d0                	callq  *%rax
		env_pop_tf(&e->env_tf);
  80042098f4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042098f8:	48 89 c7             	mov    %rax,%rdi
  80042098fb:	48 b8 0e 96 20 04 80 	movabs $0x800420960e,%rax
  8004209902:	00 00 00 
  8004209905:	ff d0                	callq  *%rax

0000008004209907 <mc146818_read>:
  8004209907:	55                   	push   %rbp
  8004209908:	48 89 e5             	mov    %rsp,%rbp
  800420990b:	48 83 ec 14          	sub    $0x14,%rsp
  800420990f:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004209912:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004209915:	0f b6 c0             	movzbl %al,%eax
  8004209918:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%rbp)
  800420991f:	88 45 fb             	mov    %al,-0x5(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004209922:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004209926:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209929:	ee                   	out    %al,(%dx)
  800420992a:	c7 45 f4 71 00 00 00 	movl   $0x71,-0xc(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004209931:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004209934:	89 c2                	mov    %eax,%edx
  8004209936:	ec                   	in     (%dx),%al
  8004209937:	88 45 f3             	mov    %al,-0xd(%rbp)
	return data;
  800420993a:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  800420993e:	0f b6 c0             	movzbl %al,%eax
  8004209941:	c9                   	leaveq 
  8004209942:	c3                   	retq   

0000008004209943 <mc146818_write>:
  8004209943:	55                   	push   %rbp
  8004209944:	48 89 e5             	mov    %rsp,%rbp
  8004209947:	48 83 ec 18          	sub    $0x18,%rsp
  800420994b:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420994e:	89 75 e8             	mov    %esi,-0x18(%rbp)
  8004209951:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004209954:	0f b6 c0             	movzbl %al,%eax
  8004209957:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%rbp)
  800420995e:	88 45 fb             	mov    %al,-0x5(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004209961:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004209965:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209968:	ee                   	out    %al,(%dx)
  8004209969:	8b 45 e8             	mov    -0x18(%rbp),%eax
  800420996c:	0f b6 c0             	movzbl %al,%eax
  800420996f:	c7 45 f4 71 00 00 00 	movl   $0x71,-0xc(%rbp)
  8004209976:	88 45 f3             	mov    %al,-0xd(%rbp)
  8004209979:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  800420997d:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004209980:	ee                   	out    %al,(%dx)
  8004209981:	c9                   	leaveq 
  8004209982:	c3                   	retq   

0000008004209983 <pic_init>:
  8004209983:	55                   	push   %rbp
  8004209984:	48 89 e5             	mov    %rsp,%rbp
  8004209987:	48 83 ec 70          	sub    $0x70,%rsp
  800420998b:	48 b8 68 f2 4d 04 80 	movabs $0x80044df268,%rax
  8004209992:	00 00 00 
  8004209995:	c6 00 01             	movb   $0x1,(%rax)
  8004209998:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%rbp)
  800420999f:	c6 45 fb ff          	movb   $0xff,-0x5(%rbp)
  80042099a3:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  80042099a7:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042099aa:	ee                   	out    %al,(%dx)
  80042099ab:	c7 45 f4 a1 00 00 00 	movl   $0xa1,-0xc(%rbp)
  80042099b2:	c6 45 f3 ff          	movb   $0xff,-0xd(%rbp)
  80042099b6:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  80042099ba:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042099bd:	ee                   	out    %al,(%dx)
  80042099be:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%rbp)
  80042099c5:	c6 45 eb 11          	movb   $0x11,-0x15(%rbp)
  80042099c9:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  80042099cd:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042099d0:	ee                   	out    %al,(%dx)
  80042099d1:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%rbp)
  80042099d8:	c6 45 e3 20          	movb   $0x20,-0x1d(%rbp)
  80042099dc:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  80042099e0:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  80042099e3:	ee                   	out    %al,(%dx)
  80042099e4:	c7 45 dc 21 00 00 00 	movl   $0x21,-0x24(%rbp)
  80042099eb:	c6 45 db 04          	movb   $0x4,-0x25(%rbp)
  80042099ef:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  80042099f3:	8b 55 dc             	mov    -0x24(%rbp),%edx
  80042099f6:	ee                   	out    %al,(%dx)
  80042099f7:	c7 45 d4 21 00 00 00 	movl   $0x21,-0x2c(%rbp)
  80042099fe:	c6 45 d3 03          	movb   $0x3,-0x2d(%rbp)
  8004209a02:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004209a06:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004209a09:	ee                   	out    %al,(%dx)
  8004209a0a:	c7 45 cc a0 00 00 00 	movl   $0xa0,-0x34(%rbp)
  8004209a11:	c6 45 cb 11          	movb   $0x11,-0x35(%rbp)
  8004209a15:	0f b6 45 cb          	movzbl -0x35(%rbp),%eax
  8004209a19:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004209a1c:	ee                   	out    %al,(%dx)
  8004209a1d:	c7 45 c4 a1 00 00 00 	movl   $0xa1,-0x3c(%rbp)
  8004209a24:	c6 45 c3 28          	movb   $0x28,-0x3d(%rbp)
  8004209a28:	0f b6 45 c3          	movzbl -0x3d(%rbp),%eax
  8004209a2c:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004209a2f:	ee                   	out    %al,(%dx)
  8004209a30:	c7 45 bc a1 00 00 00 	movl   $0xa1,-0x44(%rbp)
  8004209a37:	c6 45 bb 02          	movb   $0x2,-0x45(%rbp)
  8004209a3b:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
  8004209a3f:	8b 55 bc             	mov    -0x44(%rbp),%edx
  8004209a42:	ee                   	out    %al,(%dx)
  8004209a43:	c7 45 b4 a1 00 00 00 	movl   $0xa1,-0x4c(%rbp)
  8004209a4a:	c6 45 b3 01          	movb   $0x1,-0x4d(%rbp)
  8004209a4e:	0f b6 45 b3          	movzbl -0x4d(%rbp),%eax
  8004209a52:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  8004209a55:	ee                   	out    %al,(%dx)
  8004209a56:	c7 45 ac 20 00 00 00 	movl   $0x20,-0x54(%rbp)
  8004209a5d:	c6 45 ab 68          	movb   $0x68,-0x55(%rbp)
  8004209a61:	0f b6 45 ab          	movzbl -0x55(%rbp),%eax
  8004209a65:	8b 55 ac             	mov    -0x54(%rbp),%edx
  8004209a68:	ee                   	out    %al,(%dx)
  8004209a69:	c7 45 a4 20 00 00 00 	movl   $0x20,-0x5c(%rbp)
  8004209a70:	c6 45 a3 0a          	movb   $0xa,-0x5d(%rbp)
  8004209a74:	0f b6 45 a3          	movzbl -0x5d(%rbp),%eax
  8004209a78:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004209a7b:	ee                   	out    %al,(%dx)
  8004209a7c:	c7 45 9c a0 00 00 00 	movl   $0xa0,-0x64(%rbp)
  8004209a83:	c6 45 9b 68          	movb   $0x68,-0x65(%rbp)
  8004209a87:	0f b6 45 9b          	movzbl -0x65(%rbp),%eax
  8004209a8b:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004209a8e:	ee                   	out    %al,(%dx)
  8004209a8f:	c7 45 94 a0 00 00 00 	movl   $0xa0,-0x6c(%rbp)
  8004209a96:	c6 45 93 0a          	movb   $0xa,-0x6d(%rbp)
  8004209a9a:	0f b6 45 93          	movzbl -0x6d(%rbp),%eax
  8004209a9e:	8b 55 94             	mov    -0x6c(%rbp),%edx
  8004209aa1:	ee                   	out    %al,(%dx)
  8004209aa2:	48 b8 72 56 23 04 80 	movabs $0x8004235672,%rax
  8004209aa9:	00 00 00 
  8004209aac:	0f b7 00             	movzwl (%rax),%eax
  8004209aaf:	66 83 f8 ff          	cmp    $0xffff,%ax
  8004209ab3:	74 1e                	je     8004209ad3 <pic_init+0x150>
  8004209ab5:	48 b8 72 56 23 04 80 	movabs $0x8004235672,%rax
  8004209abc:	00 00 00 
  8004209abf:	0f b7 00             	movzwl (%rax),%eax
  8004209ac2:	0f b7 c0             	movzwl %ax,%eax
  8004209ac5:	89 c7                	mov    %eax,%edi
  8004209ac7:	48 b8 d5 9a 20 04 80 	movabs $0x8004209ad5,%rax
  8004209ace:	00 00 00 
  8004209ad1:	ff d0                	callq  *%rax
  8004209ad3:	c9                   	leaveq 
  8004209ad4:	c3                   	retq   

0000008004209ad5 <irq_setmask_8259A>:
  8004209ad5:	55                   	push   %rbp
  8004209ad6:	48 89 e5             	mov    %rsp,%rbp
  8004209ad9:	48 83 ec 30          	sub    $0x30,%rsp
  8004209add:	89 f8                	mov    %edi,%eax
  8004209adf:	66 89 45 dc          	mov    %ax,-0x24(%rbp)
  8004209ae3:	48 b8 72 56 23 04 80 	movabs $0x8004235672,%rax
  8004209aea:	00 00 00 
  8004209aed:	0f b7 55 dc          	movzwl -0x24(%rbp),%edx
  8004209af1:	66 89 10             	mov    %dx,(%rax)
  8004209af4:	48 b8 68 f2 4d 04 80 	movabs $0x80044df268,%rax
  8004209afb:	00 00 00 
  8004209afe:	0f b6 00             	movzbl (%rax),%eax
  8004209b01:	83 f0 01             	xor    $0x1,%eax
  8004209b04:	84 c0                	test   %al,%al
  8004209b06:	74 05                	je     8004209b0d <irq_setmask_8259A+0x38>
  8004209b08:	e9 b7 00 00 00       	jmpq   8004209bc4 <irq_setmask_8259A+0xef>
  8004209b0d:	0f b7 45 dc          	movzwl -0x24(%rbp),%eax
  8004209b11:	0f b6 c0             	movzbl %al,%eax
  8004209b14:	c7 45 f8 21 00 00 00 	movl   $0x21,-0x8(%rbp)
  8004209b1b:	88 45 f7             	mov    %al,-0x9(%rbp)
  8004209b1e:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  8004209b22:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004209b25:	ee                   	out    %al,(%dx)
  8004209b26:	0f b7 45 dc          	movzwl -0x24(%rbp),%eax
  8004209b2a:	66 c1 e8 08          	shr    $0x8,%ax
  8004209b2e:	0f b6 c0             	movzbl %al,%eax
  8004209b31:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%rbp)
  8004209b38:	88 45 ef             	mov    %al,-0x11(%rbp)
  8004209b3b:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004209b3f:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004209b42:	ee                   	out    %al,(%dx)
  8004209b43:	48 bf 35 f8 21 04 80 	movabs $0x800421f835,%rdi
  8004209b4a:	00 00 00 
  8004209b4d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209b52:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004209b59:	00 00 00 
  8004209b5c:	ff d2                	callq  *%rdx
  8004209b5e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004209b65:	eb 3c                	jmp    8004209ba3 <irq_setmask_8259A+0xce>
  8004209b67:	0f b7 45 dc          	movzwl -0x24(%rbp),%eax
  8004209b6b:	f7 d0                	not    %eax
  8004209b6d:	89 c2                	mov    %eax,%edx
  8004209b6f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209b72:	89 c1                	mov    %eax,%ecx
  8004209b74:	d3 fa                	sar    %cl,%edx
  8004209b76:	89 d0                	mov    %edx,%eax
  8004209b78:	83 e0 01             	and    $0x1,%eax
  8004209b7b:	85 c0                	test   %eax,%eax
  8004209b7d:	74 20                	je     8004209b9f <irq_setmask_8259A+0xca>
  8004209b7f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209b82:	89 c6                	mov    %eax,%esi
  8004209b84:	48 bf 49 f8 21 04 80 	movabs $0x800421f849,%rdi
  8004209b8b:	00 00 00 
  8004209b8e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209b93:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004209b9a:	00 00 00 
  8004209b9d:	ff d2                	callq  *%rdx
  8004209b9f:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004209ba3:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)
  8004209ba7:	7e be                	jle    8004209b67 <irq_setmask_8259A+0x92>
  8004209ba9:	48 bf 4d f8 21 04 80 	movabs $0x800421f84d,%rdi
  8004209bb0:	00 00 00 
  8004209bb3:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209bb8:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004209bbf:	00 00 00 
  8004209bc2:	ff d2                	callq  *%rdx
  8004209bc4:	c9                   	leaveq 
  8004209bc5:	c3                   	retq   

0000008004209bc6 <irq_eoi>:
  8004209bc6:	55                   	push   %rbp
  8004209bc7:	48 89 e5             	mov    %rsp,%rbp
  8004209bca:	48 83 ec 10          	sub    $0x10,%rsp
  8004209bce:	c7 45 fc 20 00 00 00 	movl   $0x20,-0x4(%rbp)
  8004209bd5:	c6 45 fb 20          	movb   $0x20,-0x5(%rbp)
  8004209bd9:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004209bdd:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209be0:	ee                   	out    %al,(%dx)
  8004209be1:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%rbp)
  8004209be8:	c6 45 f3 20          	movb   $0x20,-0xd(%rbp)
  8004209bec:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004209bf0:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004209bf3:	ee                   	out    %al,(%dx)
  8004209bf4:	c9                   	leaveq 
  8004209bf5:	c3                   	retq   

0000008004209bf6 <putch>:
  8004209bf6:	55                   	push   %rbp
  8004209bf7:	48 89 e5             	mov    %rsp,%rbp
  8004209bfa:	48 83 ec 10          	sub    $0x10,%rsp
  8004209bfe:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004209c01:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004209c05:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209c08:	89 c7                	mov    %eax,%edi
  8004209c0a:	48 b8 ff 11 20 04 80 	movabs $0x80042011ff,%rax
  8004209c11:	00 00 00 
  8004209c14:	ff d0                	callq  *%rax
  8004209c16:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004209c1a:	48 83 c0 04          	add    $0x4,%rax
  8004209c1e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004209c22:	c9                   	leaveq 
  8004209c23:	c3                   	retq   

0000008004209c24 <vcprintf>:
  8004209c24:	55                   	push   %rbp
  8004209c25:	48 89 e5             	mov    %rsp,%rbp
  8004209c28:	48 83 ec 30          	sub    $0x30,%rsp
  8004209c2c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004209c30:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004209c34:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004209c3b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004209c3f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004209c43:	48 8b 0a             	mov    (%rdx),%rcx
  8004209c46:	48 89 08             	mov    %rcx,(%rax)
  8004209c49:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004209c4d:	48 89 48 08          	mov    %rcx,0x8(%rax)
  8004209c51:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  8004209c55:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004209c59:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
  8004209c5d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004209c61:	48 8d 45 fc          	lea    -0x4(%rbp),%rax
  8004209c65:	48 89 c6             	mov    %rax,%rsi
  8004209c68:	48 bf f6 9b 20 04 80 	movabs $0x8004209bf6,%rdi
  8004209c6f:	00 00 00 
  8004209c72:	48 b8 47 02 21 04 80 	movabs $0x8004210247,%rax
  8004209c79:	00 00 00 
  8004209c7c:	ff d0                	callq  *%rax
  8004209c7e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209c81:	c9                   	leaveq 
  8004209c82:	c3                   	retq   

0000008004209c83 <cprintf>:
  8004209c83:	55                   	push   %rbp
  8004209c84:	48 89 e5             	mov    %rsp,%rbp
  8004209c87:	48 81 ec 00 01 00 00 	sub    $0x100,%rsp
  8004209c8e:	48 89 b5 58 ff ff ff 	mov    %rsi,-0xa8(%rbp)
  8004209c95:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  8004209c9c:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  8004209ca3:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  8004209caa:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  8004209cb1:	84 c0                	test   %al,%al
  8004209cb3:	74 20                	je     8004209cd5 <cprintf+0x52>
  8004209cb5:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  8004209cb9:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  8004209cbd:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  8004209cc1:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  8004209cc5:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  8004209cc9:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  8004209ccd:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  8004209cd1:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  8004209cd5:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
  8004209cdc:	c7 85 30 ff ff ff 08 	movl   $0x8,-0xd0(%rbp)
  8004209ce3:	00 00 00 
  8004209ce6:	c7 85 34 ff ff ff 30 	movl   $0x30,-0xcc(%rbp)
  8004209ced:	00 00 00 
  8004209cf0:	48 8d 45 10          	lea    0x10(%rbp),%rax
  8004209cf4:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  8004209cfb:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004209d02:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  8004209d09:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
  8004209d10:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  8004209d17:	48 8b 0a             	mov    (%rdx),%rcx
  8004209d1a:	48 89 08             	mov    %rcx,(%rax)
  8004209d1d:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004209d21:	48 89 48 08          	mov    %rcx,0x8(%rax)
  8004209d25:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  8004209d29:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004209d2d:	48 8d 95 18 ff ff ff 	lea    -0xe8(%rbp),%rdx
  8004209d34:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  8004209d3b:	48 89 d6             	mov    %rdx,%rsi
  8004209d3e:	48 89 c7             	mov    %rax,%rdi
  8004209d41:	48 b8 24 9c 20 04 80 	movabs $0x8004209c24,%rax
  8004209d48:	00 00 00 
  8004209d4b:	ff d0                	callq  *%rax
  8004209d4d:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
  8004209d53:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
  8004209d59:	c9                   	leaveq 
  8004209d5a:	c3                   	retq   

0000008004209d5b <xchg>:
	if (edxp)
		*edxp = edx;
}

static inline uint32_t
xchg(volatile uint32_t *addr,uint32_t newval){
  8004209d5b:	55                   	push   %rbp
  8004209d5c:	48 89 e5             	mov    %rsp,%rbp
  8004209d5f:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004209d63:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004209d67:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint32_t result;
	__asm __volatile("lock; xchgl %0, %1":
  8004209d6a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004209d6e:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004209d71:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004209d75:	f0 87 02             	lock xchg %eax,(%rdx)
  8004209d78:	89 45 fc             	mov    %eax,-0x4(%rbp)
			 "+m" (*addr), "=a" (result):
			 "1"(newval):
			 "cc");
	return result;
  8004209d7b:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  8004209d7e:	c9                   	leaveq 
  8004209d7f:	c3                   	retq   

0000008004209d80 <lock_kernel>:
  8004209d80:	55                   	push   %rbp
  8004209d81:	48 89 e5             	mov    %rsp,%rbp
  8004209d84:	48 bf 60 57 23 04 80 	movabs $0x8004235760,%rdi
  8004209d8b:	00 00 00 
  8004209d8e:	48 b8 bd 81 21 04 80 	movabs $0x80042181bd,%rax
  8004209d95:	00 00 00 
  8004209d98:	ff d0                	callq  *%rax
  8004209d9a:	5d                   	pop    %rbp
  8004209d9b:	c3                   	retq   

0000008004209d9c <trapname>:
  8004209d9c:	55                   	push   %rbp
  8004209d9d:	48 89 e5             	mov    %rsp,%rbp
  8004209da0:	48 83 ec 04          	sub    $0x4,%rsp
  8004209da4:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004209da7:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209daa:	83 f8 13             	cmp    $0x13,%eax
  8004209dad:	77 16                	ja     8004209dc5 <trapname+0x29>
  8004209daf:	48 b8 60 fc 21 04 80 	movabs $0x800421fc60,%rax
  8004209db6:	00 00 00 
  8004209db9:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209dbc:	48 63 d2             	movslq %edx,%rdx
  8004209dbf:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004209dc3:	eb 34                	jmp    8004209df9 <trapname+0x5d>
  8004209dc5:	83 7d fc 30          	cmpl   $0x30,-0x4(%rbp)
  8004209dc9:	75 0c                	jne    8004209dd7 <trapname+0x3b>
  8004209dcb:	48 b8 60 f8 21 04 80 	movabs $0x800421f860,%rax
  8004209dd2:	00 00 00 
  8004209dd5:	eb 22                	jmp    8004209df9 <trapname+0x5d>
  8004209dd7:	83 7d fc 1f          	cmpl   $0x1f,-0x4(%rbp)
  8004209ddb:	7e 12                	jle    8004209def <trapname+0x53>
  8004209ddd:	83 7d fc 2f          	cmpl   $0x2f,-0x4(%rbp)
  8004209de1:	7f 0c                	jg     8004209def <trapname+0x53>
  8004209de3:	48 b8 6c f8 21 04 80 	movabs $0x800421f86c,%rax
  8004209dea:	00 00 00 
  8004209ded:	eb 0a                	jmp    8004209df9 <trapname+0x5d>
  8004209def:	48 b8 7f f8 21 04 80 	movabs $0x800421f87f,%rax
  8004209df6:	00 00 00 
  8004209df9:	c9                   	leaveq 
  8004209dfa:	c3                   	retq   

0000008004209dfb <trap_init>:
  8004209dfb:	55                   	push   %rbp
  8004209dfc:	48 89 e5             	mov    %rsp,%rbp
  8004209dff:	48 83 ec 10          	sub    $0x10,%rsp
  8004209e03:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004209e0a:	e9 7d 01 00 00       	jmpq   8004209f8c <trap_init+0x191>
  8004209e0f:	48 b8 16 d9 20 04 80 	movabs $0x800420d916,%rax
  8004209e16:	00 00 00 
  8004209e19:	48 ba 80 f2 4d 04 80 	movabs $0x80044df280,%rdx
  8004209e20:	00 00 00 
  8004209e23:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004209e26:	48 63 c9             	movslq %ecx,%rcx
  8004209e29:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209e2d:	48 01 ca             	add    %rcx,%rdx
  8004209e30:	66 89 02             	mov    %ax,(%rdx)
  8004209e33:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  8004209e3a:	00 00 00 
  8004209e3d:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209e40:	48 63 d2             	movslq %edx,%rdx
  8004209e43:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209e47:	48 01 d0             	add    %rdx,%rax
  8004209e4a:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
  8004209e50:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  8004209e57:	00 00 00 
  8004209e5a:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209e5d:	48 63 d2             	movslq %edx,%rdx
  8004209e60:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209e64:	48 01 d0             	add    %rdx,%rax
  8004209e67:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  8004209e6b:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209e6e:	88 50 04             	mov    %dl,0x4(%rax)
  8004209e71:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  8004209e78:	00 00 00 
  8004209e7b:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209e7e:	48 63 d2             	movslq %edx,%rdx
  8004209e81:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209e85:	48 01 d0             	add    %rdx,%rax
  8004209e88:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  8004209e8c:	83 e2 07             	and    $0x7,%edx
  8004209e8f:	88 50 04             	mov    %dl,0x4(%rax)
  8004209e92:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  8004209e99:	00 00 00 
  8004209e9c:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209e9f:	48 63 d2             	movslq %edx,%rdx
  8004209ea2:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209ea6:	48 01 d0             	add    %rdx,%rax
  8004209ea9:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209ead:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209eb0:	83 ca 0e             	or     $0xe,%edx
  8004209eb3:	88 50 05             	mov    %dl,0x5(%rax)
  8004209eb6:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  8004209ebd:	00 00 00 
  8004209ec0:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209ec3:	48 63 d2             	movslq %edx,%rdx
  8004209ec6:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209eca:	48 01 d0             	add    %rdx,%rax
  8004209ecd:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209ed1:	83 e2 ef             	and    $0xffffffef,%edx
  8004209ed4:	88 50 05             	mov    %dl,0x5(%rax)
  8004209ed7:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  8004209ede:	00 00 00 
  8004209ee1:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209ee4:	48 63 d2             	movslq %edx,%rdx
  8004209ee7:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209eeb:	48 01 d0             	add    %rdx,%rax
  8004209eee:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209ef2:	83 e2 9f             	and    $0xffffff9f,%edx
  8004209ef5:	88 50 05             	mov    %dl,0x5(%rax)
  8004209ef8:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  8004209eff:	00 00 00 
  8004209f02:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209f05:	48 63 d2             	movslq %edx,%rdx
  8004209f08:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209f0c:	48 01 d0             	add    %rdx,%rax
  8004209f0f:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209f13:	83 ca 80             	or     $0xffffff80,%edx
  8004209f16:	88 50 05             	mov    %dl,0x5(%rax)
  8004209f19:	48 b8 16 d9 20 04 80 	movabs $0x800420d916,%rax
  8004209f20:	00 00 00 
  8004209f23:	48 c1 e8 10          	shr    $0x10,%rax
  8004209f27:	48 ba 80 f2 4d 04 80 	movabs $0x80044df280,%rdx
  8004209f2e:	00 00 00 
  8004209f31:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004209f34:	48 63 c9             	movslq %ecx,%rcx
  8004209f37:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209f3b:	48 01 ca             	add    %rcx,%rdx
  8004209f3e:	66 89 42 06          	mov    %ax,0x6(%rdx)
  8004209f42:	48 b8 16 d9 20 04 80 	movabs $0x800420d916,%rax
  8004209f49:	00 00 00 
  8004209f4c:	48 c1 e8 20          	shr    $0x20,%rax
  8004209f50:	48 ba 80 f2 4d 04 80 	movabs $0x80044df280,%rdx
  8004209f57:	00 00 00 
  8004209f5a:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004209f5d:	48 63 c9             	movslq %ecx,%rcx
  8004209f60:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209f64:	48 01 ca             	add    %rcx,%rdx
  8004209f67:	89 42 08             	mov    %eax,0x8(%rdx)
  8004209f6a:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  8004209f71:	00 00 00 
  8004209f74:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209f77:	48 63 d2             	movslq %edx,%rdx
  8004209f7a:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209f7e:	48 01 d0             	add    %rdx,%rax
  8004209f81:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
  8004209f88:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004209f8c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209f8f:	3d ff 00 00 00       	cmp    $0xff,%eax
  8004209f94:	0f 86 75 fe ff ff    	jbe    8004209e0f <trap_init+0x14>
  8004209f9a:	48 b8 d0 d7 20 04 80 	movabs $0x800420d7d0,%rax
  8004209fa1:	00 00 00 
  8004209fa4:	89 c2                	mov    %eax,%edx
  8004209fa6:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  8004209fad:	00 00 00 
  8004209fb0:	66 89 10             	mov    %dx,(%rax)
  8004209fb3:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  8004209fba:	00 00 00 
  8004209fbd:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
  8004209fc3:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  8004209fca:	00 00 00 
  8004209fcd:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  8004209fd1:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209fd4:	88 50 04             	mov    %dl,0x4(%rax)
  8004209fd7:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  8004209fde:	00 00 00 
  8004209fe1:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  8004209fe5:	83 e2 07             	and    $0x7,%edx
  8004209fe8:	88 50 04             	mov    %dl,0x4(%rax)
  8004209feb:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  8004209ff2:	00 00 00 
  8004209ff5:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209ff9:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209ffc:	83 ca 0e             	or     $0xe,%edx
  8004209fff:	88 50 05             	mov    %dl,0x5(%rax)
  800420a002:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a009:	00 00 00 
  800420a00c:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420a010:	83 e2 ef             	and    $0xffffffef,%edx
  800420a013:	88 50 05             	mov    %dl,0x5(%rax)
  800420a016:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a01d:	00 00 00 
  800420a020:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420a024:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a027:	88 50 05             	mov    %dl,0x5(%rax)
  800420a02a:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a031:	00 00 00 
  800420a034:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420a038:	83 ca 80             	or     $0xffffff80,%edx
  800420a03b:	88 50 05             	mov    %dl,0x5(%rax)
  800420a03e:	48 b8 d0 d7 20 04 80 	movabs $0x800420d7d0,%rax
  800420a045:	00 00 00 
  800420a048:	48 c1 e8 10          	shr    $0x10,%rax
  800420a04c:	89 c2                	mov    %eax,%edx
  800420a04e:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a055:	00 00 00 
  800420a058:	66 89 50 06          	mov    %dx,0x6(%rax)
  800420a05c:	48 b8 d0 d7 20 04 80 	movabs $0x800420d7d0,%rax
  800420a063:	00 00 00 
  800420a066:	48 c1 e8 20          	shr    $0x20,%rax
  800420a06a:	89 c2                	mov    %eax,%edx
  800420a06c:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a073:	00 00 00 
  800420a076:	89 50 08             	mov    %edx,0x8(%rax)
  800420a079:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a080:	00 00 00 
  800420a083:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
  800420a08a:	48 b8 da d7 20 04 80 	movabs $0x800420d7da,%rax
  800420a091:	00 00 00 
  800420a094:	89 c2                	mov    %eax,%edx
  800420a096:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a09d:	00 00 00 
  800420a0a0:	66 89 50 10          	mov    %dx,0x10(%rax)
  800420a0a4:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a0ab:	00 00 00 
  800420a0ae:	66 c7 40 12 08 00    	movw   $0x8,0x12(%rax)
  800420a0b4:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a0bb:	00 00 00 
  800420a0be:	0f b6 50 14          	movzbl 0x14(%rax),%edx
  800420a0c2:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a0c5:	88 50 14             	mov    %dl,0x14(%rax)
  800420a0c8:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a0cf:	00 00 00 
  800420a0d2:	0f b6 50 14          	movzbl 0x14(%rax),%edx
  800420a0d6:	83 e2 07             	and    $0x7,%edx
  800420a0d9:	88 50 14             	mov    %dl,0x14(%rax)
  800420a0dc:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a0e3:	00 00 00 
  800420a0e6:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  800420a0ea:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a0ed:	83 ca 0e             	or     $0xe,%edx
  800420a0f0:	88 50 15             	mov    %dl,0x15(%rax)
  800420a0f3:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a0fa:	00 00 00 
  800420a0fd:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  800420a101:	83 e2 ef             	and    $0xffffffef,%edx
  800420a104:	88 50 15             	mov    %dl,0x15(%rax)
  800420a107:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a10e:	00 00 00 
  800420a111:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  800420a115:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a118:	88 50 15             	mov    %dl,0x15(%rax)
  800420a11b:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a122:	00 00 00 
  800420a125:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  800420a129:	83 ca 80             	or     $0xffffff80,%edx
  800420a12c:	88 50 15             	mov    %dl,0x15(%rax)
  800420a12f:	48 b8 da d7 20 04 80 	movabs $0x800420d7da,%rax
  800420a136:	00 00 00 
  800420a139:	48 c1 e8 10          	shr    $0x10,%rax
  800420a13d:	89 c2                	mov    %eax,%edx
  800420a13f:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a146:	00 00 00 
  800420a149:	66 89 50 16          	mov    %dx,0x16(%rax)
  800420a14d:	48 b8 da d7 20 04 80 	movabs $0x800420d7da,%rax
  800420a154:	00 00 00 
  800420a157:	48 c1 e8 20          	shr    $0x20,%rax
  800420a15b:	89 c2                	mov    %eax,%edx
  800420a15d:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a164:	00 00 00 
  800420a167:	89 50 18             	mov    %edx,0x18(%rax)
  800420a16a:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a171:	00 00 00 
  800420a174:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%rax)
  800420a17b:	48 b8 e4 d7 20 04 80 	movabs $0x800420d7e4,%rax
  800420a182:	00 00 00 
  800420a185:	89 c2                	mov    %eax,%edx
  800420a187:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a18e:	00 00 00 
  800420a191:	66 89 50 20          	mov    %dx,0x20(%rax)
  800420a195:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a19c:	00 00 00 
  800420a19f:	66 c7 40 22 08 00    	movw   $0x8,0x22(%rax)
  800420a1a5:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a1ac:	00 00 00 
  800420a1af:	0f b6 50 24          	movzbl 0x24(%rax),%edx
  800420a1b3:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a1b6:	88 50 24             	mov    %dl,0x24(%rax)
  800420a1b9:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a1c0:	00 00 00 
  800420a1c3:	0f b6 50 24          	movzbl 0x24(%rax),%edx
  800420a1c7:	83 e2 07             	and    $0x7,%edx
  800420a1ca:	88 50 24             	mov    %dl,0x24(%rax)
  800420a1cd:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a1d4:	00 00 00 
  800420a1d7:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  800420a1db:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a1de:	83 ca 0e             	or     $0xe,%edx
  800420a1e1:	88 50 25             	mov    %dl,0x25(%rax)
  800420a1e4:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a1eb:	00 00 00 
  800420a1ee:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  800420a1f2:	83 e2 ef             	and    $0xffffffef,%edx
  800420a1f5:	88 50 25             	mov    %dl,0x25(%rax)
  800420a1f8:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a1ff:	00 00 00 
  800420a202:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  800420a206:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a209:	88 50 25             	mov    %dl,0x25(%rax)
  800420a20c:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a213:	00 00 00 
  800420a216:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  800420a21a:	83 ca 80             	or     $0xffffff80,%edx
  800420a21d:	88 50 25             	mov    %dl,0x25(%rax)
  800420a220:	48 b8 e4 d7 20 04 80 	movabs $0x800420d7e4,%rax
  800420a227:	00 00 00 
  800420a22a:	48 c1 e8 10          	shr    $0x10,%rax
  800420a22e:	89 c2                	mov    %eax,%edx
  800420a230:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a237:	00 00 00 
  800420a23a:	66 89 50 26          	mov    %dx,0x26(%rax)
  800420a23e:	48 b8 e4 d7 20 04 80 	movabs $0x800420d7e4,%rax
  800420a245:	00 00 00 
  800420a248:	48 c1 e8 20          	shr    $0x20,%rax
  800420a24c:	89 c2                	mov    %eax,%edx
  800420a24e:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a255:	00 00 00 
  800420a258:	89 50 28             	mov    %edx,0x28(%rax)
  800420a25b:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a262:	00 00 00 
  800420a265:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%rax)
  800420a26c:	48 b8 ee d7 20 04 80 	movabs $0x800420d7ee,%rax
  800420a273:	00 00 00 
  800420a276:	89 c2                	mov    %eax,%edx
  800420a278:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a27f:	00 00 00 
  800420a282:	66 89 50 30          	mov    %dx,0x30(%rax)
  800420a286:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a28d:	00 00 00 
  800420a290:	66 c7 40 32 08 00    	movw   $0x8,0x32(%rax)
  800420a296:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a29d:	00 00 00 
  800420a2a0:	0f b6 50 34          	movzbl 0x34(%rax),%edx
  800420a2a4:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a2a7:	88 50 34             	mov    %dl,0x34(%rax)
  800420a2aa:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a2b1:	00 00 00 
  800420a2b4:	0f b6 50 34          	movzbl 0x34(%rax),%edx
  800420a2b8:	83 e2 07             	and    $0x7,%edx
  800420a2bb:	88 50 34             	mov    %dl,0x34(%rax)
  800420a2be:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a2c5:	00 00 00 
  800420a2c8:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  800420a2cc:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a2cf:	83 ca 0e             	or     $0xe,%edx
  800420a2d2:	88 50 35             	mov    %dl,0x35(%rax)
  800420a2d5:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a2dc:	00 00 00 
  800420a2df:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  800420a2e3:	83 e2 ef             	and    $0xffffffef,%edx
  800420a2e6:	88 50 35             	mov    %dl,0x35(%rax)
  800420a2e9:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a2f0:	00 00 00 
  800420a2f3:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  800420a2f7:	83 ca 60             	or     $0x60,%edx
  800420a2fa:	88 50 35             	mov    %dl,0x35(%rax)
  800420a2fd:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a304:	00 00 00 
  800420a307:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  800420a30b:	83 ca 80             	or     $0xffffff80,%edx
  800420a30e:	88 50 35             	mov    %dl,0x35(%rax)
  800420a311:	48 b8 ee d7 20 04 80 	movabs $0x800420d7ee,%rax
  800420a318:	00 00 00 
  800420a31b:	48 c1 e8 10          	shr    $0x10,%rax
  800420a31f:	89 c2                	mov    %eax,%edx
  800420a321:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a328:	00 00 00 
  800420a32b:	66 89 50 36          	mov    %dx,0x36(%rax)
  800420a32f:	48 b8 ee d7 20 04 80 	movabs $0x800420d7ee,%rax
  800420a336:	00 00 00 
  800420a339:	48 c1 e8 20          	shr    $0x20,%rax
  800420a33d:	89 c2                	mov    %eax,%edx
  800420a33f:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a346:	00 00 00 
  800420a349:	89 50 38             	mov    %edx,0x38(%rax)
  800420a34c:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a353:	00 00 00 
  800420a356:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%rax)
  800420a35d:	48 b8 f8 d7 20 04 80 	movabs $0x800420d7f8,%rax
  800420a364:	00 00 00 
  800420a367:	89 c2                	mov    %eax,%edx
  800420a369:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a370:	00 00 00 
  800420a373:	66 89 50 40          	mov    %dx,0x40(%rax)
  800420a377:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a37e:	00 00 00 
  800420a381:	66 c7 40 42 08 00    	movw   $0x8,0x42(%rax)
  800420a387:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a38e:	00 00 00 
  800420a391:	0f b6 50 44          	movzbl 0x44(%rax),%edx
  800420a395:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a398:	88 50 44             	mov    %dl,0x44(%rax)
  800420a39b:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a3a2:	00 00 00 
  800420a3a5:	0f b6 50 44          	movzbl 0x44(%rax),%edx
  800420a3a9:	83 e2 07             	and    $0x7,%edx
  800420a3ac:	88 50 44             	mov    %dl,0x44(%rax)
  800420a3af:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a3b6:	00 00 00 
  800420a3b9:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  800420a3bd:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a3c0:	83 ca 0e             	or     $0xe,%edx
  800420a3c3:	88 50 45             	mov    %dl,0x45(%rax)
  800420a3c6:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a3cd:	00 00 00 
  800420a3d0:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  800420a3d4:	83 e2 ef             	and    $0xffffffef,%edx
  800420a3d7:	88 50 45             	mov    %dl,0x45(%rax)
  800420a3da:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a3e1:	00 00 00 
  800420a3e4:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  800420a3e8:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a3eb:	88 50 45             	mov    %dl,0x45(%rax)
  800420a3ee:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a3f5:	00 00 00 
  800420a3f8:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  800420a3fc:	83 ca 80             	or     $0xffffff80,%edx
  800420a3ff:	88 50 45             	mov    %dl,0x45(%rax)
  800420a402:	48 b8 f8 d7 20 04 80 	movabs $0x800420d7f8,%rax
  800420a409:	00 00 00 
  800420a40c:	48 c1 e8 10          	shr    $0x10,%rax
  800420a410:	89 c2                	mov    %eax,%edx
  800420a412:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a419:	00 00 00 
  800420a41c:	66 89 50 46          	mov    %dx,0x46(%rax)
  800420a420:	48 b8 f8 d7 20 04 80 	movabs $0x800420d7f8,%rax
  800420a427:	00 00 00 
  800420a42a:	48 c1 e8 20          	shr    $0x20,%rax
  800420a42e:	89 c2                	mov    %eax,%edx
  800420a430:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a437:	00 00 00 
  800420a43a:	89 50 48             	mov    %edx,0x48(%rax)
  800420a43d:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a444:	00 00 00 
  800420a447:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%rax)
  800420a44e:	48 b8 02 d8 20 04 80 	movabs $0x800420d802,%rax
  800420a455:	00 00 00 
  800420a458:	89 c2                	mov    %eax,%edx
  800420a45a:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a461:	00 00 00 
  800420a464:	66 89 50 50          	mov    %dx,0x50(%rax)
  800420a468:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a46f:	00 00 00 
  800420a472:	66 c7 40 52 08 00    	movw   $0x8,0x52(%rax)
  800420a478:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a47f:	00 00 00 
  800420a482:	0f b6 50 54          	movzbl 0x54(%rax),%edx
  800420a486:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a489:	88 50 54             	mov    %dl,0x54(%rax)
  800420a48c:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a493:	00 00 00 
  800420a496:	0f b6 50 54          	movzbl 0x54(%rax),%edx
  800420a49a:	83 e2 07             	and    $0x7,%edx
  800420a49d:	88 50 54             	mov    %dl,0x54(%rax)
  800420a4a0:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a4a7:	00 00 00 
  800420a4aa:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  800420a4ae:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a4b1:	83 ca 0e             	or     $0xe,%edx
  800420a4b4:	88 50 55             	mov    %dl,0x55(%rax)
  800420a4b7:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a4be:	00 00 00 
  800420a4c1:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  800420a4c5:	83 e2 ef             	and    $0xffffffef,%edx
  800420a4c8:	88 50 55             	mov    %dl,0x55(%rax)
  800420a4cb:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a4d2:	00 00 00 
  800420a4d5:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  800420a4d9:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a4dc:	88 50 55             	mov    %dl,0x55(%rax)
  800420a4df:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a4e6:	00 00 00 
  800420a4e9:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  800420a4ed:	83 ca 80             	or     $0xffffff80,%edx
  800420a4f0:	88 50 55             	mov    %dl,0x55(%rax)
  800420a4f3:	48 b8 02 d8 20 04 80 	movabs $0x800420d802,%rax
  800420a4fa:	00 00 00 
  800420a4fd:	48 c1 e8 10          	shr    $0x10,%rax
  800420a501:	89 c2                	mov    %eax,%edx
  800420a503:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a50a:	00 00 00 
  800420a50d:	66 89 50 56          	mov    %dx,0x56(%rax)
  800420a511:	48 b8 02 d8 20 04 80 	movabs $0x800420d802,%rax
  800420a518:	00 00 00 
  800420a51b:	48 c1 e8 20          	shr    $0x20,%rax
  800420a51f:	89 c2                	mov    %eax,%edx
  800420a521:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a528:	00 00 00 
  800420a52b:	89 50 58             	mov    %edx,0x58(%rax)
  800420a52e:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a535:	00 00 00 
  800420a538:	c7 40 5c 00 00 00 00 	movl   $0x0,0x5c(%rax)
  800420a53f:	48 b8 0c d8 20 04 80 	movabs $0x800420d80c,%rax
  800420a546:	00 00 00 
  800420a549:	89 c2                	mov    %eax,%edx
  800420a54b:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a552:	00 00 00 
  800420a555:	66 89 50 60          	mov    %dx,0x60(%rax)
  800420a559:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a560:	00 00 00 
  800420a563:	66 c7 40 62 08 00    	movw   $0x8,0x62(%rax)
  800420a569:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a570:	00 00 00 
  800420a573:	0f b6 50 64          	movzbl 0x64(%rax),%edx
  800420a577:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a57a:	88 50 64             	mov    %dl,0x64(%rax)
  800420a57d:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a584:	00 00 00 
  800420a587:	0f b6 50 64          	movzbl 0x64(%rax),%edx
  800420a58b:	83 e2 07             	and    $0x7,%edx
  800420a58e:	88 50 64             	mov    %dl,0x64(%rax)
  800420a591:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a598:	00 00 00 
  800420a59b:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  800420a59f:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a5a2:	83 ca 0e             	or     $0xe,%edx
  800420a5a5:	88 50 65             	mov    %dl,0x65(%rax)
  800420a5a8:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a5af:	00 00 00 
  800420a5b2:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  800420a5b6:	83 e2 ef             	and    $0xffffffef,%edx
  800420a5b9:	88 50 65             	mov    %dl,0x65(%rax)
  800420a5bc:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a5c3:	00 00 00 
  800420a5c6:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  800420a5ca:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a5cd:	88 50 65             	mov    %dl,0x65(%rax)
  800420a5d0:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a5d7:	00 00 00 
  800420a5da:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  800420a5de:	83 ca 80             	or     $0xffffff80,%edx
  800420a5e1:	88 50 65             	mov    %dl,0x65(%rax)
  800420a5e4:	48 b8 0c d8 20 04 80 	movabs $0x800420d80c,%rax
  800420a5eb:	00 00 00 
  800420a5ee:	48 c1 e8 10          	shr    $0x10,%rax
  800420a5f2:	89 c2                	mov    %eax,%edx
  800420a5f4:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a5fb:	00 00 00 
  800420a5fe:	66 89 50 66          	mov    %dx,0x66(%rax)
  800420a602:	48 b8 0c d8 20 04 80 	movabs $0x800420d80c,%rax
  800420a609:	00 00 00 
  800420a60c:	48 c1 e8 20          	shr    $0x20,%rax
  800420a610:	89 c2                	mov    %eax,%edx
  800420a612:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a619:	00 00 00 
  800420a61c:	89 50 68             	mov    %edx,0x68(%rax)
  800420a61f:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a626:	00 00 00 
  800420a629:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%rax)
  800420a630:	48 b8 16 d8 20 04 80 	movabs $0x800420d816,%rax
  800420a637:	00 00 00 
  800420a63a:	89 c2                	mov    %eax,%edx
  800420a63c:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a643:	00 00 00 
  800420a646:	66 89 50 70          	mov    %dx,0x70(%rax)
  800420a64a:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a651:	00 00 00 
  800420a654:	66 c7 40 72 08 00    	movw   $0x8,0x72(%rax)
  800420a65a:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a661:	00 00 00 
  800420a664:	0f b6 50 74          	movzbl 0x74(%rax),%edx
  800420a668:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a66b:	88 50 74             	mov    %dl,0x74(%rax)
  800420a66e:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a675:	00 00 00 
  800420a678:	0f b6 50 74          	movzbl 0x74(%rax),%edx
  800420a67c:	83 e2 07             	and    $0x7,%edx
  800420a67f:	88 50 74             	mov    %dl,0x74(%rax)
  800420a682:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a689:	00 00 00 
  800420a68c:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  800420a690:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a693:	83 ca 0e             	or     $0xe,%edx
  800420a696:	88 50 75             	mov    %dl,0x75(%rax)
  800420a699:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a6a0:	00 00 00 
  800420a6a3:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  800420a6a7:	83 e2 ef             	and    $0xffffffef,%edx
  800420a6aa:	88 50 75             	mov    %dl,0x75(%rax)
  800420a6ad:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a6b4:	00 00 00 
  800420a6b7:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  800420a6bb:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a6be:	88 50 75             	mov    %dl,0x75(%rax)
  800420a6c1:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a6c8:	00 00 00 
  800420a6cb:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  800420a6cf:	83 ca 80             	or     $0xffffff80,%edx
  800420a6d2:	88 50 75             	mov    %dl,0x75(%rax)
  800420a6d5:	48 b8 16 d8 20 04 80 	movabs $0x800420d816,%rax
  800420a6dc:	00 00 00 
  800420a6df:	48 c1 e8 10          	shr    $0x10,%rax
  800420a6e3:	89 c2                	mov    %eax,%edx
  800420a6e5:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a6ec:	00 00 00 
  800420a6ef:	66 89 50 76          	mov    %dx,0x76(%rax)
  800420a6f3:	48 b8 16 d8 20 04 80 	movabs $0x800420d816,%rax
  800420a6fa:	00 00 00 
  800420a6fd:	48 c1 e8 20          	shr    $0x20,%rax
  800420a701:	89 c2                	mov    %eax,%edx
  800420a703:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a70a:	00 00 00 
  800420a70d:	89 50 78             	mov    %edx,0x78(%rax)
  800420a710:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a717:	00 00 00 
  800420a71a:	c7 40 7c 00 00 00 00 	movl   $0x0,0x7c(%rax)
  800420a721:	48 b8 20 d8 20 04 80 	movabs $0x800420d820,%rax
  800420a728:	00 00 00 
  800420a72b:	89 c2                	mov    %eax,%edx
  800420a72d:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a734:	00 00 00 
  800420a737:	66 89 90 80 00 00 00 	mov    %dx,0x80(%rax)
  800420a73e:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a745:	00 00 00 
  800420a748:	66 c7 80 82 00 00 00 	movw   $0x8,0x82(%rax)
  800420a74f:	08 00 
  800420a751:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a758:	00 00 00 
  800420a75b:	0f b6 90 84 00 00 00 	movzbl 0x84(%rax),%edx
  800420a762:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a765:	88 90 84 00 00 00    	mov    %dl,0x84(%rax)
  800420a76b:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a772:	00 00 00 
  800420a775:	0f b6 90 84 00 00 00 	movzbl 0x84(%rax),%edx
  800420a77c:	83 e2 07             	and    $0x7,%edx
  800420a77f:	88 90 84 00 00 00    	mov    %dl,0x84(%rax)
  800420a785:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a78c:	00 00 00 
  800420a78f:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a796:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a799:	83 ca 0e             	or     $0xe,%edx
  800420a79c:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a7a2:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a7a9:	00 00 00 
  800420a7ac:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a7b3:	83 e2 ef             	and    $0xffffffef,%edx
  800420a7b6:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a7bc:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a7c3:	00 00 00 
  800420a7c6:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a7cd:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a7d0:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a7d6:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a7dd:	00 00 00 
  800420a7e0:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a7e7:	83 ca 80             	or     $0xffffff80,%edx
  800420a7ea:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a7f0:	48 b8 20 d8 20 04 80 	movabs $0x800420d820,%rax
  800420a7f7:	00 00 00 
  800420a7fa:	48 c1 e8 10          	shr    $0x10,%rax
  800420a7fe:	89 c2                	mov    %eax,%edx
  800420a800:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a807:	00 00 00 
  800420a80a:	66 89 90 86 00 00 00 	mov    %dx,0x86(%rax)
  800420a811:	48 b8 20 d8 20 04 80 	movabs $0x800420d820,%rax
  800420a818:	00 00 00 
  800420a81b:	48 c1 e8 20          	shr    $0x20,%rax
  800420a81f:	89 c2                	mov    %eax,%edx
  800420a821:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a828:	00 00 00 
  800420a82b:	89 90 88 00 00 00    	mov    %edx,0x88(%rax)
  800420a831:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a838:	00 00 00 
  800420a83b:	c7 80 8c 00 00 00 00 	movl   $0x0,0x8c(%rax)
  800420a842:	00 00 00 
  800420a845:	48 b8 28 d8 20 04 80 	movabs $0x800420d828,%rax
  800420a84c:	00 00 00 
  800420a84f:	89 c2                	mov    %eax,%edx
  800420a851:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a858:	00 00 00 
  800420a85b:	66 89 90 a0 00 00 00 	mov    %dx,0xa0(%rax)
  800420a862:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a869:	00 00 00 
  800420a86c:	66 c7 80 a2 00 00 00 	movw   $0x8,0xa2(%rax)
  800420a873:	08 00 
  800420a875:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a87c:	00 00 00 
  800420a87f:	0f b6 90 a4 00 00 00 	movzbl 0xa4(%rax),%edx
  800420a886:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a889:	88 90 a4 00 00 00    	mov    %dl,0xa4(%rax)
  800420a88f:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a896:	00 00 00 
  800420a899:	0f b6 90 a4 00 00 00 	movzbl 0xa4(%rax),%edx
  800420a8a0:	83 e2 07             	and    $0x7,%edx
  800420a8a3:	88 90 a4 00 00 00    	mov    %dl,0xa4(%rax)
  800420a8a9:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a8b0:	00 00 00 
  800420a8b3:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a8ba:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a8bd:	83 ca 0e             	or     $0xe,%edx
  800420a8c0:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a8c6:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a8cd:	00 00 00 
  800420a8d0:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a8d7:	83 e2 ef             	and    $0xffffffef,%edx
  800420a8da:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a8e0:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a8e7:	00 00 00 
  800420a8ea:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a8f1:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a8f4:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a8fa:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a901:	00 00 00 
  800420a904:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a90b:	83 ca 80             	or     $0xffffff80,%edx
  800420a90e:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a914:	48 b8 28 d8 20 04 80 	movabs $0x800420d828,%rax
  800420a91b:	00 00 00 
  800420a91e:	48 c1 e8 10          	shr    $0x10,%rax
  800420a922:	89 c2                	mov    %eax,%edx
  800420a924:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a92b:	00 00 00 
  800420a92e:	66 89 90 a6 00 00 00 	mov    %dx,0xa6(%rax)
  800420a935:	48 b8 28 d8 20 04 80 	movabs $0x800420d828,%rax
  800420a93c:	00 00 00 
  800420a93f:	48 c1 e8 20          	shr    $0x20,%rax
  800420a943:	89 c2                	mov    %eax,%edx
  800420a945:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a94c:	00 00 00 
  800420a94f:	89 90 a8 00 00 00    	mov    %edx,0xa8(%rax)
  800420a955:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a95c:	00 00 00 
  800420a95f:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%rax)
  800420a966:	00 00 00 
  800420a969:	48 b8 30 d8 20 04 80 	movabs $0x800420d830,%rax
  800420a970:	00 00 00 
  800420a973:	89 c2                	mov    %eax,%edx
  800420a975:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a97c:	00 00 00 
  800420a97f:	66 89 90 b0 00 00 00 	mov    %dx,0xb0(%rax)
  800420a986:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a98d:	00 00 00 
  800420a990:	66 c7 80 b2 00 00 00 	movw   $0x8,0xb2(%rax)
  800420a997:	08 00 
  800420a999:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a9a0:	00 00 00 
  800420a9a3:	0f b6 90 b4 00 00 00 	movzbl 0xb4(%rax),%edx
  800420a9aa:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a9ad:	88 90 b4 00 00 00    	mov    %dl,0xb4(%rax)
  800420a9b3:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a9ba:	00 00 00 
  800420a9bd:	0f b6 90 b4 00 00 00 	movzbl 0xb4(%rax),%edx
  800420a9c4:	83 e2 07             	and    $0x7,%edx
  800420a9c7:	88 90 b4 00 00 00    	mov    %dl,0xb4(%rax)
  800420a9cd:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a9d4:	00 00 00 
  800420a9d7:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420a9de:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a9e1:	83 ca 0e             	or     $0xe,%edx
  800420a9e4:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420a9ea:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420a9f1:	00 00 00 
  800420a9f4:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420a9fb:	83 e2 ef             	and    $0xffffffef,%edx
  800420a9fe:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420aa04:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420aa0b:	00 00 00 
  800420aa0e:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420aa15:	83 e2 9f             	and    $0xffffff9f,%edx
  800420aa18:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420aa1e:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420aa25:	00 00 00 
  800420aa28:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420aa2f:	83 ca 80             	or     $0xffffff80,%edx
  800420aa32:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420aa38:	48 b8 30 d8 20 04 80 	movabs $0x800420d830,%rax
  800420aa3f:	00 00 00 
  800420aa42:	48 c1 e8 10          	shr    $0x10,%rax
  800420aa46:	89 c2                	mov    %eax,%edx
  800420aa48:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420aa4f:	00 00 00 
  800420aa52:	66 89 90 b6 00 00 00 	mov    %dx,0xb6(%rax)
  800420aa59:	48 b8 30 d8 20 04 80 	movabs $0x800420d830,%rax
  800420aa60:	00 00 00 
  800420aa63:	48 c1 e8 20          	shr    $0x20,%rax
  800420aa67:	89 c2                	mov    %eax,%edx
  800420aa69:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420aa70:	00 00 00 
  800420aa73:	89 90 b8 00 00 00    	mov    %edx,0xb8(%rax)
  800420aa79:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420aa80:	00 00 00 
  800420aa83:	c7 80 bc 00 00 00 00 	movl   $0x0,0xbc(%rax)
  800420aa8a:	00 00 00 
  800420aa8d:	48 b8 38 d8 20 04 80 	movabs $0x800420d838,%rax
  800420aa94:	00 00 00 
  800420aa97:	89 c2                	mov    %eax,%edx
  800420aa99:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420aaa0:	00 00 00 
  800420aaa3:	66 89 90 c0 00 00 00 	mov    %dx,0xc0(%rax)
  800420aaaa:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420aab1:	00 00 00 
  800420aab4:	66 c7 80 c2 00 00 00 	movw   $0x8,0xc2(%rax)
  800420aabb:	08 00 
  800420aabd:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420aac4:	00 00 00 
  800420aac7:	0f b6 90 c4 00 00 00 	movzbl 0xc4(%rax),%edx
  800420aace:	83 e2 f8             	and    $0xfffffff8,%edx
  800420aad1:	88 90 c4 00 00 00    	mov    %dl,0xc4(%rax)
  800420aad7:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420aade:	00 00 00 
  800420aae1:	0f b6 90 c4 00 00 00 	movzbl 0xc4(%rax),%edx
  800420aae8:	83 e2 07             	and    $0x7,%edx
  800420aaeb:	88 90 c4 00 00 00    	mov    %dl,0xc4(%rax)
  800420aaf1:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420aaf8:	00 00 00 
  800420aafb:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420ab02:	83 e2 f0             	and    $0xfffffff0,%edx
  800420ab05:	83 ca 0e             	or     $0xe,%edx
  800420ab08:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420ab0e:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420ab15:	00 00 00 
  800420ab18:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420ab1f:	83 e2 ef             	and    $0xffffffef,%edx
  800420ab22:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420ab28:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420ab2f:	00 00 00 
  800420ab32:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420ab39:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ab3c:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420ab42:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420ab49:	00 00 00 
  800420ab4c:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420ab53:	83 ca 80             	or     $0xffffff80,%edx
  800420ab56:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420ab5c:	48 b8 38 d8 20 04 80 	movabs $0x800420d838,%rax
  800420ab63:	00 00 00 
  800420ab66:	48 c1 e8 10          	shr    $0x10,%rax
  800420ab6a:	89 c2                	mov    %eax,%edx
  800420ab6c:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420ab73:	00 00 00 
  800420ab76:	66 89 90 c6 00 00 00 	mov    %dx,0xc6(%rax)
  800420ab7d:	48 b8 38 d8 20 04 80 	movabs $0x800420d838,%rax
  800420ab84:	00 00 00 
  800420ab87:	48 c1 e8 20          	shr    $0x20,%rax
  800420ab8b:	89 c2                	mov    %eax,%edx
  800420ab8d:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420ab94:	00 00 00 
  800420ab97:	89 90 c8 00 00 00    	mov    %edx,0xc8(%rax)
  800420ab9d:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420aba4:	00 00 00 
  800420aba7:	c7 80 cc 00 00 00 00 	movl   $0x0,0xcc(%rax)
  800420abae:	00 00 00 
  800420abb1:	48 b8 40 d8 20 04 80 	movabs $0x800420d840,%rax
  800420abb8:	00 00 00 
  800420abbb:	89 c2                	mov    %eax,%edx
  800420abbd:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420abc4:	00 00 00 
  800420abc7:	66 89 90 d0 00 00 00 	mov    %dx,0xd0(%rax)
  800420abce:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420abd5:	00 00 00 
  800420abd8:	66 c7 80 d2 00 00 00 	movw   $0x8,0xd2(%rax)
  800420abdf:	08 00 
  800420abe1:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420abe8:	00 00 00 
  800420abeb:	0f b6 90 d4 00 00 00 	movzbl 0xd4(%rax),%edx
  800420abf2:	83 e2 f8             	and    $0xfffffff8,%edx
  800420abf5:	88 90 d4 00 00 00    	mov    %dl,0xd4(%rax)
  800420abfb:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420ac02:	00 00 00 
  800420ac05:	0f b6 90 d4 00 00 00 	movzbl 0xd4(%rax),%edx
  800420ac0c:	83 e2 07             	and    $0x7,%edx
  800420ac0f:	88 90 d4 00 00 00    	mov    %dl,0xd4(%rax)
  800420ac15:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420ac1c:	00 00 00 
  800420ac1f:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420ac26:	83 e2 f0             	and    $0xfffffff0,%edx
  800420ac29:	83 ca 0e             	or     $0xe,%edx
  800420ac2c:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420ac32:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420ac39:	00 00 00 
  800420ac3c:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420ac43:	83 e2 ef             	and    $0xffffffef,%edx
  800420ac46:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420ac4c:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420ac53:	00 00 00 
  800420ac56:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420ac5d:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ac60:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420ac66:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420ac6d:	00 00 00 
  800420ac70:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420ac77:	83 ca 80             	or     $0xffffff80,%edx
  800420ac7a:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420ac80:	48 b8 40 d8 20 04 80 	movabs $0x800420d840,%rax
  800420ac87:	00 00 00 
  800420ac8a:	48 c1 e8 10          	shr    $0x10,%rax
  800420ac8e:	89 c2                	mov    %eax,%edx
  800420ac90:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420ac97:	00 00 00 
  800420ac9a:	66 89 90 d6 00 00 00 	mov    %dx,0xd6(%rax)
  800420aca1:	48 b8 40 d8 20 04 80 	movabs $0x800420d840,%rax
  800420aca8:	00 00 00 
  800420acab:	48 c1 e8 20          	shr    $0x20,%rax
  800420acaf:	89 c2                	mov    %eax,%edx
  800420acb1:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420acb8:	00 00 00 
  800420acbb:	89 90 d8 00 00 00    	mov    %edx,0xd8(%rax)
  800420acc1:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420acc8:	00 00 00 
  800420accb:	c7 80 dc 00 00 00 00 	movl   $0x0,0xdc(%rax)
  800420acd2:	00 00 00 
  800420acd5:	48 b8 48 d8 20 04 80 	movabs $0x800420d848,%rax
  800420acdc:	00 00 00 
  800420acdf:	89 c2                	mov    %eax,%edx
  800420ace1:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420ace8:	00 00 00 
  800420aceb:	66 89 90 e0 00 00 00 	mov    %dx,0xe0(%rax)
  800420acf2:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420acf9:	00 00 00 
  800420acfc:	66 c7 80 e2 00 00 00 	movw   $0x8,0xe2(%rax)
  800420ad03:	08 00 
  800420ad05:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420ad0c:	00 00 00 
  800420ad0f:	0f b6 90 e4 00 00 00 	movzbl 0xe4(%rax),%edx
  800420ad16:	83 e2 f8             	and    $0xfffffff8,%edx
  800420ad19:	88 90 e4 00 00 00    	mov    %dl,0xe4(%rax)
  800420ad1f:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420ad26:	00 00 00 
  800420ad29:	0f b6 90 e4 00 00 00 	movzbl 0xe4(%rax),%edx
  800420ad30:	83 e2 07             	and    $0x7,%edx
  800420ad33:	88 90 e4 00 00 00    	mov    %dl,0xe4(%rax)
  800420ad39:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420ad40:	00 00 00 
  800420ad43:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420ad4a:	83 e2 f0             	and    $0xfffffff0,%edx
  800420ad4d:	83 ca 0e             	or     $0xe,%edx
  800420ad50:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420ad56:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420ad5d:	00 00 00 
  800420ad60:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420ad67:	83 e2 ef             	and    $0xffffffef,%edx
  800420ad6a:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420ad70:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420ad77:	00 00 00 
  800420ad7a:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420ad81:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ad84:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420ad8a:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420ad91:	00 00 00 
  800420ad94:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420ad9b:	83 ca 80             	or     $0xffffff80,%edx
  800420ad9e:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420ada4:	48 b8 48 d8 20 04 80 	movabs $0x800420d848,%rax
  800420adab:	00 00 00 
  800420adae:	48 c1 e8 10          	shr    $0x10,%rax
  800420adb2:	89 c2                	mov    %eax,%edx
  800420adb4:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420adbb:	00 00 00 
  800420adbe:	66 89 90 e6 00 00 00 	mov    %dx,0xe6(%rax)
  800420adc5:	48 b8 48 d8 20 04 80 	movabs $0x800420d848,%rax
  800420adcc:	00 00 00 
  800420adcf:	48 c1 e8 20          	shr    $0x20,%rax
  800420add3:	89 c2                	mov    %eax,%edx
  800420add5:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420addc:	00 00 00 
  800420addf:	89 90 e8 00 00 00    	mov    %edx,0xe8(%rax)
  800420ade5:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420adec:	00 00 00 
  800420adef:	c7 80 ec 00 00 00 00 	movl   $0x0,0xec(%rax)
  800420adf6:	00 00 00 
  800420adf9:	48 b8 50 d8 20 04 80 	movabs $0x800420d850,%rax
  800420ae00:	00 00 00 
  800420ae03:	89 c2                	mov    %eax,%edx
  800420ae05:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420ae0c:	00 00 00 
  800420ae0f:	66 89 90 00 01 00 00 	mov    %dx,0x100(%rax)
  800420ae16:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420ae1d:	00 00 00 
  800420ae20:	66 c7 80 02 01 00 00 	movw   $0x8,0x102(%rax)
  800420ae27:	08 00 
  800420ae29:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420ae30:	00 00 00 
  800420ae33:	0f b6 90 04 01 00 00 	movzbl 0x104(%rax),%edx
  800420ae3a:	83 e2 f8             	and    $0xfffffff8,%edx
  800420ae3d:	88 90 04 01 00 00    	mov    %dl,0x104(%rax)
  800420ae43:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420ae4a:	00 00 00 
  800420ae4d:	0f b6 90 04 01 00 00 	movzbl 0x104(%rax),%edx
  800420ae54:	83 e2 07             	and    $0x7,%edx
  800420ae57:	88 90 04 01 00 00    	mov    %dl,0x104(%rax)
  800420ae5d:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420ae64:	00 00 00 
  800420ae67:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420ae6e:	83 e2 f0             	and    $0xfffffff0,%edx
  800420ae71:	83 ca 0e             	or     $0xe,%edx
  800420ae74:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420ae7a:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420ae81:	00 00 00 
  800420ae84:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420ae8b:	83 e2 ef             	and    $0xffffffef,%edx
  800420ae8e:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420ae94:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420ae9b:	00 00 00 
  800420ae9e:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420aea5:	83 e2 9f             	and    $0xffffff9f,%edx
  800420aea8:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420aeae:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420aeb5:	00 00 00 
  800420aeb8:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420aebf:	83 ca 80             	or     $0xffffff80,%edx
  800420aec2:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420aec8:	48 b8 50 d8 20 04 80 	movabs $0x800420d850,%rax
  800420aecf:	00 00 00 
  800420aed2:	48 c1 e8 10          	shr    $0x10,%rax
  800420aed6:	89 c2                	mov    %eax,%edx
  800420aed8:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420aedf:	00 00 00 
  800420aee2:	66 89 90 06 01 00 00 	mov    %dx,0x106(%rax)
  800420aee9:	48 b8 50 d8 20 04 80 	movabs $0x800420d850,%rax
  800420aef0:	00 00 00 
  800420aef3:	48 c1 e8 20          	shr    $0x20,%rax
  800420aef7:	89 c2                	mov    %eax,%edx
  800420aef9:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420af00:	00 00 00 
  800420af03:	89 90 08 01 00 00    	mov    %edx,0x108(%rax)
  800420af09:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420af10:	00 00 00 
  800420af13:	c7 80 0c 01 00 00 00 	movl   $0x0,0x10c(%rax)
  800420af1a:	00 00 00 
  800420af1d:	48 b8 5a d8 20 04 80 	movabs $0x800420d85a,%rax
  800420af24:	00 00 00 
  800420af27:	89 c2                	mov    %eax,%edx
  800420af29:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420af30:	00 00 00 
  800420af33:	66 89 90 10 01 00 00 	mov    %dx,0x110(%rax)
  800420af3a:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420af41:	00 00 00 
  800420af44:	66 c7 80 12 01 00 00 	movw   $0x8,0x112(%rax)
  800420af4b:	08 00 
  800420af4d:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420af54:	00 00 00 
  800420af57:	0f b6 90 14 01 00 00 	movzbl 0x114(%rax),%edx
  800420af5e:	83 e2 f8             	and    $0xfffffff8,%edx
  800420af61:	88 90 14 01 00 00    	mov    %dl,0x114(%rax)
  800420af67:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420af6e:	00 00 00 
  800420af71:	0f b6 90 14 01 00 00 	movzbl 0x114(%rax),%edx
  800420af78:	83 e2 07             	and    $0x7,%edx
  800420af7b:	88 90 14 01 00 00    	mov    %dl,0x114(%rax)
  800420af81:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420af88:	00 00 00 
  800420af8b:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420af92:	83 e2 f0             	and    $0xfffffff0,%edx
  800420af95:	83 ca 0e             	or     $0xe,%edx
  800420af98:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420af9e:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420afa5:	00 00 00 
  800420afa8:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420afaf:	83 e2 ef             	and    $0xffffffef,%edx
  800420afb2:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420afb8:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420afbf:	00 00 00 
  800420afc2:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420afc9:	83 e2 9f             	and    $0xffffff9f,%edx
  800420afcc:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420afd2:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420afd9:	00 00 00 
  800420afdc:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420afe3:	83 ca 80             	or     $0xffffff80,%edx
  800420afe6:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420afec:	48 b8 5a d8 20 04 80 	movabs $0x800420d85a,%rax
  800420aff3:	00 00 00 
  800420aff6:	48 c1 e8 10          	shr    $0x10,%rax
  800420affa:	89 c2                	mov    %eax,%edx
  800420affc:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b003:	00 00 00 
  800420b006:	66 89 90 16 01 00 00 	mov    %dx,0x116(%rax)
  800420b00d:	48 b8 5a d8 20 04 80 	movabs $0x800420d85a,%rax
  800420b014:	00 00 00 
  800420b017:	48 c1 e8 20          	shr    $0x20,%rax
  800420b01b:	89 c2                	mov    %eax,%edx
  800420b01d:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b024:	00 00 00 
  800420b027:	89 90 18 01 00 00    	mov    %edx,0x118(%rax)
  800420b02d:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b034:	00 00 00 
  800420b037:	c7 80 1c 01 00 00 00 	movl   $0x0,0x11c(%rax)
  800420b03e:	00 00 00 
  800420b041:	48 b8 62 d8 20 04 80 	movabs $0x800420d862,%rax
  800420b048:	00 00 00 
  800420b04b:	89 c2                	mov    %eax,%edx
  800420b04d:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b054:	00 00 00 
  800420b057:	66 89 90 20 01 00 00 	mov    %dx,0x120(%rax)
  800420b05e:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b065:	00 00 00 
  800420b068:	66 c7 80 22 01 00 00 	movw   $0x8,0x122(%rax)
  800420b06f:	08 00 
  800420b071:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b078:	00 00 00 
  800420b07b:	0f b6 90 24 01 00 00 	movzbl 0x124(%rax),%edx
  800420b082:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b085:	88 90 24 01 00 00    	mov    %dl,0x124(%rax)
  800420b08b:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b092:	00 00 00 
  800420b095:	0f b6 90 24 01 00 00 	movzbl 0x124(%rax),%edx
  800420b09c:	83 e2 07             	and    $0x7,%edx
  800420b09f:	88 90 24 01 00 00    	mov    %dl,0x124(%rax)
  800420b0a5:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b0ac:	00 00 00 
  800420b0af:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420b0b6:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b0b9:	83 ca 0e             	or     $0xe,%edx
  800420b0bc:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420b0c2:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b0c9:	00 00 00 
  800420b0cc:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420b0d3:	83 e2 ef             	and    $0xffffffef,%edx
  800420b0d6:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420b0dc:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b0e3:	00 00 00 
  800420b0e6:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420b0ed:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b0f0:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420b0f6:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b0fd:	00 00 00 
  800420b100:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420b107:	83 ca 80             	or     $0xffffff80,%edx
  800420b10a:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420b110:	48 b8 62 d8 20 04 80 	movabs $0x800420d862,%rax
  800420b117:	00 00 00 
  800420b11a:	48 c1 e8 10          	shr    $0x10,%rax
  800420b11e:	89 c2                	mov    %eax,%edx
  800420b120:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b127:	00 00 00 
  800420b12a:	66 89 90 26 01 00 00 	mov    %dx,0x126(%rax)
  800420b131:	48 b8 62 d8 20 04 80 	movabs $0x800420d862,%rax
  800420b138:	00 00 00 
  800420b13b:	48 c1 e8 20          	shr    $0x20,%rax
  800420b13f:	89 c2                	mov    %eax,%edx
  800420b141:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b148:	00 00 00 
  800420b14b:	89 90 28 01 00 00    	mov    %edx,0x128(%rax)
  800420b151:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b158:	00 00 00 
  800420b15b:	c7 80 2c 01 00 00 00 	movl   $0x0,0x12c(%rax)
  800420b162:	00 00 00 
  800420b165:	48 b8 6c d8 20 04 80 	movabs $0x800420d86c,%rax
  800420b16c:	00 00 00 
  800420b16f:	89 c2                	mov    %eax,%edx
  800420b171:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b178:	00 00 00 
  800420b17b:	66 89 90 00 02 00 00 	mov    %dx,0x200(%rax)
  800420b182:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b189:	00 00 00 
  800420b18c:	66 c7 80 02 02 00 00 	movw   $0x8,0x202(%rax)
  800420b193:	08 00 
  800420b195:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b19c:	00 00 00 
  800420b19f:	0f b6 90 04 02 00 00 	movzbl 0x204(%rax),%edx
  800420b1a6:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b1a9:	88 90 04 02 00 00    	mov    %dl,0x204(%rax)
  800420b1af:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b1b6:	00 00 00 
  800420b1b9:	0f b6 90 04 02 00 00 	movzbl 0x204(%rax),%edx
  800420b1c0:	83 e2 07             	and    $0x7,%edx
  800420b1c3:	88 90 04 02 00 00    	mov    %dl,0x204(%rax)
  800420b1c9:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b1d0:	00 00 00 
  800420b1d3:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420b1da:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b1dd:	83 ca 0e             	or     $0xe,%edx
  800420b1e0:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420b1e6:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b1ed:	00 00 00 
  800420b1f0:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420b1f7:	83 e2 ef             	and    $0xffffffef,%edx
  800420b1fa:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420b200:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b207:	00 00 00 
  800420b20a:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420b211:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b214:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420b21a:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b221:	00 00 00 
  800420b224:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420b22b:	83 ca 80             	or     $0xffffff80,%edx
  800420b22e:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420b234:	48 b8 6c d8 20 04 80 	movabs $0x800420d86c,%rax
  800420b23b:	00 00 00 
  800420b23e:	48 c1 e8 10          	shr    $0x10,%rax
  800420b242:	89 c2                	mov    %eax,%edx
  800420b244:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b24b:	00 00 00 
  800420b24e:	66 89 90 06 02 00 00 	mov    %dx,0x206(%rax)
  800420b255:	48 b8 6c d8 20 04 80 	movabs $0x800420d86c,%rax
  800420b25c:	00 00 00 
  800420b25f:	48 c1 e8 20          	shr    $0x20,%rax
  800420b263:	89 c2                	mov    %eax,%edx
  800420b265:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b26c:	00 00 00 
  800420b26f:	89 90 08 02 00 00    	mov    %edx,0x208(%rax)
  800420b275:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b27c:	00 00 00 
  800420b27f:	c7 80 0c 02 00 00 00 	movl   $0x0,0x20c(%rax)
  800420b286:	00 00 00 
  800420b289:	48 b8 76 d8 20 04 80 	movabs $0x800420d876,%rax
  800420b290:	00 00 00 
  800420b293:	89 c2                	mov    %eax,%edx
  800420b295:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b29c:	00 00 00 
  800420b29f:	66 89 90 10 02 00 00 	mov    %dx,0x210(%rax)
  800420b2a6:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b2ad:	00 00 00 
  800420b2b0:	66 c7 80 12 02 00 00 	movw   $0x8,0x212(%rax)
  800420b2b7:	08 00 
  800420b2b9:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b2c0:	00 00 00 
  800420b2c3:	0f b6 90 14 02 00 00 	movzbl 0x214(%rax),%edx
  800420b2ca:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b2cd:	88 90 14 02 00 00    	mov    %dl,0x214(%rax)
  800420b2d3:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b2da:	00 00 00 
  800420b2dd:	0f b6 90 14 02 00 00 	movzbl 0x214(%rax),%edx
  800420b2e4:	83 e2 07             	and    $0x7,%edx
  800420b2e7:	88 90 14 02 00 00    	mov    %dl,0x214(%rax)
  800420b2ed:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b2f4:	00 00 00 
  800420b2f7:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420b2fe:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b301:	83 ca 0e             	or     $0xe,%edx
  800420b304:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420b30a:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b311:	00 00 00 
  800420b314:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420b31b:	83 e2 ef             	and    $0xffffffef,%edx
  800420b31e:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420b324:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b32b:	00 00 00 
  800420b32e:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420b335:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b338:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420b33e:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b345:	00 00 00 
  800420b348:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420b34f:	83 ca 80             	or     $0xffffff80,%edx
  800420b352:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420b358:	48 b8 76 d8 20 04 80 	movabs $0x800420d876,%rax
  800420b35f:	00 00 00 
  800420b362:	48 c1 e8 10          	shr    $0x10,%rax
  800420b366:	89 c2                	mov    %eax,%edx
  800420b368:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b36f:	00 00 00 
  800420b372:	66 89 90 16 02 00 00 	mov    %dx,0x216(%rax)
  800420b379:	48 b8 76 d8 20 04 80 	movabs $0x800420d876,%rax
  800420b380:	00 00 00 
  800420b383:	48 c1 e8 20          	shr    $0x20,%rax
  800420b387:	89 c2                	mov    %eax,%edx
  800420b389:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b390:	00 00 00 
  800420b393:	89 90 18 02 00 00    	mov    %edx,0x218(%rax)
  800420b399:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b3a0:	00 00 00 
  800420b3a3:	c7 80 1c 02 00 00 00 	movl   $0x0,0x21c(%rax)
  800420b3aa:	00 00 00 
  800420b3ad:	48 b8 80 d8 20 04 80 	movabs $0x800420d880,%rax
  800420b3b4:	00 00 00 
  800420b3b7:	89 c2                	mov    %eax,%edx
  800420b3b9:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b3c0:	00 00 00 
  800420b3c3:	66 89 90 20 02 00 00 	mov    %dx,0x220(%rax)
  800420b3ca:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b3d1:	00 00 00 
  800420b3d4:	66 c7 80 22 02 00 00 	movw   $0x8,0x222(%rax)
  800420b3db:	08 00 
  800420b3dd:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b3e4:	00 00 00 
  800420b3e7:	0f b6 90 24 02 00 00 	movzbl 0x224(%rax),%edx
  800420b3ee:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b3f1:	88 90 24 02 00 00    	mov    %dl,0x224(%rax)
  800420b3f7:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b3fe:	00 00 00 
  800420b401:	0f b6 90 24 02 00 00 	movzbl 0x224(%rax),%edx
  800420b408:	83 e2 07             	and    $0x7,%edx
  800420b40b:	88 90 24 02 00 00    	mov    %dl,0x224(%rax)
  800420b411:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b418:	00 00 00 
  800420b41b:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420b422:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b425:	83 ca 0e             	or     $0xe,%edx
  800420b428:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420b42e:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b435:	00 00 00 
  800420b438:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420b43f:	83 e2 ef             	and    $0xffffffef,%edx
  800420b442:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420b448:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b44f:	00 00 00 
  800420b452:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420b459:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b45c:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420b462:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b469:	00 00 00 
  800420b46c:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420b473:	83 ca 80             	or     $0xffffff80,%edx
  800420b476:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420b47c:	48 b8 80 d8 20 04 80 	movabs $0x800420d880,%rax
  800420b483:	00 00 00 
  800420b486:	48 c1 e8 10          	shr    $0x10,%rax
  800420b48a:	89 c2                	mov    %eax,%edx
  800420b48c:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b493:	00 00 00 
  800420b496:	66 89 90 26 02 00 00 	mov    %dx,0x226(%rax)
  800420b49d:	48 b8 80 d8 20 04 80 	movabs $0x800420d880,%rax
  800420b4a4:	00 00 00 
  800420b4a7:	48 c1 e8 20          	shr    $0x20,%rax
  800420b4ab:	89 c2                	mov    %eax,%edx
  800420b4ad:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b4b4:	00 00 00 
  800420b4b7:	89 90 28 02 00 00    	mov    %edx,0x228(%rax)
  800420b4bd:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b4c4:	00 00 00 
  800420b4c7:	c7 80 2c 02 00 00 00 	movl   $0x0,0x22c(%rax)
  800420b4ce:	00 00 00 
  800420b4d1:	48 b8 8a d8 20 04 80 	movabs $0x800420d88a,%rax
  800420b4d8:	00 00 00 
  800420b4db:	89 c2                	mov    %eax,%edx
  800420b4dd:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b4e4:	00 00 00 
  800420b4e7:	66 89 90 30 02 00 00 	mov    %dx,0x230(%rax)
  800420b4ee:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b4f5:	00 00 00 
  800420b4f8:	66 c7 80 32 02 00 00 	movw   $0x8,0x232(%rax)
  800420b4ff:	08 00 
  800420b501:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b508:	00 00 00 
  800420b50b:	0f b6 90 34 02 00 00 	movzbl 0x234(%rax),%edx
  800420b512:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b515:	88 90 34 02 00 00    	mov    %dl,0x234(%rax)
  800420b51b:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b522:	00 00 00 
  800420b525:	0f b6 90 34 02 00 00 	movzbl 0x234(%rax),%edx
  800420b52c:	83 e2 07             	and    $0x7,%edx
  800420b52f:	88 90 34 02 00 00    	mov    %dl,0x234(%rax)
  800420b535:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b53c:	00 00 00 
  800420b53f:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420b546:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b549:	83 ca 0e             	or     $0xe,%edx
  800420b54c:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420b552:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b559:	00 00 00 
  800420b55c:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420b563:	83 e2 ef             	and    $0xffffffef,%edx
  800420b566:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420b56c:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b573:	00 00 00 
  800420b576:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420b57d:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b580:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420b586:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b58d:	00 00 00 
  800420b590:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420b597:	83 ca 80             	or     $0xffffff80,%edx
  800420b59a:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420b5a0:	48 b8 8a d8 20 04 80 	movabs $0x800420d88a,%rax
  800420b5a7:	00 00 00 
  800420b5aa:	48 c1 e8 10          	shr    $0x10,%rax
  800420b5ae:	89 c2                	mov    %eax,%edx
  800420b5b0:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b5b7:	00 00 00 
  800420b5ba:	66 89 90 36 02 00 00 	mov    %dx,0x236(%rax)
  800420b5c1:	48 b8 8a d8 20 04 80 	movabs $0x800420d88a,%rax
  800420b5c8:	00 00 00 
  800420b5cb:	48 c1 e8 20          	shr    $0x20,%rax
  800420b5cf:	89 c2                	mov    %eax,%edx
  800420b5d1:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b5d8:	00 00 00 
  800420b5db:	89 90 38 02 00 00    	mov    %edx,0x238(%rax)
  800420b5e1:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b5e8:	00 00 00 
  800420b5eb:	c7 80 3c 02 00 00 00 	movl   $0x0,0x23c(%rax)
  800420b5f2:	00 00 00 
  800420b5f5:	48 b8 94 d8 20 04 80 	movabs $0x800420d894,%rax
  800420b5fc:	00 00 00 
  800420b5ff:	89 c2                	mov    %eax,%edx
  800420b601:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b608:	00 00 00 
  800420b60b:	66 89 90 40 02 00 00 	mov    %dx,0x240(%rax)
  800420b612:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b619:	00 00 00 
  800420b61c:	66 c7 80 42 02 00 00 	movw   $0x8,0x242(%rax)
  800420b623:	08 00 
  800420b625:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b62c:	00 00 00 
  800420b62f:	0f b6 90 44 02 00 00 	movzbl 0x244(%rax),%edx
  800420b636:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b639:	88 90 44 02 00 00    	mov    %dl,0x244(%rax)
  800420b63f:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b646:	00 00 00 
  800420b649:	0f b6 90 44 02 00 00 	movzbl 0x244(%rax),%edx
  800420b650:	83 e2 07             	and    $0x7,%edx
  800420b653:	88 90 44 02 00 00    	mov    %dl,0x244(%rax)
  800420b659:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b660:	00 00 00 
  800420b663:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420b66a:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b66d:	83 ca 0e             	or     $0xe,%edx
  800420b670:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420b676:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b67d:	00 00 00 
  800420b680:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420b687:	83 e2 ef             	and    $0xffffffef,%edx
  800420b68a:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420b690:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b697:	00 00 00 
  800420b69a:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420b6a1:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b6a4:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420b6aa:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b6b1:	00 00 00 
  800420b6b4:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420b6bb:	83 ca 80             	or     $0xffffff80,%edx
  800420b6be:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420b6c4:	48 b8 94 d8 20 04 80 	movabs $0x800420d894,%rax
  800420b6cb:	00 00 00 
  800420b6ce:	48 c1 e8 10          	shr    $0x10,%rax
  800420b6d2:	89 c2                	mov    %eax,%edx
  800420b6d4:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b6db:	00 00 00 
  800420b6de:	66 89 90 46 02 00 00 	mov    %dx,0x246(%rax)
  800420b6e5:	48 b8 94 d8 20 04 80 	movabs $0x800420d894,%rax
  800420b6ec:	00 00 00 
  800420b6ef:	48 c1 e8 20          	shr    $0x20,%rax
  800420b6f3:	89 c2                	mov    %eax,%edx
  800420b6f5:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b6fc:	00 00 00 
  800420b6ff:	89 90 48 02 00 00    	mov    %edx,0x248(%rax)
  800420b705:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b70c:	00 00 00 
  800420b70f:	c7 80 4c 02 00 00 00 	movl   $0x0,0x24c(%rax)
  800420b716:	00 00 00 
  800420b719:	48 b8 9e d8 20 04 80 	movabs $0x800420d89e,%rax
  800420b720:	00 00 00 
  800420b723:	89 c2                	mov    %eax,%edx
  800420b725:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b72c:	00 00 00 
  800420b72f:	66 89 90 50 02 00 00 	mov    %dx,0x250(%rax)
  800420b736:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b73d:	00 00 00 
  800420b740:	66 c7 80 52 02 00 00 	movw   $0x8,0x252(%rax)
  800420b747:	08 00 
  800420b749:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b750:	00 00 00 
  800420b753:	0f b6 90 54 02 00 00 	movzbl 0x254(%rax),%edx
  800420b75a:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b75d:	88 90 54 02 00 00    	mov    %dl,0x254(%rax)
  800420b763:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b76a:	00 00 00 
  800420b76d:	0f b6 90 54 02 00 00 	movzbl 0x254(%rax),%edx
  800420b774:	83 e2 07             	and    $0x7,%edx
  800420b777:	88 90 54 02 00 00    	mov    %dl,0x254(%rax)
  800420b77d:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b784:	00 00 00 
  800420b787:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b78e:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b791:	83 ca 0e             	or     $0xe,%edx
  800420b794:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b79a:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b7a1:	00 00 00 
  800420b7a4:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b7ab:	83 e2 ef             	and    $0xffffffef,%edx
  800420b7ae:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b7b4:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b7bb:	00 00 00 
  800420b7be:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b7c5:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b7c8:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b7ce:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b7d5:	00 00 00 
  800420b7d8:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b7df:	83 ca 80             	or     $0xffffff80,%edx
  800420b7e2:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b7e8:	48 b8 9e d8 20 04 80 	movabs $0x800420d89e,%rax
  800420b7ef:	00 00 00 
  800420b7f2:	48 c1 e8 10          	shr    $0x10,%rax
  800420b7f6:	89 c2                	mov    %eax,%edx
  800420b7f8:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b7ff:	00 00 00 
  800420b802:	66 89 90 56 02 00 00 	mov    %dx,0x256(%rax)
  800420b809:	48 b8 9e d8 20 04 80 	movabs $0x800420d89e,%rax
  800420b810:	00 00 00 
  800420b813:	48 c1 e8 20          	shr    $0x20,%rax
  800420b817:	89 c2                	mov    %eax,%edx
  800420b819:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b820:	00 00 00 
  800420b823:	89 90 58 02 00 00    	mov    %edx,0x258(%rax)
  800420b829:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b830:	00 00 00 
  800420b833:	c7 80 5c 02 00 00 00 	movl   $0x0,0x25c(%rax)
  800420b83a:	00 00 00 
  800420b83d:	48 b8 a8 d8 20 04 80 	movabs $0x800420d8a8,%rax
  800420b844:	00 00 00 
  800420b847:	89 c2                	mov    %eax,%edx
  800420b849:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b850:	00 00 00 
  800420b853:	66 89 90 60 02 00 00 	mov    %dx,0x260(%rax)
  800420b85a:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b861:	00 00 00 
  800420b864:	66 c7 80 62 02 00 00 	movw   $0x8,0x262(%rax)
  800420b86b:	08 00 
  800420b86d:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b874:	00 00 00 
  800420b877:	0f b6 90 64 02 00 00 	movzbl 0x264(%rax),%edx
  800420b87e:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b881:	88 90 64 02 00 00    	mov    %dl,0x264(%rax)
  800420b887:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b88e:	00 00 00 
  800420b891:	0f b6 90 64 02 00 00 	movzbl 0x264(%rax),%edx
  800420b898:	83 e2 07             	and    $0x7,%edx
  800420b89b:	88 90 64 02 00 00    	mov    %dl,0x264(%rax)
  800420b8a1:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b8a8:	00 00 00 
  800420b8ab:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b8b2:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b8b5:	83 ca 0e             	or     $0xe,%edx
  800420b8b8:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b8be:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b8c5:	00 00 00 
  800420b8c8:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b8cf:	83 e2 ef             	and    $0xffffffef,%edx
  800420b8d2:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b8d8:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b8df:	00 00 00 
  800420b8e2:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b8e9:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b8ec:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b8f2:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b8f9:	00 00 00 
  800420b8fc:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b903:	83 ca 80             	or     $0xffffff80,%edx
  800420b906:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b90c:	48 b8 a8 d8 20 04 80 	movabs $0x800420d8a8,%rax
  800420b913:	00 00 00 
  800420b916:	48 c1 e8 10          	shr    $0x10,%rax
  800420b91a:	89 c2                	mov    %eax,%edx
  800420b91c:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b923:	00 00 00 
  800420b926:	66 89 90 66 02 00 00 	mov    %dx,0x266(%rax)
  800420b92d:	48 b8 a8 d8 20 04 80 	movabs $0x800420d8a8,%rax
  800420b934:	00 00 00 
  800420b937:	48 c1 e8 20          	shr    $0x20,%rax
  800420b93b:	89 c2                	mov    %eax,%edx
  800420b93d:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b944:	00 00 00 
  800420b947:	89 90 68 02 00 00    	mov    %edx,0x268(%rax)
  800420b94d:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b954:	00 00 00 
  800420b957:	c7 80 6c 02 00 00 00 	movl   $0x0,0x26c(%rax)
  800420b95e:	00 00 00 
  800420b961:	48 b8 b2 d8 20 04 80 	movabs $0x800420d8b2,%rax
  800420b968:	00 00 00 
  800420b96b:	89 c2                	mov    %eax,%edx
  800420b96d:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b974:	00 00 00 
  800420b977:	66 89 90 70 02 00 00 	mov    %dx,0x270(%rax)
  800420b97e:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b985:	00 00 00 
  800420b988:	66 c7 80 72 02 00 00 	movw   $0x8,0x272(%rax)
  800420b98f:	08 00 
  800420b991:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b998:	00 00 00 
  800420b99b:	0f b6 90 74 02 00 00 	movzbl 0x274(%rax),%edx
  800420b9a2:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b9a5:	88 90 74 02 00 00    	mov    %dl,0x274(%rax)
  800420b9ab:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b9b2:	00 00 00 
  800420b9b5:	0f b6 90 74 02 00 00 	movzbl 0x274(%rax),%edx
  800420b9bc:	83 e2 07             	and    $0x7,%edx
  800420b9bf:	88 90 74 02 00 00    	mov    %dl,0x274(%rax)
  800420b9c5:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b9cc:	00 00 00 
  800420b9cf:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420b9d6:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b9d9:	83 ca 0e             	or     $0xe,%edx
  800420b9dc:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420b9e2:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420b9e9:	00 00 00 
  800420b9ec:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420b9f3:	83 e2 ef             	and    $0xffffffef,%edx
  800420b9f6:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420b9fc:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420ba03:	00 00 00 
  800420ba06:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420ba0d:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ba10:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420ba16:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420ba1d:	00 00 00 
  800420ba20:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420ba27:	83 ca 80             	or     $0xffffff80,%edx
  800420ba2a:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420ba30:	48 b8 b2 d8 20 04 80 	movabs $0x800420d8b2,%rax
  800420ba37:	00 00 00 
  800420ba3a:	48 c1 e8 10          	shr    $0x10,%rax
  800420ba3e:	89 c2                	mov    %eax,%edx
  800420ba40:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420ba47:	00 00 00 
  800420ba4a:	66 89 90 76 02 00 00 	mov    %dx,0x276(%rax)
  800420ba51:	48 b8 b2 d8 20 04 80 	movabs $0x800420d8b2,%rax
  800420ba58:	00 00 00 
  800420ba5b:	48 c1 e8 20          	shr    $0x20,%rax
  800420ba5f:	89 c2                	mov    %eax,%edx
  800420ba61:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420ba68:	00 00 00 
  800420ba6b:	89 90 78 02 00 00    	mov    %edx,0x278(%rax)
  800420ba71:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420ba78:	00 00 00 
  800420ba7b:	c7 80 7c 02 00 00 00 	movl   $0x0,0x27c(%rax)
  800420ba82:	00 00 00 
  800420ba85:	48 b8 bc d8 20 04 80 	movabs $0x800420d8bc,%rax
  800420ba8c:	00 00 00 
  800420ba8f:	89 c2                	mov    %eax,%edx
  800420ba91:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420ba98:	00 00 00 
  800420ba9b:	66 89 90 80 02 00 00 	mov    %dx,0x280(%rax)
  800420baa2:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420baa9:	00 00 00 
  800420baac:	66 c7 80 82 02 00 00 	movw   $0x8,0x282(%rax)
  800420bab3:	08 00 
  800420bab5:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420babc:	00 00 00 
  800420babf:	0f b6 90 84 02 00 00 	movzbl 0x284(%rax),%edx
  800420bac6:	83 e2 f8             	and    $0xfffffff8,%edx
  800420bac9:	88 90 84 02 00 00    	mov    %dl,0x284(%rax)
  800420bacf:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420bad6:	00 00 00 
  800420bad9:	0f b6 90 84 02 00 00 	movzbl 0x284(%rax),%edx
  800420bae0:	83 e2 07             	and    $0x7,%edx
  800420bae3:	88 90 84 02 00 00    	mov    %dl,0x284(%rax)
  800420bae9:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420baf0:	00 00 00 
  800420baf3:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420bafa:	83 e2 f0             	and    $0xfffffff0,%edx
  800420bafd:	83 ca 0e             	or     $0xe,%edx
  800420bb00:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420bb06:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420bb0d:	00 00 00 
  800420bb10:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420bb17:	83 e2 ef             	and    $0xffffffef,%edx
  800420bb1a:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420bb20:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420bb27:	00 00 00 
  800420bb2a:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420bb31:	83 e2 9f             	and    $0xffffff9f,%edx
  800420bb34:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420bb3a:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420bb41:	00 00 00 
  800420bb44:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420bb4b:	83 ca 80             	or     $0xffffff80,%edx
  800420bb4e:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420bb54:	48 b8 bc d8 20 04 80 	movabs $0x800420d8bc,%rax
  800420bb5b:	00 00 00 
  800420bb5e:	48 c1 e8 10          	shr    $0x10,%rax
  800420bb62:	89 c2                	mov    %eax,%edx
  800420bb64:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420bb6b:	00 00 00 
  800420bb6e:	66 89 90 86 02 00 00 	mov    %dx,0x286(%rax)
  800420bb75:	48 b8 bc d8 20 04 80 	movabs $0x800420d8bc,%rax
  800420bb7c:	00 00 00 
  800420bb7f:	48 c1 e8 20          	shr    $0x20,%rax
  800420bb83:	89 c2                	mov    %eax,%edx
  800420bb85:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420bb8c:	00 00 00 
  800420bb8f:	89 90 88 02 00 00    	mov    %edx,0x288(%rax)
  800420bb95:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420bb9c:	00 00 00 
  800420bb9f:	c7 80 8c 02 00 00 00 	movl   $0x0,0x28c(%rax)
  800420bba6:	00 00 00 
  800420bba9:	48 b8 c6 d8 20 04 80 	movabs $0x800420d8c6,%rax
  800420bbb0:	00 00 00 
  800420bbb3:	89 c2                	mov    %eax,%edx
  800420bbb5:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420bbbc:	00 00 00 
  800420bbbf:	66 89 90 90 02 00 00 	mov    %dx,0x290(%rax)
  800420bbc6:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420bbcd:	00 00 00 
  800420bbd0:	66 c7 80 92 02 00 00 	movw   $0x8,0x292(%rax)
  800420bbd7:	08 00 
  800420bbd9:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420bbe0:	00 00 00 
  800420bbe3:	0f b6 90 94 02 00 00 	movzbl 0x294(%rax),%edx
  800420bbea:	83 e2 f8             	and    $0xfffffff8,%edx
  800420bbed:	88 90 94 02 00 00    	mov    %dl,0x294(%rax)
  800420bbf3:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420bbfa:	00 00 00 
  800420bbfd:	0f b6 90 94 02 00 00 	movzbl 0x294(%rax),%edx
  800420bc04:	83 e2 07             	and    $0x7,%edx
  800420bc07:	88 90 94 02 00 00    	mov    %dl,0x294(%rax)
  800420bc0d:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420bc14:	00 00 00 
  800420bc17:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420bc1e:	83 e2 f0             	and    $0xfffffff0,%edx
  800420bc21:	83 ca 0e             	or     $0xe,%edx
  800420bc24:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420bc2a:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420bc31:	00 00 00 
  800420bc34:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420bc3b:	83 e2 ef             	and    $0xffffffef,%edx
  800420bc3e:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420bc44:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420bc4b:	00 00 00 
  800420bc4e:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420bc55:	83 e2 9f             	and    $0xffffff9f,%edx
  800420bc58:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420bc5e:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420bc65:	00 00 00 
  800420bc68:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420bc6f:	83 ca 80             	or     $0xffffff80,%edx
  800420bc72:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420bc78:	48 b8 c6 d8 20 04 80 	movabs $0x800420d8c6,%rax
  800420bc7f:	00 00 00 
  800420bc82:	48 c1 e8 10          	shr    $0x10,%rax
  800420bc86:	89 c2                	mov    %eax,%edx
  800420bc88:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420bc8f:	00 00 00 
  800420bc92:	66 89 90 96 02 00 00 	mov    %dx,0x296(%rax)
  800420bc99:	48 b8 c6 d8 20 04 80 	movabs $0x800420d8c6,%rax
  800420bca0:	00 00 00 
  800420bca3:	48 c1 e8 20          	shr    $0x20,%rax
  800420bca7:	89 c2                	mov    %eax,%edx
  800420bca9:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420bcb0:	00 00 00 
  800420bcb3:	89 90 98 02 00 00    	mov    %edx,0x298(%rax)
  800420bcb9:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420bcc0:	00 00 00 
  800420bcc3:	c7 80 9c 02 00 00 00 	movl   $0x0,0x29c(%rax)
  800420bcca:	00 00 00 
  800420bccd:	48 b8 d0 d8 20 04 80 	movabs $0x800420d8d0,%rax
  800420bcd4:	00 00 00 
  800420bcd7:	89 c2                	mov    %eax,%edx
  800420bcd9:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420bce0:	00 00 00 
  800420bce3:	66 89 90 a0 02 00 00 	mov    %dx,0x2a0(%rax)
  800420bcea:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420bcf1:	00 00 00 
  800420bcf4:	66 c7 80 a2 02 00 00 	movw   $0x8,0x2a2(%rax)
  800420bcfb:	08 00 
  800420bcfd:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420bd04:	00 00 00 
  800420bd07:	0f b6 90 a4 02 00 00 	movzbl 0x2a4(%rax),%edx
  800420bd0e:	83 e2 f8             	and    $0xfffffff8,%edx
  800420bd11:	88 90 a4 02 00 00    	mov    %dl,0x2a4(%rax)
  800420bd17:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420bd1e:	00 00 00 
  800420bd21:	0f b6 90 a4 02 00 00 	movzbl 0x2a4(%rax),%edx
  800420bd28:	83 e2 07             	and    $0x7,%edx
  800420bd2b:	88 90 a4 02 00 00    	mov    %dl,0x2a4(%rax)
  800420bd31:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420bd38:	00 00 00 
  800420bd3b:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420bd42:	83 e2 f0             	and    $0xfffffff0,%edx
  800420bd45:	83 ca 0e             	or     $0xe,%edx
  800420bd48:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420bd4e:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420bd55:	00 00 00 
  800420bd58:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420bd5f:	83 e2 ef             	and    $0xffffffef,%edx
  800420bd62:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420bd68:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420bd6f:	00 00 00 
  800420bd72:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420bd79:	83 e2 9f             	and    $0xffffff9f,%edx
  800420bd7c:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420bd82:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420bd89:	00 00 00 
  800420bd8c:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420bd93:	83 ca 80             	or     $0xffffff80,%edx
  800420bd96:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420bd9c:	48 b8 d0 d8 20 04 80 	movabs $0x800420d8d0,%rax
  800420bda3:	00 00 00 
  800420bda6:	48 c1 e8 10          	shr    $0x10,%rax
  800420bdaa:	89 c2                	mov    %eax,%edx
  800420bdac:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420bdb3:	00 00 00 
  800420bdb6:	66 89 90 a6 02 00 00 	mov    %dx,0x2a6(%rax)
  800420bdbd:	48 b8 d0 d8 20 04 80 	movabs $0x800420d8d0,%rax
  800420bdc4:	00 00 00 
  800420bdc7:	48 c1 e8 20          	shr    $0x20,%rax
  800420bdcb:	89 c2                	mov    %eax,%edx
  800420bdcd:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420bdd4:	00 00 00 
  800420bdd7:	89 90 a8 02 00 00    	mov    %edx,0x2a8(%rax)
  800420bddd:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420bde4:	00 00 00 
  800420bde7:	c7 80 ac 02 00 00 00 	movl   $0x0,0x2ac(%rax)
  800420bdee:	00 00 00 
  800420bdf1:	48 b8 da d8 20 04 80 	movabs $0x800420d8da,%rax
  800420bdf8:	00 00 00 
  800420bdfb:	89 c2                	mov    %eax,%edx
  800420bdfd:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420be04:	00 00 00 
  800420be07:	66 89 90 b0 02 00 00 	mov    %dx,0x2b0(%rax)
  800420be0e:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420be15:	00 00 00 
  800420be18:	66 c7 80 b2 02 00 00 	movw   $0x8,0x2b2(%rax)
  800420be1f:	08 00 
  800420be21:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420be28:	00 00 00 
  800420be2b:	0f b6 90 b4 02 00 00 	movzbl 0x2b4(%rax),%edx
  800420be32:	83 e2 f8             	and    $0xfffffff8,%edx
  800420be35:	88 90 b4 02 00 00    	mov    %dl,0x2b4(%rax)
  800420be3b:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420be42:	00 00 00 
  800420be45:	0f b6 90 b4 02 00 00 	movzbl 0x2b4(%rax),%edx
  800420be4c:	83 e2 07             	and    $0x7,%edx
  800420be4f:	88 90 b4 02 00 00    	mov    %dl,0x2b4(%rax)
  800420be55:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420be5c:	00 00 00 
  800420be5f:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420be66:	83 e2 f0             	and    $0xfffffff0,%edx
  800420be69:	83 ca 0e             	or     $0xe,%edx
  800420be6c:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420be72:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420be79:	00 00 00 
  800420be7c:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420be83:	83 e2 ef             	and    $0xffffffef,%edx
  800420be86:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420be8c:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420be93:	00 00 00 
  800420be96:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420be9d:	83 e2 9f             	and    $0xffffff9f,%edx
  800420bea0:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420bea6:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420bead:	00 00 00 
  800420beb0:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420beb7:	83 ca 80             	or     $0xffffff80,%edx
  800420beba:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420bec0:	48 b8 da d8 20 04 80 	movabs $0x800420d8da,%rax
  800420bec7:	00 00 00 
  800420beca:	48 c1 e8 10          	shr    $0x10,%rax
  800420bece:	89 c2                	mov    %eax,%edx
  800420bed0:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420bed7:	00 00 00 
  800420beda:	66 89 90 b6 02 00 00 	mov    %dx,0x2b6(%rax)
  800420bee1:	48 b8 da d8 20 04 80 	movabs $0x800420d8da,%rax
  800420bee8:	00 00 00 
  800420beeb:	48 c1 e8 20          	shr    $0x20,%rax
  800420beef:	89 c2                	mov    %eax,%edx
  800420bef1:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420bef8:	00 00 00 
  800420befb:	89 90 b8 02 00 00    	mov    %edx,0x2b8(%rax)
  800420bf01:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420bf08:	00 00 00 
  800420bf0b:	c7 80 bc 02 00 00 00 	movl   $0x0,0x2bc(%rax)
  800420bf12:	00 00 00 
  800420bf15:	48 b8 e4 d8 20 04 80 	movabs $0x800420d8e4,%rax
  800420bf1c:	00 00 00 
  800420bf1f:	89 c2                	mov    %eax,%edx
  800420bf21:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420bf28:	00 00 00 
  800420bf2b:	66 89 90 c0 02 00 00 	mov    %dx,0x2c0(%rax)
  800420bf32:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420bf39:	00 00 00 
  800420bf3c:	66 c7 80 c2 02 00 00 	movw   $0x8,0x2c2(%rax)
  800420bf43:	08 00 
  800420bf45:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420bf4c:	00 00 00 
  800420bf4f:	0f b6 90 c4 02 00 00 	movzbl 0x2c4(%rax),%edx
  800420bf56:	83 e2 f8             	and    $0xfffffff8,%edx
  800420bf59:	88 90 c4 02 00 00    	mov    %dl,0x2c4(%rax)
  800420bf5f:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420bf66:	00 00 00 
  800420bf69:	0f b6 90 c4 02 00 00 	movzbl 0x2c4(%rax),%edx
  800420bf70:	83 e2 07             	and    $0x7,%edx
  800420bf73:	88 90 c4 02 00 00    	mov    %dl,0x2c4(%rax)
  800420bf79:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420bf80:	00 00 00 
  800420bf83:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420bf8a:	83 e2 f0             	and    $0xfffffff0,%edx
  800420bf8d:	83 ca 0e             	or     $0xe,%edx
  800420bf90:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420bf96:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420bf9d:	00 00 00 
  800420bfa0:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420bfa7:	83 e2 ef             	and    $0xffffffef,%edx
  800420bfaa:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420bfb0:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420bfb7:	00 00 00 
  800420bfba:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420bfc1:	83 e2 9f             	and    $0xffffff9f,%edx
  800420bfc4:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420bfca:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420bfd1:	00 00 00 
  800420bfd4:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420bfdb:	83 ca 80             	or     $0xffffff80,%edx
  800420bfde:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420bfe4:	48 b8 e4 d8 20 04 80 	movabs $0x800420d8e4,%rax
  800420bfeb:	00 00 00 
  800420bfee:	48 c1 e8 10          	shr    $0x10,%rax
  800420bff2:	89 c2                	mov    %eax,%edx
  800420bff4:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420bffb:	00 00 00 
  800420bffe:	66 89 90 c6 02 00 00 	mov    %dx,0x2c6(%rax)
  800420c005:	48 b8 e4 d8 20 04 80 	movabs $0x800420d8e4,%rax
  800420c00c:	00 00 00 
  800420c00f:	48 c1 e8 20          	shr    $0x20,%rax
  800420c013:	89 c2                	mov    %eax,%edx
  800420c015:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c01c:	00 00 00 
  800420c01f:	89 90 c8 02 00 00    	mov    %edx,0x2c8(%rax)
  800420c025:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c02c:	00 00 00 
  800420c02f:	c7 80 cc 02 00 00 00 	movl   $0x0,0x2cc(%rax)
  800420c036:	00 00 00 
  800420c039:	48 b8 ee d8 20 04 80 	movabs $0x800420d8ee,%rax
  800420c040:	00 00 00 
  800420c043:	89 c2                	mov    %eax,%edx
  800420c045:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c04c:	00 00 00 
  800420c04f:	66 89 90 d0 02 00 00 	mov    %dx,0x2d0(%rax)
  800420c056:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c05d:	00 00 00 
  800420c060:	66 c7 80 d2 02 00 00 	movw   $0x8,0x2d2(%rax)
  800420c067:	08 00 
  800420c069:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c070:	00 00 00 
  800420c073:	0f b6 90 d4 02 00 00 	movzbl 0x2d4(%rax),%edx
  800420c07a:	83 e2 f8             	and    $0xfffffff8,%edx
  800420c07d:	88 90 d4 02 00 00    	mov    %dl,0x2d4(%rax)
  800420c083:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c08a:	00 00 00 
  800420c08d:	0f b6 90 d4 02 00 00 	movzbl 0x2d4(%rax),%edx
  800420c094:	83 e2 07             	and    $0x7,%edx
  800420c097:	88 90 d4 02 00 00    	mov    %dl,0x2d4(%rax)
  800420c09d:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c0a4:	00 00 00 
  800420c0a7:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420c0ae:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c0b1:	83 ca 0e             	or     $0xe,%edx
  800420c0b4:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420c0ba:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c0c1:	00 00 00 
  800420c0c4:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420c0cb:	83 e2 ef             	and    $0xffffffef,%edx
  800420c0ce:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420c0d4:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c0db:	00 00 00 
  800420c0de:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420c0e5:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c0e8:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420c0ee:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c0f5:	00 00 00 
  800420c0f8:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420c0ff:	83 ca 80             	or     $0xffffff80,%edx
  800420c102:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420c108:	48 b8 ee d8 20 04 80 	movabs $0x800420d8ee,%rax
  800420c10f:	00 00 00 
  800420c112:	48 c1 e8 10          	shr    $0x10,%rax
  800420c116:	89 c2                	mov    %eax,%edx
  800420c118:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c11f:	00 00 00 
  800420c122:	66 89 90 d6 02 00 00 	mov    %dx,0x2d6(%rax)
  800420c129:	48 b8 ee d8 20 04 80 	movabs $0x800420d8ee,%rax
  800420c130:	00 00 00 
  800420c133:	48 c1 e8 20          	shr    $0x20,%rax
  800420c137:	89 c2                	mov    %eax,%edx
  800420c139:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c140:	00 00 00 
  800420c143:	89 90 d8 02 00 00    	mov    %edx,0x2d8(%rax)
  800420c149:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c150:	00 00 00 
  800420c153:	c7 80 dc 02 00 00 00 	movl   $0x0,0x2dc(%rax)
  800420c15a:	00 00 00 
  800420c15d:	48 b8 f8 d8 20 04 80 	movabs $0x800420d8f8,%rax
  800420c164:	00 00 00 
  800420c167:	89 c2                	mov    %eax,%edx
  800420c169:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c170:	00 00 00 
  800420c173:	66 89 90 e0 02 00 00 	mov    %dx,0x2e0(%rax)
  800420c17a:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c181:	00 00 00 
  800420c184:	66 c7 80 e2 02 00 00 	movw   $0x8,0x2e2(%rax)
  800420c18b:	08 00 
  800420c18d:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c194:	00 00 00 
  800420c197:	0f b6 90 e4 02 00 00 	movzbl 0x2e4(%rax),%edx
  800420c19e:	83 e2 f8             	and    $0xfffffff8,%edx
  800420c1a1:	88 90 e4 02 00 00    	mov    %dl,0x2e4(%rax)
  800420c1a7:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c1ae:	00 00 00 
  800420c1b1:	0f b6 90 e4 02 00 00 	movzbl 0x2e4(%rax),%edx
  800420c1b8:	83 e2 07             	and    $0x7,%edx
  800420c1bb:	88 90 e4 02 00 00    	mov    %dl,0x2e4(%rax)
  800420c1c1:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c1c8:	00 00 00 
  800420c1cb:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420c1d2:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c1d5:	83 ca 0e             	or     $0xe,%edx
  800420c1d8:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420c1de:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c1e5:	00 00 00 
  800420c1e8:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420c1ef:	83 e2 ef             	and    $0xffffffef,%edx
  800420c1f2:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420c1f8:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c1ff:	00 00 00 
  800420c202:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420c209:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c20c:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420c212:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c219:	00 00 00 
  800420c21c:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420c223:	83 ca 80             	or     $0xffffff80,%edx
  800420c226:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420c22c:	48 b8 f8 d8 20 04 80 	movabs $0x800420d8f8,%rax
  800420c233:	00 00 00 
  800420c236:	48 c1 e8 10          	shr    $0x10,%rax
  800420c23a:	89 c2                	mov    %eax,%edx
  800420c23c:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c243:	00 00 00 
  800420c246:	66 89 90 e6 02 00 00 	mov    %dx,0x2e6(%rax)
  800420c24d:	48 b8 f8 d8 20 04 80 	movabs $0x800420d8f8,%rax
  800420c254:	00 00 00 
  800420c257:	48 c1 e8 20          	shr    $0x20,%rax
  800420c25b:	89 c2                	mov    %eax,%edx
  800420c25d:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c264:	00 00 00 
  800420c267:	89 90 e8 02 00 00    	mov    %edx,0x2e8(%rax)
  800420c26d:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c274:	00 00 00 
  800420c277:	c7 80 ec 02 00 00 00 	movl   $0x0,0x2ec(%rax)
  800420c27e:	00 00 00 
  800420c281:	48 b8 02 d9 20 04 80 	movabs $0x800420d902,%rax
  800420c288:	00 00 00 
  800420c28b:	89 c2                	mov    %eax,%edx
  800420c28d:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c294:	00 00 00 
  800420c297:	66 89 90 f0 02 00 00 	mov    %dx,0x2f0(%rax)
  800420c29e:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c2a5:	00 00 00 
  800420c2a8:	66 c7 80 f2 02 00 00 	movw   $0x8,0x2f2(%rax)
  800420c2af:	08 00 
  800420c2b1:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c2b8:	00 00 00 
  800420c2bb:	0f b6 90 f4 02 00 00 	movzbl 0x2f4(%rax),%edx
  800420c2c2:	83 e2 f8             	and    $0xfffffff8,%edx
  800420c2c5:	88 90 f4 02 00 00    	mov    %dl,0x2f4(%rax)
  800420c2cb:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c2d2:	00 00 00 
  800420c2d5:	0f b6 90 f4 02 00 00 	movzbl 0x2f4(%rax),%edx
  800420c2dc:	83 e2 07             	and    $0x7,%edx
  800420c2df:	88 90 f4 02 00 00    	mov    %dl,0x2f4(%rax)
  800420c2e5:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c2ec:	00 00 00 
  800420c2ef:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420c2f6:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c2f9:	83 ca 0e             	or     $0xe,%edx
  800420c2fc:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420c302:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c309:	00 00 00 
  800420c30c:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420c313:	83 e2 ef             	and    $0xffffffef,%edx
  800420c316:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420c31c:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c323:	00 00 00 
  800420c326:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420c32d:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c330:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420c336:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c33d:	00 00 00 
  800420c340:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420c347:	83 ca 80             	or     $0xffffff80,%edx
  800420c34a:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420c350:	48 b8 02 d9 20 04 80 	movabs $0x800420d902,%rax
  800420c357:	00 00 00 
  800420c35a:	48 c1 e8 10          	shr    $0x10,%rax
  800420c35e:	89 c2                	mov    %eax,%edx
  800420c360:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c367:	00 00 00 
  800420c36a:	66 89 90 f6 02 00 00 	mov    %dx,0x2f6(%rax)
  800420c371:	48 b8 02 d9 20 04 80 	movabs $0x800420d902,%rax
  800420c378:	00 00 00 
  800420c37b:	48 c1 e8 20          	shr    $0x20,%rax
  800420c37f:	89 c2                	mov    %eax,%edx
  800420c381:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c388:	00 00 00 
  800420c38b:	89 90 f8 02 00 00    	mov    %edx,0x2f8(%rax)
  800420c391:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c398:	00 00 00 
  800420c39b:	c7 80 fc 02 00 00 00 	movl   $0x0,0x2fc(%rax)
  800420c3a2:	00 00 00 
  800420c3a5:	48 b8 0c d9 20 04 80 	movabs $0x800420d90c,%rax
  800420c3ac:	00 00 00 
  800420c3af:	89 c2                	mov    %eax,%edx
  800420c3b1:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c3b8:	00 00 00 
  800420c3bb:	66 89 90 00 03 00 00 	mov    %dx,0x300(%rax)
  800420c3c2:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c3c9:	00 00 00 
  800420c3cc:	66 c7 80 02 03 00 00 	movw   $0x8,0x302(%rax)
  800420c3d3:	08 00 
  800420c3d5:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c3dc:	00 00 00 
  800420c3df:	0f b6 90 04 03 00 00 	movzbl 0x304(%rax),%edx
  800420c3e6:	83 e2 f8             	and    $0xfffffff8,%edx
  800420c3e9:	88 90 04 03 00 00    	mov    %dl,0x304(%rax)
  800420c3ef:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c3f6:	00 00 00 
  800420c3f9:	0f b6 90 04 03 00 00 	movzbl 0x304(%rax),%edx
  800420c400:	83 e2 07             	and    $0x7,%edx
  800420c403:	88 90 04 03 00 00    	mov    %dl,0x304(%rax)
  800420c409:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c410:	00 00 00 
  800420c413:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420c41a:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c41d:	83 ca 0e             	or     $0xe,%edx
  800420c420:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420c426:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c42d:	00 00 00 
  800420c430:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420c437:	83 e2 ef             	and    $0xffffffef,%edx
  800420c43a:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420c440:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c447:	00 00 00 
  800420c44a:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420c451:	83 ca 60             	or     $0x60,%edx
  800420c454:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420c45a:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c461:	00 00 00 
  800420c464:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420c46b:	83 ca 80             	or     $0xffffff80,%edx
  800420c46e:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420c474:	48 b8 0c d9 20 04 80 	movabs $0x800420d90c,%rax
  800420c47b:	00 00 00 
  800420c47e:	48 c1 e8 10          	shr    $0x10,%rax
  800420c482:	89 c2                	mov    %eax,%edx
  800420c484:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c48b:	00 00 00 
  800420c48e:	66 89 90 06 03 00 00 	mov    %dx,0x306(%rax)
  800420c495:	48 b8 0c d9 20 04 80 	movabs $0x800420d90c,%rax
  800420c49c:	00 00 00 
  800420c49f:	48 c1 e8 20          	shr    $0x20,%rax
  800420c4a3:	89 c2                	mov    %eax,%edx
  800420c4a5:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c4ac:	00 00 00 
  800420c4af:	89 90 08 03 00 00    	mov    %edx,0x308(%rax)
  800420c4b5:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c4bc:	00 00 00 
  800420c4bf:	c7 80 0c 03 00 00 00 	movl   $0x0,0x30c(%rax)
  800420c4c6:	00 00 00 
  800420c4c9:	48 b8 80 02 4e 04 80 	movabs $0x80044e0280,%rax
  800420c4d0:	00 00 00 
  800420c4d3:	66 c7 00 ff 0f       	movw   $0xfff,(%rax)
  800420c4d8:	48 ba 80 f2 4d 04 80 	movabs $0x80044df280,%rdx
  800420c4df:	00 00 00 
  800420c4e2:	48 b8 80 02 4e 04 80 	movabs $0x80044e0280,%rax
  800420c4e9:	00 00 00 
  800420c4ec:	48 89 50 02          	mov    %rdx,0x2(%rax)
  800420c4f0:	48 b8 fe c4 20 04 80 	movabs $0x800420c4fe,%rax
  800420c4f7:	00 00 00 
  800420c4fa:	ff d0                	callq  *%rax
  800420c4fc:	c9                   	leaveq 
  800420c4fd:	c3                   	retq   

000000800420c4fe <trap_init_percpu>:
  800420c4fe:	55                   	push   %rbp
  800420c4ff:	48 89 e5             	mov    %rsp,%rbp
  800420c502:	53                   	push   %rbx
  800420c503:	48 83 ec 18          	sub    $0x18,%rsp
  800420c507:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420c50e:	00 00 00 
  800420c511:	ff d0                	callq  *%rax
  800420c513:	01 c0                	add    %eax,%eax
  800420c515:	83 c0 05             	add    $0x5,%eax
  800420c518:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420c51b:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420c522:	00 00 00 
  800420c525:	ff d0                	callq  *%rax
  800420c527:	89 c3                	mov    %eax,%ebx
  800420c529:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420c530:	00 00 00 
  800420c533:	ff d0                	callq  *%rax
  800420c535:	89 c2                	mov    %eax,%edx
  800420c537:	89 d0                	mov    %edx,%eax
  800420c539:	01 c0                	add    %eax,%eax
  800420c53b:	01 d0                	add    %edx,%eax
  800420c53d:	c1 e0 0f             	shl    $0xf,%eax
  800420c540:	48 98                	cltq   
  800420c542:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420c549:	00 00 00 
  800420c54c:	48 29 c2             	sub    %rax,%rdx
  800420c54f:	48 89 d0             	mov    %rdx,%rax
  800420c552:	48 89 c2             	mov    %rax,%rdx
  800420c555:	48 b9 20 00 6e 04 80 	movabs $0x80046e0020,%rcx
  800420c55c:	00 00 00 
  800420c55f:	48 63 c3             	movslq %ebx,%rax
  800420c562:	48 c1 e0 03          	shl    $0x3,%rax
  800420c566:	48 89 c6             	mov    %rax,%rsi
  800420c569:	48 c1 e6 04          	shl    $0x4,%rsi
  800420c56d:	48 01 f0             	add    %rsi,%rax
  800420c570:	48 01 c8             	add    %rcx,%rax
  800420c573:	48 83 c0 10          	add    $0x10,%rax
  800420c577:	48 89 50 04          	mov    %rdx,0x4(%rax)
  800420c57b:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c582:	00 00 00 
  800420c585:	48 8b 00             	mov    (%rax),%rax
  800420c588:	48 c1 f8 10          	sar    $0x10,%rax
  800420c58c:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c590:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420c597:	00 00 00 
  800420c59a:	ff d0                	callq  *%rax
  800420c59c:	c1 e0 04             	shl    $0x4,%eax
  800420c59f:	48 98                	cltq   
  800420c5a1:	48 01 d8             	add    %rbx,%rax
  800420c5a4:	66 c7 00 68 00       	movw   $0x68,(%rax)
  800420c5a9:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c5b0:	00 00 00 
  800420c5b3:	48 8b 00             	mov    (%rax),%rax
  800420c5b6:	48 c1 f8 10          	sar    $0x10,%rax
  800420c5ba:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c5be:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420c5c5:	00 00 00 
  800420c5c8:	ff d0                	callq  *%rax
  800420c5ca:	c1 e0 04             	shl    $0x4,%eax
  800420c5cd:	48 98                	cltq   
  800420c5cf:	48 01 d8             	add    %rbx,%rax
  800420c5d2:	48 89 c3             	mov    %rax,%rbx
  800420c5d5:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420c5dc:	00 00 00 
  800420c5df:	ff d0                	callq  *%rax
  800420c5e1:	48 98                	cltq   
  800420c5e3:	48 c1 e0 03          	shl    $0x3,%rax
  800420c5e7:	48 89 c2             	mov    %rax,%rdx
  800420c5ea:	48 c1 e2 04          	shl    $0x4,%rdx
  800420c5ee:	48 01 d0             	add    %rdx,%rax
  800420c5f1:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420c5f5:	48 b8 20 00 6e 04 80 	movabs $0x80046e0020,%rax
  800420c5fc:	00 00 00 
  800420c5ff:	48 01 d0             	add    %rdx,%rax
  800420c602:	66 89 43 02          	mov    %ax,0x2(%rbx)
  800420c606:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c60d:	00 00 00 
  800420c610:	48 8b 00             	mov    (%rax),%rax
  800420c613:	48 c1 f8 10          	sar    $0x10,%rax
  800420c617:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c61b:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420c622:	00 00 00 
  800420c625:	ff d0                	callq  *%rax
  800420c627:	c1 e0 04             	shl    $0x4,%eax
  800420c62a:	48 98                	cltq   
  800420c62c:	48 01 d8             	add    %rbx,%rax
  800420c62f:	48 89 c3             	mov    %rax,%rbx
  800420c632:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420c639:	00 00 00 
  800420c63c:	ff d0                	callq  *%rax
  800420c63e:	48 98                	cltq   
  800420c640:	48 c1 e0 03          	shl    $0x3,%rax
  800420c644:	48 89 c2             	mov    %rax,%rdx
  800420c647:	48 c1 e2 04          	shl    $0x4,%rdx
  800420c64b:	48 01 d0             	add    %rdx,%rax
  800420c64e:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420c652:	48 b8 20 00 6e 04 80 	movabs $0x80046e0020,%rax
  800420c659:	00 00 00 
  800420c65c:	48 01 d0             	add    %rdx,%rax
  800420c65f:	48 c1 e8 10          	shr    $0x10,%rax
  800420c663:	88 43 04             	mov    %al,0x4(%rbx)
  800420c666:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c66d:	00 00 00 
  800420c670:	48 8b 00             	mov    (%rax),%rax
  800420c673:	48 c1 f8 10          	sar    $0x10,%rax
  800420c677:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c67b:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420c682:	00 00 00 
  800420c685:	ff d0                	callq  *%rax
  800420c687:	c1 e0 04             	shl    $0x4,%eax
  800420c68a:	48 98                	cltq   
  800420c68c:	48 01 d8             	add    %rbx,%rax
  800420c68f:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420c693:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c696:	83 ca 09             	or     $0x9,%edx
  800420c699:	88 50 05             	mov    %dl,0x5(%rax)
  800420c69c:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c6a3:	00 00 00 
  800420c6a6:	48 8b 00             	mov    (%rax),%rax
  800420c6a9:	48 c1 f8 10          	sar    $0x10,%rax
  800420c6ad:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c6b1:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420c6b8:	00 00 00 
  800420c6bb:	ff d0                	callq  *%rax
  800420c6bd:	c1 e0 04             	shl    $0x4,%eax
  800420c6c0:	48 98                	cltq   
  800420c6c2:	48 01 d8             	add    %rbx,%rax
  800420c6c5:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420c6c9:	83 e2 ef             	and    $0xffffffef,%edx
  800420c6cc:	88 50 05             	mov    %dl,0x5(%rax)
  800420c6cf:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c6d6:	00 00 00 
  800420c6d9:	48 8b 00             	mov    (%rax),%rax
  800420c6dc:	48 c1 f8 10          	sar    $0x10,%rax
  800420c6e0:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c6e4:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420c6eb:	00 00 00 
  800420c6ee:	ff d0                	callq  *%rax
  800420c6f0:	c1 e0 04             	shl    $0x4,%eax
  800420c6f3:	48 98                	cltq   
  800420c6f5:	48 01 d8             	add    %rbx,%rax
  800420c6f8:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420c6fc:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c6ff:	88 50 05             	mov    %dl,0x5(%rax)
  800420c702:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c709:	00 00 00 
  800420c70c:	48 8b 00             	mov    (%rax),%rax
  800420c70f:	48 c1 f8 10          	sar    $0x10,%rax
  800420c713:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c717:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420c71e:	00 00 00 
  800420c721:	ff d0                	callq  *%rax
  800420c723:	c1 e0 04             	shl    $0x4,%eax
  800420c726:	48 98                	cltq   
  800420c728:	48 01 d8             	add    %rbx,%rax
  800420c72b:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420c72f:	83 ca 80             	or     $0xffffff80,%edx
  800420c732:	88 50 05             	mov    %dl,0x5(%rax)
  800420c735:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c73c:	00 00 00 
  800420c73f:	48 8b 00             	mov    (%rax),%rax
  800420c742:	48 c1 f8 10          	sar    $0x10,%rax
  800420c746:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c74a:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420c751:	00 00 00 
  800420c754:	ff d0                	callq  *%rax
  800420c756:	c1 e0 04             	shl    $0x4,%eax
  800420c759:	48 98                	cltq   
  800420c75b:	48 01 d8             	add    %rbx,%rax
  800420c75e:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c762:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c765:	88 50 06             	mov    %dl,0x6(%rax)
  800420c768:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c76f:	00 00 00 
  800420c772:	48 8b 00             	mov    (%rax),%rax
  800420c775:	48 c1 f8 10          	sar    $0x10,%rax
  800420c779:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c77d:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420c784:	00 00 00 
  800420c787:	ff d0                	callq  *%rax
  800420c789:	c1 e0 04             	shl    $0x4,%eax
  800420c78c:	48 98                	cltq   
  800420c78e:	48 01 d8             	add    %rbx,%rax
  800420c791:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c795:	83 e2 ef             	and    $0xffffffef,%edx
  800420c798:	88 50 06             	mov    %dl,0x6(%rax)
  800420c79b:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c7a2:	00 00 00 
  800420c7a5:	48 8b 00             	mov    (%rax),%rax
  800420c7a8:	48 c1 f8 10          	sar    $0x10,%rax
  800420c7ac:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c7b0:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420c7b7:	00 00 00 
  800420c7ba:	ff d0                	callq  *%rax
  800420c7bc:	c1 e0 04             	shl    $0x4,%eax
  800420c7bf:	48 98                	cltq   
  800420c7c1:	48 01 d8             	add    %rbx,%rax
  800420c7c4:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c7c8:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c7cb:	88 50 06             	mov    %dl,0x6(%rax)
  800420c7ce:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c7d5:	00 00 00 
  800420c7d8:	48 8b 00             	mov    (%rax),%rax
  800420c7db:	48 c1 f8 10          	sar    $0x10,%rax
  800420c7df:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c7e3:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420c7ea:	00 00 00 
  800420c7ed:	ff d0                	callq  *%rax
  800420c7ef:	c1 e0 04             	shl    $0x4,%eax
  800420c7f2:	48 98                	cltq   
  800420c7f4:	48 01 d8             	add    %rbx,%rax
  800420c7f7:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c7fb:	83 e2 7f             	and    $0x7f,%edx
  800420c7fe:	88 50 06             	mov    %dl,0x6(%rax)
  800420c801:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c808:	00 00 00 
  800420c80b:	48 8b 00             	mov    (%rax),%rax
  800420c80e:	48 c1 f8 10          	sar    $0x10,%rax
  800420c812:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c816:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420c81d:	00 00 00 
  800420c820:	ff d0                	callq  *%rax
  800420c822:	c1 e0 04             	shl    $0x4,%eax
  800420c825:	48 98                	cltq   
  800420c827:	48 01 d8             	add    %rbx,%rax
  800420c82a:	48 89 c3             	mov    %rax,%rbx
  800420c82d:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420c834:	00 00 00 
  800420c837:	ff d0                	callq  *%rax
  800420c839:	48 98                	cltq   
  800420c83b:	48 c1 e0 03          	shl    $0x3,%rax
  800420c83f:	48 89 c2             	mov    %rax,%rdx
  800420c842:	48 c1 e2 04          	shl    $0x4,%rdx
  800420c846:	48 01 d0             	add    %rdx,%rax
  800420c849:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420c84d:	48 b8 20 00 6e 04 80 	movabs $0x80046e0020,%rax
  800420c854:	00 00 00 
  800420c857:	48 01 d0             	add    %rdx,%rax
  800420c85a:	48 c1 e8 18          	shr    $0x18,%rax
  800420c85e:	88 43 07             	mov    %al,0x7(%rbx)
  800420c861:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c868:	00 00 00 
  800420c86b:	48 8b 00             	mov    (%rax),%rax
  800420c86e:	48 c1 f8 10          	sar    $0x10,%rax
  800420c872:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c876:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420c87d:	00 00 00 
  800420c880:	ff d0                	callq  *%rax
  800420c882:	c1 e0 04             	shl    $0x4,%eax
  800420c885:	48 98                	cltq   
  800420c887:	48 01 d8             	add    %rbx,%rax
  800420c88a:	48 89 c3             	mov    %rax,%rbx
  800420c88d:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420c894:	00 00 00 
  800420c897:	ff d0                	callq  *%rax
  800420c899:	48 98                	cltq   
  800420c89b:	48 c1 e0 03          	shl    $0x3,%rax
  800420c89f:	48 89 c2             	mov    %rax,%rdx
  800420c8a2:	48 c1 e2 04          	shl    $0x4,%rdx
  800420c8a6:	48 01 d0             	add    %rdx,%rax
  800420c8a9:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420c8ad:	48 b8 20 00 6e 04 80 	movabs $0x80046e0020,%rax
  800420c8b4:	00 00 00 
  800420c8b7:	48 01 d0             	add    %rdx,%rax
  800420c8ba:	48 c1 e8 20          	shr    $0x20,%rax
  800420c8be:	89 43 08             	mov    %eax,0x8(%rbx)
  800420c8c1:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c8c8:	00 00 00 
  800420c8cb:	48 8b 00             	mov    (%rax),%rax
  800420c8ce:	48 c1 f8 10          	sar    $0x10,%rax
  800420c8d2:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c8d6:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420c8dd:	00 00 00 
  800420c8e0:	ff d0                	callq  *%rax
  800420c8e2:	c1 e0 04             	shl    $0x4,%eax
  800420c8e5:	48 98                	cltq   
  800420c8e7:	48 01 d8             	add    %rbx,%rax
  800420c8ea:	c6 40 0c 00          	movb   $0x0,0xc(%rax)
  800420c8ee:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c8f5:	00 00 00 
  800420c8f8:	48 8b 00             	mov    (%rax),%rax
  800420c8fb:	48 c1 f8 10          	sar    $0x10,%rax
  800420c8ff:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c903:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420c90a:	00 00 00 
  800420c90d:	ff d0                	callq  *%rax
  800420c90f:	c1 e0 04             	shl    $0x4,%eax
  800420c912:	48 98                	cltq   
  800420c914:	48 01 d8             	add    %rbx,%rax
  800420c917:	c6 40 0d 00          	movb   $0x0,0xd(%rax)
  800420c91b:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c922:	00 00 00 
  800420c925:	48 8b 00             	mov    (%rax),%rax
  800420c928:	48 c1 f8 10          	sar    $0x10,%rax
  800420c92c:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c930:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420c937:	00 00 00 
  800420c93a:	ff d0                	callq  *%rax
  800420c93c:	c1 e0 04             	shl    $0x4,%eax
  800420c93f:	48 98                	cltq   
  800420c941:	48 01 d8             	add    %rbx,%rax
  800420c944:	66 c7 40 0e 00 00    	movw   $0x0,0xe(%rax)
  800420c94a:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420c94d:	c1 e0 03             	shl    $0x3,%eax
  800420c950:	0f b7 c0             	movzwl %ax,%eax
  800420c953:	66 89 45 ea          	mov    %ax,-0x16(%rbp)
	__asm __volatile("lgdt (%0)" : : "r" (p));
}
static __inline void
ltr(uint16_t sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
  800420c957:	0f b7 45 ea          	movzwl -0x16(%rbp),%eax
  800420c95b:	0f 00 d8             	ltr    %ax
  800420c95e:	48 b8 80 02 4e 04 80 	movabs $0x80044e0280,%rax
  800420c965:	00 00 00 
  800420c968:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
}  

static __inline void
lidt(void *p)
{
	__asm __volatile("lidt (%0)" : : "r" (p));
  800420c96c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420c970:	0f 01 18             	lidt   (%rax)
  800420c973:	48 83 c4 18          	add    $0x18,%rsp
  800420c977:	5b                   	pop    %rbx
  800420c978:	5d                   	pop    %rbp
  800420c979:	c3                   	retq   

000000800420c97a <print_trapframe>:
  800420c97a:	55                   	push   %rbp
  800420c97b:	48 89 e5             	mov    %rsp,%rbp
  800420c97e:	48 83 ec 20          	sub    $0x20,%rsp
  800420c982:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420c986:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420c98d:	00 00 00 
  800420c990:	ff d0                	callq  *%rax
  800420c992:	89 c2                	mov    %eax,%edx
  800420c994:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c998:	48 89 c6             	mov    %rax,%rsi
  800420c99b:	48 bf 8e f8 21 04 80 	movabs $0x800421f88e,%rdi
  800420c9a2:	00 00 00 
  800420c9a5:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c9aa:	48 b9 83 9c 20 04 80 	movabs $0x8004209c83,%rcx
  800420c9b1:	00 00 00 
  800420c9b4:	ff d1                	callq  *%rcx
  800420c9b6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c9ba:	48 89 c7             	mov    %rax,%rdi
  800420c9bd:	48 b8 8b cc 20 04 80 	movabs $0x800420cc8b,%rax
  800420c9c4:	00 00 00 
  800420c9c7:	ff d0                	callq  *%rax
  800420c9c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c9cd:	0f b7 40 78          	movzwl 0x78(%rax),%eax
  800420c9d1:	0f b7 c0             	movzwl %ax,%eax
  800420c9d4:	89 c6                	mov    %eax,%esi
  800420c9d6:	48 bf ac f8 21 04 80 	movabs $0x800421f8ac,%rdi
  800420c9dd:	00 00 00 
  800420c9e0:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c9e5:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420c9ec:	00 00 00 
  800420c9ef:	ff d2                	callq  *%rdx
  800420c9f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c9f5:	0f b7 80 80 00 00 00 	movzwl 0x80(%rax),%eax
  800420c9fc:	0f b7 c0             	movzwl %ax,%eax
  800420c9ff:	89 c6                	mov    %eax,%esi
  800420ca01:	48 bf bf f8 21 04 80 	movabs $0x800421f8bf,%rdi
  800420ca08:	00 00 00 
  800420ca0b:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ca10:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420ca17:	00 00 00 
  800420ca1a:	ff d2                	callq  *%rdx
  800420ca1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ca20:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420ca27:	89 c7                	mov    %eax,%edi
  800420ca29:	48 b8 9c 9d 20 04 80 	movabs $0x8004209d9c,%rax
  800420ca30:	00 00 00 
  800420ca33:	ff d0                	callq  *%rax
  800420ca35:	48 89 c2             	mov    %rax,%rdx
  800420ca38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ca3c:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420ca43:	48 89 c6             	mov    %rax,%rsi
  800420ca46:	48 bf d2 f8 21 04 80 	movabs $0x800421f8d2,%rdi
  800420ca4d:	00 00 00 
  800420ca50:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ca55:	48 b9 83 9c 20 04 80 	movabs $0x8004209c83,%rcx
  800420ca5c:	00 00 00 
  800420ca5f:	ff d1                	callq  *%rcx
  800420ca61:	48 b8 90 02 4e 04 80 	movabs $0x80044e0290,%rax
  800420ca68:	00 00 00 
  800420ca6b:	48 8b 00             	mov    (%rax),%rax
  800420ca6e:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  800420ca72:	75 3a                	jne    800420caae <print_trapframe+0x134>
  800420ca74:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ca78:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420ca7f:	48 83 f8 0e          	cmp    $0xe,%rax
  800420ca83:	75 29                	jne    800420caae <print_trapframe+0x134>

static __inline uint64_t
rcr2(void)
{
	uint64_t val;
	__asm __volatile("movq %%cr2,%0" : "=r" (val));
  800420ca85:	0f 20 d0             	mov    %cr2,%rax
  800420ca88:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	return val;
  800420ca8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ca90:	48 89 c6             	mov    %rax,%rsi
  800420ca93:	48 bf e4 f8 21 04 80 	movabs $0x800421f8e4,%rdi
  800420ca9a:	00 00 00 
  800420ca9d:	b8 00 00 00 00       	mov    $0x0,%eax
  800420caa2:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420caa9:	00 00 00 
  800420caac:	ff d2                	callq  *%rdx
  800420caae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cab2:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420cab9:	48 89 c6             	mov    %rax,%rsi
  800420cabc:	48 bf f3 f8 21 04 80 	movabs $0x800421f8f3,%rdi
  800420cac3:	00 00 00 
  800420cac6:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cacb:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420cad2:	00 00 00 
  800420cad5:	ff d2                	callq  *%rdx
  800420cad7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cadb:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420cae2:	48 83 f8 0e          	cmp    $0xe,%rax
  800420cae6:	0f 85 9c 00 00 00    	jne    800420cb88 <print_trapframe+0x20e>
  800420caec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420caf0:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420caf7:	83 e0 01             	and    $0x1,%eax
  800420cafa:	48 85 c0             	test   %rax,%rax
  800420cafd:	74 0c                	je     800420cb0b <print_trapframe+0x191>
  800420caff:	48 b9 01 f9 21 04 80 	movabs $0x800421f901,%rcx
  800420cb06:	00 00 00 
  800420cb09:	eb 0a                	jmp    800420cb15 <print_trapframe+0x19b>
  800420cb0b:	48 b9 0c f9 21 04 80 	movabs $0x800421f90c,%rcx
  800420cb12:	00 00 00 
  800420cb15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cb19:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420cb20:	83 e0 02             	and    $0x2,%eax
  800420cb23:	48 85 c0             	test   %rax,%rax
  800420cb26:	74 0c                	je     800420cb34 <print_trapframe+0x1ba>
  800420cb28:	48 ba 18 f9 21 04 80 	movabs $0x800421f918,%rdx
  800420cb2f:	00 00 00 
  800420cb32:	eb 0a                	jmp    800420cb3e <print_trapframe+0x1c4>
  800420cb34:	48 ba 1e f9 21 04 80 	movabs $0x800421f91e,%rdx
  800420cb3b:	00 00 00 
  800420cb3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cb42:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420cb49:	83 e0 04             	and    $0x4,%eax
  800420cb4c:	48 85 c0             	test   %rax,%rax
  800420cb4f:	74 0c                	je     800420cb5d <print_trapframe+0x1e3>
  800420cb51:	48 b8 23 f9 21 04 80 	movabs $0x800421f923,%rax
  800420cb58:	00 00 00 
  800420cb5b:	eb 0a                	jmp    800420cb67 <print_trapframe+0x1ed>
  800420cb5d:	48 b8 28 f9 21 04 80 	movabs $0x800421f928,%rax
  800420cb64:	00 00 00 
  800420cb67:	48 89 c6             	mov    %rax,%rsi
  800420cb6a:	48 bf 2f f9 21 04 80 	movabs $0x800421f92f,%rdi
  800420cb71:	00 00 00 
  800420cb74:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cb79:	49 b8 83 9c 20 04 80 	movabs $0x8004209c83,%r8
  800420cb80:	00 00 00 
  800420cb83:	41 ff d0             	callq  *%r8
  800420cb86:	eb 1b                	jmp    800420cba3 <print_trapframe+0x229>
  800420cb88:	48 bf 3e f9 21 04 80 	movabs $0x800421f93e,%rdi
  800420cb8f:	00 00 00 
  800420cb92:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cb97:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420cb9e:	00 00 00 
  800420cba1:	ff d2                	callq  *%rdx
  800420cba3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cba7:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
  800420cbae:	48 89 c6             	mov    %rax,%rsi
  800420cbb1:	48 bf 40 f9 21 04 80 	movabs $0x800421f940,%rdi
  800420cbb8:	00 00 00 
  800420cbbb:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cbc0:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420cbc7:	00 00 00 
  800420cbca:	ff d2                	callq  *%rdx
  800420cbcc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cbd0:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420cbd7:	0f b7 c0             	movzwl %ax,%eax
  800420cbda:	89 c6                	mov    %eax,%esi
  800420cbdc:	48 bf 4f f9 21 04 80 	movabs $0x800421f94f,%rdi
  800420cbe3:	00 00 00 
  800420cbe6:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cbeb:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420cbf2:	00 00 00 
  800420cbf5:	ff d2                	callq  *%rdx
  800420cbf7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cbfb:	48 8b 80 a8 00 00 00 	mov    0xa8(%rax),%rax
  800420cc02:	48 89 c6             	mov    %rax,%rsi
  800420cc05:	48 bf 62 f9 21 04 80 	movabs $0x800421f962,%rdi
  800420cc0c:	00 00 00 
  800420cc0f:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cc14:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420cc1b:	00 00 00 
  800420cc1e:	ff d2                	callq  *%rdx
  800420cc20:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cc24:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420cc2b:	0f b7 c0             	movzwl %ax,%eax
  800420cc2e:	83 e0 03             	and    $0x3,%eax
  800420cc31:	85 c0                	test   %eax,%eax
  800420cc33:	74 54                	je     800420cc89 <print_trapframe+0x30f>
  800420cc35:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cc39:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  800420cc40:	48 89 c6             	mov    %rax,%rsi
  800420cc43:	48 bf 71 f9 21 04 80 	movabs $0x800421f971,%rdi
  800420cc4a:	00 00 00 
  800420cc4d:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cc52:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420cc59:	00 00 00 
  800420cc5c:	ff d2                	callq  *%rdx
  800420cc5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cc62:	0f b7 80 b8 00 00 00 	movzwl 0xb8(%rax),%eax
  800420cc69:	0f b7 c0             	movzwl %ax,%eax
  800420cc6c:	89 c6                	mov    %eax,%esi
  800420cc6e:	48 bf 80 f9 21 04 80 	movabs $0x800421f980,%rdi
  800420cc75:	00 00 00 
  800420cc78:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cc7d:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420cc84:	00 00 00 
  800420cc87:	ff d2                	callq  *%rdx
  800420cc89:	c9                   	leaveq 
  800420cc8a:	c3                   	retq   

000000800420cc8b <print_regs>:
  800420cc8b:	55                   	push   %rbp
  800420cc8c:	48 89 e5             	mov    %rsp,%rbp
  800420cc8f:	48 83 ec 10          	sub    $0x10,%rsp
  800420cc93:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420cc97:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cc9b:	48 8b 00             	mov    (%rax),%rax
  800420cc9e:	48 89 c6             	mov    %rax,%rsi
  800420cca1:	48 bf 93 f9 21 04 80 	movabs $0x800421f993,%rdi
  800420cca8:	00 00 00 
  800420ccab:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ccb0:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420ccb7:	00 00 00 
  800420ccba:	ff d2                	callq  *%rdx
  800420ccbc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ccc0:	48 8b 40 08          	mov    0x8(%rax),%rax
  800420ccc4:	48 89 c6             	mov    %rax,%rsi
  800420ccc7:	48 bf a2 f9 21 04 80 	movabs $0x800421f9a2,%rdi
  800420ccce:	00 00 00 
  800420ccd1:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ccd6:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420ccdd:	00 00 00 
  800420cce0:	ff d2                	callq  *%rdx
  800420cce2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cce6:	48 8b 40 10          	mov    0x10(%rax),%rax
  800420ccea:	48 89 c6             	mov    %rax,%rsi
  800420cced:	48 bf b1 f9 21 04 80 	movabs $0x800421f9b1,%rdi
  800420ccf4:	00 00 00 
  800420ccf7:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ccfc:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420cd03:	00 00 00 
  800420cd06:	ff d2                	callq  *%rdx
  800420cd08:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cd0c:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420cd10:	48 89 c6             	mov    %rax,%rsi
  800420cd13:	48 bf c0 f9 21 04 80 	movabs $0x800421f9c0,%rdi
  800420cd1a:	00 00 00 
  800420cd1d:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cd22:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420cd29:	00 00 00 
  800420cd2c:	ff d2                	callq  *%rdx
  800420cd2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cd32:	48 8b 40 20          	mov    0x20(%rax),%rax
  800420cd36:	48 89 c6             	mov    %rax,%rsi
  800420cd39:	48 bf cf f9 21 04 80 	movabs $0x800421f9cf,%rdi
  800420cd40:	00 00 00 
  800420cd43:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cd48:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420cd4f:	00 00 00 
  800420cd52:	ff d2                	callq  *%rdx
  800420cd54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cd58:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420cd5c:	48 89 c6             	mov    %rax,%rsi
  800420cd5f:	48 bf de f9 21 04 80 	movabs $0x800421f9de,%rdi
  800420cd66:	00 00 00 
  800420cd69:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cd6e:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420cd75:	00 00 00 
  800420cd78:	ff d2                	callq  *%rdx
  800420cd7a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cd7e:	48 8b 40 30          	mov    0x30(%rax),%rax
  800420cd82:	48 89 c6             	mov    %rax,%rsi
  800420cd85:	48 bf ed f9 21 04 80 	movabs $0x800421f9ed,%rdi
  800420cd8c:	00 00 00 
  800420cd8f:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cd94:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420cd9b:	00 00 00 
  800420cd9e:	ff d2                	callq  *%rdx
  800420cda0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cda4:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420cda8:	48 89 c6             	mov    %rax,%rsi
  800420cdab:	48 bf fb f9 21 04 80 	movabs $0x800421f9fb,%rdi
  800420cdb2:	00 00 00 
  800420cdb5:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cdba:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420cdc1:	00 00 00 
  800420cdc4:	ff d2                	callq  *%rdx
  800420cdc6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cdca:	48 8b 40 48          	mov    0x48(%rax),%rax
  800420cdce:	48 89 c6             	mov    %rax,%rsi
  800420cdd1:	48 bf 09 fa 21 04 80 	movabs $0x800421fa09,%rdi
  800420cdd8:	00 00 00 
  800420cddb:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cde0:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420cde7:	00 00 00 
  800420cdea:	ff d2                	callq  *%rdx
  800420cdec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cdf0:	48 8b 40 40          	mov    0x40(%rax),%rax
  800420cdf4:	48 89 c6             	mov    %rax,%rsi
  800420cdf7:	48 bf 18 fa 21 04 80 	movabs $0x800421fa18,%rdi
  800420cdfe:	00 00 00 
  800420ce01:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ce06:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420ce0d:	00 00 00 
  800420ce10:	ff d2                	callq  *%rdx
  800420ce12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ce16:	48 8b 40 50          	mov    0x50(%rax),%rax
  800420ce1a:	48 89 c6             	mov    %rax,%rsi
  800420ce1d:	48 bf 27 fa 21 04 80 	movabs $0x800421fa27,%rdi
  800420ce24:	00 00 00 
  800420ce27:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ce2c:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420ce33:	00 00 00 
  800420ce36:	ff d2                	callq  *%rdx
  800420ce38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ce3c:	48 8b 40 68          	mov    0x68(%rax),%rax
  800420ce40:	48 89 c6             	mov    %rax,%rsi
  800420ce43:	48 bf 36 fa 21 04 80 	movabs $0x800421fa36,%rdi
  800420ce4a:	00 00 00 
  800420ce4d:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ce52:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420ce59:	00 00 00 
  800420ce5c:	ff d2                	callq  *%rdx
  800420ce5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ce62:	48 8b 40 58          	mov    0x58(%rax),%rax
  800420ce66:	48 89 c6             	mov    %rax,%rsi
  800420ce69:	48 bf 45 fa 21 04 80 	movabs $0x800421fa45,%rdi
  800420ce70:	00 00 00 
  800420ce73:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ce78:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420ce7f:	00 00 00 
  800420ce82:	ff d2                	callq  *%rdx
  800420ce84:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ce88:	48 8b 40 60          	mov    0x60(%rax),%rax
  800420ce8c:	48 89 c6             	mov    %rax,%rsi
  800420ce8f:	48 bf 54 fa 21 04 80 	movabs $0x800421fa54,%rdi
  800420ce96:	00 00 00 
  800420ce99:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ce9e:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420cea5:	00 00 00 
  800420cea8:	ff d2                	callq  *%rdx
  800420ceaa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ceae:	48 8b 40 70          	mov    0x70(%rax),%rax
  800420ceb2:	48 89 c6             	mov    %rax,%rsi
  800420ceb5:	48 bf 63 fa 21 04 80 	movabs $0x800421fa63,%rdi
  800420cebc:	00 00 00 
  800420cebf:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cec4:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420cecb:	00 00 00 
  800420cece:	ff d2                	callq  *%rdx
  800420ced0:	c9                   	leaveq 
  800420ced1:	c3                   	retq   

000000800420ced2 <trap_dispatch>:
  800420ced2:	55                   	push   %rbp
  800420ced3:	48 89 e5             	mov    %rsp,%rbp
  800420ced6:	48 83 ec 10          	sub    $0x10,%rsp
  800420ceda:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420cede:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cee2:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420cee9:	48 83 f8 0e          	cmp    $0xe,%rax
  800420ceed:	75 18                	jne    800420cf07 <trap_dispatch+0x35>
  800420ceef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cef3:	48 89 c7             	mov    %rax,%rdi
  800420cef6:	48 b8 50 d4 20 04 80 	movabs $0x800420d450,%rax
  800420cefd:	00 00 00 
  800420cf00:	ff d0                	callq  *%rax
  800420cf02:	e9 ea 01 00 00       	jmpq   800420d0f1 <trap_dispatch+0x21f>
  800420cf07:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf0b:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420cf12:	48 83 f8 30          	cmp    $0x30,%rax
  800420cf16:	75 55                	jne    800420cf6d <trap_dispatch+0x9b>
  800420cf18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf1c:	4c 8b 40 40          	mov    0x40(%rax),%r8
  800420cf20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf24:	48 8b 78 48          	mov    0x48(%rax),%rdi
  800420cf28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf2c:	48 8b 48 68          	mov    0x68(%rax),%rcx
  800420cf30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf34:	48 8b 50 60          	mov    0x60(%rax),%rdx
  800420cf38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf3c:	48 8b 70 58          	mov    0x58(%rax),%rsi
  800420cf40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf44:	48 8b 40 70          	mov    0x70(%rax),%rax
  800420cf48:	4d 89 c1             	mov    %r8,%r9
  800420cf4b:	49 89 f8             	mov    %rdi,%r8
  800420cf4e:	48 89 c7             	mov    %rax,%rdi
  800420cf51:	48 b8 05 f0 20 04 80 	movabs $0x800420f005,%rax
  800420cf58:	00 00 00 
  800420cf5b:	ff d0                	callq  *%rax
  800420cf5d:	48 89 c2             	mov    %rax,%rdx
  800420cf60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf64:	48 89 50 70          	mov    %rdx,0x70(%rax)
  800420cf68:	e9 84 01 00 00       	jmpq   800420d0f1 <trap_dispatch+0x21f>
  800420cf6d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf71:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420cf78:	48 83 f8 03          	cmp    $0x3,%rax
  800420cf7c:	75 18                	jne    800420cf96 <trap_dispatch+0xc4>
  800420cf7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf82:	48 89 c7             	mov    %rax,%rdi
  800420cf85:	48 b8 5d 1a 20 04 80 	movabs $0x8004201a5d,%rax
  800420cf8c:	00 00 00 
  800420cf8f:	ff d0                	callq  *%rax
  800420cf91:	e9 5b 01 00 00       	jmpq   800420d0f1 <trap_dispatch+0x21f>
  800420cf96:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf9a:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420cfa1:	48 83 f8 27          	cmp    $0x27,%rax
  800420cfa5:	75 33                	jne    800420cfda <trap_dispatch+0x108>
  800420cfa7:	48 bf 72 fa 21 04 80 	movabs $0x800421fa72,%rdi
  800420cfae:	00 00 00 
  800420cfb1:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cfb6:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420cfbd:	00 00 00 
  800420cfc0:	ff d2                	callq  *%rdx
  800420cfc2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cfc6:	48 89 c7             	mov    %rax,%rdi
  800420cfc9:	48 b8 7a c9 20 04 80 	movabs $0x800420c97a,%rax
  800420cfd0:	00 00 00 
  800420cfd3:	ff d0                	callq  *%rax
  800420cfd5:	e9 17 01 00 00       	jmpq   800420d0f1 <trap_dispatch+0x21f>
  800420cfda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cfde:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420cfe5:	48 83 f8 20          	cmp    $0x20,%rax
  800420cfe9:	75 34                	jne    800420d01f <trap_dispatch+0x14d>
  800420cfeb:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420cff2:	00 00 00 
  800420cff5:	ff d0                	callq  *%rax
  800420cff7:	85 c0                	test   %eax,%eax
  800420cff9:	75 0c                	jne    800420d007 <trap_dispatch+0x135>
  800420cffb:	48 b8 6e 96 21 04 80 	movabs $0x800421966e,%rax
  800420d002:	00 00 00 
  800420d005:	ff d0                	callq  *%rax
  800420d007:	48 b8 67 7e 21 04 80 	movabs $0x8004217e67,%rax
  800420d00e:	00 00 00 
  800420d011:	ff d0                	callq  *%rax
  800420d013:	48 b8 76 da 20 04 80 	movabs $0x800420da76,%rax
  800420d01a:	00 00 00 
  800420d01d:	ff d0                	callq  *%rax
  800420d01f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d023:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420d02a:	48 83 f8 21          	cmp    $0x21,%rax
  800420d02e:	75 11                	jne    800420d041 <trap_dispatch+0x16f>
  800420d030:	48 b8 d8 0f 20 04 80 	movabs $0x8004200fd8,%rax
  800420d037:	00 00 00 
  800420d03a:	ff d0                	callq  *%rax
  800420d03c:	e9 b0 00 00 00       	jmpq   800420d0f1 <trap_dispatch+0x21f>
  800420d041:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d045:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420d04c:	48 83 f8 24          	cmp    $0x24,%rax
  800420d050:	75 11                	jne    800420d063 <trap_dispatch+0x191>
  800420d052:	48 b8 89 07 20 04 80 	movabs $0x8004200789,%rax
  800420d059:	00 00 00 
  800420d05c:	ff d0                	callq  *%rax
  800420d05e:	e9 8e 00 00 00       	jmpq   800420d0f1 <trap_dispatch+0x21f>
  800420d063:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d067:	48 89 c7             	mov    %rax,%rdi
  800420d06a:	48 b8 7a c9 20 04 80 	movabs $0x800420c97a,%rax
  800420d071:	00 00 00 
  800420d074:	ff d0                	callq  *%rax
  800420d076:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d07a:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420d081:	66 83 f8 08          	cmp    $0x8,%ax
  800420d085:	75 2a                	jne    800420d0b1 <trap_dispatch+0x1df>
  800420d087:	48 ba 8f fa 21 04 80 	movabs $0x800421fa8f,%rdx
  800420d08e:	00 00 00 
  800420d091:	be 77 01 00 00       	mov    $0x177,%esi
  800420d096:	48 bf a8 fa 21 04 80 	movabs $0x800421faa8,%rdi
  800420d09d:	00 00 00 
  800420d0a0:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d0a5:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  800420d0ac:	00 00 00 
  800420d0af:	ff d1                	callq  *%rcx
  800420d0b1:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420d0b8:	00 00 00 
  800420d0bb:	ff d0                	callq  *%rax
  800420d0bd:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420d0c4:	00 00 00 
  800420d0c7:	48 98                	cltq   
  800420d0c9:	48 c1 e0 03          	shl    $0x3,%rax
  800420d0cd:	48 89 c1             	mov    %rax,%rcx
  800420d0d0:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d0d4:	48 01 c8             	add    %rcx,%rax
  800420d0d7:	48 01 d0             	add    %rdx,%rax
  800420d0da:	48 83 c0 08          	add    $0x8,%rax
  800420d0de:	48 8b 00             	mov    (%rax),%rax
  800420d0e1:	48 89 c7             	mov    %rax,%rdi
  800420d0e4:	48 b8 1f 95 20 04 80 	movabs $0x800420951f,%rax
  800420d0eb:	00 00 00 
  800420d0ee:	ff d0                	callq  *%rax
  800420d0f0:	90                   	nop
  800420d0f1:	c9                   	leaveq 
  800420d0f2:	c3                   	retq   

000000800420d0f3 <trap>:
  800420d0f3:	55                   	push   %rbp
  800420d0f4:	48 89 e5             	mov    %rsp,%rbp
  800420d0f7:	48 83 ec 20          	sub    $0x20,%rsp
  800420d0fb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420d0ff:	fc                   	cld    
  800420d100:	48 b8 d8 e5 6d 04 80 	movabs $0x80046de5d8,%rax
  800420d107:	00 00 00 
  800420d10a:	48 8b 00             	mov    (%rax),%rax
  800420d10d:	48 85 c0             	test   %rax,%rax
  800420d110:	74 01                	je     800420d113 <trap+0x20>
  800420d112:	f4                   	hlt    
  800420d113:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420d11a:	00 00 00 
  800420d11d:	ff d0                	callq  *%rax
  800420d11f:	48 98                	cltq   
  800420d121:	48 c1 e0 03          	shl    $0x3,%rax
  800420d125:	48 89 c2             	mov    %rax,%rdx
  800420d128:	48 c1 e2 04          	shl    $0x4,%rdx
  800420d12c:	48 01 d0             	add    %rdx,%rax
  800420d12f:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420d136:	00 00 00 
  800420d139:	48 01 d0             	add    %rdx,%rax
  800420d13c:	48 83 c0 04          	add    $0x4,%rax
  800420d140:	be 01 00 00 00       	mov    $0x1,%esi
  800420d145:	48 89 c7             	mov    %rax,%rdi
  800420d148:	48 b8 5b 9d 20 04 80 	movabs $0x8004209d5b,%rax
  800420d14f:	00 00 00 
  800420d152:	ff d0                	callq  *%rax
  800420d154:	83 f8 02             	cmp    $0x2,%eax
  800420d157:	75 0c                	jne    800420d165 <trap+0x72>
  800420d159:	48 b8 80 9d 20 04 80 	movabs $0x8004209d80,%rax
  800420d160:	00 00 00 
  800420d163:	ff d0                	callq  *%rax

static __inline uint64_t
read_eflags(void)
{
	uint64_t rflags;
	__asm __volatile("pushfq; popq %0" : "=r" (rflags));
  800420d165:	9c                   	pushfq 
  800420d166:	58                   	pop    %rax
  800420d167:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	return rflags;
  800420d16b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d16f:	25 00 02 00 00       	and    $0x200,%eax
  800420d174:	48 85 c0             	test   %rax,%rax
  800420d177:	74 35                	je     800420d1ae <trap+0xbb>
  800420d179:	48 b9 b7 fa 21 04 80 	movabs $0x800421fab7,%rcx
  800420d180:	00 00 00 
  800420d183:	48 ba d0 fa 21 04 80 	movabs $0x800421fad0,%rdx
  800420d18a:	00 00 00 
  800420d18d:	be 94 01 00 00       	mov    $0x194,%esi
  800420d192:	48 bf a8 fa 21 04 80 	movabs $0x800421faa8,%rdi
  800420d199:	00 00 00 
  800420d19c:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d1a1:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420d1a8:	00 00 00 
  800420d1ab:	41 ff d0             	callq  *%r8
  800420d1ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d1b2:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420d1b9:	0f b7 c0             	movzwl %ax,%eax
  800420d1bc:	83 e0 03             	and    $0x3,%eax
  800420d1bf:	83 f8 03             	cmp    $0x3,%eax
  800420d1c2:	0f 85 a9 01 00 00    	jne    800420d371 <trap+0x27e>
  800420d1c8:	48 b8 80 9d 20 04 80 	movabs $0x8004209d80,%rax
  800420d1cf:	00 00 00 
  800420d1d2:	ff d0                	callq  *%rax
  800420d1d4:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420d1db:	00 00 00 
  800420d1de:	ff d0                	callq  *%rax
  800420d1e0:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420d1e7:	00 00 00 
  800420d1ea:	48 98                	cltq   
  800420d1ec:	48 c1 e0 03          	shl    $0x3,%rax
  800420d1f0:	48 89 c1             	mov    %rax,%rcx
  800420d1f3:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d1f7:	48 01 c8             	add    %rcx,%rax
  800420d1fa:	48 01 d0             	add    %rdx,%rax
  800420d1fd:	48 83 c0 08          	add    $0x8,%rax
  800420d201:	48 8b 00             	mov    (%rax),%rax
  800420d204:	48 85 c0             	test   %rax,%rax
  800420d207:	75 35                	jne    800420d23e <trap+0x14b>
  800420d209:	48 b9 e5 fa 21 04 80 	movabs $0x800421fae5,%rcx
  800420d210:	00 00 00 
  800420d213:	48 ba d0 fa 21 04 80 	movabs $0x800421fad0,%rdx
  800420d21a:	00 00 00 
  800420d21d:	be a5 01 00 00       	mov    $0x1a5,%esi
  800420d222:	48 bf a8 fa 21 04 80 	movabs $0x800421faa8,%rdi
  800420d229:	00 00 00 
  800420d22c:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d231:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420d238:	00 00 00 
  800420d23b:	41 ff d0             	callq  *%r8
  800420d23e:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420d245:	00 00 00 
  800420d248:	ff d0                	callq  *%rax
  800420d24a:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420d251:	00 00 00 
  800420d254:	48 98                	cltq   
  800420d256:	48 c1 e0 03          	shl    $0x3,%rax
  800420d25a:	48 89 c1             	mov    %rax,%rcx
  800420d25d:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d261:	48 01 c8             	add    %rcx,%rax
  800420d264:	48 01 d0             	add    %rdx,%rax
  800420d267:	48 83 c0 08          	add    $0x8,%rax
  800420d26b:	48 8b 00             	mov    (%rax),%rax
  800420d26e:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420d274:	83 f8 01             	cmp    $0x1,%eax
  800420d277:	75 7f                	jne    800420d2f8 <trap+0x205>
  800420d279:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420d280:	00 00 00 
  800420d283:	ff d0                	callq  *%rax
  800420d285:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420d28c:	00 00 00 
  800420d28f:	48 98                	cltq   
  800420d291:	48 c1 e0 03          	shl    $0x3,%rax
  800420d295:	48 89 c1             	mov    %rax,%rcx
  800420d298:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d29c:	48 01 c8             	add    %rcx,%rax
  800420d29f:	48 01 d0             	add    %rdx,%rax
  800420d2a2:	48 83 c0 08          	add    $0x8,%rax
  800420d2a6:	48 8b 00             	mov    (%rax),%rax
  800420d2a9:	48 89 c7             	mov    %rax,%rdi
  800420d2ac:	48 b8 66 90 20 04 80 	movabs $0x8004209066,%rax
  800420d2b3:	00 00 00 
  800420d2b6:	ff d0                	callq  *%rax
  800420d2b8:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420d2bf:	00 00 00 
  800420d2c2:	ff d0                	callq  *%rax
  800420d2c4:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420d2cb:	00 00 00 
  800420d2ce:	48 98                	cltq   
  800420d2d0:	48 c1 e0 03          	shl    $0x3,%rax
  800420d2d4:	48 89 c1             	mov    %rax,%rcx
  800420d2d7:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d2db:	48 01 c8             	add    %rcx,%rax
  800420d2de:	48 01 d0             	add    %rdx,%rax
  800420d2e1:	48 83 c0 08          	add    $0x8,%rax
  800420d2e5:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800420d2ec:	48 b8 76 da 20 04 80 	movabs $0x800420da76,%rax
  800420d2f3:	00 00 00 
  800420d2f6:	ff d0                	callq  *%rax
  800420d2f8:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420d2ff:	00 00 00 
  800420d302:	ff d0                	callq  *%rax
  800420d304:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420d30b:	00 00 00 
  800420d30e:	48 98                	cltq   
  800420d310:	48 c1 e0 03          	shl    $0x3,%rax
  800420d314:	48 89 c1             	mov    %rax,%rcx
  800420d317:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d31b:	48 01 c8             	add    %rcx,%rax
  800420d31e:	48 01 d0             	add    %rdx,%rax
  800420d321:	48 83 c0 08          	add    $0x8,%rax
  800420d325:	48 8b 10             	mov    (%rax),%rdx
  800420d328:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d32c:	48 89 c6             	mov    %rax,%rsi
  800420d32f:	b8 18 00 00 00       	mov    $0x18,%eax
  800420d334:	48 89 d7             	mov    %rdx,%rdi
  800420d337:	48 89 c1             	mov    %rax,%rcx
  800420d33a:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
  800420d33d:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420d344:	00 00 00 
  800420d347:	ff d0                	callq  *%rax
  800420d349:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420d350:	00 00 00 
  800420d353:	48 98                	cltq   
  800420d355:	48 c1 e0 03          	shl    $0x3,%rax
  800420d359:	48 89 c1             	mov    %rax,%rcx
  800420d35c:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d360:	48 01 c8             	add    %rcx,%rax
  800420d363:	48 01 d0             	add    %rdx,%rax
  800420d366:	48 83 c0 08          	add    $0x8,%rax
  800420d36a:	48 8b 00             	mov    (%rax),%rax
  800420d36d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420d371:	48 b8 90 02 4e 04 80 	movabs $0x80044e0290,%rax
  800420d378:	00 00 00 
  800420d37b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420d37f:	48 89 10             	mov    %rdx,(%rax)
  800420d382:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d386:	48 89 c7             	mov    %rax,%rdi
  800420d389:	48 b8 d2 ce 20 04 80 	movabs $0x800420ced2,%rax
  800420d390:	00 00 00 
  800420d393:	ff d0                	callq  *%rax
  800420d395:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420d39c:	00 00 00 
  800420d39f:	ff d0                	callq  *%rax
  800420d3a1:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420d3a8:	00 00 00 
  800420d3ab:	48 98                	cltq   
  800420d3ad:	48 c1 e0 03          	shl    $0x3,%rax
  800420d3b1:	48 89 c1             	mov    %rax,%rcx
  800420d3b4:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d3b8:	48 01 c8             	add    %rcx,%rax
  800420d3bb:	48 01 d0             	add    %rdx,%rax
  800420d3be:	48 83 c0 08          	add    $0x8,%rax
  800420d3c2:	48 8b 00             	mov    (%rax),%rax
  800420d3c5:	48 85 c0             	test   %rax,%rax
  800420d3c8:	74 7a                	je     800420d444 <trap+0x351>
  800420d3ca:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420d3d1:	00 00 00 
  800420d3d4:	ff d0                	callq  *%rax
  800420d3d6:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420d3dd:	00 00 00 
  800420d3e0:	48 98                	cltq   
  800420d3e2:	48 c1 e0 03          	shl    $0x3,%rax
  800420d3e6:	48 89 c1             	mov    %rax,%rcx
  800420d3e9:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d3ed:	48 01 c8             	add    %rcx,%rax
  800420d3f0:	48 01 d0             	add    %rdx,%rax
  800420d3f3:	48 83 c0 08          	add    $0x8,%rax
  800420d3f7:	48 8b 00             	mov    (%rax),%rax
  800420d3fa:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420d400:	83 f8 03             	cmp    $0x3,%eax
  800420d403:	75 3f                	jne    800420d444 <trap+0x351>
  800420d405:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420d40c:	00 00 00 
  800420d40f:	ff d0                	callq  *%rax
  800420d411:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420d418:	00 00 00 
  800420d41b:	48 98                	cltq   
  800420d41d:	48 c1 e0 03          	shl    $0x3,%rax
  800420d421:	48 89 c1             	mov    %rax,%rcx
  800420d424:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d428:	48 01 c8             	add    %rcx,%rax
  800420d42b:	48 01 d0             	add    %rdx,%rax
  800420d42e:	48 83 c0 08          	add    $0x8,%rax
  800420d432:	48 8b 00             	mov    (%rax),%rax
  800420d435:	48 89 c7             	mov    %rax,%rdi
  800420d438:	48 b8 ea 96 20 04 80 	movabs $0x80042096ea,%rax
  800420d43f:	00 00 00 
  800420d442:	ff d0                	callq  *%rax
  800420d444:	48 b8 76 da 20 04 80 	movabs $0x800420da76,%rax
  800420d44b:	00 00 00 
  800420d44e:	ff d0                	callq  *%rax

000000800420d450 <page_fault_handler>:
  800420d450:	55                   	push   %rbp
  800420d451:	48 89 e5             	mov    %rsp,%rbp
  800420d454:	53                   	push   %rbx
  800420d455:	48 83 ec 38          	sub    $0x38,%rsp
  800420d459:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)

static __inline uint64_t
rcr2(void)
{
	uint64_t val;
	__asm __volatile("movq %%cr2,%0" : "=r" (val));
  800420d45d:	0f 20 d0             	mov    %cr2,%rax
  800420d460:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	return val;
  800420d464:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420d468:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420d46c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d470:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420d477:	0f b7 c0             	movzwl %ax,%eax
  800420d47a:	83 e0 03             	and    $0x3,%eax
  800420d47d:	85 c0                	test   %eax,%eax
  800420d47f:	75 3d                	jne    800420d4be <page_fault_handler+0x6e>
  800420d481:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d485:	48 89 c7             	mov    %rax,%rdi
  800420d488:	48 b8 7a c9 20 04 80 	movabs $0x800420c97a,%rax
  800420d48f:	00 00 00 
  800420d492:	ff d0                	callq  *%rax
  800420d494:	48 ba ec fa 21 04 80 	movabs $0x800421faec,%rdx
  800420d49b:	00 00 00 
  800420d49e:	be de 01 00 00       	mov    $0x1de,%esi
  800420d4a3:	48 bf a8 fa 21 04 80 	movabs $0x800421faa8,%rdi
  800420d4aa:	00 00 00 
  800420d4ad:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d4b2:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  800420d4b9:	00 00 00 
  800420d4bc:	ff d1                	callq  *%rcx
  800420d4be:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420d4c5:	00 00 00 
  800420d4c8:	ff d0                	callq  *%rax
  800420d4ca:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420d4d1:	00 00 00 
  800420d4d4:	48 98                	cltq   
  800420d4d6:	48 c1 e0 03          	shl    $0x3,%rax
  800420d4da:	48 89 c1             	mov    %rax,%rcx
  800420d4dd:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d4e1:	48 01 c8             	add    %rcx,%rax
  800420d4e4:	48 01 d0             	add    %rdx,%rax
  800420d4e7:	48 83 c0 08          	add    $0x8,%rax
  800420d4eb:	48 8b 00             	mov    (%rax),%rax
  800420d4ee:	48 8b 80 f0 00 00 00 	mov    0xf0(%rax),%rax
  800420d4f5:	48 85 c0             	test   %rax,%rax
  800420d4f8:	0f 85 b8 00 00 00    	jne    800420d5b6 <page_fault_handler+0x166>
  800420d4fe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d502:	48 8b 98 98 00 00 00 	mov    0x98(%rax),%rbx
  800420d509:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420d510:	00 00 00 
  800420d513:	ff d0                	callq  *%rax
  800420d515:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420d51c:	00 00 00 
  800420d51f:	48 98                	cltq   
  800420d521:	48 c1 e0 03          	shl    $0x3,%rax
  800420d525:	48 89 c1             	mov    %rax,%rcx
  800420d528:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d52c:	48 01 c8             	add    %rcx,%rax
  800420d52f:	48 01 d0             	add    %rdx,%rax
  800420d532:	48 83 c0 08          	add    $0x8,%rax
  800420d536:	48 8b 00             	mov    (%rax),%rax
  800420d539:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420d53f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420d543:	48 89 d9             	mov    %rbx,%rcx
  800420d546:	89 c6                	mov    %eax,%esi
  800420d548:	48 bf f8 fa 21 04 80 	movabs $0x800421faf8,%rdi
  800420d54f:	00 00 00 
  800420d552:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d557:	49 b8 83 9c 20 04 80 	movabs $0x8004209c83,%r8
  800420d55e:	00 00 00 
  800420d561:	41 ff d0             	callq  *%r8
  800420d564:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d568:	48 89 c7             	mov    %rax,%rdi
  800420d56b:	48 b8 7a c9 20 04 80 	movabs $0x800420c97a,%rax
  800420d572:	00 00 00 
  800420d575:	ff d0                	callq  *%rax
  800420d577:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420d57e:	00 00 00 
  800420d581:	ff d0                	callq  *%rax
  800420d583:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420d58a:	00 00 00 
  800420d58d:	48 98                	cltq   
  800420d58f:	48 c1 e0 03          	shl    $0x3,%rax
  800420d593:	48 89 c1             	mov    %rax,%rcx
  800420d596:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d59a:	48 01 c8             	add    %rcx,%rax
  800420d59d:	48 01 d0             	add    %rdx,%rax
  800420d5a0:	48 83 c0 08          	add    $0x8,%rax
  800420d5a4:	48 8b 00             	mov    (%rax),%rax
  800420d5a7:	48 89 c7             	mov    %rax,%rdi
  800420d5aa:	48 b8 1f 95 20 04 80 	movabs $0x800420951f,%rax
  800420d5b1:	00 00 00 
  800420d5b4:	ff d0                	callq  *%rax
  800420d5b6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d5ba:	48 8b 90 b0 00 00 00 	mov    0xb0(%rax),%rdx
  800420d5c1:	b8 ff ef 7f ef       	mov    $0xef7fefff,%eax
  800420d5c6:	48 39 c2             	cmp    %rax,%rdx
  800420d5c9:	76 2c                	jbe    800420d5f7 <page_fault_handler+0x1a7>
  800420d5cb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d5cf:	48 8b 90 b0 00 00 00 	mov    0xb0(%rax),%rdx
  800420d5d6:	b8 ff ff 7f ef       	mov    $0xef7fffff,%eax
  800420d5db:	48 39 c2             	cmp    %rax,%rdx
  800420d5de:	77 17                	ja     800420d5f7 <page_fault_handler+0x1a7>
  800420d5e0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d5e4:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  800420d5eb:	48 2d a8 00 00 00    	sub    $0xa8,%rax
  800420d5f1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420d5f5:	eb 09                	jmp    800420d600 <page_fault_handler+0x1b0>
  800420d5f7:	b8 60 ff 7f ef       	mov    $0xef7fff60,%eax
  800420d5fc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420d600:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420d607:	00 00 00 
  800420d60a:	ff d0                	callq  *%rax
  800420d60c:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420d613:	00 00 00 
  800420d616:	48 98                	cltq   
  800420d618:	48 c1 e0 03          	shl    $0x3,%rax
  800420d61c:	48 89 c1             	mov    %rax,%rcx
  800420d61f:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d623:	48 01 c8             	add    %rcx,%rax
  800420d626:	48 01 d0             	add    %rdx,%rax
  800420d629:	48 83 c0 08          	add    $0x8,%rax
  800420d62d:	48 8b 00             	mov    (%rax),%rax
  800420d630:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  800420d634:	b9 06 00 00 00       	mov    $0x6,%ecx
  800420d639:	ba a0 00 00 00       	mov    $0xa0,%edx
  800420d63e:	48 89 c7             	mov    %rax,%rdi
  800420d641:	48 b8 6b 41 20 04 80 	movabs $0x800420416b,%rax
  800420d648:	00 00 00 
  800420d64b:	ff d0                	callq  *%rax
  800420d64d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d651:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420d655:	48 89 10             	mov    %rdx,(%rax)
  800420d658:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d65c:	48 8b 90 90 00 00 00 	mov    0x90(%rax),%rdx
  800420d663:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d667:	48 89 50 08          	mov    %rdx,0x8(%rax)
  800420d66b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d66f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420d673:	48 8b 0a             	mov    (%rdx),%rcx
  800420d676:	48 89 48 10          	mov    %rcx,0x10(%rax)
  800420d67a:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800420d67e:	48 89 48 18          	mov    %rcx,0x18(%rax)
  800420d682:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
  800420d686:	48 89 48 20          	mov    %rcx,0x20(%rax)
  800420d68a:	48 8b 4a 18          	mov    0x18(%rdx),%rcx
  800420d68e:	48 89 48 28          	mov    %rcx,0x28(%rax)
  800420d692:	48 8b 4a 20          	mov    0x20(%rdx),%rcx
  800420d696:	48 89 48 30          	mov    %rcx,0x30(%rax)
  800420d69a:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
  800420d69e:	48 89 48 38          	mov    %rcx,0x38(%rax)
  800420d6a2:	48 8b 4a 30          	mov    0x30(%rdx),%rcx
  800420d6a6:	48 89 48 40          	mov    %rcx,0x40(%rax)
  800420d6aa:	48 8b 4a 38          	mov    0x38(%rdx),%rcx
  800420d6ae:	48 89 48 48          	mov    %rcx,0x48(%rax)
  800420d6b2:	48 8b 4a 40          	mov    0x40(%rdx),%rcx
  800420d6b6:	48 89 48 50          	mov    %rcx,0x50(%rax)
  800420d6ba:	48 8b 4a 48          	mov    0x48(%rdx),%rcx
  800420d6be:	48 89 48 58          	mov    %rcx,0x58(%rax)
  800420d6c2:	48 8b 4a 50          	mov    0x50(%rdx),%rcx
  800420d6c6:	48 89 48 60          	mov    %rcx,0x60(%rax)
  800420d6ca:	48 8b 4a 58          	mov    0x58(%rdx),%rcx
  800420d6ce:	48 89 48 68          	mov    %rcx,0x68(%rax)
  800420d6d2:	48 8b 4a 60          	mov    0x60(%rdx),%rcx
  800420d6d6:	48 89 48 70          	mov    %rcx,0x70(%rax)
  800420d6da:	48 8b 4a 68          	mov    0x68(%rdx),%rcx
  800420d6de:	48 89 48 78          	mov    %rcx,0x78(%rax)
  800420d6e2:	48 8b 52 70          	mov    0x70(%rdx),%rdx
  800420d6e6:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
  800420d6ed:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d6f1:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
  800420d6f8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d6fc:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
  800420d703:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d707:	48 8b 90 a8 00 00 00 	mov    0xa8(%rax),%rdx
  800420d70e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d712:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
  800420d719:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d71d:	48 8b 90 b0 00 00 00 	mov    0xb0(%rax),%rdx
  800420d724:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d728:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  800420d72f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420d733:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d737:	48 89 90 b0 00 00 00 	mov    %rdx,0xb0(%rax)
  800420d73e:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420d745:	00 00 00 
  800420d748:	ff d0                	callq  *%rax
  800420d74a:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420d751:	00 00 00 
  800420d754:	48 98                	cltq   
  800420d756:	48 c1 e0 03          	shl    $0x3,%rax
  800420d75a:	48 89 c1             	mov    %rax,%rcx
  800420d75d:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d761:	48 01 c8             	add    %rcx,%rax
  800420d764:	48 01 d0             	add    %rdx,%rax
  800420d767:	48 83 c0 08          	add    $0x8,%rax
  800420d76b:	48 8b 00             	mov    (%rax),%rax
  800420d76e:	48 8b 80 f0 00 00 00 	mov    0xf0(%rax),%rax
  800420d775:	48 89 c2             	mov    %rax,%rdx
  800420d778:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d77c:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  800420d783:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420d78a:	00 00 00 
  800420d78d:	ff d0                	callq  *%rax
  800420d78f:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420d796:	00 00 00 
  800420d799:	48 98                	cltq   
  800420d79b:	48 c1 e0 03          	shl    $0x3,%rax
  800420d79f:	48 89 c1             	mov    %rax,%rcx
  800420d7a2:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d7a6:	48 01 c8             	add    %rcx,%rax
  800420d7a9:	48 01 d0             	add    %rdx,%rax
  800420d7ac:	48 83 c0 08          	add    $0x8,%rax
  800420d7b0:	48 8b 00             	mov    (%rax),%rax
  800420d7b3:	48 89 c7             	mov    %rax,%rdi
  800420d7b6:	48 b8 ea 96 20 04 80 	movabs $0x80042096ea,%rax
  800420d7bd:	00 00 00 
  800420d7c0:	ff d0                	callq  *%rax
  800420d7c2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  800420d7c9:	00 00 00 
  800420d7cc:	0f 1f 40 00          	nopl   0x0(%rax)

000000800420d7d0 <Xdivide>:

.text


/* CPU traps */
TRAPHANDLER_NOEC(Xdivide, T_DIVIDE)
  800420d7d0:	6a 00                	pushq  $0x0
  800420d7d2:	6a 00                	pushq  $0x0
  800420d7d4:	e9 47 01 00 00       	jmpq   800420d920 <_alltraps>
  800420d7d9:	90                   	nop

000000800420d7da <Xdebug>:
TRAPHANDLER_NOEC(Xdebug,  T_DEBUG)
  800420d7da:	6a 00                	pushq  $0x0
  800420d7dc:	6a 01                	pushq  $0x1
  800420d7de:	e9 3d 01 00 00       	jmpq   800420d920 <_alltraps>
  800420d7e3:	90                   	nop

000000800420d7e4 <Xnmi>:
TRAPHANDLER_NOEC(Xnmi,    T_NMI)
  800420d7e4:	6a 00                	pushq  $0x0
  800420d7e6:	6a 02                	pushq  $0x2
  800420d7e8:	e9 33 01 00 00       	jmpq   800420d920 <_alltraps>
  800420d7ed:	90                   	nop

000000800420d7ee <Xbrkpt>:
TRAPHANDLER_NOEC(Xbrkpt,  T_BRKPT)
  800420d7ee:	6a 00                	pushq  $0x0
  800420d7f0:	6a 03                	pushq  $0x3
  800420d7f2:	e9 29 01 00 00       	jmpq   800420d920 <_alltraps>
  800420d7f7:	90                   	nop

000000800420d7f8 <Xoflow>:
TRAPHANDLER_NOEC(Xoflow,  T_OFLOW)
  800420d7f8:	6a 00                	pushq  $0x0
  800420d7fa:	6a 04                	pushq  $0x4
  800420d7fc:	e9 1f 01 00 00       	jmpq   800420d920 <_alltraps>
  800420d801:	90                   	nop

000000800420d802 <Xbound>:
TRAPHANDLER_NOEC(Xbound,  T_BOUND)
  800420d802:	6a 00                	pushq  $0x0
  800420d804:	6a 05                	pushq  $0x5
  800420d806:	e9 15 01 00 00       	jmpq   800420d920 <_alltraps>
  800420d80b:	90                   	nop

000000800420d80c <Xillop>:
TRAPHANDLER_NOEC(Xillop,  T_ILLOP)
  800420d80c:	6a 00                	pushq  $0x0
  800420d80e:	6a 06                	pushq  $0x6
  800420d810:	e9 0b 01 00 00       	jmpq   800420d920 <_alltraps>
  800420d815:	90                   	nop

000000800420d816 <Xdevice>:
TRAPHANDLER_NOEC(Xdevice, T_DEVICE)
  800420d816:	6a 00                	pushq  $0x0
  800420d818:	6a 07                	pushq  $0x7
  800420d81a:	e9 01 01 00 00       	jmpq   800420d920 <_alltraps>
  800420d81f:	90                   	nop

000000800420d820 <Xdblflt>:
TRAPHANDLER     (Xdblflt, T_DBLFLT)
  800420d820:	6a 08                	pushq  $0x8
  800420d822:	e9 f9 00 00 00       	jmpq   800420d920 <_alltraps>
  800420d827:	90                   	nop

000000800420d828 <Xtss>:
TRAPHANDLER     (Xtss,    T_TSS)
  800420d828:	6a 0a                	pushq  $0xa
  800420d82a:	e9 f1 00 00 00       	jmpq   800420d920 <_alltraps>
  800420d82f:	90                   	nop

000000800420d830 <Xsegnp>:
TRAPHANDLER     (Xsegnp,  T_SEGNP)
  800420d830:	6a 0b                	pushq  $0xb
  800420d832:	e9 e9 00 00 00       	jmpq   800420d920 <_alltraps>
  800420d837:	90                   	nop

000000800420d838 <Xstack>:
TRAPHANDLER     (Xstack,  T_STACK)
  800420d838:	6a 0c                	pushq  $0xc
  800420d83a:	e9 e1 00 00 00       	jmpq   800420d920 <_alltraps>
  800420d83f:	90                   	nop

000000800420d840 <Xgpflt>:
TRAPHANDLER     (Xgpflt,  T_GPFLT)
  800420d840:	6a 0d                	pushq  $0xd
  800420d842:	e9 d9 00 00 00       	jmpq   800420d920 <_alltraps>
  800420d847:	90                   	nop

000000800420d848 <Xpgflt>:
TRAPHANDLER     (Xpgflt,  T_PGFLT)
  800420d848:	6a 0e                	pushq  $0xe
  800420d84a:	e9 d1 00 00 00       	jmpq   800420d920 <_alltraps>
  800420d84f:	90                   	nop

000000800420d850 <Xfperr>:
TRAPHANDLER_NOEC(Xfperr,  T_FPERR)
  800420d850:	6a 00                	pushq  $0x0
  800420d852:	6a 10                	pushq  $0x10
  800420d854:	e9 c7 00 00 00       	jmpq   800420d920 <_alltraps>
  800420d859:	90                   	nop

000000800420d85a <Xalign>:
TRAPHANDLER     (Xalign,  T_ALIGN)
  800420d85a:	6a 11                	pushq  $0x11
  800420d85c:	e9 bf 00 00 00       	jmpq   800420d920 <_alltraps>
  800420d861:	90                   	nop

000000800420d862 <Xmchk>:
TRAPHANDLER_NOEC(Xmchk,   T_MCHK)
  800420d862:	6a 00                	pushq  $0x0
  800420d864:	6a 12                	pushq  $0x12
  800420d866:	e9 b5 00 00 00       	jmpq   800420d920 <_alltraps>
  800420d86b:	90                   	nop

000000800420d86c <Xirq0>:

/* the external device interrupts */
TRAPHANDLER_NOEC(Xirq0,   IRQ_OFFSET+0)
  800420d86c:	6a 00                	pushq  $0x0
  800420d86e:	6a 20                	pushq  $0x20
  800420d870:	e9 ab 00 00 00       	jmpq   800420d920 <_alltraps>
  800420d875:	90                   	nop

000000800420d876 <Xirq1>:
TRAPHANDLER_NOEC(Xirq1,   IRQ_OFFSET+1)
  800420d876:	6a 00                	pushq  $0x0
  800420d878:	6a 21                	pushq  $0x21
  800420d87a:	e9 a1 00 00 00       	jmpq   800420d920 <_alltraps>
  800420d87f:	90                   	nop

000000800420d880 <Xirq2>:
TRAPHANDLER_NOEC(Xirq2,   IRQ_OFFSET+2)
  800420d880:	6a 00                	pushq  $0x0
  800420d882:	6a 22                	pushq  $0x22
  800420d884:	e9 97 00 00 00       	jmpq   800420d920 <_alltraps>
  800420d889:	90                   	nop

000000800420d88a <Xirq3>:
TRAPHANDLER_NOEC(Xirq3,   IRQ_OFFSET+3)
  800420d88a:	6a 00                	pushq  $0x0
  800420d88c:	6a 23                	pushq  $0x23
  800420d88e:	e9 8d 00 00 00       	jmpq   800420d920 <_alltraps>
  800420d893:	90                   	nop

000000800420d894 <Xirq4>:
TRAPHANDLER_NOEC(Xirq4,   IRQ_OFFSET+4)
  800420d894:	6a 00                	pushq  $0x0
  800420d896:	6a 24                	pushq  $0x24
  800420d898:	e9 83 00 00 00       	jmpq   800420d920 <_alltraps>
  800420d89d:	90                   	nop

000000800420d89e <Xirq5>:
TRAPHANDLER_NOEC(Xirq5,   IRQ_OFFSET+5)
  800420d89e:	6a 00                	pushq  $0x0
  800420d8a0:	6a 25                	pushq  $0x25
  800420d8a2:	e9 79 00 00 00       	jmpq   800420d920 <_alltraps>
  800420d8a7:	90                   	nop

000000800420d8a8 <Xirq6>:
TRAPHANDLER_NOEC(Xirq6,   IRQ_OFFSET+6)
  800420d8a8:	6a 00                	pushq  $0x0
  800420d8aa:	6a 26                	pushq  $0x26
  800420d8ac:	e9 6f 00 00 00       	jmpq   800420d920 <_alltraps>
  800420d8b1:	90                   	nop

000000800420d8b2 <Xirq7>:
TRAPHANDLER_NOEC(Xirq7,   IRQ_OFFSET+7)
  800420d8b2:	6a 00                	pushq  $0x0
  800420d8b4:	6a 27                	pushq  $0x27
  800420d8b6:	e9 65 00 00 00       	jmpq   800420d920 <_alltraps>
  800420d8bb:	90                   	nop

000000800420d8bc <Xirq8>:
TRAPHANDLER_NOEC(Xirq8,   IRQ_OFFSET+8)
  800420d8bc:	6a 00                	pushq  $0x0
  800420d8be:	6a 28                	pushq  $0x28
  800420d8c0:	e9 5b 00 00 00       	jmpq   800420d920 <_alltraps>
  800420d8c5:	90                   	nop

000000800420d8c6 <Xirq9>:
TRAPHANDLER_NOEC(Xirq9,   IRQ_OFFSET+9)
  800420d8c6:	6a 00                	pushq  $0x0
  800420d8c8:	6a 29                	pushq  $0x29
  800420d8ca:	e9 51 00 00 00       	jmpq   800420d920 <_alltraps>
  800420d8cf:	90                   	nop

000000800420d8d0 <Xirq10>:
TRAPHANDLER_NOEC(Xirq10,  IRQ_OFFSET+10)
  800420d8d0:	6a 00                	pushq  $0x0
  800420d8d2:	6a 2a                	pushq  $0x2a
  800420d8d4:	e9 47 00 00 00       	jmpq   800420d920 <_alltraps>
  800420d8d9:	90                   	nop

000000800420d8da <Xirq11>:
TRAPHANDLER_NOEC(Xirq11,  IRQ_OFFSET+11)
  800420d8da:	6a 00                	pushq  $0x0
  800420d8dc:	6a 2b                	pushq  $0x2b
  800420d8de:	e9 3d 00 00 00       	jmpq   800420d920 <_alltraps>
  800420d8e3:	90                   	nop

000000800420d8e4 <Xirq12>:
TRAPHANDLER_NOEC(Xirq12,  IRQ_OFFSET+12)
  800420d8e4:	6a 00                	pushq  $0x0
  800420d8e6:	6a 2c                	pushq  $0x2c
  800420d8e8:	e9 33 00 00 00       	jmpq   800420d920 <_alltraps>
  800420d8ed:	90                   	nop

000000800420d8ee <Xirq13>:
TRAPHANDLER_NOEC(Xirq13,  IRQ_OFFSET+13)
  800420d8ee:	6a 00                	pushq  $0x0
  800420d8f0:	6a 2d                	pushq  $0x2d
  800420d8f2:	e9 29 00 00 00       	jmpq   800420d920 <_alltraps>
  800420d8f7:	90                   	nop

000000800420d8f8 <Xirq14>:
TRAPHANDLER_NOEC(Xirq14,  IRQ_OFFSET+14)
  800420d8f8:	6a 00                	pushq  $0x0
  800420d8fa:	6a 2e                	pushq  $0x2e
  800420d8fc:	e9 1f 00 00 00       	jmpq   800420d920 <_alltraps>
  800420d901:	90                   	nop

000000800420d902 <Xirq15>:
TRAPHANDLER_NOEC(Xirq15,  IRQ_OFFSET+15)
  800420d902:	6a 00                	pushq  $0x0
  800420d904:	6a 2f                	pushq  $0x2f
  800420d906:	e9 15 00 00 00       	jmpq   800420d920 <_alltraps>
  800420d90b:	90                   	nop

000000800420d90c <Xsyscall>:

/* system call entry point */
TRAPHANDLER_NOEC(Xsyscall, T_SYSCALL)
  800420d90c:	6a 00                	pushq  $0x0
  800420d90e:	6a 30                	pushq  $0x30
  800420d910:	e9 0b 00 00 00       	jmpq   800420d920 <_alltraps>
  800420d915:	90                   	nop

000000800420d916 <Xdefault>:

/* default handler -- not for any specific trap */
TRAPHANDLER     (Xdefault, T_DEFAULT)
  800420d916:	68 f4 01 00 00       	pushq  $0x1f4
  800420d91b:	e9 00 00 00 00       	jmpq   800420d920 <_alltraps>

000000800420d920 <_alltraps>:

.globl	_alltraps
.type	_alltraps,@function
.p2align 4, 0x90		/* 16-byte alignment, nop filled */
_alltraps:
    subq $16,%rsp
  800420d920:	48 83 ec 10          	sub    $0x10,%rsp
    movw %ds,8(%rsp)
  800420d924:	8c 5c 24 08          	mov    %ds,0x8(%rsp)
    movw %es,0(%rsp)
  800420d928:	8c 04 24             	mov    %es,(%rsp)
    PUSHA
  800420d92b:	48 83 ec 78          	sub    $0x78,%rsp
  800420d92f:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  800420d934:	48 89 5c 24 68       	mov    %rbx,0x68(%rsp)
  800420d939:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  800420d93e:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  800420d943:	48 89 6c 24 50       	mov    %rbp,0x50(%rsp)
  800420d948:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  800420d94d:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  800420d952:	4c 89 44 24 38       	mov    %r8,0x38(%rsp)
  800420d957:	4c 89 4c 24 30       	mov    %r9,0x30(%rsp)
  800420d95c:	4c 89 54 24 28       	mov    %r10,0x28(%rsp)
  800420d961:	4c 89 5c 24 20       	mov    %r11,0x20(%rsp)
  800420d966:	4c 89 64 24 18       	mov    %r12,0x18(%rsp)
  800420d96b:	4c 89 6c 24 10       	mov    %r13,0x10(%rsp)
  800420d970:	4c 89 74 24 08       	mov    %r14,0x8(%rsp)
  800420d975:	4c 89 3c 24          	mov    %r15,(%rsp)
    movl $GD_KD, %eax
  800420d979:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
  800420d97e:	8e d8                	mov    %eax,%ds
    movw %ax, %es
  800420d980:	8e c0                	mov    %eax,%es
    movw %ax, %ss
  800420d982:	8e d0                	mov    %eax,%ss
    movw %ax, %fs
  800420d984:	8e e0                	mov    %eax,%fs
    movw %ax, %gs
  800420d986:	8e e8                	mov    %eax,%gs
    movq %rsp,%rdi
  800420d988:	48 89 e7             	mov    %rsp,%rdi
    call trap   # never returns 
  800420d98b:	e8 63 f7 ff ff       	callq  800420d0f3 <trap>

000000800420d990 <spin>:
spin:	jmp spin
  800420d990:	eb fe                	jmp    800420d990 <spin>

000000800420d992 <xchg>:
	if (edxp)
		*edxp = edx;
}

static inline uint32_t
xchg(volatile uint32_t *addr,uint32_t newval){
  800420d992:	55                   	push   %rbp
  800420d993:	48 89 e5             	mov    %rsp,%rbp
  800420d996:	48 83 ec 1c          	sub    $0x1c,%rsp
  800420d99a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420d99e:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint32_t result;
	__asm __volatile("lock; xchgl %0, %1":
  800420d9a1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420d9a5:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420d9a8:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420d9ac:	f0 87 02             	lock xchg %eax,(%rdx)
  800420d9af:	89 45 fc             	mov    %eax,-0x4(%rbp)
			 "+m" (*addr), "=a" (result):
			 "1"(newval):
			 "cc");
	return result;
  800420d9b2:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  800420d9b5:	c9                   	leaveq 
  800420d9b6:	c3                   	retq   

000000800420d9b7 <unlock_kernel>:
  800420d9b7:	55                   	push   %rbp
  800420d9b8:	48 89 e5             	mov    %rsp,%rbp
  800420d9bb:	48 bf 60 57 23 04 80 	movabs $0x8004235760,%rdi
  800420d9c2:	00 00 00 
  800420d9c5:	48 b8 94 82 21 04 80 	movabs $0x8004218294,%rax
  800420d9cc:	00 00 00 
  800420d9cf:	ff d0                	callq  *%rax
  800420d9d1:	f3 90                	pause  
  800420d9d3:	5d                   	pop    %rbp
  800420d9d4:	c3                   	retq   

000000800420d9d5 <vmxon>:
  800420d9d5:	55                   	push   %rbp
  800420d9d6:	48 89 e5             	mov    %rsp,%rbp
  800420d9d9:	48 83 ec 10          	sub    $0x10,%rsp
  800420d9dd:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420d9e4:	00 00 00 
  800420d9e7:	ff d0                	callq  *%rax
  800420d9e9:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420d9f0:	00 00 00 
  800420d9f3:	48 98                	cltq   
  800420d9f5:	48 c1 e0 03          	shl    $0x3,%rax
  800420d9f9:	48 89 c1             	mov    %rax,%rcx
  800420d9fc:	48 c1 e1 04          	shl    $0x4,%rcx
  800420da00:	48 01 c8             	add    %rcx,%rax
  800420da03:	48 01 d0             	add    %rdx,%rax
  800420da06:	48 83 c0 70          	add    $0x70,%rax
  800420da0a:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  800420da0e:	83 f0 01             	xor    $0x1,%eax
  800420da11:	84 c0                	test   %al,%al
  800420da13:	74 5a                	je     800420da6f <vmxon+0x9a>
  800420da15:	b8 00 00 00 00       	mov    $0x0,%eax
  800420da1a:	48 ba 40 b3 21 04 80 	movabs $0x800421b340,%rdx
  800420da21:	00 00 00 
  800420da24:	ff d2                	callq  *%rdx
  800420da26:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420da29:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420da2d:	79 25                	jns    800420da54 <vmxon+0x7f>
  800420da2f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420da32:	89 c6                	mov    %eax,%esi
  800420da34:	48 bf 00 fd 21 04 80 	movabs $0x800421fd00,%rdi
  800420da3b:	00 00 00 
  800420da3e:	b8 00 00 00 00       	mov    $0x0,%eax
  800420da43:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420da4a:	00 00 00 
  800420da4d:	ff d2                	callq  *%rdx
  800420da4f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420da52:	eb 20                	jmp    800420da74 <vmxon+0x9f>
  800420da54:	48 bf 1b fd 21 04 80 	movabs $0x800421fd1b,%rdi
  800420da5b:	00 00 00 
  800420da5e:	b8 00 00 00 00       	mov    $0x0,%eax
  800420da63:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420da6a:	00 00 00 
  800420da6d:	ff d2                	callq  *%rdx
  800420da6f:	b8 00 00 00 00       	mov    $0x0,%eax
  800420da74:	c9                   	leaveq 
  800420da75:	c3                   	retq   

000000800420da76 <sched_yield>:
  800420da76:	55                   	push   %rbp
  800420da77:	48 89 e5             	mov    %rsp,%rbp
  800420da7a:	53                   	push   %rbx
  800420da7b:	48 83 ec 18          	sub    $0x18,%rsp
  800420da7f:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420da86:	00 00 00 
  800420da89:	ff d0                	callq  *%rax
  800420da8b:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420da92:	00 00 00 
  800420da95:	48 98                	cltq   
  800420da97:	48 c1 e0 03          	shl    $0x3,%rax
  800420da9b:	48 89 c1             	mov    %rax,%rcx
  800420da9e:	48 c1 e1 04          	shl    $0x4,%rcx
  800420daa2:	48 01 c8             	add    %rcx,%rax
  800420daa5:	48 01 d0             	add    %rdx,%rax
  800420daa8:	48 83 c0 08          	add    $0x8,%rax
  800420daac:	48 8b 00             	mov    (%rax),%rax
  800420daaf:	48 85 c0             	test   %rax,%rax
  800420dab2:	74 60                	je     800420db14 <sched_yield+0x9e>
  800420dab4:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420dabb:	00 00 00 
  800420dabe:	ff d0                	callq  *%rax
  800420dac0:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420dac7:	00 00 00 
  800420daca:	48 98                	cltq   
  800420dacc:	48 c1 e0 03          	shl    $0x3,%rax
  800420dad0:	48 89 c1             	mov    %rax,%rcx
  800420dad3:	48 c1 e1 04          	shl    $0x4,%rcx
  800420dad7:	48 01 c8             	add    %rcx,%rax
  800420dada:	48 01 d0             	add    %rdx,%rax
  800420dadd:	48 83 c0 08          	add    $0x8,%rax
  800420dae1:	48 8b 00             	mov    (%rax),%rax
  800420dae4:	48 89 c2             	mov    %rax,%rdx
  800420dae7:	48 b8 58 f2 4d 04 80 	movabs $0x80044df258,%rax
  800420daee:	00 00 00 
  800420daf1:	48 8b 00             	mov    (%rax),%rax
  800420daf4:	48 29 c2             	sub    %rax,%rdx
  800420daf7:	48 89 d0             	mov    %rdx,%rax
  800420dafa:	48 c1 f8 03          	sar    $0x3,%rax
  800420dafe:	48 89 c2             	mov    %rax,%rdx
  800420db01:	48 b8 a5 4f fa a4 4f 	movabs $0x4fa4fa4fa4fa4fa5,%rax
  800420db08:	fa a4 4f 
  800420db0b:	48 0f af c2          	imul   %rdx,%rax
  800420db0f:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420db12:	eb 07                	jmp    800420db1b <sched_yield+0xa5>
  800420db14:	c7 45 ec ff 03 00 00 	movl   $0x3ff,-0x14(%rbp)
  800420db1b:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%rbp)
  800420db22:	e9 1b 01 00 00       	jmpq   800420dc42 <sched_yield+0x1cc>
  800420db27:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420db2a:	8b 55 e8             	mov    -0x18(%rbp),%edx
  800420db2d:	01 c2                	add    %eax,%edx
  800420db2f:	89 d0                	mov    %edx,%eax
  800420db31:	c1 f8 1f             	sar    $0x1f,%eax
  800420db34:	c1 e8 16             	shr    $0x16,%eax
  800420db37:	01 c2                	add    %eax,%edx
  800420db39:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
  800420db3f:	29 c2                	sub    %eax,%edx
  800420db41:	89 d0                	mov    %edx,%eax
  800420db43:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  800420db46:	48 b8 58 f2 4d 04 80 	movabs $0x80044df258,%rax
  800420db4d:	00 00 00 
  800420db50:	48 8b 10             	mov    (%rax),%rdx
  800420db53:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420db56:	48 98                	cltq   
  800420db58:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420db5f:	48 01 d0             	add    %rdx,%rax
  800420db62:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420db68:	83 f8 02             	cmp    $0x2,%eax
  800420db6b:	0f 85 cd 00 00 00    	jne    800420dc3e <sched_yield+0x1c8>
  800420db71:	48 b8 58 f2 4d 04 80 	movabs $0x80044df258,%rax
  800420db78:	00 00 00 
  800420db7b:	48 8b 10             	mov    (%rax),%rdx
  800420db7e:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420db81:	48 98                	cltq   
  800420db83:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420db8a:	48 01 d0             	add    %rdx,%rax
  800420db8d:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800420db93:	83 f8 03             	cmp    $0x3,%eax
  800420db96:	75 7b                	jne    800420dc13 <sched_yield+0x19d>
  800420db98:	48 b8 58 f2 4d 04 80 	movabs $0x80044df258,%rax
  800420db9f:	00 00 00 
  800420dba2:	48 8b 10             	mov    (%rax),%rdx
  800420dba5:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420dba8:	48 98                	cltq   
  800420dbaa:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420dbb1:	48 01 d0             	add    %rdx,%rax
  800420dbb4:	8b 98 60 01 00 00    	mov    0x160(%rax),%ebx
  800420dbba:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420dbc1:	00 00 00 
  800420dbc4:	ff d0                	callq  *%rax
  800420dbc6:	39 c3                	cmp    %eax,%ebx
  800420dbc8:	74 02                	je     800420dbcc <sched_yield+0x156>
  800420dbca:	eb 72                	jmp    800420dc3e <sched_yield+0x1c8>
  800420dbcc:	b8 00 00 00 00       	mov    $0x0,%eax
  800420dbd1:	48 ba d5 d9 20 04 80 	movabs $0x800420d9d5,%rdx
  800420dbd8:	00 00 00 
  800420dbdb:	ff d2                	callq  *%rdx
  800420dbdd:	89 45 e0             	mov    %eax,-0x20(%rbp)
  800420dbe0:	83 7d e0 00          	cmpl   $0x0,-0x20(%rbp)
  800420dbe4:	79 2d                	jns    800420dc13 <sched_yield+0x19d>
  800420dbe6:	48 b8 58 f2 4d 04 80 	movabs $0x80044df258,%rax
  800420dbed:	00 00 00 
  800420dbf0:	48 8b 10             	mov    (%rax),%rdx
  800420dbf3:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420dbf6:	48 98                	cltq   
  800420dbf8:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420dbff:	48 01 d0             	add    %rdx,%rax
  800420dc02:	48 89 c7             	mov    %rax,%rdi
  800420dc05:	48 b8 1f 95 20 04 80 	movabs $0x800420951f,%rax
  800420dc0c:	00 00 00 
  800420dc0f:	ff d0                	callq  *%rax
  800420dc11:	eb 2b                	jmp    800420dc3e <sched_yield+0x1c8>
  800420dc13:	48 b8 58 f2 4d 04 80 	movabs $0x80044df258,%rax
  800420dc1a:	00 00 00 
  800420dc1d:	48 8b 10             	mov    (%rax),%rdx
  800420dc20:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420dc23:	48 98                	cltq   
  800420dc25:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420dc2c:	48 01 d0             	add    %rdx,%rax
  800420dc2f:	48 89 c7             	mov    %rax,%rdi
  800420dc32:	48 b8 ea 96 20 04 80 	movabs $0x80042096ea,%rax
  800420dc39:	00 00 00 
  800420dc3c:	ff d0                	callq  *%rax
  800420dc3e:	83 45 e8 01          	addl   $0x1,-0x18(%rbp)
  800420dc42:	81 7d e8 00 04 00 00 	cmpl   $0x400,-0x18(%rbp)
  800420dc49:	0f 8e d8 fe ff ff    	jle    800420db27 <sched_yield+0xb1>
  800420dc4f:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420dc56:	00 00 00 
  800420dc59:	ff d0                	callq  *%rax
  800420dc5b:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420dc62:	00 00 00 
  800420dc65:	48 98                	cltq   
  800420dc67:	48 c1 e0 03          	shl    $0x3,%rax
  800420dc6b:	48 89 c1             	mov    %rax,%rcx
  800420dc6e:	48 c1 e1 04          	shl    $0x4,%rcx
  800420dc72:	48 01 c8             	add    %rcx,%rax
  800420dc75:	48 01 d0             	add    %rdx,%rax
  800420dc78:	48 83 c0 08          	add    $0x8,%rax
  800420dc7c:	48 8b 00             	mov    (%rax),%rax
  800420dc7f:	48 85 c0             	test   %rax,%rax
  800420dc82:	0f 84 4d 01 00 00    	je     800420ddd5 <sched_yield+0x35f>
  800420dc88:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420dc8f:	00 00 00 
  800420dc92:	ff d0                	callq  *%rax
  800420dc94:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420dc9b:	00 00 00 
  800420dc9e:	48 98                	cltq   
  800420dca0:	48 c1 e0 03          	shl    $0x3,%rax
  800420dca4:	48 89 c1             	mov    %rax,%rcx
  800420dca7:	48 c1 e1 04          	shl    $0x4,%rcx
  800420dcab:	48 01 c8             	add    %rcx,%rax
  800420dcae:	48 01 d0             	add    %rdx,%rax
  800420dcb1:	48 83 c0 08          	add    $0x8,%rax
  800420dcb5:	48 8b 00             	mov    (%rax),%rax
  800420dcb8:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420dcbe:	83 f8 03             	cmp    $0x3,%eax
  800420dcc1:	0f 85 0e 01 00 00    	jne    800420ddd5 <sched_yield+0x35f>
  800420dcc7:	48 b8 58 f2 4d 04 80 	movabs $0x80044df258,%rax
  800420dcce:	00 00 00 
  800420dcd1:	48 8b 10             	mov    (%rax),%rdx
  800420dcd4:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420dcd7:	48 98                	cltq   
  800420dcd9:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420dce0:	48 01 d0             	add    %rdx,%rax
  800420dce3:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800420dce9:	83 f8 03             	cmp    $0x3,%eax
  800420dcec:	0f 85 a4 00 00 00    	jne    800420dd96 <sched_yield+0x320>
  800420dcf2:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420dcf9:	00 00 00 
  800420dcfc:	ff d0                	callq  *%rax
  800420dcfe:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420dd05:	00 00 00 
  800420dd08:	48 98                	cltq   
  800420dd0a:	48 c1 e0 03          	shl    $0x3,%rax
  800420dd0e:	48 89 c1             	mov    %rax,%rcx
  800420dd11:	48 c1 e1 04          	shl    $0x4,%rcx
  800420dd15:	48 01 c8             	add    %rcx,%rax
  800420dd18:	48 01 d0             	add    %rdx,%rax
  800420dd1b:	48 83 c0 08          	add    $0x8,%rax
  800420dd1f:	48 8b 00             	mov    (%rax),%rax
  800420dd22:	8b 98 60 01 00 00    	mov    0x160(%rax),%ebx
  800420dd28:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420dd2f:	00 00 00 
  800420dd32:	ff d0                	callq  *%rax
  800420dd34:	39 c3                	cmp    %eax,%ebx
  800420dd36:	74 05                	je     800420dd3d <sched_yield+0x2c7>
  800420dd38:	e9 a4 00 00 00       	jmpq   800420dde1 <sched_yield+0x36b>
  800420dd3d:	b8 00 00 00 00       	mov    $0x0,%eax
  800420dd42:	48 ba d5 d9 20 04 80 	movabs $0x800420d9d5,%rdx
  800420dd49:	00 00 00 
  800420dd4c:	ff d2                	callq  *%rdx
  800420dd4e:	89 45 e0             	mov    %eax,-0x20(%rbp)
  800420dd51:	83 7d e0 00          	cmpl   $0x0,-0x20(%rbp)
  800420dd55:	79 3f                	jns    800420dd96 <sched_yield+0x320>
  800420dd57:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420dd5e:	00 00 00 
  800420dd61:	ff d0                	callq  *%rax
  800420dd63:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420dd6a:	00 00 00 
  800420dd6d:	48 98                	cltq   
  800420dd6f:	48 c1 e0 03          	shl    $0x3,%rax
  800420dd73:	48 89 c1             	mov    %rax,%rcx
  800420dd76:	48 c1 e1 04          	shl    $0x4,%rcx
  800420dd7a:	48 01 c8             	add    %rcx,%rax
  800420dd7d:	48 01 d0             	add    %rdx,%rax
  800420dd80:	48 83 c0 08          	add    $0x8,%rax
  800420dd84:	48 8b 00             	mov    (%rax),%rax
  800420dd87:	48 89 c7             	mov    %rax,%rdi
  800420dd8a:	48 b8 1f 95 20 04 80 	movabs $0x800420951f,%rax
  800420dd91:	00 00 00 
  800420dd94:	ff d0                	callq  *%rax
  800420dd96:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420dd9d:	00 00 00 
  800420dda0:	ff d0                	callq  *%rax
  800420dda2:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420dda9:	00 00 00 
  800420ddac:	48 98                	cltq   
  800420ddae:	48 c1 e0 03          	shl    $0x3,%rax
  800420ddb2:	48 89 c1             	mov    %rax,%rcx
  800420ddb5:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ddb9:	48 01 c8             	add    %rcx,%rax
  800420ddbc:	48 01 d0             	add    %rdx,%rax
  800420ddbf:	48 83 c0 08          	add    $0x8,%rax
  800420ddc3:	48 8b 00             	mov    (%rax),%rax
  800420ddc6:	48 89 c7             	mov    %rax,%rdi
  800420ddc9:	48 b8 ea 96 20 04 80 	movabs $0x80042096ea,%rax
  800420ddd0:	00 00 00 
  800420ddd3:	ff d0                	callq  *%rax
  800420ddd5:	48 b8 e8 dd 20 04 80 	movabs $0x800420dde8,%rax
  800420dddc:	00 00 00 
  800420dddf:	ff d0                	callq  *%rax
  800420dde1:	48 83 c4 18          	add    $0x18,%rsp
  800420dde5:	5b                   	pop    %rbx
  800420dde6:	5d                   	pop    %rbp
  800420dde7:	c3                   	retq   

000000800420dde8 <sched_halt>:
  800420dde8:	55                   	push   %rbp
  800420dde9:	48 89 e5             	mov    %rsp,%rbp
  800420ddec:	48 83 ec 20          	sub    $0x20,%rsp
  800420ddf0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420ddf7:	eb 79                	jmp    800420de72 <sched_halt+0x8a>
  800420ddf9:	48 b8 58 f2 4d 04 80 	movabs $0x80044df258,%rax
  800420de00:	00 00 00 
  800420de03:	48 8b 10             	mov    (%rax),%rdx
  800420de06:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420de09:	48 98                	cltq   
  800420de0b:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420de12:	48 01 d0             	add    %rdx,%rax
  800420de15:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420de1b:	83 f8 02             	cmp    $0x2,%eax
  800420de1e:	74 5f                	je     800420de7f <sched_halt+0x97>
  800420de20:	48 b8 58 f2 4d 04 80 	movabs $0x80044df258,%rax
  800420de27:	00 00 00 
  800420de2a:	48 8b 10             	mov    (%rax),%rdx
  800420de2d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420de30:	48 98                	cltq   
  800420de32:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420de39:	48 01 d0             	add    %rdx,%rax
  800420de3c:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420de42:	83 f8 03             	cmp    $0x3,%eax
  800420de45:	74 38                	je     800420de7f <sched_halt+0x97>
  800420de47:	48 b8 58 f2 4d 04 80 	movabs $0x80044df258,%rax
  800420de4e:	00 00 00 
  800420de51:	48 8b 10             	mov    (%rax),%rdx
  800420de54:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420de57:	48 98                	cltq   
  800420de59:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420de60:	48 01 d0             	add    %rdx,%rax
  800420de63:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420de69:	83 f8 01             	cmp    $0x1,%eax
  800420de6c:	74 11                	je     800420de7f <sched_halt+0x97>
  800420de6e:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800420de72:	81 7d fc ff 03 00 00 	cmpl   $0x3ff,-0x4(%rbp)
  800420de79:	0f 8e 7a ff ff ff    	jle    800420ddf9 <sched_halt+0x11>
  800420de7f:	81 7d fc 00 04 00 00 	cmpl   $0x400,-0x4(%rbp)
  800420de86:	75 2e                	jne    800420deb6 <sched_halt+0xce>
  800420de88:	48 bf 28 fd 21 04 80 	movabs $0x800421fd28,%rdi
  800420de8f:	00 00 00 
  800420de92:	b8 00 00 00 00       	mov    $0x0,%eax
  800420de97:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420de9e:	00 00 00 
  800420dea1:	ff d2                	callq  *%rdx
  800420dea3:	bf 00 00 00 00       	mov    $0x0,%edi
  800420dea8:	48 b8 5d 1a 20 04 80 	movabs $0x8004201a5d,%rax
  800420deaf:	00 00 00 
  800420deb2:	ff d0                	callq  *%rax
  800420deb4:	eb ed                	jmp    800420dea3 <sched_halt+0xbb>
  800420deb6:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420debd:	00 00 00 
  800420dec0:	ff d0                	callq  *%rax
  800420dec2:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420dec9:	00 00 00 
  800420decc:	48 98                	cltq   
  800420dece:	48 c1 e0 03          	shl    $0x3,%rax
  800420ded2:	48 89 c1             	mov    %rax,%rcx
  800420ded5:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ded9:	48 01 c8             	add    %rcx,%rax
  800420dedc:	48 01 d0             	add    %rdx,%rax
  800420dedf:	48 83 c0 08          	add    $0x8,%rax
  800420dee3:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800420deea:	48 b8 f0 e5 6d 04 80 	movabs $0x80046de5f0,%rax
  800420def1:	00 00 00 
  800420def4:	48 8b 00             	mov    (%rax),%rax
  800420def7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420defb:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420df02:	00 00 00 
  800420df05:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  800420df09:	77 32                	ja     800420df3d <sched_halt+0x155>
  800420df0b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420df0f:	48 89 c1             	mov    %rax,%rcx
  800420df12:	48 ba 58 fd 21 04 80 	movabs $0x800421fd58,%rdx
  800420df19:	00 00 00 
  800420df1c:	be 76 00 00 00       	mov    $0x76,%esi
  800420df21:	48 bf 7c fd 21 04 80 	movabs $0x800421fd7c,%rdi
  800420df28:	00 00 00 
  800420df2b:	b8 00 00 00 00       	mov    $0x0,%eax
  800420df30:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420df37:	00 00 00 
  800420df3a:	41 ff d0             	callq  *%r8
  800420df3d:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800420df44:	ff ff ff 
  800420df47:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420df4b:	48 01 d0             	add    %rdx,%rax
  800420df4e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
}

static __inline void
lcr3(uint64_t val)
{
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  800420df52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420df56:	0f 22 d8             	mov    %rax,%cr3
  800420df59:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420df60:	00 00 00 
  800420df63:	ff d0                	callq  *%rax
  800420df65:	48 98                	cltq   
  800420df67:	48 c1 e0 03          	shl    $0x3,%rax
  800420df6b:	48 89 c2             	mov    %rax,%rdx
  800420df6e:	48 c1 e2 04          	shl    $0x4,%rdx
  800420df72:	48 01 d0             	add    %rdx,%rax
  800420df75:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420df7c:	00 00 00 
  800420df7f:	48 01 d0             	add    %rdx,%rax
  800420df82:	48 83 c0 04          	add    $0x4,%rax
  800420df86:	be 02 00 00 00       	mov    $0x2,%esi
  800420df8b:	48 89 c7             	mov    %rax,%rdi
  800420df8e:	48 b8 92 d9 20 04 80 	movabs $0x800420d992,%rax
  800420df95:	00 00 00 
  800420df98:	ff d0                	callq  *%rax
  800420df9a:	48 b8 b7 d9 20 04 80 	movabs $0x800420d9b7,%rax
  800420dfa1:	00 00 00 
  800420dfa4:	ff d0                	callq  *%rax
  800420dfa6:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420dfad:	00 00 00 
  800420dfb0:	ff d0                	callq  *%rax
  800420dfb2:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420dfb9:	00 00 00 
  800420dfbc:	48 98                	cltq   
  800420dfbe:	48 c1 e0 03          	shl    $0x3,%rax
  800420dfc2:	48 89 c1             	mov    %rax,%rcx
  800420dfc5:	48 c1 e1 04          	shl    $0x4,%rcx
  800420dfc9:	48 01 c8             	add    %rcx,%rax
  800420dfcc:	48 01 d0             	add    %rdx,%rax
  800420dfcf:	48 83 c0 10          	add    $0x10,%rax
  800420dfd3:	48 8b 40 04          	mov    0x4(%rax),%rax
  800420dfd7:	48 c7 c5 00 00 00 00 	mov    $0x0,%rbp
  800420dfde:	48 89 c4             	mov    %rax,%rsp
  800420dfe1:	6a 00                	pushq  $0x0
  800420dfe3:	6a 00                	pushq  $0x0
  800420dfe5:	fb                   	sti    
  800420dfe6:	f4                   	hlt    
  800420dfe7:	c9                   	leaveq 
  800420dfe8:	c3                   	retq   

000000800420dfe9 <page2ppn>:
  800420dfe9:	55                   	push   %rbp
  800420dfea:	48 89 e5             	mov    %rsp,%rbp
  800420dfed:	48 83 ec 08          	sub    $0x8,%rsp
  800420dff1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420dff5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420dff9:	48 b8 00 e6 6d 04 80 	movabs $0x80046de600,%rax
  800420e000:	00 00 00 
  800420e003:	48 8b 00             	mov    (%rax),%rax
  800420e006:	48 29 c2             	sub    %rax,%rdx
  800420e009:	48 89 d0             	mov    %rdx,%rax
  800420e00c:	48 c1 f8 04          	sar    $0x4,%rax
  800420e010:	c9                   	leaveq 
  800420e011:	c3                   	retq   

000000800420e012 <page2pa>:
  800420e012:	55                   	push   %rbp
  800420e013:	48 89 e5             	mov    %rsp,%rbp
  800420e016:	48 83 ec 08          	sub    $0x8,%rsp
  800420e01a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420e01e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420e022:	48 89 c7             	mov    %rax,%rdi
  800420e025:	48 b8 e9 df 20 04 80 	movabs $0x800420dfe9,%rax
  800420e02c:	00 00 00 
  800420e02f:	ff d0                	callq  *%rax
  800420e031:	48 c1 e0 0c          	shl    $0xc,%rax
  800420e035:	c9                   	leaveq 
  800420e036:	c3                   	retq   

000000800420e037 <page2kva>:
  800420e037:	55                   	push   %rbp
  800420e038:	48 89 e5             	mov    %rsp,%rbp
  800420e03b:	48 83 ec 20          	sub    $0x20,%rsp
  800420e03f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420e043:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e047:	48 89 c7             	mov    %rax,%rdi
  800420e04a:	48 b8 12 e0 20 04 80 	movabs $0x800420e012,%rax
  800420e051:	00 00 00 
  800420e054:	ff d0                	callq  *%rax
  800420e056:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420e05a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420e05e:	48 c1 e8 0c          	shr    $0xc,%rax
  800420e062:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800420e065:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800420e068:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  800420e06f:	00 00 00 
  800420e072:	48 8b 00             	mov    (%rax),%rax
  800420e075:	48 39 c2             	cmp    %rax,%rdx
  800420e078:	72 32                	jb     800420e0ac <page2kva+0x75>
  800420e07a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420e07e:	48 89 c1             	mov    %rax,%rcx
  800420e081:	48 ba 90 fd 21 04 80 	movabs $0x800421fd90,%rdx
  800420e088:	00 00 00 
  800420e08b:	be 62 00 00 00       	mov    $0x62,%esi
  800420e090:	48 bf b3 fd 21 04 80 	movabs $0x800421fdb3,%rdi
  800420e097:	00 00 00 
  800420e09a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e09f:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420e0a6:	00 00 00 
  800420e0a9:	41 ff d0             	callq  *%r8
  800420e0ac:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420e0b3:	00 00 00 
  800420e0b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420e0ba:	48 01 d0             	add    %rdx,%rax
  800420e0bd:	c9                   	leaveq 
  800420e0be:	c3                   	retq   

000000800420e0bf <sys_cputs>:
// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void
sys_cputs(const char *s, size_t len)
{
  800420e0bf:	55                   	push   %rbp
  800420e0c0:	48 89 e5             	mov    %rsp,%rbp
  800420e0c3:	48 83 ec 10          	sub    $0x10,%rsp
  800420e0c7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420e0cb:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	// Check that the user has permission to read memory [s, s+len).
	// Destroy the environment if not.

	// LAB 3: Your code here.
	user_mem_assert(curenv, s, len, PTE_U);
  800420e0cf:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420e0d6:	00 00 00 
  800420e0d9:	ff d0                	callq  *%rax
  800420e0db:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420e0e2:	00 00 00 
  800420e0e5:	48 98                	cltq   
  800420e0e7:	48 c1 e0 03          	shl    $0x3,%rax
  800420e0eb:	48 89 c1             	mov    %rax,%rcx
  800420e0ee:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e0f2:	48 01 c8             	add    %rcx,%rax
  800420e0f5:	48 01 d0             	add    %rdx,%rax
  800420e0f8:	48 83 c0 08          	add    $0x8,%rax
  800420e0fc:	48 8b 00             	mov    (%rax),%rax
  800420e0ff:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420e103:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  800420e107:	b9 04 00 00 00       	mov    $0x4,%ecx
  800420e10c:	48 89 c7             	mov    %rax,%rdi
  800420e10f:	48 b8 6b 41 20 04 80 	movabs $0x800420416b,%rax
  800420e116:	00 00 00 
  800420e119:	ff d0                	callq  *%rax

	// Print the string supplied by the user.
	cprintf("%.*s", len, s);
  800420e11b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420e11f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e123:	48 89 c6             	mov    %rax,%rsi
  800420e126:	48 bf c2 fd 21 04 80 	movabs $0x800421fdc2,%rdi
  800420e12d:	00 00 00 
  800420e130:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e135:	48 b9 83 9c 20 04 80 	movabs $0x8004209c83,%rcx
  800420e13c:	00 00 00 
  800420e13f:	ff d1                	callq  *%rcx
}
  800420e141:	c9                   	leaveq 
  800420e142:	c3                   	retq   

000000800420e143 <sys_cgetc>:

// Read a character from the system console without blocking.
// Returns the character, or 0 if there is no input waiting.
static int
sys_cgetc(void)
{
  800420e143:	55                   	push   %rbp
  800420e144:	48 89 e5             	mov    %rsp,%rbp
	return cons_getc();
  800420e147:	48 b8 b2 10 20 04 80 	movabs $0x80042010b2,%rax
  800420e14e:	00 00 00 
  800420e151:	ff d0                	callq  *%rax
}
  800420e153:	5d                   	pop    %rbp
  800420e154:	c3                   	retq   

000000800420e155 <sys_getenvid>:

// Returns the current environment's envid.
static envid_t
sys_getenvid(void)
{
  800420e155:	55                   	push   %rbp
  800420e156:	48 89 e5             	mov    %rsp,%rbp
	return curenv->env_id;
  800420e159:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420e160:	00 00 00 
  800420e163:	ff d0                	callq  *%rax
  800420e165:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420e16c:	00 00 00 
  800420e16f:	48 98                	cltq   
  800420e171:	48 c1 e0 03          	shl    $0x3,%rax
  800420e175:	48 89 c1             	mov    %rax,%rcx
  800420e178:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e17c:	48 01 c8             	add    %rcx,%rax
  800420e17f:	48 01 d0             	add    %rdx,%rax
  800420e182:	48 83 c0 08          	add    $0x8,%rax
  800420e186:	48 8b 00             	mov    (%rax),%rax
  800420e189:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
}
  800420e18f:	5d                   	pop    %rbp
  800420e190:	c3                   	retq   

000000800420e191 <sys_env_destroy>:
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int
sys_env_destroy(envid_t envid)
{
  800420e191:	55                   	push   %rbp
  800420e192:	48 89 e5             	mov    %rsp,%rbp
  800420e195:	48 83 ec 20          	sub    $0x20,%rsp
  800420e199:	89 7d ec             	mov    %edi,-0x14(%rbp)
	int r;
	struct Env *e;

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420e19c:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420e1a0:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e1a3:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e1a8:	48 89 ce             	mov    %rcx,%rsi
  800420e1ab:	89 c7                	mov    %eax,%edi
  800420e1ad:	48 b8 0d 7e 20 04 80 	movabs $0x8004207e0d,%rax
  800420e1b4:	00 00 00 
  800420e1b7:	ff d0                	callq  *%rax
  800420e1b9:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e1bc:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e1c0:	79 05                	jns    800420e1c7 <sys_env_destroy+0x36>
		return r;
  800420e1c2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e1c5:	eb 18                	jmp    800420e1df <sys_env_destroy+0x4e>
	env_destroy(e);
  800420e1c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e1cb:	48 89 c7             	mov    %rax,%rdi
  800420e1ce:	48 b8 1f 95 20 04 80 	movabs $0x800420951f,%rax
  800420e1d5:	00 00 00 
  800420e1d8:	ff d0                	callq  *%rax
	return 0;
  800420e1da:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e1df:	c9                   	leaveq 
  800420e1e0:	c3                   	retq   

000000800420e1e1 <sys_yield>:

// Deschedule current environment and pick a different one to run.
static void
sys_yield(void)
{
  800420e1e1:	55                   	push   %rbp
  800420e1e2:	48 89 e5             	mov    %rsp,%rbp
	sched_yield();
  800420e1e5:	48 b8 76 da 20 04 80 	movabs $0x800420da76,%rax
  800420e1ec:	00 00 00 
  800420e1ef:	ff d0                	callq  *%rax

000000800420e1f1 <sys_exofork>:
// Returns envid of new environment, or < 0 on error.  Errors are:
//	-E_NO_FREE_ENV if no free environment is available.
//	-E_NO_MEM on memory exhaustion.
static envid_t
sys_exofork(void)
{
  800420e1f1:	55                   	push   %rbp
  800420e1f2:	48 89 e5             	mov    %rsp,%rbp
  800420e1f5:	53                   	push   %rbx
  800420e1f6:	48 83 ec 18          	sub    $0x18,%rsp
	int r;
	struct Env *e;

	if ((r = env_alloc(&e, curenv->env_id)) < 0)
  800420e1fa:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420e201:	00 00 00 
  800420e204:	ff d0                	callq  *%rax
  800420e206:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420e20d:	00 00 00 
  800420e210:	48 98                	cltq   
  800420e212:	48 c1 e0 03          	shl    $0x3,%rax
  800420e216:	48 89 c1             	mov    %rax,%rcx
  800420e219:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e21d:	48 01 c8             	add    %rcx,%rax
  800420e220:	48 01 d0             	add    %rdx,%rax
  800420e223:	48 83 c0 08          	add    $0x8,%rax
  800420e227:	48 8b 00             	mov    (%rax),%rax
  800420e22a:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800420e230:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  800420e234:	89 d6                	mov    %edx,%esi
  800420e236:	48 89 c7             	mov    %rax,%rdi
  800420e239:	48 b8 5d 89 20 04 80 	movabs $0x800420895d,%rax
  800420e240:	00 00 00 
  800420e243:	ff d0                	callq  *%rax
  800420e245:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420e248:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420e24c:	79 05                	jns    800420e253 <sys_exofork+0x62>
		return r;
  800420e24e:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e251:	eb 6c                	jmp    800420e2bf <sys_exofork+0xce>
	e->env_status = ENV_NOT_RUNNABLE;
  800420e253:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e257:	c7 80 d4 00 00 00 04 	movl   $0x4,0xd4(%rax)
  800420e25e:	00 00 00 
	e->env_tf = curenv->env_tf;
  800420e261:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
  800420e265:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420e26c:	00 00 00 
  800420e26f:	ff d0                	callq  *%rax
  800420e271:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420e278:	00 00 00 
  800420e27b:	48 98                	cltq   
  800420e27d:	48 c1 e0 03          	shl    $0x3,%rax
  800420e281:	48 89 c1             	mov    %rax,%rcx
  800420e284:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e288:	48 01 c8             	add    %rcx,%rax
  800420e28b:	48 01 d0             	add    %rdx,%rax
  800420e28e:	48 83 c0 08          	add    $0x8,%rax
  800420e292:	48 8b 00             	mov    (%rax),%rax
  800420e295:	48 89 da             	mov    %rbx,%rdx
  800420e298:	48 89 c6             	mov    %rax,%rsi
  800420e29b:	b8 18 00 00 00       	mov    $0x18,%eax
  800420e2a0:	48 89 d7             	mov    %rdx,%rdi
  800420e2a3:	48 89 c1             	mov    %rax,%rcx
  800420e2a6:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
	e->env_tf.tf_regs.reg_rax = 0;
  800420e2a9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e2ad:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
  800420e2b4:	00 
	return e->env_id;
  800420e2b5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e2b9:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
}
  800420e2bf:	48 83 c4 18          	add    $0x18,%rsp
  800420e2c3:	5b                   	pop    %rbx
  800420e2c4:	5d                   	pop    %rbp
  800420e2c5:	c3                   	retq   

000000800420e2c6 <sys_env_set_status>:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if status is not a valid status for an environment.
static int
sys_env_set_status(envid_t envid, int status)
{
  800420e2c6:	55                   	push   %rbp
  800420e2c7:	48 89 e5             	mov    %rsp,%rbp
  800420e2ca:	48 83 ec 20          	sub    $0x20,%rsp
  800420e2ce:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420e2d1:	89 75 e8             	mov    %esi,-0x18(%rbp)
	struct Env *e;
	int r;

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420e2d4:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420e2d8:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e2db:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e2e0:	48 89 ce             	mov    %rcx,%rsi
  800420e2e3:	89 c7                	mov    %eax,%edi
  800420e2e5:	48 b8 0d 7e 20 04 80 	movabs $0x8004207e0d,%rax
  800420e2ec:	00 00 00 
  800420e2ef:	ff d0                	callq  *%rax
  800420e2f1:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e2f4:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e2f8:	79 05                	jns    800420e2ff <sys_env_set_status+0x39>
		return r;
  800420e2fa:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e2fd:	eb 25                	jmp    800420e324 <sys_env_set_status+0x5e>
	if (status != ENV_RUNNABLE && status != ENV_NOT_RUNNABLE)
  800420e2ff:	83 7d e8 02          	cmpl   $0x2,-0x18(%rbp)
  800420e303:	74 0d                	je     800420e312 <sys_env_set_status+0x4c>
  800420e305:	83 7d e8 04          	cmpl   $0x4,-0x18(%rbp)
  800420e309:	74 07                	je     800420e312 <sys_env_set_status+0x4c>
		return -E_INVAL;
  800420e30b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e310:	eb 12                	jmp    800420e324 <sys_env_set_status+0x5e>
	e->env_status = status;
  800420e312:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e316:	8b 55 e8             	mov    -0x18(%rbp),%edx
  800420e319:	89 90 d4 00 00 00    	mov    %edx,0xd4(%rax)
	return 0;
  800420e31f:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e324:	c9                   	leaveq 
  800420e325:	c3                   	retq   

000000800420e326 <sys_env_set_trapframe>:
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int
sys_env_set_trapframe(envid_t envid, struct Trapframe *tf)
{
  800420e326:	55                   	push   %rbp
  800420e327:	48 89 e5             	mov    %rsp,%rbp
  800420e32a:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
  800420e331:	89 bd 2c ff ff ff    	mov    %edi,-0xd4(%rbp)
  800420e337:	48 89 b5 20 ff ff ff 	mov    %rsi,-0xe0(%rbp)
	int r;
	struct Env *e;
	struct Trapframe ltf;

	user_mem_assert(curenv, tf, sizeof(struct Trapframe), PTE_U);
  800420e33e:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420e345:	00 00 00 
  800420e348:	ff d0                	callq  *%rax
  800420e34a:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420e351:	00 00 00 
  800420e354:	48 98                	cltq   
  800420e356:	48 c1 e0 03          	shl    $0x3,%rax
  800420e35a:	48 89 c1             	mov    %rax,%rcx
  800420e35d:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e361:	48 01 c8             	add    %rcx,%rax
  800420e364:	48 01 d0             	add    %rdx,%rax
  800420e367:	48 83 c0 08          	add    $0x8,%rax
  800420e36b:	48 8b 00             	mov    (%rax),%rax
  800420e36e:	48 8b b5 20 ff ff ff 	mov    -0xe0(%rbp),%rsi
  800420e375:	b9 04 00 00 00       	mov    $0x4,%ecx
  800420e37a:	ba c0 00 00 00       	mov    $0xc0,%edx
  800420e37f:	48 89 c7             	mov    %rax,%rdi
  800420e382:	48 b8 6b 41 20 04 80 	movabs $0x800420416b,%rax
  800420e389:	00 00 00 
  800420e38c:	ff d0                	callq  *%rax
	ltf = *tf;
  800420e38e:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  800420e395:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  800420e39c:	48 89 c6             	mov    %rax,%rsi
  800420e39f:	b8 18 00 00 00       	mov    $0x18,%eax
  800420e3a4:	48 89 d7             	mov    %rdx,%rdi
  800420e3a7:	48 89 c1             	mov    %rax,%rcx
  800420e3aa:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
	ltf.tf_eflags |= FL_IF;
  800420e3ad:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e3b1:	80 cc 02             	or     $0x2,%ah
  800420e3b4:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	ltf.tf_cs |= 3;
  800420e3b8:	0f b7 45 d0          	movzwl -0x30(%rbp),%eax
  800420e3bc:	83 c8 03             	or     $0x3,%eax
  800420e3bf:	66 89 45 d0          	mov    %ax,-0x30(%rbp)

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420e3c3:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420e3c7:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
  800420e3cd:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e3d2:	48 89 ce             	mov    %rcx,%rsi
  800420e3d5:	89 c7                	mov    %eax,%edi
  800420e3d7:	48 b8 0d 7e 20 04 80 	movabs $0x8004207e0d,%rax
  800420e3de:	00 00 00 
  800420e3e1:	ff d0                	callq  *%rax
  800420e3e3:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e3e6:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e3ea:	79 05                	jns    800420e3f1 <sys_env_set_trapframe+0xcb>
		return r;
  800420e3ec:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e3ef:	eb 21                	jmp    800420e412 <sys_env_set_trapframe+0xec>
	e->env_tf = ltf;
  800420e3f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e3f5:	48 89 c2             	mov    %rax,%rdx
  800420e3f8:	48 8d b5 30 ff ff ff 	lea    -0xd0(%rbp),%rsi
  800420e3ff:	b8 18 00 00 00       	mov    $0x18,%eax
  800420e404:	48 89 d7             	mov    %rdx,%rdi
  800420e407:	48 89 c1             	mov    %rax,%rcx
  800420e40a:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
	return 0;
  800420e40d:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e412:	c9                   	leaveq 
  800420e413:	c3                   	retq   

000000800420e414 <sys_env_set_pgfault_upcall>:
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int
sys_env_set_pgfault_upcall(envid_t envid, void *func)
{
  800420e414:	55                   	push   %rbp
  800420e415:	48 89 e5             	mov    %rsp,%rbp
  800420e418:	48 83 ec 20          	sub    $0x20,%rsp
  800420e41c:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420e41f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	int r;
	struct Env *e;

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420e423:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420e427:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e42a:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e42f:	48 89 ce             	mov    %rcx,%rsi
  800420e432:	89 c7                	mov    %eax,%edi
  800420e434:	48 b8 0d 7e 20 04 80 	movabs $0x8004207e0d,%rax
  800420e43b:	00 00 00 
  800420e43e:	ff d0                	callq  *%rax
  800420e440:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e443:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e447:	79 05                	jns    800420e44e <sys_env_set_pgfault_upcall+0x3a>
		return r;
  800420e449:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e44c:	eb 14                	jmp    800420e462 <sys_env_set_pgfault_upcall+0x4e>
	e->env_pgfault_upcall = func;
  800420e44e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e452:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420e456:	48 89 90 f0 00 00 00 	mov    %rdx,0xf0(%rax)
	return 0;
  800420e45d:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e462:	c9                   	leaveq 
  800420e463:	c3                   	retq   

000000800420e464 <sys_page_alloc>:
//	-E_INVAL if perm is inappropriate (see above).
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int
sys_page_alloc(envid_t envid, void *va, int perm)
{
  800420e464:	55                   	push   %rbp
  800420e465:	48 89 e5             	mov    %rsp,%rbp
  800420e468:	48 83 ec 30          	sub    $0x30,%rsp
  800420e46c:	89 7d dc             	mov    %edi,-0x24(%rbp)
  800420e46f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800420e473:	89 55 d8             	mov    %edx,-0x28(%rbp)
	int r;
	struct Env *e;
	struct PageInfo *pp;

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420e476:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
  800420e47a:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800420e47d:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e482:	48 89 ce             	mov    %rcx,%rsi
  800420e485:	89 c7                	mov    %eax,%edi
  800420e487:	48 b8 0d 7e 20 04 80 	movabs $0x8004207e0d,%rax
  800420e48e:	00 00 00 
  800420e491:	ff d0                	callq  *%rax
  800420e493:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e496:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e49a:	79 08                	jns    800420e4a4 <sys_page_alloc+0x40>
		return r;
  800420e49c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e49f:	e9 a7 00 00 00       	jmpq   800420e54b <sys_page_alloc+0xe7>
	if ((~perm & (PTE_U | PTE_P)) || (perm & ~PTE_SYSCALL))
  800420e4a4:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800420e4a7:	f7 d0                	not    %eax
  800420e4a9:	83 e0 05             	and    $0x5,%eax
  800420e4ac:	85 c0                	test   %eax,%eax
  800420e4ae:	75 0c                	jne    800420e4bc <sys_page_alloc+0x58>
  800420e4b0:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800420e4b3:	25 f8 f1 ff ff       	and    $0xfffff1f8,%eax
  800420e4b8:	85 c0                	test   %eax,%eax
  800420e4ba:	74 0a                	je     800420e4c6 <sys_page_alloc+0x62>
		return -E_INVAL;
  800420e4bc:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e4c1:	e9 85 00 00 00       	jmpq   800420e54b <sys_page_alloc+0xe7>
	if (va >= (void *)UTOP)
  800420e4c6:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e4cd:	00 00 00 
  800420e4d0:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  800420e4d4:	76 07                	jbe    800420e4dd <sys_page_alloc+0x79>
		return -E_INVAL;
  800420e4d6:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e4db:	eb 6e                	jmp    800420e54b <sys_page_alloc+0xe7>
	if (!(pp = page_alloc(ALLOC_ZERO)))
  800420e4dd:	bf 01 00 00 00       	mov    $0x1,%edi
  800420e4e2:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  800420e4e9:	00 00 00 
  800420e4ec:	ff d0                	callq  *%rax
  800420e4ee:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420e4f2:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  800420e4f7:	75 07                	jne    800420e500 <sys_page_alloc+0x9c>
		return -E_NO_MEM;
  800420e4f9:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  800420e4fe:	eb 4b                	jmp    800420e54b <sys_page_alloc+0xe7>
	if ((r = page_insert(e->env_pml4e, pp, va, perm)) < 0)
  800420e500:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e504:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e50b:	8b 4d d8             	mov    -0x28(%rbp),%ecx
  800420e50e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420e512:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  800420e516:	48 89 c7             	mov    %rax,%rdi
  800420e519:	48 b8 19 3a 20 04 80 	movabs $0x8004203a19,%rax
  800420e520:	00 00 00 
  800420e523:	ff d0                	callq  *%rax
  800420e525:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e528:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e52c:	79 18                	jns    800420e546 <sys_page_alloc+0xe2>
	{
		page_free(pp);
  800420e52e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e532:	48 89 c7             	mov    %rax,%rdi
  800420e535:	48 b8 59 2f 20 04 80 	movabs $0x8004202f59,%rax
  800420e53c:	00 00 00 
  800420e53f:	ff d0                	callq  *%rax
		return r;
  800420e541:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e544:	eb 05                	jmp    800420e54b <sys_page_alloc+0xe7>
	}
	return 0;
  800420e546:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e54b:	c9                   	leaveq 
  800420e54c:	c3                   	retq   

000000800420e54d <sys_page_map>:
//		address space.
//	-E_NO_MEM if there's no memory to allocate any necessary page tables.
static int
sys_page_map(envid_t srcenvid, void *srcva,
			 envid_t dstenvid, void *dstva, int perm)
{
  800420e54d:	55                   	push   %rbp
  800420e54e:	48 89 e5             	mov    %rsp,%rbp
  800420e551:	48 83 ec 60          	sub    $0x60,%rsp
  800420e555:	89 7d bc             	mov    %edi,-0x44(%rbp)
  800420e558:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  800420e55c:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420e55f:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
  800420e563:	44 89 45 a4          	mov    %r8d,-0x5c(%rbp)
	int r;
	struct Env *es, *ed;
	struct PageInfo *pp;
	pte_t *ppte;

	if (srcva >= (void *)UTOP || dstva >= (void *)UTOP)
  800420e567:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e56e:	00 00 00 
  800420e571:	48 39 45 b0          	cmp    %rax,-0x50(%rbp)
  800420e575:	77 10                	ja     800420e587 <sys_page_map+0x3a>
  800420e577:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e57e:	00 00 00 
  800420e581:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
  800420e585:	76 0a                	jbe    800420e591 <sys_page_map+0x44>
		return -E_INVAL;
  800420e587:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e58c:	e9 3f 01 00 00       	jmpq   800420e6d0 <sys_page_map+0x183>
	if (srcva != ROUNDDOWN(srcva, PGSIZE) || dstva != ROUNDDOWN(dstva, PGSIZE))
  800420e591:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420e595:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420e599:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e59d:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420e5a3:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  800420e5a7:	75 18                	jne    800420e5c1 <sys_page_map+0x74>
  800420e5a9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420e5ad:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420e5b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e5b5:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420e5bb:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  800420e5bf:	74 0a                	je     800420e5cb <sys_page_map+0x7e>
		return -E_INVAL;
  800420e5c1:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e5c6:	e9 05 01 00 00       	jmpq   800420e6d0 <sys_page_map+0x183>

	if ((r = envid2env(srcenvid, &es, 1)) < 0 || (r = envid2env(dstenvid, &ed, 1)) < 0)
  800420e5cb:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  800420e5cf:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420e5d2:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e5d7:	48 89 ce             	mov    %rcx,%rsi
  800420e5da:	89 c7                	mov    %eax,%edi
  800420e5dc:	48 b8 0d 7e 20 04 80 	movabs $0x8004207e0d,%rax
  800420e5e3:	00 00 00 
  800420e5e6:	ff d0                	callq  *%rax
  800420e5e8:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e5eb:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e5ef:	78 26                	js     800420e617 <sys_page_map+0xca>
  800420e5f1:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  800420e5f5:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420e5f8:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e5fd:	48 89 ce             	mov    %rcx,%rsi
  800420e600:	89 c7                	mov    %eax,%edi
  800420e602:	48 b8 0d 7e 20 04 80 	movabs $0x8004207e0d,%rax
  800420e609:	00 00 00 
  800420e60c:	ff d0                	callq  *%rax
  800420e60e:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e611:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e615:	79 08                	jns    800420e61f <sys_page_map+0xd2>
		return r;
  800420e617:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e61a:	e9 b1 00 00 00       	jmpq   800420e6d0 <sys_page_map+0x183>
	if ((~perm & (PTE_U | PTE_P)) || (perm & ~PTE_SYSCALL))
  800420e61f:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800420e622:	f7 d0                	not    %eax
  800420e624:	83 e0 05             	and    $0x5,%eax
  800420e627:	85 c0                	test   %eax,%eax
  800420e629:	75 0c                	jne    800420e637 <sys_page_map+0xea>
  800420e62b:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800420e62e:	25 f8 f1 ff ff       	and    $0xfffff1f8,%eax
  800420e633:	85 c0                	test   %eax,%eax
  800420e635:	74 0a                	je     800420e641 <sys_page_map+0xf4>
		return -E_INVAL;
  800420e637:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e63c:	e9 8f 00 00 00       	jmpq   800420e6d0 <sys_page_map+0x183>
	if ((pp = page_lookup(es->env_pml4e, srcva, &ppte)) == 0)
  800420e641:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e645:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e64c:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
  800420e650:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  800420e654:	48 89 ce             	mov    %rcx,%rsi
  800420e657:	48 89 c7             	mov    %rax,%rdi
  800420e65a:	48 b8 89 3d 20 04 80 	movabs $0x8004203d89,%rax
  800420e661:	00 00 00 
  800420e664:	ff d0                	callq  *%rax
  800420e666:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420e66a:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420e66f:	75 07                	jne    800420e678 <sys_page_map+0x12b>
		return -E_INVAL;
  800420e671:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e676:	eb 58                	jmp    800420e6d0 <sys_page_map+0x183>
	if ((perm & PTE_W) && !(*ppte & PTE_W))
  800420e678:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800420e67b:	83 e0 02             	and    $0x2,%eax
  800420e67e:	85 c0                	test   %eax,%eax
  800420e680:	74 16                	je     800420e698 <sys_page_map+0x14b>
  800420e682:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420e686:	48 8b 00             	mov    (%rax),%rax
  800420e689:	83 e0 02             	and    $0x2,%eax
  800420e68c:	48 85 c0             	test   %rax,%rax
  800420e68f:	75 07                	jne    800420e698 <sys_page_map+0x14b>
		return -E_INVAL;
  800420e691:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e696:	eb 38                	jmp    800420e6d0 <sys_page_map+0x183>
	if ((r = page_insert(ed->env_pml4e, pp, dstva, perm)) < 0)
  800420e698:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420e69c:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e6a3:	8b 4d a4             	mov    -0x5c(%rbp),%ecx
  800420e6a6:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  800420e6aa:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420e6ae:	48 89 c7             	mov    %rax,%rdi
  800420e6b1:	48 b8 19 3a 20 04 80 	movabs $0x8004203a19,%rax
  800420e6b8:	00 00 00 
  800420e6bb:	ff d0                	callq  *%rax
  800420e6bd:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e6c0:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e6c4:	79 05                	jns    800420e6cb <sys_page_map+0x17e>
		return r;
  800420e6c6:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e6c9:	eb 05                	jmp    800420e6d0 <sys_page_map+0x183>
	return 0;
  800420e6cb:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e6d0:	c9                   	leaveq 
  800420e6d1:	c3                   	retq   

000000800420e6d2 <sys_page_unmap>:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int
sys_page_unmap(envid_t envid, void *va)
{
  800420e6d2:	55                   	push   %rbp
  800420e6d3:	48 89 e5             	mov    %rsp,%rbp
  800420e6d6:	48 83 ec 20          	sub    $0x20,%rsp
  800420e6da:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420e6dd:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	int r;
	struct Env *e;

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420e6e1:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420e6e5:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e6e8:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e6ed:	48 89 ce             	mov    %rcx,%rsi
  800420e6f0:	89 c7                	mov    %eax,%edi
  800420e6f2:	48 b8 0d 7e 20 04 80 	movabs $0x8004207e0d,%rax
  800420e6f9:	00 00 00 
  800420e6fc:	ff d0                	callq  *%rax
  800420e6fe:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e701:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e705:	79 05                	jns    800420e70c <sys_page_unmap+0x3a>
		return r;
  800420e707:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e70a:	eb 4b                	jmp    800420e757 <sys_page_unmap+0x85>
	if (va >= (void *)UTOP || PGOFF(va))
  800420e70c:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e713:	00 00 00 
  800420e716:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  800420e71a:	77 0e                	ja     800420e72a <sys_page_unmap+0x58>
  800420e71c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e720:	25 ff 0f 00 00       	and    $0xfff,%eax
  800420e725:	48 85 c0             	test   %rax,%rax
  800420e728:	74 07                	je     800420e731 <sys_page_unmap+0x5f>
		return -E_INVAL;
  800420e72a:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e72f:	eb 26                	jmp    800420e757 <sys_page_unmap+0x85>
	page_remove(e->env_pml4e, va);
  800420e731:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e735:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e73c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420e740:	48 89 d6             	mov    %rdx,%rsi
  800420e743:	48 89 c7             	mov    %rax,%rdi
  800420e746:	48 b8 14 3e 20 04 80 	movabs $0x8004203e14,%rax
  800420e74d:	00 00 00 
  800420e750:	ff d0                	callq  *%rax
	return 0;
  800420e752:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e757:	c9                   	leaveq 
  800420e758:	c3                   	retq   

000000800420e759 <sys_ipc_try_send>:
//		current environment's address space.
//	-E_NO_MEM if there's not enough memory to map srcva in envid's
//		address space.
static int
sys_ipc_try_send(envid_t envid, uint32_t value, void *srcva, unsigned perm)
{
  800420e759:	55                   	push   %rbp
  800420e75a:	48 89 e5             	mov    %rsp,%rbp
  800420e75d:	53                   	push   %rbx
  800420e75e:	48 83 ec 48          	sub    $0x48,%rsp
  800420e762:	89 7d cc             	mov    %edi,-0x34(%rbp)
  800420e765:	89 75 c8             	mov    %esi,-0x38(%rbp)
  800420e768:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420e76c:	89 4d bc             	mov    %ecx,-0x44(%rbp)
	int r;
	struct Env *e;
	struct PageInfo *pp;
	pte_t *ppte;
	if ((r = envid2env(envid, &e, 0)) < 0)
  800420e76f:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  800420e773:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800420e776:	ba 00 00 00 00       	mov    $0x0,%edx
  800420e77b:	48 89 ce             	mov    %rcx,%rsi
  800420e77e:	89 c7                	mov    %eax,%edi
  800420e780:	48 b8 0d 7e 20 04 80 	movabs $0x8004207e0d,%rax
  800420e787:	00 00 00 
  800420e78a:	ff d0                	callq  *%rax
  800420e78c:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420e78f:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420e793:	79 08                	jns    800420e79d <sys_ipc_try_send+0x44>
		return r;
  800420e795:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e798:	e9 25 03 00 00       	jmpq   800420eac2 <sys_ipc_try_send+0x369>
	if (!e->env_ipc_recving)
  800420e79d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e7a1:	0f b6 80 f8 00 00 00 	movzbl 0xf8(%rax),%eax
  800420e7a8:	83 f0 01             	xor    $0x1,%eax
  800420e7ab:	84 c0                	test   %al,%al
  800420e7ad:	74 0a                	je     800420e7b9 <sys_ipc_try_send+0x60>
	{
		/* cprintf("[%08x] not recieving!\n", e->env_id); */
		return -E_IPC_NOT_RECV;
  800420e7af:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
  800420e7b4:	e9 09 03 00 00       	jmpq   800420eac2 <sys_ipc_try_send+0x369>

	/*  Hint: check if environment is ENV_TYPE_GUEST or not, and if the source or destination
	 *  is using normal page, use page_insert. Use ept_page_insert() wherever possible. */
	/* Your code here */

	if (srcva < (void *)UTOP && e->env_ipc_dstva < (void *)UTOP)
  800420e7b9:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e7c0:	00 00 00 
  800420e7c3:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  800420e7c7:	0f 87 70 02 00 00    	ja     800420ea3d <sys_ipc_try_send+0x2e4>
  800420e7cd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e7d1:	48 8b 90 00 01 00 00 	mov    0x100(%rax),%rdx
  800420e7d8:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e7df:	00 00 00 
  800420e7e2:	48 39 c2             	cmp    %rax,%rdx
  800420e7e5:	0f 87 52 02 00 00    	ja     800420ea3d <sys_ipc_try_send+0x2e4>
	{
		if ((~perm & (PTE_U | PTE_P)) || (perm & ~PTE_SYSCALL))
  800420e7eb:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420e7ee:	f7 d0                	not    %eax
  800420e7f0:	83 e0 05             	and    $0x5,%eax
  800420e7f3:	85 c0                	test   %eax,%eax
  800420e7f5:	75 0c                	jne    800420e803 <sys_ipc_try_send+0xaa>
  800420e7f7:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420e7fa:	25 f8 f1 ff ff       	and    $0xfffff1f8,%eax
  800420e7ff:	85 c0                	test   %eax,%eax
  800420e801:	74 60                	je     800420e863 <sys_ipc_try_send+0x10a>
		{
			cprintf("[%08x] bad perm %x in sys_ipc_try_send\n", curenv->env_id, perm);
  800420e803:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420e80a:	00 00 00 
  800420e80d:	ff d0                	callq  *%rax
  800420e80f:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420e816:	00 00 00 
  800420e819:	48 98                	cltq   
  800420e81b:	48 c1 e0 03          	shl    $0x3,%rax
  800420e81f:	48 89 c1             	mov    %rax,%rcx
  800420e822:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e826:	48 01 c8             	add    %rcx,%rax
  800420e829:	48 01 d0             	add    %rdx,%rax
  800420e82c:	48 83 c0 08          	add    $0x8,%rax
  800420e830:	48 8b 00             	mov    (%rax),%rax
  800420e833:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420e839:	8b 55 bc             	mov    -0x44(%rbp),%edx
  800420e83c:	89 c6                	mov    %eax,%esi
  800420e83e:	48 bf c8 fd 21 04 80 	movabs $0x800421fdc8,%rdi
  800420e845:	00 00 00 
  800420e848:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e84d:	48 b9 83 9c 20 04 80 	movabs $0x8004209c83,%rcx
  800420e854:	00 00 00 
  800420e857:	ff d1                	callq  *%rcx
			return -E_INVAL;
  800420e859:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e85e:	e9 5f 02 00 00       	jmpq   800420eac2 <sys_ipc_try_send+0x369>
		}

		pp = page_lookup(curenv->env_pml4e, srcva, &ppte);
  800420e863:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420e86a:	00 00 00 
  800420e86d:	ff d0                	callq  *%rax
  800420e86f:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420e876:	00 00 00 
  800420e879:	48 98                	cltq   
  800420e87b:	48 c1 e0 03          	shl    $0x3,%rax
  800420e87f:	48 89 c1             	mov    %rax,%rcx
  800420e882:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e886:	48 01 c8             	add    %rcx,%rax
  800420e889:	48 01 d0             	add    %rdx,%rax
  800420e88c:	48 83 c0 08          	add    $0x8,%rax
  800420e890:	48 8b 00             	mov    (%rax),%rax
  800420e893:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e89a:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  800420e89e:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  800420e8a2:	48 89 ce             	mov    %rcx,%rsi
  800420e8a5:	48 89 c7             	mov    %rax,%rdi
  800420e8a8:	48 b8 89 3d 20 04 80 	movabs $0x8004203d89,%rax
  800420e8af:	00 00 00 
  800420e8b2:	ff d0                	callq  *%rax
  800420e8b4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		if (pp == 0)
  800420e8b8:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420e8bd:	75 61                	jne    800420e920 <sys_ipc_try_send+0x1c7>
		{
			cprintf("[%08x] page_lookup %08x failed in sys_ipc_try_send\n", curenv->env_id, srcva);
  800420e8bf:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420e8c6:	00 00 00 
  800420e8c9:	ff d0                	callq  *%rax
  800420e8cb:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420e8d2:	00 00 00 
  800420e8d5:	48 98                	cltq   
  800420e8d7:	48 c1 e0 03          	shl    $0x3,%rax
  800420e8db:	48 89 c1             	mov    %rax,%rcx
  800420e8de:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e8e2:	48 01 c8             	add    %rcx,%rax
  800420e8e5:	48 01 d0             	add    %rdx,%rax
  800420e8e8:	48 83 c0 08          	add    $0x8,%rax
  800420e8ec:	48 8b 00             	mov    (%rax),%rax
  800420e8ef:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420e8f5:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420e8f9:	89 c6                	mov    %eax,%esi
  800420e8fb:	48 bf f0 fd 21 04 80 	movabs $0x800421fdf0,%rdi
  800420e902:	00 00 00 
  800420e905:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e90a:	48 b9 83 9c 20 04 80 	movabs $0x8004209c83,%rcx
  800420e911:	00 00 00 
  800420e914:	ff d1                	callq  *%rcx
			return -E_INVAL;
  800420e916:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e91b:	e9 a2 01 00 00       	jmpq   800420eac2 <sys_ipc_try_send+0x369>
		}

		if ((perm & PTE_W) && !(*ppte & PTE_W))
  800420e920:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420e923:	83 e0 02             	and    $0x2,%eax
  800420e926:	85 c0                	test   %eax,%eax
  800420e928:	74 6c                	je     800420e996 <sys_ipc_try_send+0x23d>
  800420e92a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420e92e:	48 8b 00             	mov    (%rax),%rax
  800420e931:	83 e0 02             	and    $0x2,%eax
  800420e934:	48 85 c0             	test   %rax,%rax
  800420e937:	75 5d                	jne    800420e996 <sys_ipc_try_send+0x23d>
		{
			cprintf("[%08x] attempt to send read-only page read-write in sys_ipc_try_send\n", curenv->env_id);
  800420e939:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420e940:	00 00 00 
  800420e943:	ff d0                	callq  *%rax
  800420e945:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420e94c:	00 00 00 
  800420e94f:	48 98                	cltq   
  800420e951:	48 c1 e0 03          	shl    $0x3,%rax
  800420e955:	48 89 c1             	mov    %rax,%rcx
  800420e958:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e95c:	48 01 c8             	add    %rcx,%rax
  800420e95f:	48 01 d0             	add    %rdx,%rax
  800420e962:	48 83 c0 08          	add    $0x8,%rax
  800420e966:	48 8b 00             	mov    (%rax),%rax
  800420e969:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420e96f:	89 c6                	mov    %eax,%esi
  800420e971:	48 bf 28 fe 21 04 80 	movabs $0x800421fe28,%rdi
  800420e978:	00 00 00 
  800420e97b:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e980:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420e987:	00 00 00 
  800420e98a:	ff d2                	callq  *%rdx
			return -E_INVAL;
  800420e98c:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e991:	e9 2c 01 00 00       	jmpq   800420eac2 <sys_ipc_try_send+0x369>
		}

		r = page_insert(e->env_pml4e, pp, e->env_ipc_dstva, perm);
  800420e996:	8b 4d bc             	mov    -0x44(%rbp),%ecx
  800420e999:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e99d:	48 8b 90 00 01 00 00 	mov    0x100(%rax),%rdx
  800420e9a4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e9a8:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e9af:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420e9b3:	48 89 c7             	mov    %rax,%rdi
  800420e9b6:	48 b8 19 3a 20 04 80 	movabs $0x8004203a19,%rax
  800420e9bd:	00 00 00 
  800420e9c0:	ff d0                	callq  *%rax
  800420e9c2:	89 45 ec             	mov    %eax,-0x14(%rbp)
		if (r < 0)
  800420e9c5:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420e9c9:	79 63                	jns    800420ea2e <sys_ipc_try_send+0x2d5>
		{
			cprintf("[%08x] page_insert %08x failed in sys_ipc_try_send (%e)\n", curenv->env_id, srcva, r);
  800420e9cb:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420e9d2:	00 00 00 
  800420e9d5:	ff d0                	callq  *%rax
  800420e9d7:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420e9de:	00 00 00 
  800420e9e1:	48 98                	cltq   
  800420e9e3:	48 c1 e0 03          	shl    $0x3,%rax
  800420e9e7:	48 89 c1             	mov    %rax,%rcx
  800420e9ea:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e9ee:	48 01 c8             	add    %rcx,%rax
  800420e9f1:	48 01 d0             	add    %rdx,%rax
  800420e9f4:	48 83 c0 08          	add    $0x8,%rax
  800420e9f8:	48 8b 00             	mov    (%rax),%rax
  800420e9fb:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420ea01:	8b 4d ec             	mov    -0x14(%rbp),%ecx
  800420ea04:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420ea08:	89 c6                	mov    %eax,%esi
  800420ea0a:	48 bf 70 fe 21 04 80 	movabs $0x800421fe70,%rdi
  800420ea11:	00 00 00 
  800420ea14:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ea19:	49 b8 83 9c 20 04 80 	movabs $0x8004209c83,%r8
  800420ea20:	00 00 00 
  800420ea23:	41 ff d0             	callq  *%r8
			return r;
  800420ea26:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420ea29:	e9 94 00 00 00       	jmpq   800420eac2 <sys_ipc_try_send+0x369>
		}

		e->env_ipc_perm = perm;
  800420ea2e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420ea32:	8b 55 bc             	mov    -0x44(%rbp),%edx
  800420ea35:	89 90 10 01 00 00    	mov    %edx,0x110(%rax)
  800420ea3b:	eb 0e                	jmp    800420ea4b <sys_ipc_try_send+0x2f2>
	}
	else
	{
		e->env_ipc_perm = 0;
  800420ea3d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420ea41:	c7 80 10 01 00 00 00 	movl   $0x0,0x110(%rax)
  800420ea48:	00 00 00 
	}

	e->env_ipc_recving = 0;
  800420ea4b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420ea4f:	c6 80 f8 00 00 00 00 	movb   $0x0,0xf8(%rax)
	e->env_ipc_from = curenv->env_id;
  800420ea56:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  800420ea5a:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420ea61:	00 00 00 
  800420ea64:	ff d0                	callq  *%rax
  800420ea66:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420ea6d:	00 00 00 
  800420ea70:	48 98                	cltq   
  800420ea72:	48 c1 e0 03          	shl    $0x3,%rax
  800420ea76:	48 89 c1             	mov    %rax,%rcx
  800420ea79:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ea7d:	48 01 c8             	add    %rcx,%rax
  800420ea80:	48 01 d0             	add    %rdx,%rax
  800420ea83:	48 83 c0 08          	add    $0x8,%rax
  800420ea87:	48 8b 00             	mov    (%rax),%rax
  800420ea8a:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420ea90:	89 83 0c 01 00 00    	mov    %eax,0x10c(%rbx)
	e->env_ipc_value = value;
  800420ea96:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420ea9a:	8b 55 c8             	mov    -0x38(%rbp),%edx
  800420ea9d:	89 90 08 01 00 00    	mov    %edx,0x108(%rax)
	e->env_tf.tf_regs.reg_rax = 0;
  800420eaa3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420eaa7:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
  800420eaae:	00 
	e->env_status = ENV_RUNNABLE;
  800420eaaf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420eab3:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  800420eaba:	00 00 00 
	return 0;
  800420eabd:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420eac2:	48 83 c4 48          	add    $0x48,%rsp
  800420eac6:	5b                   	pop    %rbx
  800420eac7:	5d                   	pop    %rbp
  800420eac8:	c3                   	retq   

000000800420eac9 <sys_ipc_recv>:
// return 0 on success.
// Return < 0 on error.  Errors are:
//	-E_INVAL if dstva < UTOP but dstva is not page-aligned.
static int
sys_ipc_recv(void *dstva)
{
  800420eac9:	55                   	push   %rbp
  800420eaca:	48 89 e5             	mov    %rsp,%rbp
  800420eacd:	48 83 ec 10          	sub    $0x10,%rsp
  800420ead1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	if (curenv->env_ipc_recving)
  800420ead5:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420eadc:	00 00 00 
  800420eadf:	ff d0                	callq  *%rax
  800420eae1:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420eae8:	00 00 00 
  800420eaeb:	48 98                	cltq   
  800420eaed:	48 c1 e0 03          	shl    $0x3,%rax
  800420eaf1:	48 89 c1             	mov    %rax,%rcx
  800420eaf4:	48 c1 e1 04          	shl    $0x4,%rcx
  800420eaf8:	48 01 c8             	add    %rcx,%rax
  800420eafb:	48 01 d0             	add    %rdx,%rax
  800420eafe:	48 83 c0 08          	add    $0x8,%rax
  800420eb02:	48 8b 00             	mov    (%rax),%rax
  800420eb05:	0f b6 80 f8 00 00 00 	movzbl 0xf8(%rax),%eax
  800420eb0c:	84 c0                	test   %al,%al
  800420eb0e:	74 2a                	je     800420eb3a <sys_ipc_recv+0x71>
		panic("already recving!");
  800420eb10:	48 ba a9 fe 21 04 80 	movabs $0x800421fea9,%rdx
  800420eb17:	00 00 00 
  800420eb1a:	be 83 01 00 00       	mov    $0x183,%esi
  800420eb1f:	48 bf ba fe 21 04 80 	movabs $0x800421feba,%rdi
  800420eb26:	00 00 00 
  800420eb29:	b8 00 00 00 00       	mov    $0x0,%eax
  800420eb2e:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  800420eb35:	00 00 00 
  800420eb38:	ff d1                	callq  *%rcx

	curenv->env_ipc_recving = 1;
  800420eb3a:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420eb41:	00 00 00 
  800420eb44:	ff d0                	callq  *%rax
  800420eb46:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420eb4d:	00 00 00 
  800420eb50:	48 98                	cltq   
  800420eb52:	48 c1 e0 03          	shl    $0x3,%rax
  800420eb56:	48 89 c1             	mov    %rax,%rcx
  800420eb59:	48 c1 e1 04          	shl    $0x4,%rcx
  800420eb5d:	48 01 c8             	add    %rcx,%rax
  800420eb60:	48 01 d0             	add    %rdx,%rax
  800420eb63:	48 83 c0 08          	add    $0x8,%rax
  800420eb67:	48 8b 00             	mov    (%rax),%rax
  800420eb6a:	c6 80 f8 00 00 00 01 	movb   $0x1,0xf8(%rax)
	curenv->env_ipc_dstva = dstva;
  800420eb71:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420eb78:	00 00 00 
  800420eb7b:	ff d0                	callq  *%rax
  800420eb7d:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420eb84:	00 00 00 
  800420eb87:	48 98                	cltq   
  800420eb89:	48 c1 e0 03          	shl    $0x3,%rax
  800420eb8d:	48 89 c1             	mov    %rax,%rcx
  800420eb90:	48 c1 e1 04          	shl    $0x4,%rcx
  800420eb94:	48 01 c8             	add    %rcx,%rax
  800420eb97:	48 01 d0             	add    %rdx,%rax
  800420eb9a:	48 83 c0 08          	add    $0x8,%rax
  800420eb9e:	48 8b 00             	mov    (%rax),%rax
  800420eba1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420eba5:	48 89 90 00 01 00 00 	mov    %rdx,0x100(%rax)
	curenv->env_status = ENV_NOT_RUNNABLE;
  800420ebac:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420ebb3:	00 00 00 
  800420ebb6:	ff d0                	callq  *%rax
  800420ebb8:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420ebbf:	00 00 00 
  800420ebc2:	48 98                	cltq   
  800420ebc4:	48 c1 e0 03          	shl    $0x3,%rax
  800420ebc8:	48 89 c1             	mov    %rax,%rcx
  800420ebcb:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ebcf:	48 01 c8             	add    %rcx,%rax
  800420ebd2:	48 01 d0             	add    %rdx,%rax
  800420ebd5:	48 83 c0 08          	add    $0x8,%rax
  800420ebd9:	48 8b 00             	mov    (%rax),%rax
  800420ebdc:	c7 80 d4 00 00 00 04 	movl   $0x4,0xd4(%rax)
  800420ebe3:	00 00 00 
	sched_yield();
  800420ebe6:	48 b8 76 da 20 04 80 	movabs $0x800420da76,%rax
  800420ebed:	00 00 00 
  800420ebf0:	ff d0                	callq  *%rax

000000800420ebf2 <sys_time_msec>:
}

// Return the current time.
static int
sys_time_msec(void)
{
  800420ebf2:	55                   	push   %rbp
  800420ebf3:	48 89 e5             	mov    %rsp,%rbp
	return (int)time_msec();
  800420ebf6:	48 b8 e0 96 21 04 80 	movabs $0x80042196e0,%rax
  800420ebfd:	00 00 00 
  800420ec00:	ff d0                	callq  *%rax
}
  800420ec02:	5d                   	pop    %rbp
  800420ec03:	c3                   	retq   

000000800420ec04 <sys_net_transmit>:

static int
sys_net_transmit(const void *data, size_t len)
{
  800420ec04:	55                   	push   %rbp
  800420ec05:	48 89 e5             	mov    %rsp,%rbp
  800420ec08:	48 83 ec 10          	sub    $0x10,%rsp
  800420ec0c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420ec10:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	user_mem_assert(curenv, data, len, 0);
  800420ec14:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420ec1b:	00 00 00 
  800420ec1e:	ff d0                	callq  *%rax
  800420ec20:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420ec27:	00 00 00 
  800420ec2a:	48 98                	cltq   
  800420ec2c:	48 c1 e0 03          	shl    $0x3,%rax
  800420ec30:	48 89 c1             	mov    %rax,%rcx
  800420ec33:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ec37:	48 01 c8             	add    %rcx,%rax
  800420ec3a:	48 01 d0             	add    %rdx,%rax
  800420ec3d:	48 83 c0 08          	add    $0x8,%rax
  800420ec41:	48 8b 00             	mov    (%rax),%rax
  800420ec44:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420ec48:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  800420ec4c:	b9 00 00 00 00       	mov    $0x0,%ecx
  800420ec51:	48 89 c7             	mov    %rax,%rdi
  800420ec54:	48 b8 6b 41 20 04 80 	movabs $0x800420416b,%rax
  800420ec5b:	00 00 00 
  800420ec5e:	ff d0                	callq  *%rax
	return e1000_transmit(data, len);
  800420ec60:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ec64:	89 c2                	mov    %eax,%edx
  800420ec66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ec6a:	89 d6                	mov    %edx,%esi
  800420ec6c:	48 89 c7             	mov    %rax,%rdi
  800420ec6f:	48 b8 69 88 21 04 80 	movabs $0x8004218869,%rax
  800420ec76:	00 00 00 
  800420ec79:	ff d0                	callq  *%rax
}
  800420ec7b:	c9                   	leaveq 
  800420ec7c:	c3                   	retq   

000000800420ec7d <sys_net_receive>:

static int
sys_net_receive(void *buf, size_t len)
{
  800420ec7d:	55                   	push   %rbp
  800420ec7e:	48 89 e5             	mov    %rsp,%rbp
  800420ec81:	48 83 ec 10          	sub    $0x10,%rsp
  800420ec85:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420ec89:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	user_mem_assert(curenv, buf, len, PTE_W);
  800420ec8d:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420ec94:	00 00 00 
  800420ec97:	ff d0                	callq  *%rax
  800420ec99:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420eca0:	00 00 00 
  800420eca3:	48 98                	cltq   
  800420eca5:	48 c1 e0 03          	shl    $0x3,%rax
  800420eca9:	48 89 c1             	mov    %rax,%rcx
  800420ecac:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ecb0:	48 01 c8             	add    %rcx,%rax
  800420ecb3:	48 01 d0             	add    %rdx,%rax
  800420ecb6:	48 83 c0 08          	add    $0x8,%rax
  800420ecba:	48 8b 00             	mov    (%rax),%rax
  800420ecbd:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420ecc1:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  800420ecc5:	b9 02 00 00 00       	mov    $0x2,%ecx
  800420ecca:	48 89 c7             	mov    %rax,%rdi
  800420eccd:	48 b8 6b 41 20 04 80 	movabs $0x800420416b,%rax
  800420ecd4:	00 00 00 
  800420ecd7:	ff d0                	callq  *%rax
	return e1000_receive(buf, len);
  800420ecd9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ecdd:	89 c2                	mov    %eax,%edx
  800420ecdf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ece3:	89 d6                	mov    %edx,%esi
  800420ece5:	48 89 c7             	mov    %rax,%rdi
  800420ece8:	48 b8 d8 89 21 04 80 	movabs $0x80042189d8,%rax
  800420ecef:	00 00 00 
  800420ecf2:	ff d0                	callq  *%rax
}
  800420ecf4:	c9                   	leaveq 
  800420ecf5:	c3                   	retq   

000000800420ecf6 <sys_vmx_list_vms>:

#ifndef VMM_GUEST
static void
sys_vmx_list_vms()
{
  800420ecf6:	55                   	push   %rbp
  800420ecf7:	48 89 e5             	mov    %rsp,%rbp
	vmx_list_vms();
  800420ecfa:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ecff:	48 ba 8d ae 21 04 80 	movabs $0x800421ae8d,%rdx
  800420ed06:	00 00 00 
  800420ed09:	ff d2                	callq  *%rdx
}
  800420ed0b:	5d                   	pop    %rbp
  800420ed0c:	c3                   	retq   

000000800420ed0d <sys_vmx_sel_resume>:

static bool
sys_vmx_sel_resume(int i)
{
  800420ed0d:	55                   	push   %rbp
  800420ed0e:	48 89 e5             	mov    %rsp,%rbp
  800420ed11:	48 83 ec 10          	sub    $0x10,%rsp
  800420ed15:	89 7d fc             	mov    %edi,-0x4(%rbp)
	return vmx_sel_resume(i);
  800420ed18:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420ed1b:	89 c7                	mov    %eax,%edi
  800420ed1d:	48 b8 4d af 21 04 80 	movabs $0x800421af4d,%rax
  800420ed24:	00 00 00 
  800420ed27:	ff d0                	callq  *%rax
}
  800420ed29:	c9                   	leaveq 
  800420ed2a:	c3                   	retq   

000000800420ed2b <sys_vmx_get_vmdisk_number>:

static int
sys_vmx_get_vmdisk_number()
{
  800420ed2b:	55                   	push   %rbp
  800420ed2c:	48 89 e5             	mov    %rsp,%rbp
	return vmx_get_vmdisk_number();
  800420ed2f:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ed34:	48 ba 0f da 21 04 80 	movabs $0x800421da0f,%rdx
  800420ed3b:	00 00 00 
  800420ed3e:	ff d2                	callq  *%rdx
}
  800420ed40:	5d                   	pop    %rbp
  800420ed41:	c3                   	retq   

000000800420ed42 <sys_vmx_incr_vmdisk_number>:

static void
sys_vmx_incr_vmdisk_number()
{
  800420ed42:	55                   	push   %rbp
  800420ed43:	48 89 e5             	mov    %rsp,%rbp
	vmx_incr_vmdisk_number();
  800420ed46:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ed4b:	48 ba 21 da 21 04 80 	movabs $0x800421da21,%rdx
  800420ed52:	00 00 00 
  800420ed55:	ff d2                	callq  *%rdx
}
  800420ed57:	5d                   	pop    %rbp
  800420ed58:	c3                   	retq   

000000800420ed59 <sys_ept_map>:
//       instead of the normal page table.
//
static int
sys_ept_map(envid_t srcenvid, void *srcva,
			envid_t guest, void *guest_pa, int perm)
{
  800420ed59:	55                   	push   %rbp
  800420ed5a:	48 89 e5             	mov    %rsp,%rbp
  800420ed5d:	48 83 ec 60          	sub    $0x60,%rsp
  800420ed61:	89 7d bc             	mov    %edi,-0x44(%rbp)
  800420ed64:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  800420ed68:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420ed6b:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
  800420ed6f:	44 89 45 a4          	mov    %r8d,-0x5c(%rbp)
	// struct ptrs declarations for the 2 environments
	struct Env *originEnvt = ((void *)0);
  800420ed73:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  800420ed7a:	00 
	struct Env *guestEnvt = ((void *)0);
  800420ed7b:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  800420ed82:	00 

	// pointers to page table entries and host VA
	pte_t *pgTableEntries = ((void *)0);
  800420ed83:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  800420ed8a:	00 
	pte_t *hostVirtualAddr = ((void *)0);
  800420ed8b:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800420ed92:	00 

	struct PageInfo *retPage = ((void *)0);
  800420ed93:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420ed9a:	00 
	// ret on err
	int sourceCode = -1;
  800420ed9b:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%rbp)
	int guestCode = -1;
  800420eda2:	c7 45 e8 ff ff ff ff 	movl   $0xffffffff,-0x18(%rbp)

	/*
	 *error scnarios:
	 *if srcenvid and/or guest doesn't currently exist
	 */
	sourceCode = envid2env(srcenvid, &originEnvt, true);
  800420eda9:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  800420edad:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420edb0:	ba 01 00 00 00       	mov    $0x1,%edx
  800420edb5:	48 89 ce             	mov    %rcx,%rsi
  800420edb8:	89 c7                	mov    %eax,%edi
  800420edba:	48 b8 0d 7e 20 04 80 	movabs $0x8004207e0d,%rax
  800420edc1:	00 00 00 
  800420edc4:	ff d0                	callq  *%rax
  800420edc6:	89 45 ec             	mov    %eax,-0x14(%rbp)
	guestCode = envid2env(guest, &guestEnvt, true);
  800420edc9:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  800420edcd:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420edd0:	ba 01 00 00 00       	mov    $0x1,%edx
  800420edd5:	48 89 ce             	mov    %rcx,%rsi
  800420edd8:	89 c7                	mov    %eax,%edi
  800420edda:	48 b8 0d 7e 20 04 80 	movabs $0x8004207e0d,%rax
  800420ede1:	00 00 00 
  800420ede4:	ff d0                	callq  *%rax
  800420ede6:	89 45 e8             	mov    %eax,-0x18(%rbp)

	if ((sourceCode < 0) || (guestCode < 0)) // negative on err
  800420ede9:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420eded:	78 06                	js     800420edf5 <sys_ept_map+0x9c>
  800420edef:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)
  800420edf3:	79 0a                	jns    800420edff <sys_ept_map+0xa6>
		return -E_BAD_ENV; //does not exist
  800420edf5:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  800420edfa:	e9 1f 01 00 00       	jmpq   800420ef1e <sys_ept_map+0x1c5>

	/* srcva is too large*/
	/* page not aligned if offset in page exists*/
	if ((uint64_t)srcva >= UTOP || PGOFF(srcva))
  800420edff:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800420ee03:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420ee0a:	00 00 00 
  800420ee0d:	48 39 c2             	cmp    %rax,%rdx
  800420ee10:	77 0e                	ja     800420ee20 <sys_ept_map+0xc7>
  800420ee12:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420ee16:	25 ff 0f 00 00       	and    $0xfff,%eax
  800420ee1b:	48 85 c0             	test   %rax,%rax
  800420ee1e:	74 0a                	je     800420ee2a <sys_ept_map+0xd1>
		return -E_INVAL;
  800420ee20:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420ee25:	e9 f4 00 00 00       	jmpq   800420ef1e <sys_ept_map+0x1c5>

	/*guest_pa >= guest physical size or guest_pa is not page-aligned*/
	if (((uint64_t)guest_pa >= guestEnvt->env_vmxinfo.phys_sz) || PGOFF(guest_pa))
  800420ee2a:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  800420ee2e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420ee32:	48 8b 80 20 01 00 00 	mov    0x120(%rax),%rax
  800420ee39:	48 39 c2             	cmp    %rax,%rdx
  800420ee3c:	73 0e                	jae    800420ee4c <sys_ept_map+0xf3>
  800420ee3e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420ee42:	25 ff 0f 00 00       	and    $0xfff,%eax
  800420ee47:	48 85 c0             	test   %rax,%rax
  800420ee4a:	74 0a                	je     800420ee56 <sys_ept_map+0xfd>
		return -E_INVAL;
  800420ee4c:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420ee51:	e9 c8 00 00 00       	jmpq   800420ef1e <sys_ept_map+0x1c5>

	/*page fault check*/
	retPage = page_lookup(originEnvt->env_pml4e, srcva, &pgTableEntries);
  800420ee56:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420ee5a:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420ee61:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
  800420ee65:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  800420ee69:	48 89 ce             	mov    %rcx,%rsi
  800420ee6c:	48 89 c7             	mov    %rax,%rdi
  800420ee6f:	48 b8 89 3d 20 04 80 	movabs $0x8004203d89,%rax
  800420ee76:	00 00 00 
  800420ee79:	ff d0                	callq  *%rax
  800420ee7b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	if (retPage == 0)
  800420ee7f:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  800420ee84:	75 0a                	jne    800420ee90 <sys_ept_map+0x137>
		return -E_INVAL;
  800420ee86:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420ee8b:	e9 8e 00 00 00       	jmpq   800420ef1e <sys_ept_map+0x1c5>

	/* permission is okay?*/
	/*if (perm & PTE_W), but srcva is read-only in srcenvid's
		address space i.e. perm is 0.*/
	if ((perm == 0) || ((perm & __EPTE_WRITE) && (!(*pgTableEntries & PTE_W)))) //WRITABLE
  800420ee90:	83 7d a4 00          	cmpl   $0x0,-0x5c(%rbp)
  800420ee94:	74 19                	je     800420eeaf <sys_ept_map+0x156>
  800420ee96:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800420ee99:	83 e0 02             	and    $0x2,%eax
  800420ee9c:	85 c0                	test   %eax,%eax
  800420ee9e:	74 16                	je     800420eeb6 <sys_ept_map+0x15d>
  800420eea0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420eea4:	48 8b 00             	mov    (%rax),%rax
  800420eea7:	83 e0 02             	and    $0x2,%eax
  800420eeaa:	48 85 c0             	test   %rax,%rax
  800420eead:	75 07                	jne    800420eeb6 <sys_ept_map+0x15d>
		return -E_INVAL;
  800420eeaf:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420eeb4:	eb 68                	jmp    800420ef1e <sys_ept_map+0x1c5>

	// Phy Addr to kernel VA address Xslation
	hostVirtualAddr = page2kva(retPage);
  800420eeb6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420eeba:	48 89 c7             	mov    %rax,%rdi
  800420eebd:	48 b8 37 e0 20 04 80 	movabs $0x800420e037,%rax
  800420eec4:	00 00 00 
  800420eec7:	ff d0                	callq  *%rax
  800420eec9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	// param order -> guest top level VA, host VA, guest PA, perm boolean, overwrite flag
	int returnedCode = ept_map_hva2gpa(guestEnvt->env_pml4e, hostVirtualAddr, guest_pa, perm, 0);
  800420eecd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420eed1:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420eed8:	8b 4d a4             	mov    -0x5c(%rbp),%ecx
  800420eedb:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  800420eedf:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  800420eee3:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800420eee9:	48 89 c7             	mov    %rax,%rdi
  800420eeec:	48 b8 0e 9e 21 04 80 	movabs $0x8004219e0e,%rax
  800420eef3:	00 00 00 
  800420eef6:	ff d0                	callq  *%rax
  800420eef8:	89 45 e4             	mov    %eax,-0x1c(%rbp)

	if (returnedCode < 0) // neg on error
  800420eefb:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800420eeff:	79 05                	jns    800420ef06 <sys_ept_map+0x1ad>
		return returnedCode;
  800420ef01:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420ef04:	eb 18                	jmp    800420ef1e <sys_ept_map+0x1c5>

	// pp_ref is the count of pointers (usually in page table entries)
	retPage->pp_ref += 1;  //defined under PageInfo struct
  800420ef06:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ef0a:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420ef0e:	8d 50 01             	lea    0x1(%rax),%edx
  800420ef11:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ef15:	66 89 50 08          	mov    %dx,0x8(%rax)
	return 0; // success
  800420ef19:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420ef1e:	c9                   	leaveq 
  800420ef1f:	c3                   	retq   

000000800420ef20 <sys_env_mkguest>:

static envid_t
sys_env_mkguest(uint64_t gphysz, uint64_t gRIP)
{
  800420ef20:	55                   	push   %rbp
  800420ef21:	48 89 e5             	mov    %rsp,%rbp
  800420ef24:	48 83 ec 20          	sub    $0x20,%rsp
  800420ef28:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420ef2c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	int r;
	struct Env *e;

	// Check if the processor has VMX support.
	if (!vmx_check_support())
  800420ef30:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ef35:	48 ba 23 b0 21 04 80 	movabs $0x800421b023,%rdx
  800420ef3c:	00 00 00 
  800420ef3f:	ff d2                	callq  *%rdx
  800420ef41:	83 f0 01             	xor    $0x1,%eax
  800420ef44:	84 c0                	test   %al,%al
  800420ef46:	74 0a                	je     800420ef52 <sys_env_mkguest+0x32>
	{
		return -E_NO_VMX;
  800420ef48:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
  800420ef4d:	e9 b1 00 00 00       	jmpq   800420f003 <sys_env_mkguest+0xe3>
	}
	else if (!vmx_check_ept())
  800420ef52:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ef57:	48 ba a4 b0 21 04 80 	movabs $0x800421b0a4,%rdx
  800420ef5e:	00 00 00 
  800420ef61:	ff d2                	callq  *%rdx
  800420ef63:	83 f0 01             	xor    $0x1,%eax
  800420ef66:	84 c0                	test   %al,%al
  800420ef68:	74 0a                	je     800420ef74 <sys_env_mkguest+0x54>
	{
		return -E_NO_EPT;
  800420ef6a:	b8 ee ff ff ff       	mov    $0xffffffee,%eax
  800420ef6f:	e9 8f 00 00 00       	jmpq   800420f003 <sys_env_mkguest+0xe3>
	}
	if ((r = env_guest_alloc(&e, curenv->env_id)) < 0)
  800420ef74:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420ef7b:	00 00 00 
  800420ef7e:	ff d0                	callq  *%rax
  800420ef80:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420ef87:	00 00 00 
  800420ef8a:	48 98                	cltq   
  800420ef8c:	48 c1 e0 03          	shl    $0x3,%rax
  800420ef90:	48 89 c1             	mov    %rax,%rcx
  800420ef93:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ef97:	48 01 c8             	add    %rcx,%rax
  800420ef9a:	48 01 d0             	add    %rdx,%rax
  800420ef9d:	48 83 c0 08          	add    $0x8,%rax
  800420efa1:	48 8b 00             	mov    (%rax),%rax
  800420efa4:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800420efaa:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  800420efae:	89 d6                	mov    %edx,%esi
  800420efb0:	48 89 c7             	mov    %rax,%rdi
  800420efb3:	48 b8 9c 81 20 04 80 	movabs $0x800420819c,%rax
  800420efba:	00 00 00 
  800420efbd:	ff d0                	callq  *%rax
  800420efbf:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420efc2:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420efc6:	79 05                	jns    800420efcd <sys_env_mkguest+0xad>
		return r;
  800420efc8:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420efcb:	eb 36                	jmp    800420f003 <sys_env_mkguest+0xe3>
	e->env_status = ENV_NOT_RUNNABLE;
  800420efcd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420efd1:	c7 80 d4 00 00 00 04 	movl   $0x4,0xd4(%rax)
  800420efd8:	00 00 00 
	e->env_vmxinfo.phys_sz = gphysz;
  800420efdb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420efdf:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420efe3:	48 89 90 20 01 00 00 	mov    %rdx,0x120(%rax)
	e->env_tf.tf_rip = gRIP;
  800420efea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420efee:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420eff2:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
	return e->env_id;
  800420eff9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420effd:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
}
  800420f003:	c9                   	leaveq 
  800420f004:	c3                   	retq   

000000800420f005 <syscall>:
#endif //! VMM_GUEST

// Dispatches to the correct kernel function, passing the arguments.
int64_t
syscall(uint64_t syscallno, uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  800420f005:	55                   	push   %rbp
  800420f006:	48 89 e5             	mov    %rsp,%rbp
  800420f009:	48 83 ec 30          	sub    $0x30,%rsp
  800420f00d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420f011:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420f015:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800420f019:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  800420f01d:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
  800420f021:	4c 89 4d d0          	mov    %r9,-0x30(%rbp)
	switch (syscallno)
  800420f025:	48 83 7d f8 16       	cmpq   $0x16,-0x8(%rbp)
  800420f02a:	0f 87 c6 02 00 00    	ja     800420f2f6 <syscall+0x2f1>
  800420f030:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420f034:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420f03b:	00 
  800420f03c:	48 b8 d0 fe 21 04 80 	movabs $0x800421fed0,%rax
  800420f043:	00 00 00 
  800420f046:	48 01 d0             	add    %rdx,%rax
  800420f049:	48 8b 00             	mov    (%rax),%rax
  800420f04c:	ff e0                	jmpq   *%rax
	{
	case SYS_cputs:
		sys_cputs((const char *)a1, a2);
  800420f04e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f052:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f056:	48 89 d6             	mov    %rdx,%rsi
  800420f059:	48 89 c7             	mov    %rax,%rdi
  800420f05c:	48 b8 bf e0 20 04 80 	movabs $0x800420e0bf,%rax
  800420f063:	00 00 00 
  800420f066:	ff d0                	callq  *%rax
		return 0;
  800420f068:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f06d:	e9 8b 02 00 00       	jmpq   800420f2fd <syscall+0x2f8>
	case SYS_cgetc:
		return sys_cgetc();
  800420f072:	48 b8 43 e1 20 04 80 	movabs $0x800420e143,%rax
  800420f079:	00 00 00 
  800420f07c:	ff d0                	callq  *%rax
  800420f07e:	48 98                	cltq   
  800420f080:	e9 78 02 00 00       	jmpq   800420f2fd <syscall+0x2f8>
	case SYS_getenvid:
		return sys_getenvid();
  800420f085:	48 b8 55 e1 20 04 80 	movabs $0x800420e155,%rax
  800420f08c:	00 00 00 
  800420f08f:	ff d0                	callq  *%rax
  800420f091:	48 98                	cltq   
  800420f093:	e9 65 02 00 00       	jmpq   800420f2fd <syscall+0x2f8>
	case SYS_env_destroy:
		return sys_env_destroy(a1);
  800420f098:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f09c:	89 c7                	mov    %eax,%edi
  800420f09e:	48 b8 91 e1 20 04 80 	movabs $0x800420e191,%rax
  800420f0a5:	00 00 00 
  800420f0a8:	ff d0                	callq  *%rax
  800420f0aa:	48 98                	cltq   
  800420f0ac:	e9 4c 02 00 00       	jmpq   800420f2fd <syscall+0x2f8>
	case SYS_page_alloc:
		return sys_page_alloc(a1, (void *)a2, a3);
  800420f0b1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f0b5:	89 c2                	mov    %eax,%edx
  800420f0b7:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420f0bb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f0bf:	48 89 ce             	mov    %rcx,%rsi
  800420f0c2:	89 c7                	mov    %eax,%edi
  800420f0c4:	48 b8 64 e4 20 04 80 	movabs $0x800420e464,%rax
  800420f0cb:	00 00 00 
  800420f0ce:	ff d0                	callq  *%rax
  800420f0d0:	48 98                	cltq   
  800420f0d2:	e9 26 02 00 00       	jmpq   800420f2fd <syscall+0x2f8>
	case SYS_page_map:
		return sys_page_map(a1, (void *)a2, a3, (void *)a4, a5);
  800420f0d7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420f0db:	89 c7                	mov    %eax,%edi
  800420f0dd:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800420f0e1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f0e5:	89 c2                	mov    %eax,%edx
  800420f0e7:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  800420f0eb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f0ef:	41 89 f8             	mov    %edi,%r8d
  800420f0f2:	89 c7                	mov    %eax,%edi
  800420f0f4:	48 b8 4d e5 20 04 80 	movabs $0x800420e54d,%rax
  800420f0fb:	00 00 00 
  800420f0fe:	ff d0                	callq  *%rax
  800420f100:	48 98                	cltq   
  800420f102:	e9 f6 01 00 00       	jmpq   800420f2fd <syscall+0x2f8>
	case SYS_page_unmap:
		return sys_page_unmap(a1, (void *)a2);
  800420f107:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f10b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f10f:	48 89 d6             	mov    %rdx,%rsi
  800420f112:	89 c7                	mov    %eax,%edi
  800420f114:	48 b8 d2 e6 20 04 80 	movabs $0x800420e6d2,%rax
  800420f11b:	00 00 00 
  800420f11e:	ff d0                	callq  *%rax
  800420f120:	48 98                	cltq   
  800420f122:	e9 d6 01 00 00       	jmpq   800420f2fd <syscall+0x2f8>
	case SYS_exofork:
		return sys_exofork();
  800420f127:	48 b8 f1 e1 20 04 80 	movabs $0x800420e1f1,%rax
  800420f12e:	00 00 00 
  800420f131:	ff d0                	callq  *%rax
  800420f133:	48 98                	cltq   
  800420f135:	e9 c3 01 00 00       	jmpq   800420f2fd <syscall+0x2f8>
	case SYS_env_set_status:
		return sys_env_set_status(a1, a2);
  800420f13a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f13e:	89 c2                	mov    %eax,%edx
  800420f140:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f144:	89 d6                	mov    %edx,%esi
  800420f146:	89 c7                	mov    %eax,%edi
  800420f148:	48 b8 c6 e2 20 04 80 	movabs $0x800420e2c6,%rax
  800420f14f:	00 00 00 
  800420f152:	ff d0                	callq  *%rax
  800420f154:	48 98                	cltq   
  800420f156:	e9 a2 01 00 00       	jmpq   800420f2fd <syscall+0x2f8>
	case SYS_env_set_trapframe:
		return sys_env_set_trapframe(a1, (struct Trapframe *)a2);
  800420f15b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f15f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f163:	48 89 d6             	mov    %rdx,%rsi
  800420f166:	89 c7                	mov    %eax,%edi
  800420f168:	48 b8 26 e3 20 04 80 	movabs $0x800420e326,%rax
  800420f16f:	00 00 00 
  800420f172:	ff d0                	callq  *%rax
  800420f174:	48 98                	cltq   
  800420f176:	e9 82 01 00 00       	jmpq   800420f2fd <syscall+0x2f8>
	case SYS_env_set_pgfault_upcall:
		return sys_env_set_pgfault_upcall(a1, (void *)a2);
  800420f17b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f17f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f183:	48 89 d6             	mov    %rdx,%rsi
  800420f186:	89 c7                	mov    %eax,%edi
  800420f188:	48 b8 14 e4 20 04 80 	movabs $0x800420e414,%rax
  800420f18f:	00 00 00 
  800420f192:	ff d0                	callq  *%rax
  800420f194:	48 98                	cltq   
  800420f196:	e9 62 01 00 00       	jmpq   800420f2fd <syscall+0x2f8>
	case SYS_yield:
		sys_yield();
  800420f19b:	48 b8 e1 e1 20 04 80 	movabs $0x800420e1e1,%rax
  800420f1a2:	00 00 00 
  800420f1a5:	ff d0                	callq  *%rax
		return 0;
  800420f1a7:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f1ac:	e9 4c 01 00 00       	jmpq   800420f2fd <syscall+0x2f8>
	case SYS_ipc_try_send:
		return sys_ipc_try_send(a1, a2, (void *)a3, a4);
  800420f1b1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420f1b5:	89 c1                	mov    %eax,%ecx
  800420f1b7:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420f1bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f1bf:	89 c6                	mov    %eax,%esi
  800420f1c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f1c5:	89 c7                	mov    %eax,%edi
  800420f1c7:	48 b8 59 e7 20 04 80 	movabs $0x800420e759,%rax
  800420f1ce:	00 00 00 
  800420f1d1:	ff d0                	callq  *%rax
  800420f1d3:	48 98                	cltq   
  800420f1d5:	e9 23 01 00 00       	jmpq   800420f2fd <syscall+0x2f8>
	case SYS_ipc_recv:
		sys_ipc_recv((void *)a1);
  800420f1da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f1de:	48 89 c7             	mov    %rax,%rdi
  800420f1e1:	48 b8 c9 ea 20 04 80 	movabs $0x800420eac9,%rax
  800420f1e8:	00 00 00 
  800420f1eb:	ff d0                	callq  *%rax
		return 0;
  800420f1ed:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f1f2:	e9 06 01 00 00       	jmpq   800420f2fd <syscall+0x2f8>
	case SYS_time_msec:
		return sys_time_msec();
  800420f1f7:	48 b8 f2 eb 20 04 80 	movabs $0x800420ebf2,%rax
  800420f1fe:	00 00 00 
  800420f201:	ff d0                	callq  *%rax
  800420f203:	48 98                	cltq   
  800420f205:	e9 f3 00 00 00       	jmpq   800420f2fd <syscall+0x2f8>
	case SYS_net_transmit:
		return sys_net_transmit((const void *)a1, a2);
  800420f20a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f20e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f212:	48 89 d6             	mov    %rdx,%rsi
  800420f215:	48 89 c7             	mov    %rax,%rdi
  800420f218:	48 b8 04 ec 20 04 80 	movabs $0x800420ec04,%rax
  800420f21f:	00 00 00 
  800420f222:	ff d0                	callq  *%rax
  800420f224:	48 98                	cltq   
  800420f226:	e9 d2 00 00 00       	jmpq   800420f2fd <syscall+0x2f8>
	case SYS_net_receive:
		return sys_net_receive((void *)a1, a2);
  800420f22b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f22f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f233:	48 89 d6             	mov    %rdx,%rsi
  800420f236:	48 89 c7             	mov    %rax,%rdi
  800420f239:	48 b8 7d ec 20 04 80 	movabs $0x800420ec7d,%rax
  800420f240:	00 00 00 
  800420f243:	ff d0                	callq  *%rax
  800420f245:	48 98                	cltq   
  800420f247:	e9 b1 00 00 00       	jmpq   800420f2fd <syscall+0x2f8>
#ifndef VMM_GUEST
	case SYS_ept_map:
		return sys_ept_map(a1, (void *)a2, a3, (void *)a4, a5);
  800420f24c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420f250:	89 c7                	mov    %eax,%edi
  800420f252:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800420f256:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f25a:	89 c2                	mov    %eax,%edx
  800420f25c:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  800420f260:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f264:	41 89 f8             	mov    %edi,%r8d
  800420f267:	89 c7                	mov    %eax,%edi
  800420f269:	48 b8 59 ed 20 04 80 	movabs $0x800420ed59,%rax
  800420f270:	00 00 00 
  800420f273:	ff d0                	callq  *%rax
  800420f275:	48 98                	cltq   
  800420f277:	e9 81 00 00 00       	jmpq   800420f2fd <syscall+0x2f8>
	case SYS_env_mkguest:
		return sys_env_mkguest(a1, a2);
  800420f27c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f280:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f284:	48 89 d6             	mov    %rdx,%rsi
  800420f287:	48 89 c7             	mov    %rax,%rdi
  800420f28a:	48 b8 20 ef 20 04 80 	movabs $0x800420ef20,%rax
  800420f291:	00 00 00 
  800420f294:	ff d0                	callq  *%rax
  800420f296:	48 98                	cltq   
  800420f298:	eb 63                	jmp    800420f2fd <syscall+0x2f8>
	case SYS_vmx_list_vms:
		sys_vmx_list_vms();
  800420f29a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f29f:	48 ba f6 ec 20 04 80 	movabs $0x800420ecf6,%rdx
  800420f2a6:	00 00 00 
  800420f2a9:	ff d2                	callq  *%rdx
		return 0;
  800420f2ab:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f2b0:	eb 4b                	jmp    800420f2fd <syscall+0x2f8>
	case SYS_vmx_sel_resume:
		return sys_vmx_sel_resume(a1);
  800420f2b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f2b6:	89 c7                	mov    %eax,%edi
  800420f2b8:	48 b8 0d ed 20 04 80 	movabs $0x800420ed0d,%rax
  800420f2bf:	00 00 00 
  800420f2c2:	ff d0                	callq  *%rax
  800420f2c4:	0f b6 c0             	movzbl %al,%eax
  800420f2c7:	eb 34                	jmp    800420f2fd <syscall+0x2f8>
	case SYS_vmx_get_vmdisk_number:
		return sys_vmx_get_vmdisk_number();
  800420f2c9:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f2ce:	48 ba 2b ed 20 04 80 	movabs $0x800420ed2b,%rdx
  800420f2d5:	00 00 00 
  800420f2d8:	ff d2                	callq  *%rdx
  800420f2da:	48 98                	cltq   
  800420f2dc:	eb 1f                	jmp    800420f2fd <syscall+0x2f8>
	case SYS_vmx_incr_vmdisk_number:
		sys_vmx_incr_vmdisk_number();
  800420f2de:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f2e3:	48 ba 42 ed 20 04 80 	movabs $0x800420ed42,%rdx
  800420f2ea:	00 00 00 
  800420f2ed:	ff d2                	callq  *%rdx
		return 0;
  800420f2ef:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f2f4:	eb 07                	jmp    800420f2fd <syscall+0x2f8>
#endif

	default:
		return -E_NO_SYS;
  800420f2f6:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
	}
}
  800420f2fd:	c9                   	leaveq 
  800420f2fe:	c3                   	retq   

000000800420f2ff <_export_sys_ept_map>:

#ifdef TEST_EPT_MAP
int _export_sys_ept_map(envid_t srcenvid, void *srcva,
						envid_t guest, void *guest_pa, int perm)
{
  800420f2ff:	55                   	push   %rbp
  800420f300:	48 89 e5             	mov    %rsp,%rbp
  800420f303:	48 83 ec 20          	sub    $0x20,%rsp
  800420f307:	89 7d fc             	mov    %edi,-0x4(%rbp)
  800420f30a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420f30e:	89 55 f8             	mov    %edx,-0x8(%rbp)
  800420f311:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
  800420f315:	44 89 45 e4          	mov    %r8d,-0x1c(%rbp)
	return sys_ept_map(srcenvid, srcva, guest, guest_pa, perm);
  800420f319:	8b 7d e4             	mov    -0x1c(%rbp),%edi
  800420f31c:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420f320:	8b 55 f8             	mov    -0x8(%rbp),%edx
  800420f323:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  800420f327:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420f32a:	41 89 f8             	mov    %edi,%r8d
  800420f32d:	89 c7                	mov    %eax,%edi
  800420f32f:	48 b8 59 ed 20 04 80 	movabs $0x800420ed59,%rax
  800420f336:	00 00 00 
  800420f339:	ff d0                	callq  *%rax
}
  800420f33b:	c9                   	leaveq 
  800420f33c:	c3                   	retq   

000000800420f33d <list_func_die>:
  800420f33d:	55                   	push   %rbp
  800420f33e:	48 89 e5             	mov    %rsp,%rbp
  800420f341:	48 81 ec f0 61 00 00 	sub    $0x61f0,%rsp
  800420f348:	48 89 bd 58 9e ff ff 	mov    %rdi,-0x61a8(%rbp)
  800420f34f:	48 89 b5 50 9e ff ff 	mov    %rsi,-0x61b0(%rbp)
  800420f356:	48 89 95 48 9e ff ff 	mov    %rdx,-0x61b8(%rbp)
  800420f35d:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f364:	48 8b 80 60 03 00 00 	mov    0x360(%rax),%rax
  800420f36b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420f36f:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f376:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420f37d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420f381:	48 8b 95 50 9e ff ff 	mov    -0x61b0(%rbp),%rdx
  800420f388:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420f38f:	48 89 d1             	mov    %rdx,%rcx
  800420f392:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420f397:	48 89 ce             	mov    %rcx,%rsi
  800420f39a:	48 89 c7             	mov    %rax,%rdi
  800420f39d:	48 b8 d9 0f 21 04 80 	movabs $0x8004210fd9,%rax
  800420f3a4:	00 00 00 
  800420f3a7:	ff d0                	callq  *%rax
  800420f3a9:	48 c7 45 f8 08 00 00 	movq   $0x8,-0x8(%rbp)
  800420f3b0:	00 
  800420f3b1:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420f3b8:	00 
  800420f3b9:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f3c0:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420f3c4:	48 83 f8 2e          	cmp    $0x2e,%rax
  800420f3c8:	74 0a                	je     800420f3d4 <list_func_die+0x97>
  800420f3ca:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f3cf:	e9 cd 06 00 00       	jmpq   800420faa1 <list_func_die+0x764>
  800420f3d4:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800420f3db:	ba 38 00 00 00       	mov    $0x38,%edx
  800420f3e0:	be 00 00 00 00       	mov    $0x0,%esi
  800420f3e5:	48 89 c7             	mov    %rax,%rdi
  800420f3e8:	48 b8 37 0e 21 04 80 	movabs $0x8004210e37,%rax
  800420f3ef:	00 00 00 
  800420f3f2:	ff d0                	callq  *%rax
  800420f3f4:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f3fb:	be 11 00 00 00       	mov    $0x11,%esi
  800420f400:	48 89 c7             	mov    %rax,%rdi
  800420f403:	48 b8 6c 2d 21 04 80 	movabs $0x8004212d6c,%rax
  800420f40a:	00 00 00 
  800420f40d:	ff d0                	callq  *%rax
  800420f40f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420f413:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f41a:	be 12 00 00 00       	mov    $0x12,%esi
  800420f41f:	48 89 c7             	mov    %rax,%rdi
  800420f422:	48 b8 6c 2d 21 04 80 	movabs $0x8004212d6c,%rax
  800420f429:	00 00 00 
  800420f42c:	ff d0                	callq  *%rax
  800420f42e:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  800420f432:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800420f437:	0f 84 5f 06 00 00    	je     800420fa9c <list_func_die+0x75f>
  800420f43d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420f441:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f445:	48 3b 85 48 9e ff ff 	cmp    -0x61b8(%rbp),%rax
  800420f44c:	0f 83 4a 06 00 00    	jae    800420fa9c <list_func_die+0x75f>
  800420f452:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800420f457:	0f 84 3f 06 00 00    	je     800420fa9c <list_func_die+0x75f>
  800420f45d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420f461:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f465:	48 3b 85 48 9e ff ff 	cmp    -0x61b8(%rbp),%rax
  800420f46c:	0f 86 2a 06 00 00    	jbe    800420fa9c <list_func_die+0x75f>
  800420f472:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f479:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420f480:	48 8b 90 50 03 00 00 	mov    0x350(%rax),%rdx
  800420f487:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f48e:	48 89 10             	mov    %rdx,(%rax)
  800420f491:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f498:	48 8b 90 50 03 00 00 	mov    0x350(%rax),%rdx
  800420f49f:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f4a6:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420f4aa:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f4b1:	48 8b 80 50 03 00 00 	mov    0x350(%rax),%rax
  800420f4b8:	48 89 c7             	mov    %rax,%rdi
  800420f4bb:	48 b8 32 0b 21 04 80 	movabs $0x8004210b32,%rax
  800420f4c2:	00 00 00 
  800420f4c5:	ff d0                	callq  *%rax
  800420f4c7:	48 8b 95 58 9e ff ff 	mov    -0x61a8(%rbp),%rdx
  800420f4ce:	89 42 18             	mov    %eax,0x18(%rdx)
  800420f4d1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420f4d5:	48 8b 50 28          	mov    0x28(%rax),%rdx
  800420f4d9:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f4e0:	48 89 50 20          	mov    %rdx,0x20(%rax)
  800420f4e4:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f4eb:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420f4f2:	48 85 c0             	test   %rax,%rax
  800420f4f5:	75 35                	jne    800420f52c <list_func_die+0x1ef>
  800420f4f7:	48 b9 c0 02 22 04 80 	movabs $0x80042202c0,%rcx
  800420f4fe:	00 00 00 
  800420f501:	48 ba cc 02 22 04 80 	movabs $0x80042202cc,%rdx
  800420f508:	00 00 00 
  800420f50b:	be 95 00 00 00       	mov    $0x95,%esi
  800420f510:	48 bf e1 02 22 04 80 	movabs $0x80042202e1,%rdi
  800420f517:	00 00 00 
  800420f51a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f51f:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420f526:	00 00 00 
  800420f529:	41 ff d0             	callq  *%r8
  800420f52c:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f533:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420f53a:	48 8b 95 48 9e ff ff 	mov    -0x61b8(%rbp),%rdx
  800420f541:	48 8d b5 50 ff ff ff 	lea    -0xb0(%rbp),%rsi
  800420f548:	b9 00 00 00 00       	mov    $0x0,%ecx
  800420f54d:	48 89 c7             	mov    %rax,%rdi
  800420f550:	48 b8 93 63 21 04 80 	movabs $0x8004216393,%rax
  800420f557:	00 00 00 
  800420f55a:	ff d0                	callq  *%rax
  800420f55c:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420f563:	89 c2                	mov    %eax,%edx
  800420f565:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f56c:	89 50 08             	mov    %edx,0x8(%rax)
  800420f56f:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f576:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%rax)
  800420f57d:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420f584:	00 00 00 
  800420f587:	48 8b 00             	mov    (%rax),%rax
  800420f58a:	48 8d 8d e0 ce ff ff 	lea    -0x3120(%rbp),%rcx
  800420f591:	48 8d 95 70 9e ff ff 	lea    -0x6190(%rbp),%rdx
  800420f598:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420f59c:	48 89 c7             	mov    %rax,%rdi
  800420f59f:	48 b8 43 30 21 04 80 	movabs $0x8004213043,%rax
  800420f5a6:	00 00 00 
  800420f5a9:	ff d0                	callq  *%rax
  800420f5ab:	83 f8 04             	cmp    $0x4,%eax
  800420f5ae:	0f 84 e1 04 00 00    	je     800420fa95 <list_func_die+0x758>
  800420f5b4:	48 8b 85 f8 ce ff ff 	mov    -0x3108(%rbp),%rax
  800420f5bb:	48 83 f8 05          	cmp    $0x5,%rax
  800420f5bf:	74 05                	je     800420f5c6 <list_func_die+0x289>
  800420f5c1:	e9 cf 04 00 00       	jmpq   800420fa95 <list_func_die+0x758>
  800420f5c6:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420f5cd:	be 49 00 00 00       	mov    $0x49,%esi
  800420f5d2:	48 89 c7             	mov    %rax,%rdi
  800420f5d5:	48 b8 6c 2d 21 04 80 	movabs $0x8004212d6c,%rax
  800420f5dc:	00 00 00 
  800420f5df:	ff d0                	callq  *%rax
  800420f5e1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f5e5:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420f5ea:	0f 84 d7 00 00 00    	je     800420f6c7 <list_func_die+0x38a>
  800420f5f0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f5f4:	48 8b 50 30          	mov    0x30(%rax),%rdx
  800420f5f8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f5fc:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f600:	48 01 d0             	add    %rdx,%rax
  800420f603:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800420f607:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420f60e:	00 00 00 
  800420f611:	48 8b 08             	mov    (%rax),%rcx
  800420f614:	48 8d 95 70 9e ff ff 	lea    -0x6190(%rbp),%rdx
  800420f61b:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  800420f61f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f623:	48 8b 38             	mov    (%rax),%rdi
  800420f626:	48 89 3c 24          	mov    %rdi,(%rsp)
  800420f62a:	48 8b 78 08          	mov    0x8(%rax),%rdi
  800420f62e:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  800420f633:	48 8b 78 10          	mov    0x10(%rax),%rdi
  800420f637:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  800420f63c:	48 8b 78 18          	mov    0x18(%rax),%rdi
  800420f640:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  800420f645:	48 8b 78 20          	mov    0x20(%rax),%rdi
  800420f649:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  800420f64e:	48 8b 78 28          	mov    0x28(%rax),%rdi
  800420f652:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  800420f657:	48 8b 40 30          	mov    0x30(%rax),%rax
  800420f65b:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  800420f660:	48 89 cf             	mov    %rcx,%rdi
  800420f663:	48 b8 69 2c 21 04 80 	movabs $0x8004212c69,%rax
  800420f66a:	00 00 00 
  800420f66d:	ff d0                	callq  *%rax
  800420f66f:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420f676:	be 0b 00 00 00       	mov    $0xb,%esi
  800420f67b:	48 89 c7             	mov    %rax,%rdi
  800420f67e:	48 b8 6c 2d 21 04 80 	movabs $0x8004212d6c,%rax
  800420f685:	00 00 00 
  800420f688:	ff d0                	callq  *%rax
  800420f68a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f68e:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420f693:	74 0e                	je     800420f6a3 <list_func_die+0x366>
  800420f695:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f699:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f69d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420f6a1:	eb 24                	jmp    800420f6c7 <list_func_die+0x38a>
  800420f6a3:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420f6aa:	be 49 00 00 00       	mov    $0x49,%esi
  800420f6af:	48 89 c7             	mov    %rax,%rdi
  800420f6b2:	48 b8 6c 2d 21 04 80 	movabs $0x8004212d6c,%rax
  800420f6b9:	00 00 00 
  800420f6bc:	ff d0                	callq  *%rax
  800420f6be:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f6c2:	e9 1e ff ff ff       	jmpq   800420f5e5 <list_func_die+0x2a8>
  800420f6c7:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420f6ce:	00 
  800420f6cf:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420f6d6:	be 02 00 00 00       	mov    $0x2,%esi
  800420f6db:	48 89 c7             	mov    %rax,%rdi
  800420f6de:	48 b8 6c 2d 21 04 80 	movabs $0x8004212d6c,%rax
  800420f6e5:	00 00 00 
  800420f6e8:	ff d0                	callq  *%rax
  800420f6ea:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f6ee:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420f6f3:	0f 84 a2 00 00 00    	je     800420f79b <list_func_die+0x45e>
  800420f6f9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f6fd:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420f701:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  800420f705:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f709:	48 8b 40 40          	mov    0x40(%rax),%rax
  800420f70d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  800420f711:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f715:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420f719:	48 83 f8 03          	cmp    $0x3,%rax
  800420f71d:	72 7c                	jb     800420f79b <list_func_die+0x45e>
  800420f71f:	48 83 f8 04          	cmp    $0x4,%rax
  800420f723:	76 06                	jbe    800420f72b <list_func_die+0x3ee>
  800420f725:	48 83 f8 0a          	cmp    $0xa,%rax
  800420f729:	75 70                	jne    800420f79b <list_func_die+0x45e>
  800420f72b:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  800420f732:	00 
  800420f733:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420f737:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420f73b:	48 89 55 b0          	mov    %rdx,-0x50(%rbp)
  800420f73f:	0f b6 00             	movzbl (%rax),%eax
  800420f742:	88 45 af             	mov    %al,-0x51(%rbp)
  800420f745:	48 83 45 c0 01       	addq   $0x1,-0x40(%rbp)
  800420f74a:	80 7d af 91          	cmpb   $0x91,-0x51(%rbp)
  800420f74e:	75 4a                	jne    800420f79a <list_func_die+0x45d>
  800420f750:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420f754:	48 89 85 68 9e ff ff 	mov    %rax,-0x6198(%rbp)
  800420f75b:	48 8d 85 68 9e ff ff 	lea    -0x6198(%rbp),%rax
  800420f762:	48 89 c7             	mov    %rax,%rdi
  800420f765:	48 b8 c8 19 21 04 80 	movabs $0x80042119c8,%rax
  800420f76c:	00 00 00 
  800420f76f:	ff d0                	callq  *%rax
  800420f771:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420f775:	48 8b 85 68 9e ff ff 	mov    -0x6198(%rbp),%rax
  800420f77c:	48 89 c2             	mov    %rax,%rdx
  800420f77f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420f783:	48 29 c2             	sub    %rax,%rdx
  800420f786:	48 89 d0             	mov    %rdx,%rax
  800420f789:	48 01 45 c0          	add    %rax,-0x40(%rbp)
  800420f78d:	48 8b 85 68 9e ff ff 	mov    -0x6198(%rbp),%rax
  800420f794:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  800420f798:	eb 00                	jmp    800420f79a <list_func_die+0x45d>
  800420f79a:	90                   	nop
  800420f79b:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f7a2:	8b 48 28             	mov    0x28(%rax),%ecx
  800420f7a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420f7a9:	89 c2                	mov    %eax,%edx
  800420f7ab:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f7b2:	48 63 c9             	movslq %ecx,%rcx
  800420f7b5:	48 83 c1 08          	add    $0x8,%rcx
  800420f7b9:	89 54 88 0c          	mov    %edx,0xc(%rax,%rcx,4)
  800420f7bd:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f7c4:	8b 50 28             	mov    0x28(%rax),%edx
  800420f7c7:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f7ce:	48 63 d2             	movslq %edx,%rdx
  800420f7d1:	48 8d 4a 0a          	lea    0xa(%rdx),%rcx
  800420f7d5:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420f7d9:	48 89 54 c8 08       	mov    %rdx,0x8(%rax,%rcx,8)
  800420f7de:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f7e5:	8b 40 28             	mov    0x28(%rax),%eax
  800420f7e8:	8d 50 01             	lea    0x1(%rax),%edx
  800420f7eb:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f7f2:	89 50 28             	mov    %edx,0x28(%rax)
  800420f7f5:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420f7fc:	48 8d 8d e0 ce ff ff 	lea    -0x3120(%rbp),%rcx
  800420f803:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420f808:	48 89 ce             	mov    %rcx,%rsi
  800420f80b:	48 89 c7             	mov    %rax,%rdi
  800420f80e:	48 b8 d9 0f 21 04 80 	movabs $0x8004210fd9,%rax
  800420f815:	00 00 00 
  800420f818:	ff d0                	callq  *%rax
  800420f81a:	e9 40 02 00 00       	jmpq   800420fa5f <list_func_die+0x722>
  800420f81f:	48 8b 85 f8 ce ff ff 	mov    -0x3108(%rbp),%rax
  800420f826:	48 83 f8 05          	cmp    $0x5,%rax
  800420f82a:	74 05                	je     800420f831 <list_func_die+0x4f4>
  800420f82c:	e9 64 02 00 00       	jmpq   800420fa95 <list_func_die+0x758>
  800420f831:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420f838:	be 49 00 00 00       	mov    $0x49,%esi
  800420f83d:	48 89 c7             	mov    %rax,%rdi
  800420f840:	48 b8 6c 2d 21 04 80 	movabs $0x8004212d6c,%rax
  800420f847:	00 00 00 
  800420f84a:	ff d0                	callq  *%rax
  800420f84c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f850:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420f855:	0f 84 b1 00 00 00    	je     800420f90c <list_func_die+0x5cf>
  800420f85b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f85f:	48 8b 50 30          	mov    0x30(%rax),%rdx
  800420f863:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f867:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f86b:	48 01 d0             	add    %rdx,%rax
  800420f86e:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800420f872:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420f879:	00 00 00 
  800420f87c:	48 8b 08             	mov    (%rax),%rcx
  800420f87f:	48 8d 95 70 9e ff ff 	lea    -0x6190(%rbp),%rdx
  800420f886:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  800420f88a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f88e:	48 8b 38             	mov    (%rax),%rdi
  800420f891:	48 89 3c 24          	mov    %rdi,(%rsp)
  800420f895:	48 8b 78 08          	mov    0x8(%rax),%rdi
  800420f899:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  800420f89e:	48 8b 78 10          	mov    0x10(%rax),%rdi
  800420f8a2:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  800420f8a7:	48 8b 78 18          	mov    0x18(%rax),%rdi
  800420f8ab:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  800420f8b0:	48 8b 78 20          	mov    0x20(%rax),%rdi
  800420f8b4:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  800420f8b9:	48 8b 78 28          	mov    0x28(%rax),%rdi
  800420f8bd:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  800420f8c2:	48 8b 40 30          	mov    0x30(%rax),%rax
  800420f8c6:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  800420f8cb:	48 89 cf             	mov    %rcx,%rdi
  800420f8ce:	48 b8 69 2c 21 04 80 	movabs $0x8004212c69,%rax
  800420f8d5:	00 00 00 
  800420f8d8:	ff d0                	callq  *%rax
  800420f8da:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420f8e1:	be 0b 00 00 00       	mov    $0xb,%esi
  800420f8e6:	48 89 c7             	mov    %rax,%rdi
  800420f8e9:	48 b8 6c 2d 21 04 80 	movabs $0x8004212d6c,%rax
  800420f8f0:	00 00 00 
  800420f8f3:	ff d0                	callq  *%rax
  800420f8f5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f8f9:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420f8fe:	74 0c                	je     800420f90c <list_func_die+0x5cf>
  800420f900:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f904:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f908:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420f90c:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420f913:	00 
  800420f914:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420f91b:	be 02 00 00 00       	mov    $0x2,%esi
  800420f920:	48 89 c7             	mov    %rax,%rdi
  800420f923:	48 b8 6c 2d 21 04 80 	movabs $0x8004212d6c,%rax
  800420f92a:	00 00 00 
  800420f92d:	ff d0                	callq  *%rax
  800420f92f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f933:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420f938:	0f 84 a2 00 00 00    	je     800420f9e0 <list_func_die+0x6a3>
  800420f93e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f942:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420f946:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  800420f94a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f94e:	48 8b 40 40          	mov    0x40(%rax),%rax
  800420f952:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800420f956:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f95a:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420f95e:	48 83 f8 03          	cmp    $0x3,%rax
  800420f962:	72 7c                	jb     800420f9e0 <list_func_die+0x6a3>
  800420f964:	48 83 f8 04          	cmp    $0x4,%rax
  800420f968:	76 06                	jbe    800420f970 <list_func_die+0x633>
  800420f96a:	48 83 f8 0a          	cmp    $0xa,%rax
  800420f96e:	75 70                	jne    800420f9e0 <list_func_die+0x6a3>
  800420f970:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  800420f977:	00 
  800420f978:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420f97c:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420f980:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420f984:	0f b6 00             	movzbl (%rax),%eax
  800420f987:	88 45 97             	mov    %al,-0x69(%rbp)
  800420f98a:	48 83 45 c0 01       	addq   $0x1,-0x40(%rbp)
  800420f98f:	80 7d 97 91          	cmpb   $0x91,-0x69(%rbp)
  800420f993:	75 4a                	jne    800420f9df <list_func_die+0x6a2>
  800420f995:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420f999:	48 89 85 60 9e ff ff 	mov    %rax,-0x61a0(%rbp)
  800420f9a0:	48 8d 85 60 9e ff ff 	lea    -0x61a0(%rbp),%rax
  800420f9a7:	48 89 c7             	mov    %rax,%rdi
  800420f9aa:	48 b8 c8 19 21 04 80 	movabs $0x80042119c8,%rax
  800420f9b1:	00 00 00 
  800420f9b4:	ff d0                	callq  *%rax
  800420f9b6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420f9ba:	48 8b 85 60 9e ff ff 	mov    -0x61a0(%rbp),%rax
  800420f9c1:	48 89 c2             	mov    %rax,%rdx
  800420f9c4:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420f9c8:	48 29 c2             	sub    %rax,%rdx
  800420f9cb:	48 89 d0             	mov    %rdx,%rax
  800420f9ce:	48 01 45 c0          	add    %rax,-0x40(%rbp)
  800420f9d2:	48 8b 85 60 9e ff ff 	mov    -0x61a0(%rbp),%rax
  800420f9d9:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800420f9dd:	eb 00                	jmp    800420f9df <list_func_die+0x6a2>
  800420f9df:	90                   	nop
  800420f9e0:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f9e7:	8b 48 28             	mov    0x28(%rax),%ecx
  800420f9ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420f9ee:	89 c2                	mov    %eax,%edx
  800420f9f0:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f9f7:	48 63 c9             	movslq %ecx,%rcx
  800420f9fa:	48 83 c1 08          	add    $0x8,%rcx
  800420f9fe:	89 54 88 0c          	mov    %edx,0xc(%rax,%rcx,4)
  800420fa02:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420fa09:	8b 50 28             	mov    0x28(%rax),%edx
  800420fa0c:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420fa13:	48 63 d2             	movslq %edx,%rdx
  800420fa16:	48 8d 4a 0a          	lea    0xa(%rdx),%rcx
  800420fa1a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420fa1e:	48 89 54 c8 08       	mov    %rdx,0x8(%rax,%rcx,8)
  800420fa23:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420fa2a:	8b 40 28             	mov    0x28(%rax),%eax
  800420fa2d:	8d 50 01             	lea    0x1(%rax),%edx
  800420fa30:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420fa37:	89 50 28             	mov    %edx,0x28(%rax)
  800420fa3a:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420fa41:	48 8d 8d e0 ce ff ff 	lea    -0x3120(%rbp),%rcx
  800420fa48:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420fa4d:	48 89 ce             	mov    %rcx,%rsi
  800420fa50:	48 89 c7             	mov    %rax,%rdi
  800420fa53:	48 b8 d9 0f 21 04 80 	movabs $0x8004210fd9,%rax
  800420fa5a:	00 00 00 
  800420fa5d:	ff d0                	callq  *%rax
  800420fa5f:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420fa66:	00 00 00 
  800420fa69:	48 8b 00             	mov    (%rax),%rax
  800420fa6c:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  800420fa70:	48 8d 95 e0 ce ff ff 	lea    -0x3120(%rbp),%rdx
  800420fa77:	48 8d b5 70 9e ff ff 	lea    -0x6190(%rbp),%rsi
  800420fa7e:	48 89 c7             	mov    %rax,%rdi
  800420fa81:	48 b8 ff 2d 21 04 80 	movabs $0x8004212dff,%rax
  800420fa88:	00 00 00 
  800420fa8b:	ff d0                	callq  *%rax
  800420fa8d:	85 c0                	test   %eax,%eax
  800420fa8f:	0f 84 8a fd ff ff    	je     800420f81f <list_func_die+0x4e2>
  800420fa95:	b8 01 00 00 00       	mov    $0x1,%eax
  800420fa9a:	eb 05                	jmp    800420faa1 <list_func_die+0x764>
  800420fa9c:	b8 00 00 00 00       	mov    $0x0,%eax
  800420faa1:	c9                   	leaveq 
  800420faa2:	c3                   	retq   

000000800420faa3 <debuginfo_rip>:
  800420faa3:	55                   	push   %rbp
  800420faa4:	48 89 e5             	mov    %rsp,%rbp
  800420faa7:	53                   	push   %rbx
  800420faa8:	48 81 ec c8 91 00 00 	sub    $0x91c8,%rsp
  800420faaf:	48 89 bd 38 6e ff ff 	mov    %rdi,-0x91c8(%rbp)
  800420fab6:	48 89 b5 30 6e ff ff 	mov    %rsi,-0x91d0(%rbp)
  800420fabd:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  800420fac4:	00 
  800420fac5:	48 8b 85 38 6e ff ff 	mov    -0x91c8(%rbp),%rax
  800420facc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420fad0:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420fad7:	48 bb f2 02 22 04 80 	movabs $0x80042202f2,%rbx
  800420fade:	00 00 00 
  800420fae1:	48 89 18             	mov    %rbx,(%rax)
  800420fae4:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420faeb:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
  800420faf2:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420faf9:	48 bb f2 02 22 04 80 	movabs $0x80042202f2,%rbx
  800420fb00:	00 00 00 
  800420fb03:	48 89 58 10          	mov    %rbx,0x10(%rax)
  800420fb07:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420fb0e:	c7 40 18 09 00 00 00 	movl   $0x9,0x18(%rax)
  800420fb15:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420fb1c:	48 8b 95 38 6e ff ff 	mov    -0x91c8(%rbp),%rdx
  800420fb23:	48 89 50 20          	mov    %rdx,0x20(%rax)
  800420fb27:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420fb2e:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%rax)
  800420fb35:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  800420fb3c:	00 00 00 
  800420fb3f:	48 39 85 38 6e ff ff 	cmp    %rax,-0x91c8(%rbp)
  800420fb46:	76 13                	jbe    800420fb5b <debuginfo_rip+0xb8>
  800420fb48:	48 b8 00 00 01 04 80 	movabs $0x8004010000,%rax
  800420fb4f:	00 00 00 
  800420fb52:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420fb56:	e9 04 01 00 00       	jmpq   800420fc5f <debuginfo_rip+0x1bc>
  800420fb5b:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420fb62:	00 00 00 
  800420fb65:	ff d0                	callq  *%rax
  800420fb67:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420fb6e:	00 00 00 
  800420fb71:	48 98                	cltq   
  800420fb73:	48 c1 e0 03          	shl    $0x3,%rax
  800420fb77:	48 89 c1             	mov    %rax,%rcx
  800420fb7a:	48 c1 e1 04          	shl    $0x4,%rcx
  800420fb7e:	48 01 c8             	add    %rcx,%rax
  800420fb81:	48 01 d0             	add    %rdx,%rax
  800420fb84:	48 83 c0 08          	add    $0x8,%rax
  800420fb88:	48 8b 10             	mov    (%rax),%rdx
  800420fb8b:	48 b8 98 02 4e 04 80 	movabs $0x80044e0298,%rax
  800420fb92:	00 00 00 
  800420fb95:	48 8b 00             	mov    (%rax),%rax
  800420fb98:	48 39 c2             	cmp    %rax,%rdx
  800420fb9b:	0f 84 83 00 00 00    	je     800420fc24 <debuginfo_rip+0x181>
  800420fba1:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420fba8:	00 00 00 
  800420fbab:	ff d0                	callq  *%rax
  800420fbad:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420fbb4:	00 00 00 
  800420fbb7:	48 98                	cltq   
  800420fbb9:	48 c1 e0 03          	shl    $0x3,%rax
  800420fbbd:	48 89 c1             	mov    %rax,%rcx
  800420fbc0:	48 c1 e1 04          	shl    $0x4,%rcx
  800420fbc4:	48 01 c8             	add    %rcx,%rax
  800420fbc7:	48 01 d0             	add    %rdx,%rax
  800420fbca:	48 83 c0 08          	add    $0x8,%rax
  800420fbce:	48 8b 00             	mov    (%rax),%rax
  800420fbd1:	48 8b 80 18 01 00 00 	mov    0x118(%rax),%rax
  800420fbd8:	48 89 c7             	mov    %rax,%rdi
  800420fbdb:	48 b8 8e 65 21 04 80 	movabs $0x800421658e,%rax
  800420fbe2:	00 00 00 
  800420fbe5:	ff d0                	callq  *%rax
  800420fbe7:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420fbee:	00 00 00 
  800420fbf1:	ff d0                	callq  *%rax
  800420fbf3:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420fbfa:	00 00 00 
  800420fbfd:	48 98                	cltq   
  800420fbff:	48 c1 e0 03          	shl    $0x3,%rax
  800420fc03:	48 89 c1             	mov    %rax,%rcx
  800420fc06:	48 c1 e1 04          	shl    $0x4,%rcx
  800420fc0a:	48 01 c8             	add    %rcx,%rax
  800420fc0d:	48 01 d0             	add    %rdx,%rax
  800420fc10:	48 83 c0 08          	add    $0x8,%rax
  800420fc14:	48 8b 10             	mov    (%rax),%rdx
  800420fc17:	48 b8 98 02 4e 04 80 	movabs $0x80044e0298,%rax
  800420fc1e:	00 00 00 
  800420fc21:	48 89 10             	mov    %rdx,(%rax)
  800420fc24:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800420fc2b:	00 00 00 
  800420fc2e:	ff d0                	callq  *%rax
  800420fc30:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800420fc37:	00 00 00 
  800420fc3a:	48 98                	cltq   
  800420fc3c:	48 c1 e0 03          	shl    $0x3,%rax
  800420fc40:	48 89 c1             	mov    %rax,%rcx
  800420fc43:	48 c1 e1 04          	shl    $0x4,%rcx
  800420fc47:	48 01 c8             	add    %rcx,%rax
  800420fc4a:	48 01 d0             	add    %rdx,%rax
  800420fc4d:	48 83 c0 08          	add    $0x8,%rax
  800420fc51:	48 8b 00             	mov    (%rax),%rax
  800420fc54:	48 8b 80 18 01 00 00 	mov    0x118(%rax),%rax
  800420fc5b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420fc5f:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420fc66:	00 00 00 
  800420fc69:	48 8b 00             	mov    (%rax),%rax
  800420fc6c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fc70:	48 89 d6             	mov    %rdx,%rsi
  800420fc73:	48 89 c7             	mov    %rax,%rdi
  800420fc76:	48 b8 77 1c 21 04 80 	movabs $0x8004211c77,%rax
  800420fc7d:	00 00 00 
  800420fc80:	ff d0                	callq  *%rax
  800420fc82:	48 bf fc 02 22 04 80 	movabs $0x80042202fc,%rdi
  800420fc89:	00 00 00 
  800420fc8c:	48 b8 0e 65 21 04 80 	movabs $0x800421650e,%rax
  800420fc93:	00 00 00 
  800420fc96:	ff d0                	callq  *%rax
  800420fc98:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420fc9c:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420fca3:	00 00 00 
  800420fca6:	48 8b 00             	mov    (%rax),%rax
  800420fca9:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420fcad:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  800420fcb1:	48 89 50 08          	mov    %rdx,0x8(%rax)
  800420fcb5:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420fcbc:	00 00 00 
  800420fcbf:	48 8b 00             	mov    (%rax),%rax
  800420fcc2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420fcc6:	48 8b 52 18          	mov    0x18(%rdx),%rdx
  800420fcca:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420fcce:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420fcd5:	00 00 00 
  800420fcd8:	48 8b 00             	mov    (%rax),%rax
  800420fcdb:	48 8b 40 10          	mov    0x10(%rax),%rax
  800420fcdf:	48 85 c0             	test   %rax,%rax
  800420fce2:	75 35                	jne    800420fd19 <debuginfo_rip+0x276>
  800420fce4:	48 b9 08 03 22 04 80 	movabs $0x8004220308,%rcx
  800420fceb:	00 00 00 
  800420fcee:	48 ba cc 02 22 04 80 	movabs $0x80042202cc,%rdx
  800420fcf5:	00 00 00 
  800420fcf8:	be 40 01 00 00       	mov    $0x140,%esi
  800420fcfd:	48 bf e1 02 22 04 80 	movabs $0x80042202e1,%rdi
  800420fd04:	00 00 00 
  800420fd07:	b8 00 00 00 00       	mov    $0x0,%eax
  800420fd0c:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420fd13:	00 00 00 
  800420fd16:	41 ff d0             	callq  *%r8
  800420fd19:	e9 6f 01 00 00       	jmpq   800420fe8d <debuginfo_rip+0x3ea>
  800420fd1e:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420fd25:	00 00 00 
  800420fd28:	48 8b 00             	mov    (%rax),%rax
  800420fd2b:	48 8d 4d 90          	lea    -0x70(%rbp),%rcx
  800420fd2f:	48 8d 95 b0 9e ff ff 	lea    -0x6150(%rbp),%rdx
  800420fd36:	be 00 00 00 00       	mov    $0x0,%esi
  800420fd3b:	48 89 c7             	mov    %rax,%rdi
  800420fd3e:	48 b8 ff 2d 21 04 80 	movabs $0x8004212dff,%rax
  800420fd45:	00 00 00 
  800420fd48:	ff d0                	callq  *%rax
  800420fd4a:	83 f8 04             	cmp    $0x4,%eax
  800420fd4d:	75 05                	jne    800420fd54 <debuginfo_rip+0x2b1>
  800420fd4f:	e9 39 01 00 00       	jmpq   800420fe8d <debuginfo_rip+0x3ea>
  800420fd54:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  800420fd58:	48 89 85 10 a2 ff ff 	mov    %rax,-0x5df0(%rbp)
  800420fd5f:	48 c7 85 18 a2 ff ff 	movq   $0x0,-0x5de8(%rbp)
  800420fd66:	00 00 00 00 
  800420fd6a:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420fd71:	00 00 00 
  800420fd74:	48 8b 00             	mov    (%rax),%rax
  800420fd77:	48 8d 8d 20 cf ff ff 	lea    -0x30e0(%rbp),%rcx
  800420fd7e:	48 8d 95 b0 9e ff ff 	lea    -0x6150(%rbp),%rdx
  800420fd85:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
  800420fd89:	48 89 c7             	mov    %rax,%rdi
  800420fd8c:	48 b8 43 30 21 04 80 	movabs $0x8004213043,%rax
  800420fd93:	00 00 00 
  800420fd96:	ff d0                	callq  *%rax
  800420fd98:	83 f8 04             	cmp    $0x4,%eax
  800420fd9b:	75 05                	jne    800420fda2 <debuginfo_rip+0x2ff>
  800420fd9d:	e9 eb 00 00 00       	jmpq   800420fe8d <debuginfo_rip+0x3ea>
  800420fda2:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  800420fda6:	48 89 85 80 d2 ff ff 	mov    %rax,-0x2d80(%rbp)
  800420fdad:	48 8d 85 b0 9e ff ff 	lea    -0x6150(%rbp),%rax
  800420fdb4:	48 89 85 88 d2 ff ff 	mov    %rax,-0x2d78(%rbp)
  800420fdbb:	48 8b 95 38 6e ff ff 	mov    -0x91c8(%rbp),%rdx
  800420fdc2:	48 8d 8d 20 cf ff ff 	lea    -0x30e0(%rbp),%rcx
  800420fdc9:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420fdd0:	48 89 ce             	mov    %rcx,%rsi
  800420fdd3:	48 89 c7             	mov    %rax,%rdi
  800420fdd6:	48 b8 3d f3 20 04 80 	movabs $0x800420f33d,%rax
  800420fddd:	00 00 00 
  800420fde0:	ff d0                	callq  *%rax
  800420fde2:	85 c0                	test   %eax,%eax
  800420fde4:	74 30                	je     800420fe16 <debuginfo_rip+0x373>
  800420fde6:	90                   	nop
  800420fde7:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420fdee:	00 00 00 
  800420fdf1:	48 8b 00             	mov    (%rax),%rax
  800420fdf4:	be 00 00 00 00       	mov    $0x0,%esi
  800420fdf9:	48 89 c7             	mov    %rax,%rdi
  800420fdfc:	48 b8 1b 57 21 04 80 	movabs $0x800421571b,%rax
  800420fe03:	00 00 00 
  800420fe06:	ff d0                	callq  *%rax
  800420fe08:	83 f8 01             	cmp    $0x1,%eax
  800420fe0b:	0f 85 bb 00 00 00    	jne    800420fecc <debuginfo_rip+0x429>
  800420fe11:	e9 ac 00 00 00       	jmpq   800420fec2 <debuginfo_rip+0x41f>
  800420fe16:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420fe1d:	00 00 00 
  800420fe20:	48 8b 00             	mov    (%rax),%rax
  800420fe23:	48 8d 4d 90          	lea    -0x70(%rbp),%rcx
  800420fe27:	48 8d 95 40 6e ff ff 	lea    -0x91c0(%rbp),%rdx
  800420fe2e:	48 8d b5 20 cf ff ff 	lea    -0x30e0(%rbp),%rsi
  800420fe35:	48 89 c7             	mov    %rax,%rdi
  800420fe38:	48 b8 ff 2d 21 04 80 	movabs $0x8004212dff,%rax
  800420fe3f:	00 00 00 
  800420fe42:	ff d0                	callq  *%rax
  800420fe44:	85 c0                	test   %eax,%eax
  800420fe46:	79 02                	jns    800420fe4a <debuginfo_rip+0x3a7>
  800420fe48:	eb 43                	jmp    800420fe8d <debuginfo_rip+0x3ea>
  800420fe4a:	48 8d 85 20 cf ff ff 	lea    -0x30e0(%rbp),%rax
  800420fe51:	48 8d 8d 40 6e ff ff 	lea    -0x91c0(%rbp),%rcx
  800420fe58:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420fe5d:	48 89 ce             	mov    %rcx,%rsi
  800420fe60:	48 89 c7             	mov    %rax,%rdi
  800420fe63:	48 b8 d9 0f 21 04 80 	movabs $0x8004210fd9,%rax
  800420fe6a:	00 00 00 
  800420fe6d:	ff d0                	callq  *%rax
  800420fe6f:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  800420fe73:	48 89 85 80 d2 ff ff 	mov    %rax,-0x2d80(%rbp)
  800420fe7a:	48 8d 85 b0 9e ff ff 	lea    -0x6150(%rbp),%rax
  800420fe81:	48 89 85 88 d2 ff ff 	mov    %rax,-0x2d78(%rbp)
  800420fe88:	e9 2e ff ff ff       	jmpq   800420fdbb <debuginfo_rip+0x318>
  800420fe8d:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420fe94:	00 00 00 
  800420fe97:	48 8b 00             	mov    (%rax),%rax
  800420fe9a:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
  800420fe9e:	48 89 d6             	mov    %rdx,%rsi
  800420fea1:	48 89 c7             	mov    %rax,%rdi
  800420fea4:	48 b8 59 1d 21 04 80 	movabs $0x8004211d59,%rax
  800420feab:	00 00 00 
  800420feae:	ff d0                	callq  *%rax
  800420feb0:	85 c0                	test   %eax,%eax
  800420feb2:	0f 84 66 fe ff ff    	je     800420fd1e <debuginfo_rip+0x27b>
  800420feb8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420febd:	e9 a0 00 00 00       	jmpq   800420ff62 <debuginfo_rip+0x4bf>
  800420fec2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420fec7:	e9 96 00 00 00       	jmpq   800420ff62 <debuginfo_rip+0x4bf>
  800420fecc:	48 b8 80 56 23 04 80 	movabs $0x8004235680,%rax
  800420fed3:	00 00 00 
  800420fed6:	48 8b 08             	mov    (%rax),%rcx
  800420fed9:	48 b8 78 56 23 04 80 	movabs $0x8004235678,%rax
  800420fee0:	00 00 00 
  800420fee3:	48 8b 10             	mov    (%rax),%rdx
  800420fee6:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420feed:	00 00 00 
  800420fef0:	48 8b 00             	mov    (%rax),%rax
  800420fef3:	48 8b b5 38 6e ff ff 	mov    -0x91c8(%rbp),%rsi
  800420fefa:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800420ff00:	48 89 c7             	mov    %rax,%rdi
  800420ff03:	48 b8 84 32 21 04 80 	movabs $0x8004213284,%rax
  800420ff0a:	00 00 00 
  800420ff0d:	ff d0                	callq  *%rax
  800420ff0f:	85 c0                	test   %eax,%eax
  800420ff11:	75 4a                	jne    800420ff5d <debuginfo_rip+0x4ba>
  800420ff13:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420ff1a:	48 8d 88 a8 00 00 00 	lea    0xa8(%rax),%rcx
  800420ff21:	48 b8 78 56 23 04 80 	movabs $0x8004235678,%rax
  800420ff28:	00 00 00 
  800420ff2b:	48 8b 30             	mov    (%rax),%rsi
  800420ff2e:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420ff35:	00 00 00 
  800420ff38:	48 8b 00             	mov    (%rax),%rax
  800420ff3b:	48 8b 95 38 6e ff ff 	mov    -0x91c8(%rbp),%rdx
  800420ff42:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  800420ff48:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800420ff4e:	48 89 c7             	mov    %rax,%rdi
  800420ff51:	48 b8 90 45 21 04 80 	movabs $0x8004214590,%rax
  800420ff58:	00 00 00 
  800420ff5b:	ff d0                	callq  *%rax
  800420ff5d:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ff62:	48 81 c4 c8 91 00 00 	add    $0x91c8,%rsp
  800420ff69:	5b                   	pop    %rbx
  800420ff6a:	5d                   	pop    %rbp
  800420ff6b:	c3                   	retq   

000000800420ff6c <printnum>:
  800420ff6c:	55                   	push   %rbp
  800420ff6d:	48 89 e5             	mov    %rsp,%rbp
  800420ff70:	53                   	push   %rbx
  800420ff71:	48 83 ec 38          	sub    $0x38,%rsp
  800420ff75:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420ff79:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420ff7d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800420ff81:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
  800420ff84:	44 89 45 d0          	mov    %r8d,-0x30(%rbp)
  800420ff88:	44 89 4d cc          	mov    %r9d,-0x34(%rbp)
  800420ff8c:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800420ff8f:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  800420ff93:	77 3b                	ja     800420ffd0 <printnum+0x64>
  800420ff95:	8b 45 d0             	mov    -0x30(%rbp),%eax
  800420ff98:	44 8d 40 ff          	lea    -0x1(%rax),%r8d
  800420ff9c:	8b 5d d4             	mov    -0x2c(%rbp),%ebx
  800420ff9f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420ffa3:	ba 00 00 00 00       	mov    $0x0,%edx
  800420ffa8:	48 f7 f3             	div    %rbx
  800420ffab:	48 89 c2             	mov    %rax,%rdx
  800420ffae:	8b 7d cc             	mov    -0x34(%rbp),%edi
  800420ffb1:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
  800420ffb4:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420ffb8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ffbc:	41 89 f9             	mov    %edi,%r9d
  800420ffbf:	48 89 c7             	mov    %rax,%rdi
  800420ffc2:	48 b8 6c ff 20 04 80 	movabs $0x800420ff6c,%rax
  800420ffc9:	00 00 00 
  800420ffcc:	ff d0                	callq  *%rax
  800420ffce:	eb 1e                	jmp    800420ffee <printnum+0x82>
  800420ffd0:	eb 12                	jmp    800420ffe4 <printnum+0x78>
  800420ffd2:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  800420ffd6:	8b 55 cc             	mov    -0x34(%rbp),%edx
  800420ffd9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ffdd:	48 89 ce             	mov    %rcx,%rsi
  800420ffe0:	89 d7                	mov    %edx,%edi
  800420ffe2:	ff d0                	callq  *%rax
  800420ffe4:	83 6d d0 01          	subl   $0x1,-0x30(%rbp)
  800420ffe8:	83 7d d0 00          	cmpl   $0x0,-0x30(%rbp)
  800420ffec:	7f e4                	jg     800420ffd2 <printnum+0x66>
  800420ffee:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
  800420fff1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420fff5:	ba 00 00 00 00       	mov    $0x0,%edx
  800420fffa:	48 f7 f1             	div    %rcx
  800420fffd:	48 89 d0             	mov    %rdx,%rax
  8004210000:	48 ba 10 05 22 04 80 	movabs $0x8004220510,%rdx
  8004210007:	00 00 00 
  800421000a:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  800421000e:	0f be d0             	movsbl %al,%edx
  8004210011:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  8004210015:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210019:	48 89 ce             	mov    %rcx,%rsi
  800421001c:	89 d7                	mov    %edx,%edi
  800421001e:	ff d0                	callq  *%rax
  8004210020:	48 83 c4 38          	add    $0x38,%rsp
  8004210024:	5b                   	pop    %rbx
  8004210025:	5d                   	pop    %rbp
  8004210026:	c3                   	retq   

0000008004210027 <getuint>:
  8004210027:	55                   	push   %rbp
  8004210028:	48 89 e5             	mov    %rsp,%rbp
  800421002b:	48 83 ec 1c          	sub    $0x1c,%rsp
  800421002f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210033:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004210036:	83 7d e4 01          	cmpl   $0x1,-0x1c(%rbp)
  800421003a:	7e 52                	jle    800421008e <getuint+0x67>
  800421003c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210040:	8b 00                	mov    (%rax),%eax
  8004210042:	83 f8 30             	cmp    $0x30,%eax
  8004210045:	73 24                	jae    800421006b <getuint+0x44>
  8004210047:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421004b:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800421004f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210053:	8b 00                	mov    (%rax),%eax
  8004210055:	89 c0                	mov    %eax,%eax
  8004210057:	48 01 d0             	add    %rdx,%rax
  800421005a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421005e:	8b 12                	mov    (%rdx),%edx
  8004210060:	8d 4a 08             	lea    0x8(%rdx),%ecx
  8004210063:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210067:	89 0a                	mov    %ecx,(%rdx)
  8004210069:	eb 17                	jmp    8004210082 <getuint+0x5b>
  800421006b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421006f:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004210073:	48 89 d0             	mov    %rdx,%rax
  8004210076:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800421007a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421007e:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  8004210082:	48 8b 00             	mov    (%rax),%rax
  8004210085:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210089:	e9 a3 00 00 00       	jmpq   8004210131 <getuint+0x10a>
  800421008e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004210092:	74 4f                	je     80042100e3 <getuint+0xbc>
  8004210094:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210098:	8b 00                	mov    (%rax),%eax
  800421009a:	83 f8 30             	cmp    $0x30,%eax
  800421009d:	73 24                	jae    80042100c3 <getuint+0x9c>
  800421009f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042100a3:	48 8b 50 10          	mov    0x10(%rax),%rdx
  80042100a7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042100ab:	8b 00                	mov    (%rax),%eax
  80042100ad:	89 c0                	mov    %eax,%eax
  80042100af:	48 01 d0             	add    %rdx,%rax
  80042100b2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042100b6:	8b 12                	mov    (%rdx),%edx
  80042100b8:	8d 4a 08             	lea    0x8(%rdx),%ecx
  80042100bb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042100bf:	89 0a                	mov    %ecx,(%rdx)
  80042100c1:	eb 17                	jmp    80042100da <getuint+0xb3>
  80042100c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042100c7:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042100cb:	48 89 d0             	mov    %rdx,%rax
  80042100ce:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  80042100d2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042100d6:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  80042100da:	48 8b 00             	mov    (%rax),%rax
  80042100dd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042100e1:	eb 4e                	jmp    8004210131 <getuint+0x10a>
  80042100e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042100e7:	8b 00                	mov    (%rax),%eax
  80042100e9:	83 f8 30             	cmp    $0x30,%eax
  80042100ec:	73 24                	jae    8004210112 <getuint+0xeb>
  80042100ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042100f2:	48 8b 50 10          	mov    0x10(%rax),%rdx
  80042100f6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042100fa:	8b 00                	mov    (%rax),%eax
  80042100fc:	89 c0                	mov    %eax,%eax
  80042100fe:	48 01 d0             	add    %rdx,%rax
  8004210101:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210105:	8b 12                	mov    (%rdx),%edx
  8004210107:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800421010a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421010e:	89 0a                	mov    %ecx,(%rdx)
  8004210110:	eb 17                	jmp    8004210129 <getuint+0x102>
  8004210112:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210116:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800421011a:	48 89 d0             	mov    %rdx,%rax
  800421011d:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  8004210121:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210125:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  8004210129:	8b 00                	mov    (%rax),%eax
  800421012b:	89 c0                	mov    %eax,%eax
  800421012d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210131:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210135:	c9                   	leaveq 
  8004210136:	c3                   	retq   

0000008004210137 <getint>:
  8004210137:	55                   	push   %rbp
  8004210138:	48 89 e5             	mov    %rsp,%rbp
  800421013b:	48 83 ec 1c          	sub    $0x1c,%rsp
  800421013f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210143:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004210146:	83 7d e4 01          	cmpl   $0x1,-0x1c(%rbp)
  800421014a:	7e 52                	jle    800421019e <getint+0x67>
  800421014c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210150:	8b 00                	mov    (%rax),%eax
  8004210152:	83 f8 30             	cmp    $0x30,%eax
  8004210155:	73 24                	jae    800421017b <getint+0x44>
  8004210157:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421015b:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800421015f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210163:	8b 00                	mov    (%rax),%eax
  8004210165:	89 c0                	mov    %eax,%eax
  8004210167:	48 01 d0             	add    %rdx,%rax
  800421016a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421016e:	8b 12                	mov    (%rdx),%edx
  8004210170:	8d 4a 08             	lea    0x8(%rdx),%ecx
  8004210173:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210177:	89 0a                	mov    %ecx,(%rdx)
  8004210179:	eb 17                	jmp    8004210192 <getint+0x5b>
  800421017b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421017f:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004210183:	48 89 d0             	mov    %rdx,%rax
  8004210186:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800421018a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421018e:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  8004210192:	48 8b 00             	mov    (%rax),%rax
  8004210195:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210199:	e9 a3 00 00 00       	jmpq   8004210241 <getint+0x10a>
  800421019e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  80042101a2:	74 4f                	je     80042101f3 <getint+0xbc>
  80042101a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042101a8:	8b 00                	mov    (%rax),%eax
  80042101aa:	83 f8 30             	cmp    $0x30,%eax
  80042101ad:	73 24                	jae    80042101d3 <getint+0x9c>
  80042101af:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042101b3:	48 8b 50 10          	mov    0x10(%rax),%rdx
  80042101b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042101bb:	8b 00                	mov    (%rax),%eax
  80042101bd:	89 c0                	mov    %eax,%eax
  80042101bf:	48 01 d0             	add    %rdx,%rax
  80042101c2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042101c6:	8b 12                	mov    (%rdx),%edx
  80042101c8:	8d 4a 08             	lea    0x8(%rdx),%ecx
  80042101cb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042101cf:	89 0a                	mov    %ecx,(%rdx)
  80042101d1:	eb 17                	jmp    80042101ea <getint+0xb3>
  80042101d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042101d7:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042101db:	48 89 d0             	mov    %rdx,%rax
  80042101de:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  80042101e2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042101e6:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  80042101ea:	48 8b 00             	mov    (%rax),%rax
  80042101ed:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042101f1:	eb 4e                	jmp    8004210241 <getint+0x10a>
  80042101f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042101f7:	8b 00                	mov    (%rax),%eax
  80042101f9:	83 f8 30             	cmp    $0x30,%eax
  80042101fc:	73 24                	jae    8004210222 <getint+0xeb>
  80042101fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210202:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004210206:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421020a:	8b 00                	mov    (%rax),%eax
  800421020c:	89 c0                	mov    %eax,%eax
  800421020e:	48 01 d0             	add    %rdx,%rax
  8004210211:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210215:	8b 12                	mov    (%rdx),%edx
  8004210217:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800421021a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421021e:	89 0a                	mov    %ecx,(%rdx)
  8004210220:	eb 17                	jmp    8004210239 <getint+0x102>
  8004210222:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210226:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800421022a:	48 89 d0             	mov    %rdx,%rax
  800421022d:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  8004210231:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210235:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  8004210239:	8b 00                	mov    (%rax),%eax
  800421023b:	48 98                	cltq   
  800421023d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210241:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210245:	c9                   	leaveq 
  8004210246:	c3                   	retq   

0000008004210247 <vprintfmt>:
  8004210247:	55                   	push   %rbp
  8004210248:	48 89 e5             	mov    %rsp,%rbp
  800421024b:	41 54                	push   %r12
  800421024d:	53                   	push   %rbx
  800421024e:	48 83 ec 60          	sub    $0x60,%rsp
  8004210252:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  8004210256:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800421025a:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800421025e:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  8004210262:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  8004210266:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  800421026a:	48 8b 0a             	mov    (%rdx),%rcx
  800421026d:	48 89 08             	mov    %rcx,(%rax)
  8004210270:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004210274:	48 89 48 08          	mov    %rcx,0x8(%rax)
  8004210278:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  800421027c:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004210280:	eb 17                	jmp    8004210299 <vprintfmt+0x52>
  8004210282:	85 db                	test   %ebx,%ebx
  8004210284:	0f 84 cc 04 00 00    	je     8004210756 <vprintfmt+0x50f>
  800421028a:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800421028e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210292:	48 89 d6             	mov    %rdx,%rsi
  8004210295:	89 df                	mov    %ebx,%edi
  8004210297:	ff d0                	callq  *%rax
  8004210299:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421029d:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042102a1:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  80042102a5:	0f b6 00             	movzbl (%rax),%eax
  80042102a8:	0f b6 d8             	movzbl %al,%ebx
  80042102ab:	83 fb 25             	cmp    $0x25,%ebx
  80042102ae:	75 d2                	jne    8004210282 <vprintfmt+0x3b>
  80042102b0:	c6 45 d3 20          	movb   $0x20,-0x2d(%rbp)
  80042102b4:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%rbp)
  80042102bb:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%rbp)
  80042102c2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
  80042102c9:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
  80042102d0:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042102d4:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042102d8:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  80042102dc:	0f b6 00             	movzbl (%rax),%eax
  80042102df:	0f b6 d8             	movzbl %al,%ebx
  80042102e2:	8d 43 dd             	lea    -0x23(%rbx),%eax
  80042102e5:	83 f8 55             	cmp    $0x55,%eax
  80042102e8:	0f 87 34 04 00 00    	ja     8004210722 <vprintfmt+0x4db>
  80042102ee:	89 c0                	mov    %eax,%eax
  80042102f0:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042102f7:	00 
  80042102f8:	48 b8 38 05 22 04 80 	movabs $0x8004220538,%rax
  80042102ff:	00 00 00 
  8004210302:	48 01 d0             	add    %rdx,%rax
  8004210305:	48 8b 00             	mov    (%rax),%rax
  8004210308:	ff e0                	jmpq   *%rax
  800421030a:	c6 45 d3 2d          	movb   $0x2d,-0x2d(%rbp)
  800421030e:	eb c0                	jmp    80042102d0 <vprintfmt+0x89>
  8004210310:	c6 45 d3 30          	movb   $0x30,-0x2d(%rbp)
  8004210314:	eb ba                	jmp    80042102d0 <vprintfmt+0x89>
  8004210316:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%rbp)
  800421031d:	8b 55 d8             	mov    -0x28(%rbp),%edx
  8004210320:	89 d0                	mov    %edx,%eax
  8004210322:	c1 e0 02             	shl    $0x2,%eax
  8004210325:	01 d0                	add    %edx,%eax
  8004210327:	01 c0                	add    %eax,%eax
  8004210329:	01 d8                	add    %ebx,%eax
  800421032b:	83 e8 30             	sub    $0x30,%eax
  800421032e:	89 45 d8             	mov    %eax,-0x28(%rbp)
  8004210331:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004210335:	0f b6 00             	movzbl (%rax),%eax
  8004210338:	0f be d8             	movsbl %al,%ebx
  800421033b:	83 fb 2f             	cmp    $0x2f,%ebx
  800421033e:	7e 0c                	jle    800421034c <vprintfmt+0x105>
  8004210340:	83 fb 39             	cmp    $0x39,%ebx
  8004210343:	7f 07                	jg     800421034c <vprintfmt+0x105>
  8004210345:	48 83 45 98 01       	addq   $0x1,-0x68(%rbp)
  800421034a:	eb d1                	jmp    800421031d <vprintfmt+0xd6>
  800421034c:	eb 58                	jmp    80042103a6 <vprintfmt+0x15f>
  800421034e:	8b 45 b8             	mov    -0x48(%rbp),%eax
  8004210351:	83 f8 30             	cmp    $0x30,%eax
  8004210354:	73 17                	jae    800421036d <vprintfmt+0x126>
  8004210356:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421035a:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800421035d:	89 c0                	mov    %eax,%eax
  800421035f:	48 01 d0             	add    %rdx,%rax
  8004210362:	8b 55 b8             	mov    -0x48(%rbp),%edx
  8004210365:	83 c2 08             	add    $0x8,%edx
  8004210368:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800421036b:	eb 0f                	jmp    800421037c <vprintfmt+0x135>
  800421036d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004210371:	48 89 d0             	mov    %rdx,%rax
  8004210374:	48 83 c2 08          	add    $0x8,%rdx
  8004210378:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800421037c:	8b 00                	mov    (%rax),%eax
  800421037e:	89 45 d8             	mov    %eax,-0x28(%rbp)
  8004210381:	eb 23                	jmp    80042103a6 <vprintfmt+0x15f>
  8004210383:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004210387:	79 0c                	jns    8004210395 <vprintfmt+0x14e>
  8004210389:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
  8004210390:	e9 3b ff ff ff       	jmpq   80042102d0 <vprintfmt+0x89>
  8004210395:	e9 36 ff ff ff       	jmpq   80042102d0 <vprintfmt+0x89>
  800421039a:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%rbp)
  80042103a1:	e9 2a ff ff ff       	jmpq   80042102d0 <vprintfmt+0x89>
  80042103a6:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  80042103aa:	79 12                	jns    80042103be <vprintfmt+0x177>
  80042103ac:	8b 45 d8             	mov    -0x28(%rbp),%eax
  80042103af:	89 45 dc             	mov    %eax,-0x24(%rbp)
  80042103b2:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%rbp)
  80042103b9:	e9 12 ff ff ff       	jmpq   80042102d0 <vprintfmt+0x89>
  80042103be:	e9 0d ff ff ff       	jmpq   80042102d0 <vprintfmt+0x89>
  80042103c3:	83 45 e0 01          	addl   $0x1,-0x20(%rbp)
  80042103c7:	e9 04 ff ff ff       	jmpq   80042102d0 <vprintfmt+0x89>
  80042103cc:	8b 45 b8             	mov    -0x48(%rbp),%eax
  80042103cf:	83 f8 30             	cmp    $0x30,%eax
  80042103d2:	73 17                	jae    80042103eb <vprintfmt+0x1a4>
  80042103d4:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042103d8:	8b 45 b8             	mov    -0x48(%rbp),%eax
  80042103db:	89 c0                	mov    %eax,%eax
  80042103dd:	48 01 d0             	add    %rdx,%rax
  80042103e0:	8b 55 b8             	mov    -0x48(%rbp),%edx
  80042103e3:	83 c2 08             	add    $0x8,%edx
  80042103e6:	89 55 b8             	mov    %edx,-0x48(%rbp)
  80042103e9:	eb 0f                	jmp    80042103fa <vprintfmt+0x1b3>
  80042103eb:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042103ef:	48 89 d0             	mov    %rdx,%rax
  80042103f2:	48 83 c2 08          	add    $0x8,%rdx
  80042103f6:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  80042103fa:	8b 10                	mov    (%rax),%edx
  80042103fc:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004210400:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210404:	48 89 ce             	mov    %rcx,%rsi
  8004210407:	89 d7                	mov    %edx,%edi
  8004210409:	ff d0                	callq  *%rax
  800421040b:	e9 40 03 00 00       	jmpq   8004210750 <vprintfmt+0x509>
  8004210410:	8b 45 b8             	mov    -0x48(%rbp),%eax
  8004210413:	83 f8 30             	cmp    $0x30,%eax
  8004210416:	73 17                	jae    800421042f <vprintfmt+0x1e8>
  8004210418:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421041c:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800421041f:	89 c0                	mov    %eax,%eax
  8004210421:	48 01 d0             	add    %rdx,%rax
  8004210424:	8b 55 b8             	mov    -0x48(%rbp),%edx
  8004210427:	83 c2 08             	add    $0x8,%edx
  800421042a:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800421042d:	eb 0f                	jmp    800421043e <vprintfmt+0x1f7>
  800421042f:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004210433:	48 89 d0             	mov    %rdx,%rax
  8004210436:	48 83 c2 08          	add    $0x8,%rdx
  800421043a:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800421043e:	8b 18                	mov    (%rax),%ebx
  8004210440:	85 db                	test   %ebx,%ebx
  8004210442:	79 02                	jns    8004210446 <vprintfmt+0x1ff>
  8004210444:	f7 db                	neg    %ebx
  8004210446:	83 fb 15             	cmp    $0x15,%ebx
  8004210449:	7f 16                	jg     8004210461 <vprintfmt+0x21a>
  800421044b:	48 b8 60 04 22 04 80 	movabs $0x8004220460,%rax
  8004210452:	00 00 00 
  8004210455:	48 63 d3             	movslq %ebx,%rdx
  8004210458:	4c 8b 24 d0          	mov    (%rax,%rdx,8),%r12
  800421045c:	4d 85 e4             	test   %r12,%r12
  800421045f:	75 2e                	jne    800421048f <vprintfmt+0x248>
  8004210461:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  8004210465:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210469:	89 d9                	mov    %ebx,%ecx
  800421046b:	48 ba 21 05 22 04 80 	movabs $0x8004220521,%rdx
  8004210472:	00 00 00 
  8004210475:	48 89 c7             	mov    %rax,%rdi
  8004210478:	b8 00 00 00 00       	mov    $0x0,%eax
  800421047d:	49 b8 5f 07 21 04 80 	movabs $0x800421075f,%r8
  8004210484:	00 00 00 
  8004210487:	41 ff d0             	callq  *%r8
  800421048a:	e9 c1 02 00 00       	jmpq   8004210750 <vprintfmt+0x509>
  800421048f:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  8004210493:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210497:	4c 89 e1             	mov    %r12,%rcx
  800421049a:	48 ba 2a 05 22 04 80 	movabs $0x800422052a,%rdx
  80042104a1:	00 00 00 
  80042104a4:	48 89 c7             	mov    %rax,%rdi
  80042104a7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042104ac:	49 b8 5f 07 21 04 80 	movabs $0x800421075f,%r8
  80042104b3:	00 00 00 
  80042104b6:	41 ff d0             	callq  *%r8
  80042104b9:	e9 92 02 00 00       	jmpq   8004210750 <vprintfmt+0x509>
  80042104be:	8b 45 b8             	mov    -0x48(%rbp),%eax
  80042104c1:	83 f8 30             	cmp    $0x30,%eax
  80042104c4:	73 17                	jae    80042104dd <vprintfmt+0x296>
  80042104c6:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042104ca:	8b 45 b8             	mov    -0x48(%rbp),%eax
  80042104cd:	89 c0                	mov    %eax,%eax
  80042104cf:	48 01 d0             	add    %rdx,%rax
  80042104d2:	8b 55 b8             	mov    -0x48(%rbp),%edx
  80042104d5:	83 c2 08             	add    $0x8,%edx
  80042104d8:	89 55 b8             	mov    %edx,-0x48(%rbp)
  80042104db:	eb 0f                	jmp    80042104ec <vprintfmt+0x2a5>
  80042104dd:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042104e1:	48 89 d0             	mov    %rdx,%rax
  80042104e4:	48 83 c2 08          	add    $0x8,%rdx
  80042104e8:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  80042104ec:	4c 8b 20             	mov    (%rax),%r12
  80042104ef:	4d 85 e4             	test   %r12,%r12
  80042104f2:	75 0a                	jne    80042104fe <vprintfmt+0x2b7>
  80042104f4:	49 bc 2d 05 22 04 80 	movabs $0x800422052d,%r12
  80042104fb:	00 00 00 
  80042104fe:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004210502:	7e 3f                	jle    8004210543 <vprintfmt+0x2fc>
  8004210504:	80 7d d3 2d          	cmpb   $0x2d,-0x2d(%rbp)
  8004210508:	74 39                	je     8004210543 <vprintfmt+0x2fc>
  800421050a:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800421050d:	48 98                	cltq   
  800421050f:	48 89 c6             	mov    %rax,%rsi
  8004210512:	4c 89 e7             	mov    %r12,%rdi
  8004210515:	48 b8 60 0b 21 04 80 	movabs $0x8004210b60,%rax
  800421051c:	00 00 00 
  800421051f:	ff d0                	callq  *%rax
  8004210521:	29 45 dc             	sub    %eax,-0x24(%rbp)
  8004210524:	eb 17                	jmp    800421053d <vprintfmt+0x2f6>
  8004210526:	0f be 55 d3          	movsbl -0x2d(%rbp),%edx
  800421052a:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  800421052e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210532:	48 89 ce             	mov    %rcx,%rsi
  8004210535:	89 d7                	mov    %edx,%edi
  8004210537:	ff d0                	callq  *%rax
  8004210539:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)
  800421053d:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004210541:	7f e3                	jg     8004210526 <vprintfmt+0x2df>
  8004210543:	eb 37                	jmp    800421057c <vprintfmt+0x335>
  8004210545:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
  8004210549:	74 1e                	je     8004210569 <vprintfmt+0x322>
  800421054b:	83 fb 1f             	cmp    $0x1f,%ebx
  800421054e:	7e 05                	jle    8004210555 <vprintfmt+0x30e>
  8004210550:	83 fb 7e             	cmp    $0x7e,%ebx
  8004210553:	7e 14                	jle    8004210569 <vprintfmt+0x322>
  8004210555:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004210559:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421055d:	48 89 d6             	mov    %rdx,%rsi
  8004210560:	bf 3f 00 00 00       	mov    $0x3f,%edi
  8004210565:	ff d0                	callq  *%rax
  8004210567:	eb 0f                	jmp    8004210578 <vprintfmt+0x331>
  8004210569:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800421056d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210571:	48 89 d6             	mov    %rdx,%rsi
  8004210574:	89 df                	mov    %ebx,%edi
  8004210576:	ff d0                	callq  *%rax
  8004210578:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)
  800421057c:	4c 89 e0             	mov    %r12,%rax
  800421057f:	4c 8d 60 01          	lea    0x1(%rax),%r12
  8004210583:	0f b6 00             	movzbl (%rax),%eax
  8004210586:	0f be d8             	movsbl %al,%ebx
  8004210589:	85 db                	test   %ebx,%ebx
  800421058b:	74 10                	je     800421059d <vprintfmt+0x356>
  800421058d:	83 7d d8 00          	cmpl   $0x0,-0x28(%rbp)
  8004210591:	78 b2                	js     8004210545 <vprintfmt+0x2fe>
  8004210593:	83 6d d8 01          	subl   $0x1,-0x28(%rbp)
  8004210597:	83 7d d8 00          	cmpl   $0x0,-0x28(%rbp)
  800421059b:	79 a8                	jns    8004210545 <vprintfmt+0x2fe>
  800421059d:	eb 16                	jmp    80042105b5 <vprintfmt+0x36e>
  800421059f:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042105a3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042105a7:	48 89 d6             	mov    %rdx,%rsi
  80042105aa:	bf 20 00 00 00       	mov    $0x20,%edi
  80042105af:	ff d0                	callq  *%rax
  80042105b1:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)
  80042105b5:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  80042105b9:	7f e4                	jg     800421059f <vprintfmt+0x358>
  80042105bb:	e9 90 01 00 00       	jmpq   8004210750 <vprintfmt+0x509>
  80042105c0:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  80042105c4:	be 03 00 00 00       	mov    $0x3,%esi
  80042105c9:	48 89 c7             	mov    %rax,%rdi
  80042105cc:	48 b8 37 01 21 04 80 	movabs $0x8004210137,%rax
  80042105d3:	00 00 00 
  80042105d6:	ff d0                	callq  *%rax
  80042105d8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042105dc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042105e0:	48 85 c0             	test   %rax,%rax
  80042105e3:	79 1d                	jns    8004210602 <vprintfmt+0x3bb>
  80042105e5:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042105e9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042105ed:	48 89 d6             	mov    %rdx,%rsi
  80042105f0:	bf 2d 00 00 00       	mov    $0x2d,%edi
  80042105f5:	ff d0                	callq  *%rax
  80042105f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042105fb:	48 f7 d8             	neg    %rax
  80042105fe:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004210602:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%rbp)
  8004210609:	e9 d5 00 00 00       	jmpq   80042106e3 <vprintfmt+0x49c>
  800421060e:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  8004210612:	be 03 00 00 00       	mov    $0x3,%esi
  8004210617:	48 89 c7             	mov    %rax,%rdi
  800421061a:	48 b8 27 00 21 04 80 	movabs $0x8004210027,%rax
  8004210621:	00 00 00 
  8004210624:	ff d0                	callq  *%rax
  8004210626:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421062a:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%rbp)
  8004210631:	e9 ad 00 00 00       	jmpq   80042106e3 <vprintfmt+0x49c>
  8004210636:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  800421063a:	be 03 00 00 00       	mov    $0x3,%esi
  800421063f:	48 89 c7             	mov    %rax,%rdi
  8004210642:	48 b8 27 00 21 04 80 	movabs $0x8004210027,%rax
  8004210649:	00 00 00 
  800421064c:	ff d0                	callq  *%rax
  800421064e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004210652:	c7 45 e4 08 00 00 00 	movl   $0x8,-0x1c(%rbp)
  8004210659:	e9 85 00 00 00       	jmpq   80042106e3 <vprintfmt+0x49c>
  800421065e:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004210662:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210666:	48 89 d6             	mov    %rdx,%rsi
  8004210669:	bf 30 00 00 00       	mov    $0x30,%edi
  800421066e:	ff d0                	callq  *%rax
  8004210670:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004210674:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210678:	48 89 d6             	mov    %rdx,%rsi
  800421067b:	bf 78 00 00 00       	mov    $0x78,%edi
  8004210680:	ff d0                	callq  *%rax
  8004210682:	8b 45 b8             	mov    -0x48(%rbp),%eax
  8004210685:	83 f8 30             	cmp    $0x30,%eax
  8004210688:	73 17                	jae    80042106a1 <vprintfmt+0x45a>
  800421068a:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421068e:	8b 45 b8             	mov    -0x48(%rbp),%eax
  8004210691:	89 c0                	mov    %eax,%eax
  8004210693:	48 01 d0             	add    %rdx,%rax
  8004210696:	8b 55 b8             	mov    -0x48(%rbp),%edx
  8004210699:	83 c2 08             	add    $0x8,%edx
  800421069c:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800421069f:	eb 0f                	jmp    80042106b0 <vprintfmt+0x469>
  80042106a1:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042106a5:	48 89 d0             	mov    %rdx,%rax
  80042106a8:	48 83 c2 08          	add    $0x8,%rdx
  80042106ac:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  80042106b0:	48 8b 00             	mov    (%rax),%rax
  80042106b3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042106b7:	c7 45 e4 10 00 00 00 	movl   $0x10,-0x1c(%rbp)
  80042106be:	eb 23                	jmp    80042106e3 <vprintfmt+0x49c>
  80042106c0:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  80042106c4:	be 03 00 00 00       	mov    $0x3,%esi
  80042106c9:	48 89 c7             	mov    %rax,%rdi
  80042106cc:	48 b8 27 00 21 04 80 	movabs $0x8004210027,%rax
  80042106d3:	00 00 00 
  80042106d6:	ff d0                	callq  *%rax
  80042106d8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042106dc:	c7 45 e4 10 00 00 00 	movl   $0x10,-0x1c(%rbp)
  80042106e3:	44 0f be 45 d3       	movsbl -0x2d(%rbp),%r8d
  80042106e8:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  80042106eb:	8b 7d dc             	mov    -0x24(%rbp),%edi
  80042106ee:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042106f2:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  80042106f6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042106fa:	45 89 c1             	mov    %r8d,%r9d
  80042106fd:	41 89 f8             	mov    %edi,%r8d
  8004210700:	48 89 c7             	mov    %rax,%rdi
  8004210703:	48 b8 6c ff 20 04 80 	movabs $0x800420ff6c,%rax
  800421070a:	00 00 00 
  800421070d:	ff d0                	callq  *%rax
  800421070f:	eb 3f                	jmp    8004210750 <vprintfmt+0x509>
  8004210711:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004210715:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210719:	48 89 d6             	mov    %rdx,%rsi
  800421071c:	89 df                	mov    %ebx,%edi
  800421071e:	ff d0                	callq  *%rax
  8004210720:	eb 2e                	jmp    8004210750 <vprintfmt+0x509>
  8004210722:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004210726:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421072a:	48 89 d6             	mov    %rdx,%rsi
  800421072d:	bf 25 00 00 00       	mov    $0x25,%edi
  8004210732:	ff d0                	callq  *%rax
  8004210734:	48 83 6d 98 01       	subq   $0x1,-0x68(%rbp)
  8004210739:	eb 05                	jmp    8004210740 <vprintfmt+0x4f9>
  800421073b:	48 83 6d 98 01       	subq   $0x1,-0x68(%rbp)
  8004210740:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004210744:	48 83 e8 01          	sub    $0x1,%rax
  8004210748:	0f b6 00             	movzbl (%rax),%eax
  800421074b:	3c 25                	cmp    $0x25,%al
  800421074d:	75 ec                	jne    800421073b <vprintfmt+0x4f4>
  800421074f:	90                   	nop
  8004210750:	90                   	nop
  8004210751:	e9 43 fb ff ff       	jmpq   8004210299 <vprintfmt+0x52>
  8004210756:	48 83 c4 60          	add    $0x60,%rsp
  800421075a:	5b                   	pop    %rbx
  800421075b:	41 5c                	pop    %r12
  800421075d:	5d                   	pop    %rbp
  800421075e:	c3                   	retq   

000000800421075f <printfmt>:
  800421075f:	55                   	push   %rbp
  8004210760:	48 89 e5             	mov    %rsp,%rbp
  8004210763:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  800421076a:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  8004210771:	48 89 b5 20 ff ff ff 	mov    %rsi,-0xe0(%rbp)
  8004210778:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  800421077f:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  8004210786:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  800421078d:	84 c0                	test   %al,%al
  800421078f:	74 20                	je     80042107b1 <printfmt+0x52>
  8004210791:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  8004210795:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  8004210799:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  800421079d:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  80042107a1:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  80042107a5:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  80042107a9:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  80042107ad:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  80042107b1:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  80042107b8:	c7 85 38 ff ff ff 18 	movl   $0x18,-0xc8(%rbp)
  80042107bf:	00 00 00 
  80042107c2:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  80042107c9:	00 00 00 
  80042107cc:	48 8d 45 10          	lea    0x10(%rbp),%rax
  80042107d0:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  80042107d7:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  80042107de:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  80042107e5:	48 8d 8d 38 ff ff ff 	lea    -0xc8(%rbp),%rcx
  80042107ec:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  80042107f3:	48 8b b5 20 ff ff ff 	mov    -0xe0(%rbp),%rsi
  80042107fa:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004210801:	48 89 c7             	mov    %rax,%rdi
  8004210804:	48 b8 47 02 21 04 80 	movabs $0x8004210247,%rax
  800421080b:	00 00 00 
  800421080e:	ff d0                	callq  *%rax
  8004210810:	c9                   	leaveq 
  8004210811:	c3                   	retq   

0000008004210812 <sprintputch>:
  8004210812:	55                   	push   %rbp
  8004210813:	48 89 e5             	mov    %rsp,%rbp
  8004210816:	48 83 ec 10          	sub    $0x10,%rsp
  800421081a:	89 7d fc             	mov    %edi,-0x4(%rbp)
  800421081d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004210821:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210825:	8b 40 10             	mov    0x10(%rax),%eax
  8004210828:	8d 50 01             	lea    0x1(%rax),%edx
  800421082b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421082f:	89 50 10             	mov    %edx,0x10(%rax)
  8004210832:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210836:	48 8b 10             	mov    (%rax),%rdx
  8004210839:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421083d:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004210841:	48 39 c2             	cmp    %rax,%rdx
  8004210844:	73 17                	jae    800421085d <sprintputch+0x4b>
  8004210846:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421084a:	48 8b 00             	mov    (%rax),%rax
  800421084d:	48 8d 48 01          	lea    0x1(%rax),%rcx
  8004210851:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004210855:	48 89 0a             	mov    %rcx,(%rdx)
  8004210858:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800421085b:	88 10                	mov    %dl,(%rax)
  800421085d:	c9                   	leaveq 
  800421085e:	c3                   	retq   

000000800421085f <vsnprintf>:
  800421085f:	55                   	push   %rbp
  8004210860:	48 89 e5             	mov    %rsp,%rbp
  8004210863:	48 83 ec 50          	sub    $0x50,%rsp
  8004210867:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421086b:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  800421086e:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  8004210872:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  8004210876:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  800421087a:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800421087e:	48 8b 0a             	mov    (%rdx),%rcx
  8004210881:	48 89 08             	mov    %rcx,(%rax)
  8004210884:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004210888:	48 89 48 08          	mov    %rcx,0x8(%rax)
  800421088c:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  8004210890:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004210894:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004210898:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421089c:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800421089f:	48 98                	cltq   
  80042108a1:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  80042108a5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042108a9:	48 01 d0             	add    %rdx,%rax
  80042108ac:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042108b0:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
  80042108b7:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  80042108bc:	74 06                	je     80042108c4 <vsnprintf+0x65>
  80042108be:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  80042108c2:	7f 07                	jg     80042108cb <vsnprintf+0x6c>
  80042108c4:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  80042108c9:	eb 2f                	jmp    80042108fa <vsnprintf+0x9b>
  80042108cb:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
  80042108cf:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  80042108d3:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  80042108d7:	48 89 c6             	mov    %rax,%rsi
  80042108da:	48 bf 12 08 21 04 80 	movabs $0x8004210812,%rdi
  80042108e1:	00 00 00 
  80042108e4:	48 b8 47 02 21 04 80 	movabs $0x8004210247,%rax
  80042108eb:	00 00 00 
  80042108ee:	ff d0                	callq  *%rax
  80042108f0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042108f4:	c6 00 00             	movb   $0x0,(%rax)
  80042108f7:	8b 45 e0             	mov    -0x20(%rbp),%eax
  80042108fa:	c9                   	leaveq 
  80042108fb:	c3                   	retq   

00000080042108fc <snprintf>:
  80042108fc:	55                   	push   %rbp
  80042108fd:	48 89 e5             	mov    %rsp,%rbp
  8004210900:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  8004210907:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
  800421090e:	89 b5 04 ff ff ff    	mov    %esi,-0xfc(%rbp)
  8004210914:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  800421091b:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  8004210922:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  8004210929:	84 c0                	test   %al,%al
  800421092b:	74 20                	je     800421094d <snprintf+0x51>
  800421092d:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  8004210931:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  8004210935:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  8004210939:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  800421093d:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  8004210941:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  8004210945:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  8004210949:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  800421094d:	48 89 95 f8 fe ff ff 	mov    %rdx,-0x108(%rbp)
  8004210954:	c7 85 30 ff ff ff 18 	movl   $0x18,-0xd0(%rbp)
  800421095b:	00 00 00 
  800421095e:	c7 85 34 ff ff ff 30 	movl   $0x30,-0xcc(%rbp)
  8004210965:	00 00 00 
  8004210968:	48 8d 45 10          	lea    0x10(%rbp),%rax
  800421096c:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  8004210973:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800421097a:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  8004210981:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
  8004210988:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  800421098f:	48 8b 0a             	mov    (%rdx),%rcx
  8004210992:	48 89 08             	mov    %rcx,(%rax)
  8004210995:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004210999:	48 89 48 08          	mov    %rcx,0x8(%rax)
  800421099d:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  80042109a1:	48 89 50 10          	mov    %rdx,0x10(%rax)
  80042109a5:	48 8d 8d 18 ff ff ff 	lea    -0xe8(%rbp),%rcx
  80042109ac:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  80042109b3:	8b b5 04 ff ff ff    	mov    -0xfc(%rbp),%esi
  80042109b9:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  80042109c0:	48 89 c7             	mov    %rax,%rdi
  80042109c3:	48 b8 5f 08 21 04 80 	movabs $0x800421085f,%rax
  80042109ca:	00 00 00 
  80042109cd:	ff d0                	callq  *%rax
  80042109cf:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
  80042109d5:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
  80042109db:	c9                   	leaveq 
  80042109dc:	c3                   	retq   

00000080042109dd <readline>:
  80042109dd:	55                   	push   %rbp
  80042109de:	48 89 e5             	mov    %rsp,%rbp
  80042109e1:	48 83 ec 20          	sub    $0x20,%rsp
  80042109e5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042109e9:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042109ee:	74 22                	je     8004210a12 <readline+0x35>
  80042109f0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042109f4:	48 89 c6             	mov    %rax,%rsi
  80042109f7:	48 bf e8 07 22 04 80 	movabs $0x80042207e8,%rdi
  80042109fe:	00 00 00 
  8004210a01:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210a06:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004210a0d:	00 00 00 
  8004210a10:	ff d2                	callq  *%rdx
  8004210a12:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004210a19:	bf 00 00 00 00       	mov    $0x0,%edi
  8004210a1e:	48 b8 3f 12 20 04 80 	movabs $0x800420123f,%rax
  8004210a25:	00 00 00 
  8004210a28:	ff d0                	callq  *%rax
  8004210a2a:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004210a2d:	48 b8 1d 12 20 04 80 	movabs $0x800420121d,%rax
  8004210a34:	00 00 00 
  8004210a37:	ff d0                	callq  *%rax
  8004210a39:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004210a3c:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  8004210a40:	79 30                	jns    8004210a72 <readline+0x95>
  8004210a42:	83 7d f4 f7          	cmpl   $0xfffffff7,-0xc(%rbp)
  8004210a46:	74 20                	je     8004210a68 <readline+0x8b>
  8004210a48:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210a4b:	89 c6                	mov    %eax,%esi
  8004210a4d:	48 bf eb 07 22 04 80 	movabs $0x80042207eb,%rdi
  8004210a54:	00 00 00 
  8004210a57:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210a5c:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004210a63:	00 00 00 
  8004210a66:	ff d2                	callq  *%rdx
  8004210a68:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210a6d:	e9 be 00 00 00       	jmpq   8004210b30 <readline+0x153>
  8004210a72:	83 7d f4 08          	cmpl   $0x8,-0xc(%rbp)
  8004210a76:	74 06                	je     8004210a7e <readline+0xa1>
  8004210a78:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%rbp)
  8004210a7c:	75 26                	jne    8004210aa4 <readline+0xc7>
  8004210a7e:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004210a82:	7e 20                	jle    8004210aa4 <readline+0xc7>
  8004210a84:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  8004210a88:	74 11                	je     8004210a9b <readline+0xbe>
  8004210a8a:	bf 08 00 00 00       	mov    $0x8,%edi
  8004210a8f:	48 b8 ff 11 20 04 80 	movabs $0x80042011ff,%rax
  8004210a96:	00 00 00 
  8004210a99:	ff d0                	callq  *%rax
  8004210a9b:	83 6d fc 01          	subl   $0x1,-0x4(%rbp)
  8004210a9f:	e9 87 00 00 00       	jmpq   8004210b2b <readline+0x14e>
  8004210aa4:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
  8004210aa8:	7e 3f                	jle    8004210ae9 <readline+0x10c>
  8004210aaa:	81 7d fc fe 03 00 00 	cmpl   $0x3fe,-0x4(%rbp)
  8004210ab1:	7f 36                	jg     8004210ae9 <readline+0x10c>
  8004210ab3:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  8004210ab7:	74 11                	je     8004210aca <readline+0xed>
  8004210ab9:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210abc:	89 c7                	mov    %eax,%edi
  8004210abe:	48 b8 ff 11 20 04 80 	movabs $0x80042011ff,%rax
  8004210ac5:	00 00 00 
  8004210ac8:	ff d0                	callq  *%rax
  8004210aca:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004210acd:	8d 50 01             	lea    0x1(%rax),%edx
  8004210ad0:	89 55 fc             	mov    %edx,-0x4(%rbp)
  8004210ad3:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004210ad6:	89 d1                	mov    %edx,%ecx
  8004210ad8:	48 ba a0 02 4e 04 80 	movabs $0x80044e02a0,%rdx
  8004210adf:	00 00 00 
  8004210ae2:	48 98                	cltq   
  8004210ae4:	88 0c 02             	mov    %cl,(%rdx,%rax,1)
  8004210ae7:	eb 42                	jmp    8004210b2b <readline+0x14e>
  8004210ae9:	83 7d f4 0a          	cmpl   $0xa,-0xc(%rbp)
  8004210aed:	74 06                	je     8004210af5 <readline+0x118>
  8004210aef:	83 7d f4 0d          	cmpl   $0xd,-0xc(%rbp)
  8004210af3:	75 36                	jne    8004210b2b <readline+0x14e>
  8004210af5:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  8004210af9:	74 11                	je     8004210b0c <readline+0x12f>
  8004210afb:	bf 0a 00 00 00       	mov    $0xa,%edi
  8004210b00:	48 b8 ff 11 20 04 80 	movabs $0x80042011ff,%rax
  8004210b07:	00 00 00 
  8004210b0a:	ff d0                	callq  *%rax
  8004210b0c:	48 ba a0 02 4e 04 80 	movabs $0x80044e02a0,%rdx
  8004210b13:	00 00 00 
  8004210b16:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004210b19:	48 98                	cltq   
  8004210b1b:	c6 04 02 00          	movb   $0x0,(%rdx,%rax,1)
  8004210b1f:	48 b8 a0 02 4e 04 80 	movabs $0x80044e02a0,%rax
  8004210b26:	00 00 00 
  8004210b29:	eb 05                	jmp    8004210b30 <readline+0x153>
  8004210b2b:	e9 fd fe ff ff       	jmpq   8004210a2d <readline+0x50>
  8004210b30:	c9                   	leaveq 
  8004210b31:	c3                   	retq   

0000008004210b32 <strlen>:
  8004210b32:	55                   	push   %rbp
  8004210b33:	48 89 e5             	mov    %rsp,%rbp
  8004210b36:	48 83 ec 18          	sub    $0x18,%rsp
  8004210b3a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210b3e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004210b45:	eb 09                	jmp    8004210b50 <strlen+0x1e>
  8004210b47:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004210b4b:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  8004210b50:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210b54:	0f b6 00             	movzbl (%rax),%eax
  8004210b57:	84 c0                	test   %al,%al
  8004210b59:	75 ec                	jne    8004210b47 <strlen+0x15>
  8004210b5b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004210b5e:	c9                   	leaveq 
  8004210b5f:	c3                   	retq   

0000008004210b60 <strnlen>:
  8004210b60:	55                   	push   %rbp
  8004210b61:	48 89 e5             	mov    %rsp,%rbp
  8004210b64:	48 83 ec 20          	sub    $0x20,%rsp
  8004210b68:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210b6c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210b70:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004210b77:	eb 0e                	jmp    8004210b87 <strnlen+0x27>
  8004210b79:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004210b7d:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  8004210b82:	48 83 6d e0 01       	subq   $0x1,-0x20(%rbp)
  8004210b87:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004210b8c:	74 0b                	je     8004210b99 <strnlen+0x39>
  8004210b8e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210b92:	0f b6 00             	movzbl (%rax),%eax
  8004210b95:	84 c0                	test   %al,%al
  8004210b97:	75 e0                	jne    8004210b79 <strnlen+0x19>
  8004210b99:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004210b9c:	c9                   	leaveq 
  8004210b9d:	c3                   	retq   

0000008004210b9e <strcpy>:
  8004210b9e:	55                   	push   %rbp
  8004210b9f:	48 89 e5             	mov    %rsp,%rbp
  8004210ba2:	48 83 ec 20          	sub    $0x20,%rsp
  8004210ba6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210baa:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210bae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210bb2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210bb6:	90                   	nop
  8004210bb7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210bbb:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210bbf:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210bc3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004210bc7:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
  8004210bcb:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  8004210bcf:	0f b6 12             	movzbl (%rdx),%edx
  8004210bd2:	88 10                	mov    %dl,(%rax)
  8004210bd4:	0f b6 00             	movzbl (%rax),%eax
  8004210bd7:	84 c0                	test   %al,%al
  8004210bd9:	75 dc                	jne    8004210bb7 <strcpy+0x19>
  8004210bdb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210bdf:	c9                   	leaveq 
  8004210be0:	c3                   	retq   

0000008004210be1 <strcat>:
  8004210be1:	55                   	push   %rbp
  8004210be2:	48 89 e5             	mov    %rsp,%rbp
  8004210be5:	48 83 ec 20          	sub    $0x20,%rsp
  8004210be9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210bed:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210bf1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210bf5:	48 89 c7             	mov    %rax,%rdi
  8004210bf8:	48 b8 32 0b 21 04 80 	movabs $0x8004210b32,%rax
  8004210bff:	00 00 00 
  8004210c02:	ff d0                	callq  *%rax
  8004210c04:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004210c07:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004210c0a:	48 63 d0             	movslq %eax,%rdx
  8004210c0d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210c11:	48 01 c2             	add    %rax,%rdx
  8004210c14:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210c18:	48 89 c6             	mov    %rax,%rsi
  8004210c1b:	48 89 d7             	mov    %rdx,%rdi
  8004210c1e:	48 b8 9e 0b 21 04 80 	movabs $0x8004210b9e,%rax
  8004210c25:	00 00 00 
  8004210c28:	ff d0                	callq  *%rax
  8004210c2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210c2e:	c9                   	leaveq 
  8004210c2f:	c3                   	retq   

0000008004210c30 <strncpy>:
  8004210c30:	55                   	push   %rbp
  8004210c31:	48 89 e5             	mov    %rsp,%rbp
  8004210c34:	48 83 ec 28          	sub    $0x28,%rsp
  8004210c38:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210c3c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210c40:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004210c44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210c48:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004210c4c:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004210c53:	00 
  8004210c54:	eb 2a                	jmp    8004210c80 <strncpy+0x50>
  8004210c56:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210c5a:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210c5e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210c62:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004210c66:	0f b6 12             	movzbl (%rdx),%edx
  8004210c69:	88 10                	mov    %dl,(%rax)
  8004210c6b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210c6f:	0f b6 00             	movzbl (%rax),%eax
  8004210c72:	84 c0                	test   %al,%al
  8004210c74:	74 05                	je     8004210c7b <strncpy+0x4b>
  8004210c76:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
  8004210c7b:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004210c80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210c84:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  8004210c88:	72 cc                	jb     8004210c56 <strncpy+0x26>
  8004210c8a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210c8e:	c9                   	leaveq 
  8004210c8f:	c3                   	retq   

0000008004210c90 <strlcpy>:
  8004210c90:	55                   	push   %rbp
  8004210c91:	48 89 e5             	mov    %rsp,%rbp
  8004210c94:	48 83 ec 28          	sub    $0x28,%rsp
  8004210c98:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210c9c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210ca0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004210ca4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210ca8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210cac:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004210cb1:	74 3d                	je     8004210cf0 <strlcpy+0x60>
  8004210cb3:	eb 1d                	jmp    8004210cd2 <strlcpy+0x42>
  8004210cb5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210cb9:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210cbd:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210cc1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004210cc5:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
  8004210cc9:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  8004210ccd:	0f b6 12             	movzbl (%rdx),%edx
  8004210cd0:	88 10                	mov    %dl,(%rax)
  8004210cd2:	48 83 6d d8 01       	subq   $0x1,-0x28(%rbp)
  8004210cd7:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004210cdc:	74 0b                	je     8004210ce9 <strlcpy+0x59>
  8004210cde:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210ce2:	0f b6 00             	movzbl (%rax),%eax
  8004210ce5:	84 c0                	test   %al,%al
  8004210ce7:	75 cc                	jne    8004210cb5 <strlcpy+0x25>
  8004210ce9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210ced:	c6 00 00             	movb   $0x0,(%rax)
  8004210cf0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210cf4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210cf8:	48 29 c2             	sub    %rax,%rdx
  8004210cfb:	48 89 d0             	mov    %rdx,%rax
  8004210cfe:	c9                   	leaveq 
  8004210cff:	c3                   	retq   

0000008004210d00 <strcmp>:
  8004210d00:	55                   	push   %rbp
  8004210d01:	48 89 e5             	mov    %rsp,%rbp
  8004210d04:	48 83 ec 10          	sub    $0x10,%rsp
  8004210d08:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004210d0c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004210d10:	eb 0a                	jmp    8004210d1c <strcmp+0x1c>
  8004210d12:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004210d17:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  8004210d1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210d20:	0f b6 00             	movzbl (%rax),%eax
  8004210d23:	84 c0                	test   %al,%al
  8004210d25:	74 12                	je     8004210d39 <strcmp+0x39>
  8004210d27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210d2b:	0f b6 10             	movzbl (%rax),%edx
  8004210d2e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210d32:	0f b6 00             	movzbl (%rax),%eax
  8004210d35:	38 c2                	cmp    %al,%dl
  8004210d37:	74 d9                	je     8004210d12 <strcmp+0x12>
  8004210d39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210d3d:	0f b6 00             	movzbl (%rax),%eax
  8004210d40:	0f b6 d0             	movzbl %al,%edx
  8004210d43:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210d47:	0f b6 00             	movzbl (%rax),%eax
  8004210d4a:	0f b6 c0             	movzbl %al,%eax
  8004210d4d:	29 c2                	sub    %eax,%edx
  8004210d4f:	89 d0                	mov    %edx,%eax
  8004210d51:	c9                   	leaveq 
  8004210d52:	c3                   	retq   

0000008004210d53 <strncmp>:
  8004210d53:	55                   	push   %rbp
  8004210d54:	48 89 e5             	mov    %rsp,%rbp
  8004210d57:	48 83 ec 18          	sub    $0x18,%rsp
  8004210d5b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004210d5f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004210d63:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210d67:	eb 0f                	jmp    8004210d78 <strncmp+0x25>
  8004210d69:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
  8004210d6e:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004210d73:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  8004210d78:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004210d7d:	74 1d                	je     8004210d9c <strncmp+0x49>
  8004210d7f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210d83:	0f b6 00             	movzbl (%rax),%eax
  8004210d86:	84 c0                	test   %al,%al
  8004210d88:	74 12                	je     8004210d9c <strncmp+0x49>
  8004210d8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210d8e:	0f b6 10             	movzbl (%rax),%edx
  8004210d91:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210d95:	0f b6 00             	movzbl (%rax),%eax
  8004210d98:	38 c2                	cmp    %al,%dl
  8004210d9a:	74 cd                	je     8004210d69 <strncmp+0x16>
  8004210d9c:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004210da1:	75 07                	jne    8004210daa <strncmp+0x57>
  8004210da3:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210da8:	eb 18                	jmp    8004210dc2 <strncmp+0x6f>
  8004210daa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210dae:	0f b6 00             	movzbl (%rax),%eax
  8004210db1:	0f b6 d0             	movzbl %al,%edx
  8004210db4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210db8:	0f b6 00             	movzbl (%rax),%eax
  8004210dbb:	0f b6 c0             	movzbl %al,%eax
  8004210dbe:	29 c2                	sub    %eax,%edx
  8004210dc0:	89 d0                	mov    %edx,%eax
  8004210dc2:	c9                   	leaveq 
  8004210dc3:	c3                   	retq   

0000008004210dc4 <strchr>:
  8004210dc4:	55                   	push   %rbp
  8004210dc5:	48 89 e5             	mov    %rsp,%rbp
  8004210dc8:	48 83 ec 0c          	sub    $0xc,%rsp
  8004210dcc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004210dd0:	89 f0                	mov    %esi,%eax
  8004210dd2:	88 45 f4             	mov    %al,-0xc(%rbp)
  8004210dd5:	eb 17                	jmp    8004210dee <strchr+0x2a>
  8004210dd7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210ddb:	0f b6 00             	movzbl (%rax),%eax
  8004210dde:	3a 45 f4             	cmp    -0xc(%rbp),%al
  8004210de1:	75 06                	jne    8004210de9 <strchr+0x25>
  8004210de3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210de7:	eb 15                	jmp    8004210dfe <strchr+0x3a>
  8004210de9:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004210dee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210df2:	0f b6 00             	movzbl (%rax),%eax
  8004210df5:	84 c0                	test   %al,%al
  8004210df7:	75 de                	jne    8004210dd7 <strchr+0x13>
  8004210df9:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210dfe:	c9                   	leaveq 
  8004210dff:	c3                   	retq   

0000008004210e00 <strfind>:
  8004210e00:	55                   	push   %rbp
  8004210e01:	48 89 e5             	mov    %rsp,%rbp
  8004210e04:	48 83 ec 0c          	sub    $0xc,%rsp
  8004210e08:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004210e0c:	89 f0                	mov    %esi,%eax
  8004210e0e:	88 45 f4             	mov    %al,-0xc(%rbp)
  8004210e11:	eb 13                	jmp    8004210e26 <strfind+0x26>
  8004210e13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210e17:	0f b6 00             	movzbl (%rax),%eax
  8004210e1a:	3a 45 f4             	cmp    -0xc(%rbp),%al
  8004210e1d:	75 02                	jne    8004210e21 <strfind+0x21>
  8004210e1f:	eb 10                	jmp    8004210e31 <strfind+0x31>
  8004210e21:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004210e26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210e2a:	0f b6 00             	movzbl (%rax),%eax
  8004210e2d:	84 c0                	test   %al,%al
  8004210e2f:	75 e2                	jne    8004210e13 <strfind+0x13>
  8004210e31:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210e35:	c9                   	leaveq 
  8004210e36:	c3                   	retq   

0000008004210e37 <memset>:
  8004210e37:	55                   	push   %rbp
  8004210e38:	48 89 e5             	mov    %rsp,%rbp
  8004210e3b:	48 83 ec 18          	sub    $0x18,%rsp
  8004210e3f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004210e43:	89 75 f4             	mov    %esi,-0xc(%rbp)
  8004210e46:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210e4a:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004210e4f:	75 06                	jne    8004210e57 <memset+0x20>
  8004210e51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210e55:	eb 69                	jmp    8004210ec0 <memset+0x89>
  8004210e57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210e5b:	83 e0 03             	and    $0x3,%eax
  8004210e5e:	48 85 c0             	test   %rax,%rax
  8004210e61:	75 48                	jne    8004210eab <memset+0x74>
  8004210e63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210e67:	83 e0 03             	and    $0x3,%eax
  8004210e6a:	48 85 c0             	test   %rax,%rax
  8004210e6d:	75 3c                	jne    8004210eab <memset+0x74>
  8004210e6f:	81 65 f4 ff 00 00 00 	andl   $0xff,-0xc(%rbp)
  8004210e76:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210e79:	c1 e0 18             	shl    $0x18,%eax
  8004210e7c:	89 c2                	mov    %eax,%edx
  8004210e7e:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210e81:	c1 e0 10             	shl    $0x10,%eax
  8004210e84:	09 c2                	or     %eax,%edx
  8004210e86:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210e89:	c1 e0 08             	shl    $0x8,%eax
  8004210e8c:	09 d0                	or     %edx,%eax
  8004210e8e:	09 45 f4             	or     %eax,-0xc(%rbp)
  8004210e91:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210e95:	48 c1 e8 02          	shr    $0x2,%rax
  8004210e99:	48 89 c1             	mov    %rax,%rcx
  8004210e9c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210ea0:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210ea3:	48 89 d7             	mov    %rdx,%rdi
  8004210ea6:	fc                   	cld    
  8004210ea7:	f3 ab                	rep stos %eax,%es:(%rdi)
  8004210ea9:	eb 11                	jmp    8004210ebc <memset+0x85>
  8004210eab:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210eaf:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210eb2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004210eb6:	48 89 d7             	mov    %rdx,%rdi
  8004210eb9:	fc                   	cld    
  8004210eba:	f3 aa                	rep stos %al,%es:(%rdi)
  8004210ebc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210ec0:	c9                   	leaveq 
  8004210ec1:	c3                   	retq   

0000008004210ec2 <memmove>:
  8004210ec2:	55                   	push   %rbp
  8004210ec3:	48 89 e5             	mov    %rsp,%rbp
  8004210ec6:	48 83 ec 28          	sub    $0x28,%rsp
  8004210eca:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210ece:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210ed2:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004210ed6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210eda:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210ede:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210ee2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004210ee6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210eea:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  8004210eee:	0f 83 88 00 00 00    	jae    8004210f7c <memmove+0xba>
  8004210ef4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210ef8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210efc:	48 01 d0             	add    %rdx,%rax
  8004210eff:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  8004210f03:	76 77                	jbe    8004210f7c <memmove+0xba>
  8004210f05:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210f09:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  8004210f0d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210f11:	48 01 45 f0          	add    %rax,-0x10(%rbp)
  8004210f15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210f19:	83 e0 03             	and    $0x3,%eax
  8004210f1c:	48 85 c0             	test   %rax,%rax
  8004210f1f:	75 3b                	jne    8004210f5c <memmove+0x9a>
  8004210f21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210f25:	83 e0 03             	and    $0x3,%eax
  8004210f28:	48 85 c0             	test   %rax,%rax
  8004210f2b:	75 2f                	jne    8004210f5c <memmove+0x9a>
  8004210f2d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210f31:	83 e0 03             	and    $0x3,%eax
  8004210f34:	48 85 c0             	test   %rax,%rax
  8004210f37:	75 23                	jne    8004210f5c <memmove+0x9a>
  8004210f39:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210f3d:	48 83 e8 04          	sub    $0x4,%rax
  8004210f41:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210f45:	48 83 ea 04          	sub    $0x4,%rdx
  8004210f49:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004210f4d:	48 c1 e9 02          	shr    $0x2,%rcx
  8004210f51:	48 89 c7             	mov    %rax,%rdi
  8004210f54:	48 89 d6             	mov    %rdx,%rsi
  8004210f57:	fd                   	std    
  8004210f58:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
  8004210f5a:	eb 1d                	jmp    8004210f79 <memmove+0xb7>
  8004210f5c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210f60:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  8004210f64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210f68:	48 8d 70 ff          	lea    -0x1(%rax),%rsi
  8004210f6c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210f70:	48 89 d7             	mov    %rdx,%rdi
  8004210f73:	48 89 c1             	mov    %rax,%rcx
  8004210f76:	fd                   	std    
  8004210f77:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  8004210f79:	fc                   	cld    
  8004210f7a:	eb 57                	jmp    8004210fd3 <memmove+0x111>
  8004210f7c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210f80:	83 e0 03             	and    $0x3,%eax
  8004210f83:	48 85 c0             	test   %rax,%rax
  8004210f86:	75 36                	jne    8004210fbe <memmove+0xfc>
  8004210f88:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210f8c:	83 e0 03             	and    $0x3,%eax
  8004210f8f:	48 85 c0             	test   %rax,%rax
  8004210f92:	75 2a                	jne    8004210fbe <memmove+0xfc>
  8004210f94:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210f98:	83 e0 03             	and    $0x3,%eax
  8004210f9b:	48 85 c0             	test   %rax,%rax
  8004210f9e:	75 1e                	jne    8004210fbe <memmove+0xfc>
  8004210fa0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210fa4:	48 c1 e8 02          	shr    $0x2,%rax
  8004210fa8:	48 89 c1             	mov    %rax,%rcx
  8004210fab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210faf:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210fb3:	48 89 c7             	mov    %rax,%rdi
  8004210fb6:	48 89 d6             	mov    %rdx,%rsi
  8004210fb9:	fc                   	cld    
  8004210fba:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
  8004210fbc:	eb 15                	jmp    8004210fd3 <memmove+0x111>
  8004210fbe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210fc2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210fc6:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004210fca:	48 89 c7             	mov    %rax,%rdi
  8004210fcd:	48 89 d6             	mov    %rdx,%rsi
  8004210fd0:	fc                   	cld    
  8004210fd1:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  8004210fd3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210fd7:	c9                   	leaveq 
  8004210fd8:	c3                   	retq   

0000008004210fd9 <memcpy>:
  8004210fd9:	55                   	push   %rbp
  8004210fda:	48 89 e5             	mov    %rsp,%rbp
  8004210fdd:	48 83 ec 18          	sub    $0x18,%rsp
  8004210fe1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004210fe5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004210fe9:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210fed:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210ff1:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  8004210ff5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210ff9:	48 89 ce             	mov    %rcx,%rsi
  8004210ffc:	48 89 c7             	mov    %rax,%rdi
  8004210fff:	48 b8 c2 0e 21 04 80 	movabs $0x8004210ec2,%rax
  8004211006:	00 00 00 
  8004211009:	ff d0                	callq  *%rax
  800421100b:	c9                   	leaveq 
  800421100c:	c3                   	retq   

000000800421100d <memcmp>:
  800421100d:	55                   	push   %rbp
  800421100e:	48 89 e5             	mov    %rsp,%rbp
  8004211011:	48 83 ec 28          	sub    $0x28,%rsp
  8004211015:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004211019:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421101d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004211021:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211025:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004211029:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421102d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004211031:	eb 36                	jmp    8004211069 <memcmp+0x5c>
  8004211033:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211037:	0f b6 10             	movzbl (%rax),%edx
  800421103a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421103e:	0f b6 00             	movzbl (%rax),%eax
  8004211041:	38 c2                	cmp    %al,%dl
  8004211043:	74 1a                	je     800421105f <memcmp+0x52>
  8004211045:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211049:	0f b6 00             	movzbl (%rax),%eax
  800421104c:	0f b6 d0             	movzbl %al,%edx
  800421104f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211053:	0f b6 00             	movzbl (%rax),%eax
  8004211056:	0f b6 c0             	movzbl %al,%eax
  8004211059:	29 c2                	sub    %eax,%edx
  800421105b:	89 d0                	mov    %edx,%eax
  800421105d:	eb 20                	jmp    800421107f <memcmp+0x72>
  800421105f:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004211064:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  8004211069:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421106d:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  8004211071:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004211075:	48 85 c0             	test   %rax,%rax
  8004211078:	75 b9                	jne    8004211033 <memcmp+0x26>
  800421107a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421107f:	c9                   	leaveq 
  8004211080:	c3                   	retq   

0000008004211081 <memfind>:
  8004211081:	55                   	push   %rbp
  8004211082:	48 89 e5             	mov    %rsp,%rbp
  8004211085:	48 83 ec 28          	sub    $0x28,%rsp
  8004211089:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421108d:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004211090:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004211094:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211098:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421109c:	48 01 d0             	add    %rdx,%rax
  800421109f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042110a3:	eb 15                	jmp    80042110ba <memfind+0x39>
  80042110a5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042110a9:	0f b6 10             	movzbl (%rax),%edx
  80042110ac:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042110af:	38 c2                	cmp    %al,%dl
  80042110b1:	75 02                	jne    80042110b5 <memfind+0x34>
  80042110b3:	eb 0f                	jmp    80042110c4 <memfind+0x43>
  80042110b5:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  80042110ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042110be:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042110c2:	72 e1                	jb     80042110a5 <memfind+0x24>
  80042110c4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042110c8:	c9                   	leaveq 
  80042110c9:	c3                   	retq   

00000080042110ca <strtol>:
  80042110ca:	55                   	push   %rbp
  80042110cb:	48 89 e5             	mov    %rsp,%rbp
  80042110ce:	48 83 ec 34          	sub    $0x34,%rsp
  80042110d2:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042110d6:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  80042110da:	89 55 cc             	mov    %edx,-0x34(%rbp)
  80042110dd:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042110e4:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  80042110eb:	00 
  80042110ec:	eb 05                	jmp    80042110f3 <strtol+0x29>
  80042110ee:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  80042110f3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042110f7:	0f b6 00             	movzbl (%rax),%eax
  80042110fa:	3c 20                	cmp    $0x20,%al
  80042110fc:	74 f0                	je     80042110ee <strtol+0x24>
  80042110fe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211102:	0f b6 00             	movzbl (%rax),%eax
  8004211105:	3c 09                	cmp    $0x9,%al
  8004211107:	74 e5                	je     80042110ee <strtol+0x24>
  8004211109:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421110d:	0f b6 00             	movzbl (%rax),%eax
  8004211110:	3c 2b                	cmp    $0x2b,%al
  8004211112:	75 07                	jne    800421111b <strtol+0x51>
  8004211114:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004211119:	eb 17                	jmp    8004211132 <strtol+0x68>
  800421111b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421111f:	0f b6 00             	movzbl (%rax),%eax
  8004211122:	3c 2d                	cmp    $0x2d,%al
  8004211124:	75 0c                	jne    8004211132 <strtol+0x68>
  8004211126:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  800421112b:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  8004211132:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  8004211136:	74 06                	je     800421113e <strtol+0x74>
  8004211138:	83 7d cc 10          	cmpl   $0x10,-0x34(%rbp)
  800421113c:	75 28                	jne    8004211166 <strtol+0x9c>
  800421113e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211142:	0f b6 00             	movzbl (%rax),%eax
  8004211145:	3c 30                	cmp    $0x30,%al
  8004211147:	75 1d                	jne    8004211166 <strtol+0x9c>
  8004211149:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421114d:	48 83 c0 01          	add    $0x1,%rax
  8004211151:	0f b6 00             	movzbl (%rax),%eax
  8004211154:	3c 78                	cmp    $0x78,%al
  8004211156:	75 0e                	jne    8004211166 <strtol+0x9c>
  8004211158:	48 83 45 d8 02       	addq   $0x2,-0x28(%rbp)
  800421115d:	c7 45 cc 10 00 00 00 	movl   $0x10,-0x34(%rbp)
  8004211164:	eb 2c                	jmp    8004211192 <strtol+0xc8>
  8004211166:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  800421116a:	75 19                	jne    8004211185 <strtol+0xbb>
  800421116c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211170:	0f b6 00             	movzbl (%rax),%eax
  8004211173:	3c 30                	cmp    $0x30,%al
  8004211175:	75 0e                	jne    8004211185 <strtol+0xbb>
  8004211177:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  800421117c:	c7 45 cc 08 00 00 00 	movl   $0x8,-0x34(%rbp)
  8004211183:	eb 0d                	jmp    8004211192 <strtol+0xc8>
  8004211185:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  8004211189:	75 07                	jne    8004211192 <strtol+0xc8>
  800421118b:	c7 45 cc 0a 00 00 00 	movl   $0xa,-0x34(%rbp)
  8004211192:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211196:	0f b6 00             	movzbl (%rax),%eax
  8004211199:	3c 2f                	cmp    $0x2f,%al
  800421119b:	7e 1d                	jle    80042111ba <strtol+0xf0>
  800421119d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042111a1:	0f b6 00             	movzbl (%rax),%eax
  80042111a4:	3c 39                	cmp    $0x39,%al
  80042111a6:	7f 12                	jg     80042111ba <strtol+0xf0>
  80042111a8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042111ac:	0f b6 00             	movzbl (%rax),%eax
  80042111af:	0f be c0             	movsbl %al,%eax
  80042111b2:	83 e8 30             	sub    $0x30,%eax
  80042111b5:	89 45 ec             	mov    %eax,-0x14(%rbp)
  80042111b8:	eb 4e                	jmp    8004211208 <strtol+0x13e>
  80042111ba:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042111be:	0f b6 00             	movzbl (%rax),%eax
  80042111c1:	3c 60                	cmp    $0x60,%al
  80042111c3:	7e 1d                	jle    80042111e2 <strtol+0x118>
  80042111c5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042111c9:	0f b6 00             	movzbl (%rax),%eax
  80042111cc:	3c 7a                	cmp    $0x7a,%al
  80042111ce:	7f 12                	jg     80042111e2 <strtol+0x118>
  80042111d0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042111d4:	0f b6 00             	movzbl (%rax),%eax
  80042111d7:	0f be c0             	movsbl %al,%eax
  80042111da:	83 e8 57             	sub    $0x57,%eax
  80042111dd:	89 45 ec             	mov    %eax,-0x14(%rbp)
  80042111e0:	eb 26                	jmp    8004211208 <strtol+0x13e>
  80042111e2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042111e6:	0f b6 00             	movzbl (%rax),%eax
  80042111e9:	3c 40                	cmp    $0x40,%al
  80042111eb:	7e 48                	jle    8004211235 <strtol+0x16b>
  80042111ed:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042111f1:	0f b6 00             	movzbl (%rax),%eax
  80042111f4:	3c 5a                	cmp    $0x5a,%al
  80042111f6:	7f 3d                	jg     8004211235 <strtol+0x16b>
  80042111f8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042111fc:	0f b6 00             	movzbl (%rax),%eax
  80042111ff:	0f be c0             	movsbl %al,%eax
  8004211202:	83 e8 37             	sub    $0x37,%eax
  8004211205:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004211208:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421120b:	3b 45 cc             	cmp    -0x34(%rbp),%eax
  800421120e:	7c 02                	jl     8004211212 <strtol+0x148>
  8004211210:	eb 23                	jmp    8004211235 <strtol+0x16b>
  8004211212:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004211217:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421121a:	48 98                	cltq   
  800421121c:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  8004211221:	48 89 c2             	mov    %rax,%rdx
  8004211224:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004211227:	48 98                	cltq   
  8004211229:	48 01 d0             	add    %rdx,%rax
  800421122c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004211230:	e9 5d ff ff ff       	jmpq   8004211192 <strtol+0xc8>
  8004211235:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800421123a:	74 0b                	je     8004211247 <strtol+0x17d>
  800421123c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004211240:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004211244:	48 89 10             	mov    %rdx,(%rax)
  8004211247:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800421124b:	74 09                	je     8004211256 <strtol+0x18c>
  800421124d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211251:	48 f7 d8             	neg    %rax
  8004211254:	eb 04                	jmp    800421125a <strtol+0x190>
  8004211256:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421125a:	c9                   	leaveq 
  800421125b:	c3                   	retq   

000000800421125c <strstr>:
  800421125c:	55                   	push   %rbp
  800421125d:	48 89 e5             	mov    %rsp,%rbp
  8004211260:	48 83 ec 30          	sub    $0x30,%rsp
  8004211264:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004211268:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800421126c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004211270:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211274:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  8004211278:	0f b6 00             	movzbl (%rax),%eax
  800421127b:	88 45 ff             	mov    %al,-0x1(%rbp)
  800421127e:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
  8004211282:	75 06                	jne    800421128a <strstr+0x2e>
  8004211284:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211288:	eb 6b                	jmp    80042112f5 <strstr+0x99>
  800421128a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421128e:	48 89 c7             	mov    %rax,%rdi
  8004211291:	48 b8 32 0b 21 04 80 	movabs $0x8004210b32,%rax
  8004211298:	00 00 00 
  800421129b:	ff d0                	callq  *%rax
  800421129d:	48 98                	cltq   
  800421129f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042112a3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042112a7:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042112ab:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  80042112af:	0f b6 00             	movzbl (%rax),%eax
  80042112b2:	88 45 ef             	mov    %al,-0x11(%rbp)
  80042112b5:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  80042112b9:	75 07                	jne    80042112c2 <strstr+0x66>
  80042112bb:	b8 00 00 00 00       	mov    $0x0,%eax
  80042112c0:	eb 33                	jmp    80042112f5 <strstr+0x99>
  80042112c2:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  80042112c6:	3a 45 ff             	cmp    -0x1(%rbp),%al
  80042112c9:	75 d8                	jne    80042112a3 <strstr+0x47>
  80042112cb:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042112cf:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  80042112d3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042112d7:	48 89 ce             	mov    %rcx,%rsi
  80042112da:	48 89 c7             	mov    %rax,%rdi
  80042112dd:	48 b8 53 0d 21 04 80 	movabs $0x8004210d53,%rax
  80042112e4:	00 00 00 
  80042112e7:	ff d0                	callq  *%rax
  80042112e9:	85 c0                	test   %eax,%eax
  80042112eb:	75 b6                	jne    80042112a3 <strstr+0x47>
  80042112ed:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042112f1:	48 83 e8 01          	sub    $0x1,%rax
  80042112f5:	c9                   	leaveq 
  80042112f6:	c3                   	retq   

00000080042112f7 <_dwarf_read_lsb>:
Dwarf_Section *
_dwarf_find_section(const char *name);

uint64_t
_dwarf_read_lsb(uint8_t *data, uint64_t *offsetp, int bytes_to_read)
{
  80042112f7:	55                   	push   %rbp
  80042112f8:	48 89 e5             	mov    %rsp,%rbp
  80042112fb:	48 83 ec 24          	sub    $0x24,%rsp
  80042112ff:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004211303:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004211307:	89 55 dc             	mov    %edx,-0x24(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = data + *offsetp;
  800421130a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421130e:	48 8b 10             	mov    (%rax),%rdx
  8004211311:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211315:	48 01 d0             	add    %rdx,%rax
  8004211318:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	ret = 0;
  800421131c:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004211323:	00 
	switch (bytes_to_read) {
  8004211324:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004211327:	83 f8 02             	cmp    $0x2,%eax
  800421132a:	0f 84 ab 00 00 00    	je     80042113db <_dwarf_read_lsb+0xe4>
  8004211330:	83 f8 02             	cmp    $0x2,%eax
  8004211333:	7f 0e                	jg     8004211343 <_dwarf_read_lsb+0x4c>
  8004211335:	83 f8 01             	cmp    $0x1,%eax
  8004211338:	0f 84 b3 00 00 00    	je     80042113f1 <_dwarf_read_lsb+0xfa>
  800421133e:	e9 d9 00 00 00       	jmpq   800421141c <_dwarf_read_lsb+0x125>
  8004211343:	83 f8 04             	cmp    $0x4,%eax
  8004211346:	74 65                	je     80042113ad <_dwarf_read_lsb+0xb6>
  8004211348:	83 f8 08             	cmp    $0x8,%eax
  800421134b:	0f 85 cb 00 00 00    	jne    800421141c <_dwarf_read_lsb+0x125>
	case 8:
		ret |= ((uint64_t) src[4]) << 32 | ((uint64_t) src[5]) << 40;
  8004211351:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211355:	48 83 c0 04          	add    $0x4,%rax
  8004211359:	0f b6 00             	movzbl (%rax),%eax
  800421135c:	0f b6 c0             	movzbl %al,%eax
  800421135f:	48 c1 e0 20          	shl    $0x20,%rax
  8004211363:	48 89 c2             	mov    %rax,%rdx
  8004211366:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421136a:	48 83 c0 05          	add    $0x5,%rax
  800421136e:	0f b6 00             	movzbl (%rax),%eax
  8004211371:	0f b6 c0             	movzbl %al,%eax
  8004211374:	48 c1 e0 28          	shl    $0x28,%rax
  8004211378:	48 09 d0             	or     %rdx,%rax
  800421137b:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[6]) << 48 | ((uint64_t) src[7]) << 56;
  800421137f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211383:	48 83 c0 06          	add    $0x6,%rax
  8004211387:	0f b6 00             	movzbl (%rax),%eax
  800421138a:	0f b6 c0             	movzbl %al,%eax
  800421138d:	48 c1 e0 30          	shl    $0x30,%rax
  8004211391:	48 89 c2             	mov    %rax,%rdx
  8004211394:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211398:	48 83 c0 07          	add    $0x7,%rax
  800421139c:	0f b6 00             	movzbl (%rax),%eax
  800421139f:	0f b6 c0             	movzbl %al,%eax
  80042113a2:	48 c1 e0 38          	shl    $0x38,%rax
  80042113a6:	48 09 d0             	or     %rdx,%rax
  80042113a9:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 4:
		ret |= ((uint64_t) src[2]) << 16 | ((uint64_t) src[3]) << 24;
  80042113ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042113b1:	48 83 c0 02          	add    $0x2,%rax
  80042113b5:	0f b6 00             	movzbl (%rax),%eax
  80042113b8:	0f b6 c0             	movzbl %al,%eax
  80042113bb:	48 c1 e0 10          	shl    $0x10,%rax
  80042113bf:	48 89 c2             	mov    %rax,%rdx
  80042113c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042113c6:	48 83 c0 03          	add    $0x3,%rax
  80042113ca:	0f b6 00             	movzbl (%rax),%eax
  80042113cd:	0f b6 c0             	movzbl %al,%eax
  80042113d0:	48 c1 e0 18          	shl    $0x18,%rax
  80042113d4:	48 09 d0             	or     %rdx,%rax
  80042113d7:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 2:
		ret |= ((uint64_t) src[1]) << 8;
  80042113db:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042113df:	48 83 c0 01          	add    $0x1,%rax
  80042113e3:	0f b6 00             	movzbl (%rax),%eax
  80042113e6:	0f b6 c0             	movzbl %al,%eax
  80042113e9:	48 c1 e0 08          	shl    $0x8,%rax
  80042113ed:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 1:
		ret |= src[0];
  80042113f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042113f5:	0f b6 00             	movzbl (%rax),%eax
  80042113f8:	0f b6 c0             	movzbl %al,%eax
  80042113fb:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  80042113ff:	90                   	nop
	default:
		return (0);
	}

	*offsetp += bytes_to_read;
  8004211400:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211404:	48 8b 10             	mov    (%rax),%rdx
  8004211407:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421140a:	48 98                	cltq   
  800421140c:	48 01 c2             	add    %rax,%rdx
  800421140f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211413:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004211416:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421141a:	eb 05                	jmp    8004211421 <_dwarf_read_lsb+0x12a>
		ret |= ((uint64_t) src[1]) << 8;
	case 1:
		ret |= src[0];
		break;
	default:
		return (0);
  800421141c:	b8 00 00 00 00       	mov    $0x0,%eax
	}

	*offsetp += bytes_to_read;

	return (ret);
}
  8004211421:	c9                   	leaveq 
  8004211422:	c3                   	retq   

0000008004211423 <_dwarf_decode_lsb>:

uint64_t
_dwarf_decode_lsb(uint8_t **data, int bytes_to_read)
{
  8004211423:	55                   	push   %rbp
  8004211424:	48 89 e5             	mov    %rsp,%rbp
  8004211427:	48 83 ec 1c          	sub    $0x1c,%rsp
  800421142b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421142f:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = *data;
  8004211432:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211436:	48 8b 00             	mov    (%rax),%rax
  8004211439:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	ret = 0;
  800421143d:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004211444:	00 
	switch (bytes_to_read) {
  8004211445:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004211448:	83 f8 02             	cmp    $0x2,%eax
  800421144b:	0f 84 ab 00 00 00    	je     80042114fc <_dwarf_decode_lsb+0xd9>
  8004211451:	83 f8 02             	cmp    $0x2,%eax
  8004211454:	7f 0e                	jg     8004211464 <_dwarf_decode_lsb+0x41>
  8004211456:	83 f8 01             	cmp    $0x1,%eax
  8004211459:	0f 84 b3 00 00 00    	je     8004211512 <_dwarf_decode_lsb+0xef>
  800421145f:	e9 d9 00 00 00       	jmpq   800421153d <_dwarf_decode_lsb+0x11a>
  8004211464:	83 f8 04             	cmp    $0x4,%eax
  8004211467:	74 65                	je     80042114ce <_dwarf_decode_lsb+0xab>
  8004211469:	83 f8 08             	cmp    $0x8,%eax
  800421146c:	0f 85 cb 00 00 00    	jne    800421153d <_dwarf_decode_lsb+0x11a>
	case 8:
		ret |= ((uint64_t) src[4]) << 32 | ((uint64_t) src[5]) << 40;
  8004211472:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211476:	48 83 c0 04          	add    $0x4,%rax
  800421147a:	0f b6 00             	movzbl (%rax),%eax
  800421147d:	0f b6 c0             	movzbl %al,%eax
  8004211480:	48 c1 e0 20          	shl    $0x20,%rax
  8004211484:	48 89 c2             	mov    %rax,%rdx
  8004211487:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421148b:	48 83 c0 05          	add    $0x5,%rax
  800421148f:	0f b6 00             	movzbl (%rax),%eax
  8004211492:	0f b6 c0             	movzbl %al,%eax
  8004211495:	48 c1 e0 28          	shl    $0x28,%rax
  8004211499:	48 09 d0             	or     %rdx,%rax
  800421149c:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[6]) << 48 | ((uint64_t) src[7]) << 56;
  80042114a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042114a4:	48 83 c0 06          	add    $0x6,%rax
  80042114a8:	0f b6 00             	movzbl (%rax),%eax
  80042114ab:	0f b6 c0             	movzbl %al,%eax
  80042114ae:	48 c1 e0 30          	shl    $0x30,%rax
  80042114b2:	48 89 c2             	mov    %rax,%rdx
  80042114b5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042114b9:	48 83 c0 07          	add    $0x7,%rax
  80042114bd:	0f b6 00             	movzbl (%rax),%eax
  80042114c0:	0f b6 c0             	movzbl %al,%eax
  80042114c3:	48 c1 e0 38          	shl    $0x38,%rax
  80042114c7:	48 09 d0             	or     %rdx,%rax
  80042114ca:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 4:
		ret |= ((uint64_t) src[2]) << 16 | ((uint64_t) src[3]) << 24;
  80042114ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042114d2:	48 83 c0 02          	add    $0x2,%rax
  80042114d6:	0f b6 00             	movzbl (%rax),%eax
  80042114d9:	0f b6 c0             	movzbl %al,%eax
  80042114dc:	48 c1 e0 10          	shl    $0x10,%rax
  80042114e0:	48 89 c2             	mov    %rax,%rdx
  80042114e3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042114e7:	48 83 c0 03          	add    $0x3,%rax
  80042114eb:	0f b6 00             	movzbl (%rax),%eax
  80042114ee:	0f b6 c0             	movzbl %al,%eax
  80042114f1:	48 c1 e0 18          	shl    $0x18,%rax
  80042114f5:	48 09 d0             	or     %rdx,%rax
  80042114f8:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 2:
		ret |= ((uint64_t) src[1]) << 8;
  80042114fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211500:	48 83 c0 01          	add    $0x1,%rax
  8004211504:	0f b6 00             	movzbl (%rax),%eax
  8004211507:	0f b6 c0             	movzbl %al,%eax
  800421150a:	48 c1 e0 08          	shl    $0x8,%rax
  800421150e:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 1:
		ret |= src[0];
  8004211512:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211516:	0f b6 00             	movzbl (%rax),%eax
  8004211519:	0f b6 c0             	movzbl %al,%eax
  800421151c:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  8004211520:	90                   	nop
	default:
		return (0);
	}

	*data += bytes_to_read;
  8004211521:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211525:	48 8b 10             	mov    (%rax),%rdx
  8004211528:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421152b:	48 98                	cltq   
  800421152d:	48 01 c2             	add    %rax,%rdx
  8004211530:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211534:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004211537:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421153b:	eb 05                	jmp    8004211542 <_dwarf_decode_lsb+0x11f>
		ret |= ((uint64_t) src[1]) << 8;
	case 1:
		ret |= src[0];
		break;
	default:
		return (0);
  800421153d:	b8 00 00 00 00       	mov    $0x0,%eax
	}

	*data += bytes_to_read;

	return (ret);
}
  8004211542:	c9                   	leaveq 
  8004211543:	c3                   	retq   

0000008004211544 <_dwarf_read_msb>:

uint64_t
_dwarf_read_msb(uint8_t *data, uint64_t *offsetp, int bytes_to_read)
{
  8004211544:	55                   	push   %rbp
  8004211545:	48 89 e5             	mov    %rsp,%rbp
  8004211548:	48 83 ec 24          	sub    $0x24,%rsp
  800421154c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004211550:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004211554:	89 55 dc             	mov    %edx,-0x24(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = data + *offsetp;
  8004211557:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421155b:	48 8b 10             	mov    (%rax),%rdx
  800421155e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211562:	48 01 d0             	add    %rdx,%rax
  8004211565:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	switch (bytes_to_read) {
  8004211569:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421156c:	83 f8 02             	cmp    $0x2,%eax
  800421156f:	74 35                	je     80042115a6 <_dwarf_read_msb+0x62>
  8004211571:	83 f8 02             	cmp    $0x2,%eax
  8004211574:	7f 0a                	jg     8004211580 <_dwarf_read_msb+0x3c>
  8004211576:	83 f8 01             	cmp    $0x1,%eax
  8004211579:	74 18                	je     8004211593 <_dwarf_read_msb+0x4f>
  800421157b:	e9 53 01 00 00       	jmpq   80042116d3 <_dwarf_read_msb+0x18f>
  8004211580:	83 f8 04             	cmp    $0x4,%eax
  8004211583:	74 49                	je     80042115ce <_dwarf_read_msb+0x8a>
  8004211585:	83 f8 08             	cmp    $0x8,%eax
  8004211588:	0f 84 96 00 00 00    	je     8004211624 <_dwarf_read_msb+0xe0>
  800421158e:	e9 40 01 00 00       	jmpq   80042116d3 <_dwarf_read_msb+0x18f>
	case 1:
		ret = src[0];
  8004211593:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211597:	0f b6 00             	movzbl (%rax),%eax
  800421159a:	0f b6 c0             	movzbl %al,%eax
  800421159d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  80042115a1:	e9 34 01 00 00       	jmpq   80042116da <_dwarf_read_msb+0x196>
	case 2:
		ret = src[1] | ((uint64_t) src[0]) << 8;
  80042115a6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042115aa:	48 83 c0 01          	add    $0x1,%rax
  80042115ae:	0f b6 00             	movzbl (%rax),%eax
  80042115b1:	0f b6 d0             	movzbl %al,%edx
  80042115b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042115b8:	0f b6 00             	movzbl (%rax),%eax
  80042115bb:	0f b6 c0             	movzbl %al,%eax
  80042115be:	48 c1 e0 08          	shl    $0x8,%rax
  80042115c2:	48 09 d0             	or     %rdx,%rax
  80042115c5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  80042115c9:	e9 0c 01 00 00       	jmpq   80042116da <_dwarf_read_msb+0x196>
	case 4:
		ret = src[3] | ((uint64_t) src[2]) << 8;
  80042115ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042115d2:	48 83 c0 03          	add    $0x3,%rax
  80042115d6:	0f b6 00             	movzbl (%rax),%eax
  80042115d9:	0f b6 c0             	movzbl %al,%eax
  80042115dc:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042115e0:	48 83 c2 02          	add    $0x2,%rdx
  80042115e4:	0f b6 12             	movzbl (%rdx),%edx
  80042115e7:	0f b6 d2             	movzbl %dl,%edx
  80042115ea:	48 c1 e2 08          	shl    $0x8,%rdx
  80042115ee:	48 09 d0             	or     %rdx,%rax
  80042115f1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 16 | ((uint64_t) src[0]) << 24;
  80042115f5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042115f9:	48 83 c0 01          	add    $0x1,%rax
  80042115fd:	0f b6 00             	movzbl (%rax),%eax
  8004211600:	0f b6 c0             	movzbl %al,%eax
  8004211603:	48 c1 e0 10          	shl    $0x10,%rax
  8004211607:	48 89 c2             	mov    %rax,%rdx
  800421160a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421160e:	0f b6 00             	movzbl (%rax),%eax
  8004211611:	0f b6 c0             	movzbl %al,%eax
  8004211614:	48 c1 e0 18          	shl    $0x18,%rax
  8004211618:	48 09 d0             	or     %rdx,%rax
  800421161b:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  800421161f:	e9 b6 00 00 00       	jmpq   80042116da <_dwarf_read_msb+0x196>
	case 8:
		ret = src[7] | ((uint64_t) src[6]) << 8;
  8004211624:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211628:	48 83 c0 07          	add    $0x7,%rax
  800421162c:	0f b6 00             	movzbl (%rax),%eax
  800421162f:	0f b6 c0             	movzbl %al,%eax
  8004211632:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004211636:	48 83 c2 06          	add    $0x6,%rdx
  800421163a:	0f b6 12             	movzbl (%rdx),%edx
  800421163d:	0f b6 d2             	movzbl %dl,%edx
  8004211640:	48 c1 e2 08          	shl    $0x8,%rdx
  8004211644:	48 09 d0             	or     %rdx,%rax
  8004211647:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[5]) << 16 | ((uint64_t) src[4]) << 24;
  800421164b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421164f:	48 83 c0 05          	add    $0x5,%rax
  8004211653:	0f b6 00             	movzbl (%rax),%eax
  8004211656:	0f b6 c0             	movzbl %al,%eax
  8004211659:	48 c1 e0 10          	shl    $0x10,%rax
  800421165d:	48 89 c2             	mov    %rax,%rdx
  8004211660:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211664:	48 83 c0 04          	add    $0x4,%rax
  8004211668:	0f b6 00             	movzbl (%rax),%eax
  800421166b:	0f b6 c0             	movzbl %al,%eax
  800421166e:	48 c1 e0 18          	shl    $0x18,%rax
  8004211672:	48 09 d0             	or     %rdx,%rax
  8004211675:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[3]) << 32 | ((uint64_t) src[2]) << 40;
  8004211679:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421167d:	48 83 c0 03          	add    $0x3,%rax
  8004211681:	0f b6 00             	movzbl (%rax),%eax
  8004211684:	0f b6 c0             	movzbl %al,%eax
  8004211687:	48 c1 e0 20          	shl    $0x20,%rax
  800421168b:	48 89 c2             	mov    %rax,%rdx
  800421168e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211692:	48 83 c0 02          	add    $0x2,%rax
  8004211696:	0f b6 00             	movzbl (%rax),%eax
  8004211699:	0f b6 c0             	movzbl %al,%eax
  800421169c:	48 c1 e0 28          	shl    $0x28,%rax
  80042116a0:	48 09 d0             	or     %rdx,%rax
  80042116a3:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 48 | ((uint64_t) src[0]) << 56;
  80042116a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042116ab:	48 83 c0 01          	add    $0x1,%rax
  80042116af:	0f b6 00             	movzbl (%rax),%eax
  80042116b2:	0f b6 c0             	movzbl %al,%eax
  80042116b5:	48 c1 e0 30          	shl    $0x30,%rax
  80042116b9:	48 89 c2             	mov    %rax,%rdx
  80042116bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042116c0:	0f b6 00             	movzbl (%rax),%eax
  80042116c3:	0f b6 c0             	movzbl %al,%eax
  80042116c6:	48 c1 e0 38          	shl    $0x38,%rax
  80042116ca:	48 09 d0             	or     %rdx,%rax
  80042116cd:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  80042116d1:	eb 07                	jmp    80042116da <_dwarf_read_msb+0x196>
	default:
		return (0);
  80042116d3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042116d8:	eb 1a                	jmp    80042116f4 <_dwarf_read_msb+0x1b0>
	}

	*offsetp += bytes_to_read;
  80042116da:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042116de:	48 8b 10             	mov    (%rax),%rdx
  80042116e1:	8b 45 dc             	mov    -0x24(%rbp),%eax
  80042116e4:	48 98                	cltq   
  80042116e6:	48 01 c2             	add    %rax,%rdx
  80042116e9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042116ed:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  80042116f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  80042116f4:	c9                   	leaveq 
  80042116f5:	c3                   	retq   

00000080042116f6 <_dwarf_decode_msb>:

uint64_t
_dwarf_decode_msb(uint8_t **data, int bytes_to_read)
{
  80042116f6:	55                   	push   %rbp
  80042116f7:	48 89 e5             	mov    %rsp,%rbp
  80042116fa:	48 83 ec 1c          	sub    $0x1c,%rsp
  80042116fe:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004211702:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = *data;
  8004211705:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211709:	48 8b 00             	mov    (%rax),%rax
  800421170c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	ret = 0;
  8004211710:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004211717:	00 
	switch (bytes_to_read) {
  8004211718:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421171b:	83 f8 02             	cmp    $0x2,%eax
  800421171e:	74 35                	je     8004211755 <_dwarf_decode_msb+0x5f>
  8004211720:	83 f8 02             	cmp    $0x2,%eax
  8004211723:	7f 0a                	jg     800421172f <_dwarf_decode_msb+0x39>
  8004211725:	83 f8 01             	cmp    $0x1,%eax
  8004211728:	74 18                	je     8004211742 <_dwarf_decode_msb+0x4c>
  800421172a:	e9 53 01 00 00       	jmpq   8004211882 <_dwarf_decode_msb+0x18c>
  800421172f:	83 f8 04             	cmp    $0x4,%eax
  8004211732:	74 49                	je     800421177d <_dwarf_decode_msb+0x87>
  8004211734:	83 f8 08             	cmp    $0x8,%eax
  8004211737:	0f 84 96 00 00 00    	je     80042117d3 <_dwarf_decode_msb+0xdd>
  800421173d:	e9 40 01 00 00       	jmpq   8004211882 <_dwarf_decode_msb+0x18c>
	case 1:
		ret = src[0];
  8004211742:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211746:	0f b6 00             	movzbl (%rax),%eax
  8004211749:	0f b6 c0             	movzbl %al,%eax
  800421174c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  8004211750:	e9 34 01 00 00       	jmpq   8004211889 <_dwarf_decode_msb+0x193>
	case 2:
		ret = src[1] | ((uint64_t) src[0]) << 8;
  8004211755:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211759:	48 83 c0 01          	add    $0x1,%rax
  800421175d:	0f b6 00             	movzbl (%rax),%eax
  8004211760:	0f b6 d0             	movzbl %al,%edx
  8004211763:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211767:	0f b6 00             	movzbl (%rax),%eax
  800421176a:	0f b6 c0             	movzbl %al,%eax
  800421176d:	48 c1 e0 08          	shl    $0x8,%rax
  8004211771:	48 09 d0             	or     %rdx,%rax
  8004211774:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  8004211778:	e9 0c 01 00 00       	jmpq   8004211889 <_dwarf_decode_msb+0x193>
	case 4:
		ret = src[3] | ((uint64_t) src[2]) << 8;
  800421177d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211781:	48 83 c0 03          	add    $0x3,%rax
  8004211785:	0f b6 00             	movzbl (%rax),%eax
  8004211788:	0f b6 c0             	movzbl %al,%eax
  800421178b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800421178f:	48 83 c2 02          	add    $0x2,%rdx
  8004211793:	0f b6 12             	movzbl (%rdx),%edx
  8004211796:	0f b6 d2             	movzbl %dl,%edx
  8004211799:	48 c1 e2 08          	shl    $0x8,%rdx
  800421179d:	48 09 d0             	or     %rdx,%rax
  80042117a0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 16 | ((uint64_t) src[0]) << 24;
  80042117a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042117a8:	48 83 c0 01          	add    $0x1,%rax
  80042117ac:	0f b6 00             	movzbl (%rax),%eax
  80042117af:	0f b6 c0             	movzbl %al,%eax
  80042117b2:	48 c1 e0 10          	shl    $0x10,%rax
  80042117b6:	48 89 c2             	mov    %rax,%rdx
  80042117b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042117bd:	0f b6 00             	movzbl (%rax),%eax
  80042117c0:	0f b6 c0             	movzbl %al,%eax
  80042117c3:	48 c1 e0 18          	shl    $0x18,%rax
  80042117c7:	48 09 d0             	or     %rdx,%rax
  80042117ca:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  80042117ce:	e9 b6 00 00 00       	jmpq   8004211889 <_dwarf_decode_msb+0x193>
	case 8:
		ret = src[7] | ((uint64_t) src[6]) << 8;
  80042117d3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042117d7:	48 83 c0 07          	add    $0x7,%rax
  80042117db:	0f b6 00             	movzbl (%rax),%eax
  80042117de:	0f b6 c0             	movzbl %al,%eax
  80042117e1:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042117e5:	48 83 c2 06          	add    $0x6,%rdx
  80042117e9:	0f b6 12             	movzbl (%rdx),%edx
  80042117ec:	0f b6 d2             	movzbl %dl,%edx
  80042117ef:	48 c1 e2 08          	shl    $0x8,%rdx
  80042117f3:	48 09 d0             	or     %rdx,%rax
  80042117f6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[5]) << 16 | ((uint64_t) src[4]) << 24;
  80042117fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042117fe:	48 83 c0 05          	add    $0x5,%rax
  8004211802:	0f b6 00             	movzbl (%rax),%eax
  8004211805:	0f b6 c0             	movzbl %al,%eax
  8004211808:	48 c1 e0 10          	shl    $0x10,%rax
  800421180c:	48 89 c2             	mov    %rax,%rdx
  800421180f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211813:	48 83 c0 04          	add    $0x4,%rax
  8004211817:	0f b6 00             	movzbl (%rax),%eax
  800421181a:	0f b6 c0             	movzbl %al,%eax
  800421181d:	48 c1 e0 18          	shl    $0x18,%rax
  8004211821:	48 09 d0             	or     %rdx,%rax
  8004211824:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[3]) << 32 | ((uint64_t) src[2]) << 40;
  8004211828:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421182c:	48 83 c0 03          	add    $0x3,%rax
  8004211830:	0f b6 00             	movzbl (%rax),%eax
  8004211833:	0f b6 c0             	movzbl %al,%eax
  8004211836:	48 c1 e0 20          	shl    $0x20,%rax
  800421183a:	48 89 c2             	mov    %rax,%rdx
  800421183d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211841:	48 83 c0 02          	add    $0x2,%rax
  8004211845:	0f b6 00             	movzbl (%rax),%eax
  8004211848:	0f b6 c0             	movzbl %al,%eax
  800421184b:	48 c1 e0 28          	shl    $0x28,%rax
  800421184f:	48 09 d0             	or     %rdx,%rax
  8004211852:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 48 | ((uint64_t) src[0]) << 56;
  8004211856:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421185a:	48 83 c0 01          	add    $0x1,%rax
  800421185e:	0f b6 00             	movzbl (%rax),%eax
  8004211861:	0f b6 c0             	movzbl %al,%eax
  8004211864:	48 c1 e0 30          	shl    $0x30,%rax
  8004211868:	48 89 c2             	mov    %rax,%rdx
  800421186b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421186f:	0f b6 00             	movzbl (%rax),%eax
  8004211872:	0f b6 c0             	movzbl %al,%eax
  8004211875:	48 c1 e0 38          	shl    $0x38,%rax
  8004211879:	48 09 d0             	or     %rdx,%rax
  800421187c:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  8004211880:	eb 07                	jmp    8004211889 <_dwarf_decode_msb+0x193>
	default:
		return (0);
  8004211882:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211887:	eb 1a                	jmp    80042118a3 <_dwarf_decode_msb+0x1ad>
		break;
	}

	*data += bytes_to_read;
  8004211889:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421188d:	48 8b 10             	mov    (%rax),%rdx
  8004211890:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004211893:	48 98                	cltq   
  8004211895:	48 01 c2             	add    %rax,%rdx
  8004211898:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421189c:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  800421189f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  80042118a3:	c9                   	leaveq 
  80042118a4:	c3                   	retq   

00000080042118a5 <_dwarf_read_sleb128>:

int64_t
_dwarf_read_sleb128(uint8_t *data, uint64_t *offsetp)
{
  80042118a5:	55                   	push   %rbp
  80042118a6:	48 89 e5             	mov    %rsp,%rbp
  80042118a9:	48 83 ec 30          	sub    $0x30,%rsp
  80042118ad:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042118b1:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	int64_t ret = 0;
  80042118b5:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042118bc:	00 
	uint8_t b;
	int shift = 0;
  80042118bd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	uint8_t *src;

	src = data + *offsetp;
  80042118c4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042118c8:	48 8b 10             	mov    (%rax),%rdx
  80042118cb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042118cf:	48 01 d0             	add    %rdx,%rax
  80042118d2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  80042118d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042118da:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042118de:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  80042118e2:	0f b6 00             	movzbl (%rax),%eax
  80042118e5:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  80042118e8:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  80042118ec:	83 e0 7f             	and    $0x7f,%eax
  80042118ef:	89 c2                	mov    %eax,%edx
  80042118f1:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042118f4:	89 c1                	mov    %eax,%ecx
  80042118f6:	d3 e2                	shl    %cl,%edx
  80042118f8:	89 d0                	mov    %edx,%eax
  80042118fa:	48 98                	cltq   
  80042118fc:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		(*offsetp)++;
  8004211900:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004211904:	48 8b 00             	mov    (%rax),%rax
  8004211907:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800421190b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421190f:	48 89 10             	mov    %rdx,(%rax)
		shift += 7;
  8004211912:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  8004211916:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  800421191a:	84 c0                	test   %al,%al
  800421191c:	78 b8                	js     80042118d6 <_dwarf_read_sleb128+0x31>

	if (shift < 32 && (b & 0x40) != 0)
  800421191e:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
  8004211922:	7f 1f                	jg     8004211943 <_dwarf_read_sleb128+0x9e>
  8004211924:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211928:	83 e0 40             	and    $0x40,%eax
  800421192b:	85 c0                	test   %eax,%eax
  800421192d:	74 14                	je     8004211943 <_dwarf_read_sleb128+0x9e>
		ret |= (-1 << shift);
  800421192f:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211932:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  8004211937:	89 c1                	mov    %eax,%ecx
  8004211939:	d3 e2                	shl    %cl,%edx
  800421193b:	89 d0                	mov    %edx,%eax
  800421193d:	48 98                	cltq   
  800421193f:	48 09 45 f8          	or     %rax,-0x8(%rbp)

	return (ret);
  8004211943:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004211947:	c9                   	leaveq 
  8004211948:	c3                   	retq   

0000008004211949 <_dwarf_read_uleb128>:

uint64_t
_dwarf_read_uleb128(uint8_t *data, uint64_t *offsetp)
{
  8004211949:	55                   	push   %rbp
  800421194a:	48 89 e5             	mov    %rsp,%rbp
  800421194d:	48 83 ec 30          	sub    $0x30,%rsp
  8004211951:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004211955:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	uint64_t ret = 0;
  8004211959:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004211960:	00 
	uint8_t b;
	int shift = 0;
  8004211961:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	uint8_t *src;

	src = data + *offsetp;
  8004211968:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421196c:	48 8b 10             	mov    (%rax),%rdx
  800421196f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211973:	48 01 d0             	add    %rdx,%rax
  8004211976:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  800421197a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421197e:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211982:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004211986:	0f b6 00             	movzbl (%rax),%eax
  8004211989:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  800421198c:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211990:	83 e0 7f             	and    $0x7f,%eax
  8004211993:	89 c2                	mov    %eax,%edx
  8004211995:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211998:	89 c1                	mov    %eax,%ecx
  800421199a:	d3 e2                	shl    %cl,%edx
  800421199c:	89 d0                	mov    %edx,%eax
  800421199e:	48 98                	cltq   
  80042119a0:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		(*offsetp)++;
  80042119a4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042119a8:	48 8b 00             	mov    (%rax),%rax
  80042119ab:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042119af:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042119b3:	48 89 10             	mov    %rdx,(%rax)
		shift += 7;
  80042119b6:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  80042119ba:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  80042119be:	84 c0                	test   %al,%al
  80042119c0:	78 b8                	js     800421197a <_dwarf_read_uleb128+0x31>

	return (ret);
  80042119c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  80042119c6:	c9                   	leaveq 
  80042119c7:	c3                   	retq   

00000080042119c8 <_dwarf_decode_sleb128>:

int64_t
_dwarf_decode_sleb128(uint8_t **dp)
{
  80042119c8:	55                   	push   %rbp
  80042119c9:	48 89 e5             	mov    %rsp,%rbp
  80042119cc:	48 83 ec 28          	sub    $0x28,%rsp
  80042119d0:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	int64_t ret = 0;
  80042119d4:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042119db:	00 
	uint8_t b;
	int shift = 0;
  80042119dc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)

	uint8_t *src = *dp;
  80042119e3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042119e7:	48 8b 00             	mov    (%rax),%rax
  80042119ea:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  80042119ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042119f2:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042119f6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  80042119fa:	0f b6 00             	movzbl (%rax),%eax
  80042119fd:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  8004211a00:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211a04:	83 e0 7f             	and    $0x7f,%eax
  8004211a07:	89 c2                	mov    %eax,%edx
  8004211a09:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211a0c:	89 c1                	mov    %eax,%ecx
  8004211a0e:	d3 e2                	shl    %cl,%edx
  8004211a10:	89 d0                	mov    %edx,%eax
  8004211a12:	48 98                	cltq   
  8004211a14:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		shift += 7;
  8004211a18:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  8004211a1c:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211a20:	84 c0                	test   %al,%al
  8004211a22:	78 ca                	js     80042119ee <_dwarf_decode_sleb128+0x26>

	if (shift < 32 && (b & 0x40) != 0)
  8004211a24:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
  8004211a28:	7f 1f                	jg     8004211a49 <_dwarf_decode_sleb128+0x81>
  8004211a2a:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211a2e:	83 e0 40             	and    $0x40,%eax
  8004211a31:	85 c0                	test   %eax,%eax
  8004211a33:	74 14                	je     8004211a49 <_dwarf_decode_sleb128+0x81>
		ret |= (-1 << shift);
  8004211a35:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211a38:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  8004211a3d:	89 c1                	mov    %eax,%ecx
  8004211a3f:	d3 e2                	shl    %cl,%edx
  8004211a41:	89 d0                	mov    %edx,%eax
  8004211a43:	48 98                	cltq   
  8004211a45:	48 09 45 f8          	or     %rax,-0x8(%rbp)

	*dp = src;
  8004211a49:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211a4d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211a51:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004211a54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004211a58:	c9                   	leaveq 
  8004211a59:	c3                   	retq   

0000008004211a5a <_dwarf_decode_uleb128>:

uint64_t
_dwarf_decode_uleb128(uint8_t **dp)
{
  8004211a5a:	55                   	push   %rbp
  8004211a5b:	48 89 e5             	mov    %rsp,%rbp
  8004211a5e:	48 83 ec 28          	sub    $0x28,%rsp
  8004211a62:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	uint64_t ret = 0;
  8004211a66:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004211a6d:	00 
	uint8_t b;
	int shift = 0;
  8004211a6e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)

	uint8_t *src = *dp;
  8004211a75:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211a79:	48 8b 00             	mov    (%rax),%rax
  8004211a7c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  8004211a80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211a84:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211a88:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004211a8c:	0f b6 00             	movzbl (%rax),%eax
  8004211a8f:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  8004211a92:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211a96:	83 e0 7f             	and    $0x7f,%eax
  8004211a99:	89 c2                	mov    %eax,%edx
  8004211a9b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211a9e:	89 c1                	mov    %eax,%ecx
  8004211aa0:	d3 e2                	shl    %cl,%edx
  8004211aa2:	89 d0                	mov    %edx,%eax
  8004211aa4:	48 98                	cltq   
  8004211aa6:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		shift += 7;
  8004211aaa:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  8004211aae:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211ab2:	84 c0                	test   %al,%al
  8004211ab4:	78 ca                	js     8004211a80 <_dwarf_decode_uleb128+0x26>

	*dp = src;
  8004211ab6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211aba:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211abe:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004211ac1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004211ac5:	c9                   	leaveq 
  8004211ac6:	c3                   	retq   

0000008004211ac7 <_dwarf_read_string>:

#define Dwarf_Unsigned uint64_t

char *
_dwarf_read_string(void *data, Dwarf_Unsigned size, uint64_t *offsetp)
{
  8004211ac7:	55                   	push   %rbp
  8004211ac8:	48 89 e5             	mov    %rsp,%rbp
  8004211acb:	48 83 ec 28          	sub    $0x28,%rsp
  8004211acf:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004211ad3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004211ad7:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	char *ret, *src;

	ret = src = (char *) data + *offsetp;
  8004211adb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211adf:	48 8b 10             	mov    (%rax),%rdx
  8004211ae2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211ae6:	48 01 d0             	add    %rdx,%rax
  8004211ae9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004211aed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211af1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	while (*src != '\0' && *offsetp < size) {
  8004211af5:	eb 17                	jmp    8004211b0e <_dwarf_read_string+0x47>
		src++;
  8004211af7:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
		(*offsetp)++;
  8004211afc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211b00:	48 8b 00             	mov    (%rax),%rax
  8004211b03:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211b07:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211b0b:	48 89 10             	mov    %rdx,(%rax)
{
	char *ret, *src;

	ret = src = (char *) data + *offsetp;

	while (*src != '\0' && *offsetp < size) {
  8004211b0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211b12:	0f b6 00             	movzbl (%rax),%eax
  8004211b15:	84 c0                	test   %al,%al
  8004211b17:	74 0d                	je     8004211b26 <_dwarf_read_string+0x5f>
  8004211b19:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211b1d:	48 8b 00             	mov    (%rax),%rax
  8004211b20:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004211b24:	72 d1                	jb     8004211af7 <_dwarf_read_string+0x30>
		src++;
		(*offsetp)++;
	}

	if (*src == '\0' && *offsetp < size)
  8004211b26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211b2a:	0f b6 00             	movzbl (%rax),%eax
  8004211b2d:	84 c0                	test   %al,%al
  8004211b2f:	75 1f                	jne    8004211b50 <_dwarf_read_string+0x89>
  8004211b31:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211b35:	48 8b 00             	mov    (%rax),%rax
  8004211b38:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004211b3c:	73 12                	jae    8004211b50 <_dwarf_read_string+0x89>
		(*offsetp)++;
  8004211b3e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211b42:	48 8b 00             	mov    (%rax),%rax
  8004211b45:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211b49:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211b4d:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004211b50:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
  8004211b54:	c9                   	leaveq 
  8004211b55:	c3                   	retq   

0000008004211b56 <_dwarf_read_block>:

uint8_t *
_dwarf_read_block(void *data, uint64_t *offsetp, uint64_t length)
{
  8004211b56:	55                   	push   %rbp
  8004211b57:	48 89 e5             	mov    %rsp,%rbp
  8004211b5a:	48 83 ec 28          	sub    $0x28,%rsp
  8004211b5e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004211b62:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004211b66:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	uint8_t *ret, *src;

	ret = src = (uint8_t *) data + *offsetp;
  8004211b6a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211b6e:	48 8b 10             	mov    (%rax),%rdx
  8004211b71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211b75:	48 01 d0             	add    %rdx,%rax
  8004211b78:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004211b7c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211b80:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	(*offsetp) += length;
  8004211b84:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211b88:	48 8b 10             	mov    (%rax),%rdx
  8004211b8b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211b8f:	48 01 c2             	add    %rax,%rdx
  8004211b92:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211b96:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004211b99:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
  8004211b9d:	c9                   	leaveq 
  8004211b9e:	c3                   	retq   

0000008004211b9f <_dwarf_elf_get_byte_order>:

Dwarf_Endianness
_dwarf_elf_get_byte_order(void *obj)
{
  8004211b9f:	55                   	push   %rbp
  8004211ba0:	48 89 e5             	mov    %rsp,%rbp
  8004211ba3:	48 83 ec 20          	sub    $0x20,%rsp
  8004211ba7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	Elf *e;

	e = (Elf *)obj;
  8004211bab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211baf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	assert(e != NULL);
  8004211bb3:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004211bb8:	75 35                	jne    8004211bef <_dwarf_elf_get_byte_order+0x50>
  8004211bba:	48 b9 00 08 22 04 80 	movabs $0x8004220800,%rcx
  8004211bc1:	00 00 00 
  8004211bc4:	48 ba 0a 08 22 04 80 	movabs $0x800422080a,%rdx
  8004211bcb:	00 00 00 
  8004211bce:	be 29 01 00 00       	mov    $0x129,%esi
  8004211bd3:	48 bf 1f 08 22 04 80 	movabs $0x800422081f,%rdi
  8004211bda:	00 00 00 
  8004211bdd:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211be2:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004211be9:	00 00 00 
  8004211bec:	41 ff d0             	callq  *%r8

//TODO: Need to check for 64bit here. Because currently Elf header for
//      64bit doesn't have any memeber e_ident. But need to see what is
//      similar in 64bit.
	switch (e->e_ident[EI_DATA]) {
  8004211bef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211bf3:	0f b6 40 05          	movzbl 0x5(%rax),%eax
  8004211bf7:	0f b6 c0             	movzbl %al,%eax
  8004211bfa:	83 f8 02             	cmp    $0x2,%eax
  8004211bfd:	75 07                	jne    8004211c06 <_dwarf_elf_get_byte_order+0x67>
	case ELFDATA2MSB:
		return (DW_OBJECT_MSB);
  8004211bff:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211c04:	eb 05                	jmp    8004211c0b <_dwarf_elf_get_byte_order+0x6c>

	case ELFDATA2LSB:
	case ELFDATANONE:
	default:
		return (DW_OBJECT_LSB);
  8004211c06:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
  8004211c0b:	c9                   	leaveq 
  8004211c0c:	c3                   	retq   

0000008004211c0d <_dwarf_elf_get_pointer_size>:

Dwarf_Small
_dwarf_elf_get_pointer_size(void *obj)
{
  8004211c0d:	55                   	push   %rbp
  8004211c0e:	48 89 e5             	mov    %rsp,%rbp
  8004211c11:	48 83 ec 20          	sub    $0x20,%rsp
  8004211c15:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	Elf *e;

	e = (Elf *) obj;
  8004211c19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211c1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	assert(e != NULL);
  8004211c21:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004211c26:	75 35                	jne    8004211c5d <_dwarf_elf_get_pointer_size+0x50>
  8004211c28:	48 b9 00 08 22 04 80 	movabs $0x8004220800,%rcx
  8004211c2f:	00 00 00 
  8004211c32:	48 ba 0a 08 22 04 80 	movabs $0x800422080a,%rdx
  8004211c39:	00 00 00 
  8004211c3c:	be 3f 01 00 00       	mov    $0x13f,%esi
  8004211c41:	48 bf 1f 08 22 04 80 	movabs $0x800422081f,%rdi
  8004211c48:	00 00 00 
  8004211c4b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211c50:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004211c57:	00 00 00 
  8004211c5a:	41 ff d0             	callq  *%r8

	if (e->e_ident[4] == ELFCLASS32)
  8004211c5d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211c61:	0f b6 40 04          	movzbl 0x4(%rax),%eax
  8004211c65:	3c 01                	cmp    $0x1,%al
  8004211c67:	75 07                	jne    8004211c70 <_dwarf_elf_get_pointer_size+0x63>
		return (4);
  8004211c69:	b8 04 00 00 00       	mov    $0x4,%eax
  8004211c6e:	eb 05                	jmp    8004211c75 <_dwarf_elf_get_pointer_size+0x68>
	else
		return (8);
  8004211c70:	b8 08 00 00 00       	mov    $0x8,%eax
}
  8004211c75:	c9                   	leaveq 
  8004211c76:	c3                   	retq   

0000008004211c77 <_dwarf_init>:

//Return 0 on success
int _dwarf_init(Dwarf_Debug dbg, void *obj)
{
  8004211c77:	55                   	push   %rbp
  8004211c78:	48 89 e5             	mov    %rsp,%rbp
  8004211c7b:	53                   	push   %rbx
  8004211c7c:	48 83 ec 18          	sub    $0x18,%rsp
  8004211c80:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004211c84:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	memset(dbg, 0, sizeof(struct _Dwarf_Debug));
  8004211c88:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211c8c:	ba 60 00 00 00       	mov    $0x60,%edx
  8004211c91:	be 00 00 00 00       	mov    $0x0,%esi
  8004211c96:	48 89 c7             	mov    %rax,%rdi
  8004211c99:	48 b8 37 0e 21 04 80 	movabs $0x8004210e37,%rax
  8004211ca0:	00 00 00 
  8004211ca3:	ff d0                	callq  *%rax
	dbg->curr_off_dbginfo = 0;
  8004211ca5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211ca9:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	dbg->dbg_info_size = 0;
  8004211cb0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211cb4:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  8004211cbb:	00 
	dbg->dbg_pointer_size = _dwarf_elf_get_pointer_size(obj); 
  8004211cbc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211cc0:	48 89 c7             	mov    %rax,%rdi
  8004211cc3:	48 b8 0d 1c 21 04 80 	movabs $0x8004211c0d,%rax
  8004211cca:	00 00 00 
  8004211ccd:	ff d0                	callq  *%rax
  8004211ccf:	0f b6 d0             	movzbl %al,%edx
  8004211cd2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211cd6:	89 50 28             	mov    %edx,0x28(%rax)

	if (_dwarf_elf_get_byte_order(obj) == DW_OBJECT_MSB) {
  8004211cd9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211cdd:	48 89 c7             	mov    %rax,%rdi
  8004211ce0:	48 b8 9f 1b 21 04 80 	movabs $0x8004211b9f,%rax
  8004211ce7:	00 00 00 
  8004211cea:	ff d0                	callq  *%rax
  8004211cec:	85 c0                	test   %eax,%eax
  8004211cee:	75 26                	jne    8004211d16 <_dwarf_init+0x9f>
		dbg->read = _dwarf_read_msb;
  8004211cf0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211cf4:	48 b9 44 15 21 04 80 	movabs $0x8004211544,%rcx
  8004211cfb:	00 00 00 
  8004211cfe:	48 89 48 18          	mov    %rcx,0x18(%rax)
		dbg->decode = _dwarf_decode_msb;
  8004211d02:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211d06:	48 bb f6 16 21 04 80 	movabs $0x80042116f6,%rbx
  8004211d0d:	00 00 00 
  8004211d10:	48 89 58 20          	mov    %rbx,0x20(%rax)
  8004211d14:	eb 24                	jmp    8004211d3a <_dwarf_init+0xc3>
	} else {
		dbg->read = _dwarf_read_lsb;
  8004211d16:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211d1a:	48 b9 f7 12 21 04 80 	movabs $0x80042112f7,%rcx
  8004211d21:	00 00 00 
  8004211d24:	48 89 48 18          	mov    %rcx,0x18(%rax)
		dbg->decode = _dwarf_decode_lsb;
  8004211d28:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211d2c:	48 be 23 14 21 04 80 	movabs $0x8004211423,%rsi
  8004211d33:	00 00 00 
  8004211d36:	48 89 70 20          	mov    %rsi,0x20(%rax)
	}
	_dwarf_frame_params_init(dbg);
  8004211d3a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211d3e:	48 89 c7             	mov    %rax,%rdi
  8004211d41:	48 b8 44 32 21 04 80 	movabs $0x8004213244,%rax
  8004211d48:	00 00 00 
  8004211d4b:	ff d0                	callq  *%rax
	return 0;
  8004211d4d:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004211d52:	48 83 c4 18          	add    $0x18,%rsp
  8004211d56:	5b                   	pop    %rbx
  8004211d57:	5d                   	pop    %rbp
  8004211d58:	c3                   	retq   

0000008004211d59 <_get_next_cu>:

//Return 0 on success
int _get_next_cu(Dwarf_Debug dbg, Dwarf_CU *cu)
{
  8004211d59:	55                   	push   %rbp
  8004211d5a:	48 89 e5             	mov    %rsp,%rbp
  8004211d5d:	48 83 ec 20          	sub    $0x20,%rsp
  8004211d61:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004211d65:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	uint32_t length;
	uint64_t offset;
	uint8_t dwarf_size;

	if(dbg->curr_off_dbginfo > dbg->dbg_info_size)
  8004211d69:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211d6d:	48 8b 10             	mov    (%rax),%rdx
  8004211d70:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211d74:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004211d78:	48 39 c2             	cmp    %rax,%rdx
  8004211d7b:	76 0a                	jbe    8004211d87 <_get_next_cu+0x2e>
		return -1;
  8004211d7d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004211d82:	e9 6b 01 00 00       	jmpq   8004211ef2 <_get_next_cu+0x199>

	offset = dbg->curr_off_dbginfo;
  8004211d87:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211d8b:	48 8b 00             	mov    (%rax),%rax
  8004211d8e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	cu->cu_offset = offset;
  8004211d92:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004211d96:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211d9a:	48 89 50 30          	mov    %rdx,0x30(%rax)

	length = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset,4);
  8004211d9e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211da2:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211da6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211daa:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  8004211dae:	48 89 d1             	mov    %rdx,%rcx
  8004211db1:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004211db5:	ba 04 00 00 00       	mov    $0x4,%edx
  8004211dba:	48 89 cf             	mov    %rcx,%rdi
  8004211dbd:	ff d0                	callq  *%rax
  8004211dbf:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if (length == 0xffffffff) {
  8004211dc2:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
  8004211dc6:	75 2a                	jne    8004211df2 <_get_next_cu+0x99>
		length = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, 8);
  8004211dc8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211dcc:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211dd0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211dd4:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  8004211dd8:	48 89 d1             	mov    %rdx,%rcx
  8004211ddb:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004211ddf:	ba 08 00 00 00       	mov    $0x8,%edx
  8004211de4:	48 89 cf             	mov    %rcx,%rdi
  8004211de7:	ff d0                	callq  *%rax
  8004211de9:	89 45 fc             	mov    %eax,-0x4(%rbp)
		dwarf_size = 8;
  8004211dec:	c6 45 fb 08          	movb   $0x8,-0x5(%rbp)
  8004211df0:	eb 04                	jmp    8004211df6 <_get_next_cu+0x9d>
	} else {
		dwarf_size = 4;
  8004211df2:	c6 45 fb 04          	movb   $0x4,-0x5(%rbp)
	}

	cu->cu_dwarf_size = dwarf_size;
  8004211df6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211dfa:	0f b6 55 fb          	movzbl -0x5(%rbp),%edx
  8004211dfe:	88 50 19             	mov    %dl,0x19(%rax)
	 if (length > ds->ds_size - offset) {
	 return (DW_DLE_CU_LENGTH_ERROR);
	 }*/

	/* Compute the offset to the next compilation unit: */
	dbg->curr_off_dbginfo = offset + length;
  8004211e01:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004211e04:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211e08:	48 01 c2             	add    %rax,%rdx
  8004211e0b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211e0f:	48 89 10             	mov    %rdx,(%rax)
	cu->cu_next_offset   = dbg->curr_off_dbginfo;
  8004211e12:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211e16:	48 8b 10             	mov    (%rax),%rdx
  8004211e19:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211e1d:	48 89 50 20          	mov    %rdx,0x20(%rax)

	/* Initialise the compilation unit. */
	cu->cu_length = (uint64_t)length;
  8004211e21:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004211e24:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211e28:	48 89 10             	mov    %rdx,(%rax)

	cu->cu_length_size   = (dwarf_size == 4 ? 4 : 12);
  8004211e2b:	80 7d fb 04          	cmpb   $0x4,-0x5(%rbp)
  8004211e2f:	75 07                	jne    8004211e38 <_get_next_cu+0xdf>
  8004211e31:	b8 04 00 00 00       	mov    $0x4,%eax
  8004211e36:	eb 05                	jmp    8004211e3d <_get_next_cu+0xe4>
  8004211e38:	b8 0c 00 00 00       	mov    $0xc,%eax
  8004211e3d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004211e41:	88 42 18             	mov    %al,0x18(%rdx)
	cu->version              = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, 2);
  8004211e44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211e48:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211e4c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211e50:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  8004211e54:	48 89 d1             	mov    %rdx,%rcx
  8004211e57:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004211e5b:	ba 02 00 00 00       	mov    $0x2,%edx
  8004211e60:	48 89 cf             	mov    %rcx,%rdi
  8004211e63:	ff d0                	callq  *%rax
  8004211e65:	89 c2                	mov    %eax,%edx
  8004211e67:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211e6b:	66 89 50 08          	mov    %dx,0x8(%rax)
	cu->debug_abbrev_offset  = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, dwarf_size);
  8004211e6f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211e73:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211e77:	0f b6 55 fb          	movzbl -0x5(%rbp),%edx
  8004211e7b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211e7f:	48 8b 49 08          	mov    0x8(%rcx),%rcx
  8004211e83:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004211e87:	48 89 cf             	mov    %rcx,%rdi
  8004211e8a:	ff d0                	callq  *%rax
  8004211e8c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004211e90:	48 89 42 10          	mov    %rax,0x10(%rdx)
	//cu->cu_abbrev_offset_cur = cu->cu_abbrev_offset;
	cu->addr_size  = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, 1);
  8004211e94:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211e98:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211e9c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211ea0:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  8004211ea4:	48 89 d1             	mov    %rdx,%rcx
  8004211ea7:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004211eab:	ba 01 00 00 00       	mov    $0x1,%edx
  8004211eb0:	48 89 cf             	mov    %rcx,%rdi
  8004211eb3:	ff d0                	callq  *%rax
  8004211eb5:	89 c2                	mov    %eax,%edx
  8004211eb7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211ebb:	88 50 0a             	mov    %dl,0xa(%rax)

	if (cu->version < 2 || cu->version > 4) {
  8004211ebe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211ec2:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004211ec6:	66 83 f8 01          	cmp    $0x1,%ax
  8004211eca:	76 0e                	jbe    8004211eda <_get_next_cu+0x181>
  8004211ecc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211ed0:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004211ed4:	66 83 f8 04          	cmp    $0x4,%ax
  8004211ed8:	76 07                	jbe    8004211ee1 <_get_next_cu+0x188>
		return -1;
  8004211eda:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004211edf:	eb 11                	jmp    8004211ef2 <_get_next_cu+0x199>
	}

	cu->cu_die_offset = offset;
  8004211ee1:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004211ee5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211ee9:	48 89 50 28          	mov    %rdx,0x28(%rax)

	return 0;
  8004211eed:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004211ef2:	c9                   	leaveq 
  8004211ef3:	c3                   	retq   

0000008004211ef4 <print_cu>:

void print_cu(Dwarf_CU cu)
{
  8004211ef4:	55                   	push   %rbp
  8004211ef5:	48 89 e5             	mov    %rsp,%rbp
	cprintf("%ld---%du--%d\n",cu.cu_length,cu.version,cu.addr_size);
  8004211ef8:	0f b6 45 1a          	movzbl 0x1a(%rbp),%eax
  8004211efc:	0f b6 c8             	movzbl %al,%ecx
  8004211eff:	0f b7 45 18          	movzwl 0x18(%rbp),%eax
  8004211f03:	0f b7 d0             	movzwl %ax,%edx
  8004211f06:	48 8b 45 10          	mov    0x10(%rbp),%rax
  8004211f0a:	48 89 c6             	mov    %rax,%rsi
  8004211f0d:	48 bf 32 08 22 04 80 	movabs $0x8004220832,%rdi
  8004211f14:	00 00 00 
  8004211f17:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211f1c:	49 b8 83 9c 20 04 80 	movabs $0x8004209c83,%r8
  8004211f23:	00 00 00 
  8004211f26:	41 ff d0             	callq  *%r8
}
  8004211f29:	5d                   	pop    %rbp
  8004211f2a:	c3                   	retq   

0000008004211f2b <_dwarf_abbrev_parse>:

//Return 0 on success
int
_dwarf_abbrev_parse(Dwarf_Debug dbg, Dwarf_CU cu, Dwarf_Unsigned *offset,
		    Dwarf_Abbrev *abp, Dwarf_Section *ds)
{
  8004211f2b:	55                   	push   %rbp
  8004211f2c:	48 89 e5             	mov    %rsp,%rbp
  8004211f2f:	48 83 ec 60          	sub    $0x60,%rsp
  8004211f33:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  8004211f37:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  8004211f3b:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  8004211f3f:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
	uint64_t tag;
	uint8_t children;
	uint64_t abbr_addr;
	int ret;

	assert(abp != NULL);
  8004211f43:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
  8004211f48:	75 35                	jne    8004211f7f <_dwarf_abbrev_parse+0x54>
  8004211f4a:	48 b9 41 08 22 04 80 	movabs $0x8004220841,%rcx
  8004211f51:	00 00 00 
  8004211f54:	48 ba 0a 08 22 04 80 	movabs $0x800422080a,%rdx
  8004211f5b:	00 00 00 
  8004211f5e:	be a4 01 00 00       	mov    $0x1a4,%esi
  8004211f63:	48 bf 1f 08 22 04 80 	movabs $0x800422081f,%rdi
  8004211f6a:	00 00 00 
  8004211f6d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211f72:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004211f79:	00 00 00 
  8004211f7c:	41 ff d0             	callq  *%r8
	assert(ds != NULL);
  8004211f7f:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
  8004211f84:	75 35                	jne    8004211fbb <_dwarf_abbrev_parse+0x90>
  8004211f86:	48 b9 4d 08 22 04 80 	movabs $0x800422084d,%rcx
  8004211f8d:	00 00 00 
  8004211f90:	48 ba 0a 08 22 04 80 	movabs $0x800422080a,%rdx
  8004211f97:	00 00 00 
  8004211f9a:	be a5 01 00 00       	mov    $0x1a5,%esi
  8004211f9f:	48 bf 1f 08 22 04 80 	movabs $0x800422081f,%rdi
  8004211fa6:	00 00 00 
  8004211fa9:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211fae:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004211fb5:	00 00 00 
  8004211fb8:	41 ff d0             	callq  *%r8

	if (*offset >= ds->ds_size)
  8004211fbb:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004211fbf:	48 8b 10             	mov    (%rax),%rdx
  8004211fc2:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004211fc6:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211fca:	48 39 c2             	cmp    %rax,%rdx
  8004211fcd:	72 0a                	jb     8004211fd9 <_dwarf_abbrev_parse+0xae>
        	return (DW_DLE_NO_ENTRY);
  8004211fcf:	b8 04 00 00 00       	mov    $0x4,%eax
  8004211fd4:	e9 d3 01 00 00       	jmpq   80042121ac <_dwarf_abbrev_parse+0x281>

	aboff = *offset;
  8004211fd9:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004211fdd:	48 8b 00             	mov    (%rax),%rax
  8004211fe0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	abbr_addr = (uint64_t)ds->ds_data; //(uint64_t)((uint8_t *)elf_base_ptr + ds->sh_offset);
  8004211fe4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004211fe8:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004211fec:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	entry = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  8004211ff0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211ff4:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004211ff8:	48 89 d6             	mov    %rdx,%rsi
  8004211ffb:	48 89 c7             	mov    %rax,%rdi
  8004211ffe:	48 b8 49 19 21 04 80 	movabs $0x8004211949,%rax
  8004212005:	00 00 00 
  8004212008:	ff d0                	callq  *%rax
  800421200a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (entry == 0) {
  800421200e:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004212013:	75 15                	jne    800421202a <_dwarf_abbrev_parse+0xff>
		/* Last entry. */
		//Need to make connection from below function
		abp->ab_entry = 0;
  8004212015:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004212019:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		return DW_DLE_NONE;
  8004212020:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212025:	e9 82 01 00 00       	jmpq   80042121ac <_dwarf_abbrev_parse+0x281>
	}

	tag = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  800421202a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421202e:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004212032:	48 89 d6             	mov    %rdx,%rsi
  8004212035:	48 89 c7             	mov    %rax,%rdi
  8004212038:	48 b8 49 19 21 04 80 	movabs $0x8004211949,%rax
  800421203f:	00 00 00 
  8004212042:	ff d0                	callq  *%rax
  8004212044:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	children = dbg->read((uint8_t *)abbr_addr, offset, 1);
  8004212048:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421204c:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004212050:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  8004212054:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004212058:	ba 01 00 00 00       	mov    $0x1,%edx
  800421205d:	48 89 cf             	mov    %rcx,%rdi
  8004212060:	ff d0                	callq  *%rax
  8004212062:	88 45 df             	mov    %al,-0x21(%rbp)

	abp->ab_entry    = entry;
  8004212065:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004212069:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421206d:	48 89 10             	mov    %rdx,(%rax)
	abp->ab_tag      = tag;
  8004212070:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004212074:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004212078:	48 89 50 08          	mov    %rdx,0x8(%rax)
	abp->ab_children = children;
  800421207c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004212080:	0f b6 55 df          	movzbl -0x21(%rbp),%edx
  8004212084:	88 50 10             	mov    %dl,0x10(%rax)
	abp->ab_offset   = aboff;
  8004212087:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421208b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421208f:	48 89 50 18          	mov    %rdx,0x18(%rax)
	abp->ab_length   = 0;    /* fill in later. */
  8004212093:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004212097:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
  800421209e:	00 
	abp->ab_atnum    = 0;
  800421209f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042120a3:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
  80042120aa:	00 

	/* Parse attribute definitions. */
	do {
		adoff = *offset;
  80042120ab:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042120af:	48 8b 00             	mov    (%rax),%rax
  80042120b2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		attr = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  80042120b6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042120ba:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  80042120be:	48 89 d6             	mov    %rdx,%rsi
  80042120c1:	48 89 c7             	mov    %rax,%rdi
  80042120c4:	48 b8 49 19 21 04 80 	movabs $0x8004211949,%rax
  80042120cb:	00 00 00 
  80042120ce:	ff d0                	callq  *%rax
  80042120d0:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
		form = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  80042120d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042120d8:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  80042120dc:	48 89 d6             	mov    %rdx,%rsi
  80042120df:	48 89 c7             	mov    %rax,%rdi
  80042120e2:	48 b8 49 19 21 04 80 	movabs $0x8004211949,%rax
  80042120e9:	00 00 00 
  80042120ec:	ff d0                	callq  *%rax
  80042120ee:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
		if (attr != 0)
  80042120f2:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  80042120f7:	0f 84 89 00 00 00    	je     8004212186 <_dwarf_abbrev_parse+0x25b>
		{
			/* Initialise the attribute definition structure. */
			abp->ab_attrdef[abp->ab_atnum].ad_attrib = attr;
  80042120fd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004212101:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004212105:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  8004212109:	48 89 d0             	mov    %rdx,%rax
  800421210c:	48 01 c0             	add    %rax,%rax
  800421210f:	48 01 d0             	add    %rdx,%rax
  8004212112:	48 c1 e0 03          	shl    $0x3,%rax
  8004212116:	48 01 c8             	add    %rcx,%rax
  8004212119:	48 8d 50 30          	lea    0x30(%rax),%rdx
  800421211d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004212121:	48 89 02             	mov    %rax,(%rdx)
			abp->ab_attrdef[abp->ab_atnum].ad_form   = form;
  8004212124:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004212128:	48 8b 50 28          	mov    0x28(%rax),%rdx
  800421212c:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  8004212130:	48 89 d0             	mov    %rdx,%rax
  8004212133:	48 01 c0             	add    %rax,%rax
  8004212136:	48 01 d0             	add    %rdx,%rax
  8004212139:	48 c1 e0 03          	shl    $0x3,%rax
  800421213d:	48 01 c8             	add    %rcx,%rax
  8004212140:	48 8d 50 38          	lea    0x38(%rax),%rdx
  8004212144:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004212148:	48 89 02             	mov    %rax,(%rdx)
			abp->ab_attrdef[abp->ab_atnum].ad_offset = adoff;
  800421214b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421214f:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004212153:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  8004212157:	48 89 d0             	mov    %rdx,%rax
  800421215a:	48 01 c0             	add    %rax,%rax
  800421215d:	48 01 d0             	add    %rdx,%rax
  8004212160:	48 c1 e0 03          	shl    $0x3,%rax
  8004212164:	48 01 c8             	add    %rcx,%rax
  8004212167:	48 8d 50 40          	lea    0x40(%rax),%rdx
  800421216b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421216f:	48 89 02             	mov    %rax,(%rdx)
			abp->ab_atnum++;
  8004212172:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004212176:	48 8b 40 28          	mov    0x28(%rax),%rax
  800421217a:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800421217e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004212182:	48 89 50 28          	mov    %rdx,0x28(%rax)
		}
	} while (attr != 0);
  8004212186:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800421218b:	0f 85 1a ff ff ff    	jne    80042120ab <_dwarf_abbrev_parse+0x180>

	//(*abp)->ab_length = *offset - aboff;
	abp->ab_length = (uint64_t)(*offset - aboff);
  8004212191:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004212195:	48 8b 00             	mov    (%rax),%rax
  8004212198:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
  800421219c:	48 89 c2             	mov    %rax,%rdx
  800421219f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042121a3:	48 89 50 20          	mov    %rdx,0x20(%rax)

	return DW_DLV_OK;
  80042121a7:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042121ac:	c9                   	leaveq 
  80042121ad:	c3                   	retq   

00000080042121ae <_dwarf_abbrev_find>:

//Return 0 on success
int
_dwarf_abbrev_find(Dwarf_Debug dbg, Dwarf_CU cu, uint64_t entry, Dwarf_Abbrev *abp)
{
  80042121ae:	55                   	push   %rbp
  80042121af:	48 89 e5             	mov    %rsp,%rbp
  80042121b2:	48 83 ec 70          	sub    $0x70,%rsp
  80042121b6:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042121ba:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  80042121be:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	Dwarf_Section *ds;
	uint64_t offset;
	int ret;

	if (entry == 0)
  80042121c2:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  80042121c7:	75 0a                	jne    80042121d3 <_dwarf_abbrev_find+0x25>
	{
		return (DW_DLE_NO_ENTRY);
  80042121c9:	b8 04 00 00 00       	mov    $0x4,%eax
  80042121ce:	e9 0a 01 00 00       	jmpq   80042122dd <_dwarf_abbrev_find+0x12f>
	}

	/* Load and search the abbrev table. */
	ds = _dwarf_find_section(".debug_abbrev");
  80042121d3:	48 bf 58 08 22 04 80 	movabs $0x8004220858,%rdi
  80042121da:	00 00 00 
  80042121dd:	48 b8 0e 65 21 04 80 	movabs $0x800421650e,%rax
  80042121e4:	00 00 00 
  80042121e7:	ff d0                	callq  *%rax
  80042121e9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	assert(ds != NULL);
  80042121ed:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042121f2:	75 35                	jne    8004212229 <_dwarf_abbrev_find+0x7b>
  80042121f4:	48 b9 4d 08 22 04 80 	movabs $0x800422084d,%rcx
  80042121fb:	00 00 00 
  80042121fe:	48 ba 0a 08 22 04 80 	movabs $0x800422080a,%rdx
  8004212205:	00 00 00 
  8004212208:	be e5 01 00 00       	mov    $0x1e5,%esi
  800421220d:	48 bf 1f 08 22 04 80 	movabs $0x800422081f,%rdi
  8004212214:	00 00 00 
  8004212217:	b8 00 00 00 00       	mov    $0x0,%eax
  800421221c:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004212223:	00 00 00 
  8004212226:	41 ff d0             	callq  *%r8

	//TODO: We are starting offset from 0, however libdwarf logic
	//      is keeping a counter for current offset. Ok. let use
	//      that. I relent, but this will be done in Phase 2. :)
	//offset = 0; //cu->cu_abbrev_offset_cur;
	offset = cu.debug_abbrev_offset; //cu->cu_abbrev_offset_cur;
  8004212229:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800421222d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	while (offset < ds->ds_size) {
  8004212231:	e9 8d 00 00 00       	jmpq   80042122c3 <_dwarf_abbrev_find+0x115>
		ret = _dwarf_abbrev_parse(dbg, cu, &offset, abp, ds);
  8004212236:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  800421223a:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421223e:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
  8004212242:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004212246:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  800421224a:	48 89 3c 24          	mov    %rdi,(%rsp)
  800421224e:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
  8004212252:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  8004212257:	48 8b 7d 20          	mov    0x20(%rbp),%rdi
  800421225b:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  8004212260:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
  8004212264:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  8004212269:	48 8b 7d 30          	mov    0x30(%rbp),%rdi
  800421226d:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  8004212272:	48 8b 7d 38          	mov    0x38(%rbp),%rdi
  8004212276:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  800421227b:	48 8b 7d 40          	mov    0x40(%rbp),%rdi
  800421227f:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  8004212284:	48 89 c7             	mov    %rax,%rdi
  8004212287:	48 b8 2b 1f 21 04 80 	movabs $0x8004211f2b,%rax
  800421228e:	00 00 00 
  8004212291:	ff d0                	callq  *%rax
  8004212293:	89 45 f4             	mov    %eax,-0xc(%rbp)
		if (ret != DW_DLE_NONE)
  8004212296:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  800421229a:	74 05                	je     80042122a1 <_dwarf_abbrev_find+0xf3>
			return (ret);
  800421229c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421229f:	eb 3c                	jmp    80042122dd <_dwarf_abbrev_find+0x12f>
		if (abp->ab_entry == entry) {
  80042122a1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042122a5:	48 8b 00             	mov    (%rax),%rax
  80042122a8:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  80042122ac:	75 07                	jne    80042122b5 <_dwarf_abbrev_find+0x107>
			//cu->cu_abbrev_offset_cur = offset;
			return DW_DLE_NONE;
  80042122ae:	b8 00 00 00 00       	mov    $0x0,%eax
  80042122b3:	eb 28                	jmp    80042122dd <_dwarf_abbrev_find+0x12f>
		}
		if (abp->ab_entry == 0) {
  80042122b5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042122b9:	48 8b 00             	mov    (%rax),%rax
  80042122bc:	48 85 c0             	test   %rax,%rax
  80042122bf:	75 02                	jne    80042122c3 <_dwarf_abbrev_find+0x115>
			//cu->cu_abbrev_offset_cur = offset;
			//cu->cu_abbrev_loaded = 1;
			break;
  80042122c1:	eb 15                	jmp    80042122d8 <_dwarf_abbrev_find+0x12a>
	//TODO: We are starting offset from 0, however libdwarf logic
	//      is keeping a counter for current offset. Ok. let use
	//      that. I relent, but this will be done in Phase 2. :)
	//offset = 0; //cu->cu_abbrev_offset_cur;
	offset = cu.debug_abbrev_offset; //cu->cu_abbrev_offset_cur;
	while (offset < ds->ds_size) {
  80042122c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042122c7:	48 8b 50 18          	mov    0x18(%rax),%rdx
  80042122cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042122cf:	48 39 c2             	cmp    %rax,%rdx
  80042122d2:	0f 87 5e ff ff ff    	ja     8004212236 <_dwarf_abbrev_find+0x88>
			//cu->cu_abbrev_loaded = 1;
			break;
		}
	}

	return DW_DLE_NO_ENTRY;
  80042122d8:	b8 04 00 00 00       	mov    $0x4,%eax
}
  80042122dd:	c9                   	leaveq 
  80042122de:	c3                   	retq   

00000080042122df <_dwarf_attr_init>:

//Return 0 on success
int
_dwarf_attr_init(Dwarf_Debug dbg, uint64_t *offsetp, Dwarf_CU *cu, Dwarf_Die *ret_die, Dwarf_AttrDef *ad,
		 uint64_t form, int indirect)
{
  80042122df:	55                   	push   %rbp
  80042122e0:	48 89 e5             	mov    %rsp,%rbp
  80042122e3:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
  80042122ea:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  80042122f1:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
  80042122f8:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  80042122ff:	48 89 8d 50 ff ff ff 	mov    %rcx,-0xb0(%rbp)
  8004212306:	4c 89 85 48 ff ff ff 	mov    %r8,-0xb8(%rbp)
  800421230d:	4c 89 8d 40 ff ff ff 	mov    %r9,-0xc0(%rbp)
	struct _Dwarf_Attribute atref;
	Dwarf_Section *str;
	int ret;
	Dwarf_Section *ds = _dwarf_find_section(".debug_info");
  8004212314:	48 bf 66 08 22 04 80 	movabs $0x8004220866,%rdi
  800421231b:	00 00 00 
  800421231e:	48 b8 0e 65 21 04 80 	movabs $0x800421650e,%rax
  8004212325:	00 00 00 
  8004212328:	ff d0                	callq  *%rax
  800421232a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	uint8_t *ds_data = (uint8_t *)ds->ds_data; //(uint8_t *)dbg->dbg_info_offset_elf;
  800421232e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004212332:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004212336:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	uint8_t dwarf_size = cu->cu_dwarf_size;
  800421233a:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004212341:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  8004212345:	88 45 e7             	mov    %al,-0x19(%rbp)

	ret = DW_DLE_NONE;
  8004212348:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	memset(&atref, 0, sizeof(atref));
  800421234f:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  8004212356:	ba 60 00 00 00       	mov    $0x60,%edx
  800421235b:	be 00 00 00 00       	mov    $0x0,%esi
  8004212360:	48 89 c7             	mov    %rax,%rdi
  8004212363:	48 b8 37 0e 21 04 80 	movabs $0x8004210e37,%rax
  800421236a:	00 00 00 
  800421236d:	ff d0                	callq  *%rax
	atref.at_die = ret_die;
  800421236f:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  8004212376:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
	atref.at_attrib = ad->ad_attrib;
  800421237d:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004212384:	48 8b 00             	mov    (%rax),%rax
  8004212387:	48 89 45 80          	mov    %rax,-0x80(%rbp)
	atref.at_form = ad->ad_form;
  800421238b:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004212392:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004212396:	48 89 45 88          	mov    %rax,-0x78(%rbp)
	atref.at_indirect = indirect;
  800421239a:	8b 45 10             	mov    0x10(%rbp),%eax
  800421239d:	89 45 90             	mov    %eax,-0x70(%rbp)
	atref.at_ld = NULL;
  80042123a0:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
  80042123a7:	00 

	switch (form) {
  80042123a8:	48 83 bd 40 ff ff ff 	cmpq   $0x20,-0xc0(%rbp)
  80042123af:	20 
  80042123b0:	0f 87 82 04 00 00    	ja     8004212838 <_dwarf_attr_init+0x559>
  80042123b6:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  80042123bd:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042123c4:	00 
  80042123c5:	48 b8 90 08 22 04 80 	movabs $0x8004220890,%rax
  80042123cc:	00 00 00 
  80042123cf:	48 01 d0             	add    %rdx,%rax
  80042123d2:	48 8b 00             	mov    (%rax),%rax
  80042123d5:	ff e0                	jmpq   *%rax
	case DW_FORM_addr:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, cu->addr_size);
  80042123d7:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042123de:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042123e2:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  80042123e9:	0f b6 52 0a          	movzbl 0xa(%rdx),%edx
  80042123ed:	0f b6 d2             	movzbl %dl,%edx
  80042123f0:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042123f7:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042123fb:	48 89 cf             	mov    %rcx,%rdi
  80042123fe:	ff d0                	callq  *%rax
  8004212400:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004212404:	e9 37 04 00 00       	jmpq   8004212840 <_dwarf_attr_init+0x561>
	case DW_FORM_block:
	case DW_FORM_exprloc:
		atref.u[0].u64 = _dwarf_read_uleb128(ds_data, offsetp);
  8004212409:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004212410:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212414:	48 89 d6             	mov    %rdx,%rsi
  8004212417:	48 89 c7             	mov    %rax,%rdi
  800421241a:	48 b8 49 19 21 04 80 	movabs $0x8004211949,%rax
  8004212421:	00 00 00 
  8004212424:	ff d0                	callq  *%rax
  8004212426:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  800421242a:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  800421242e:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  8004212435:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212439:	48 89 ce             	mov    %rcx,%rsi
  800421243c:	48 89 c7             	mov    %rax,%rdi
  800421243f:	48 b8 56 1b 21 04 80 	movabs $0x8004211b56,%rax
  8004212446:	00 00 00 
  8004212449:	ff d0                	callq  *%rax
  800421244b:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  800421244f:	e9 ec 03 00 00       	jmpq   8004212840 <_dwarf_attr_init+0x561>
	case DW_FORM_block1:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 1);
  8004212454:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800421245b:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421245f:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004212466:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800421246a:	ba 01 00 00 00       	mov    $0x1,%edx
  800421246f:	48 89 cf             	mov    %rcx,%rdi
  8004212472:	ff d0                	callq  *%rax
  8004212474:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  8004212478:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  800421247c:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  8004212483:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212487:	48 89 ce             	mov    %rcx,%rsi
  800421248a:	48 89 c7             	mov    %rax,%rdi
  800421248d:	48 b8 56 1b 21 04 80 	movabs $0x8004211b56,%rax
  8004212494:	00 00 00 
  8004212497:	ff d0                	callq  *%rax
  8004212499:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  800421249d:	e9 9e 03 00 00       	jmpq   8004212840 <_dwarf_attr_init+0x561>
	case DW_FORM_block2:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 2);
  80042124a2:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042124a9:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042124ad:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042124b4:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042124b8:	ba 02 00 00 00       	mov    $0x2,%edx
  80042124bd:	48 89 cf             	mov    %rcx,%rdi
  80042124c0:	ff d0                	callq  *%rax
  80042124c2:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  80042124c6:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  80042124ca:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  80042124d1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042124d5:	48 89 ce             	mov    %rcx,%rsi
  80042124d8:	48 89 c7             	mov    %rax,%rdi
  80042124db:	48 b8 56 1b 21 04 80 	movabs $0x8004211b56,%rax
  80042124e2:	00 00 00 
  80042124e5:	ff d0                	callq  *%rax
  80042124e7:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  80042124eb:	e9 50 03 00 00       	jmpq   8004212840 <_dwarf_attr_init+0x561>
	case DW_FORM_block4:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 4);
  80042124f0:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042124f7:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042124fb:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004212502:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212506:	ba 04 00 00 00       	mov    $0x4,%edx
  800421250b:	48 89 cf             	mov    %rcx,%rdi
  800421250e:	ff d0                	callq  *%rax
  8004212510:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  8004212514:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004212518:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  800421251f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212523:	48 89 ce             	mov    %rcx,%rsi
  8004212526:	48 89 c7             	mov    %rax,%rdi
  8004212529:	48 b8 56 1b 21 04 80 	movabs $0x8004211b56,%rax
  8004212530:	00 00 00 
  8004212533:	ff d0                	callq  *%rax
  8004212535:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  8004212539:	e9 02 03 00 00       	jmpq   8004212840 <_dwarf_attr_init+0x561>
	case DW_FORM_data1:
	case DW_FORM_flag:
	case DW_FORM_ref1:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 1);
  800421253e:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004212545:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004212549:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004212550:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212554:	ba 01 00 00 00       	mov    $0x1,%edx
  8004212559:	48 89 cf             	mov    %rcx,%rdi
  800421255c:	ff d0                	callq  *%rax
  800421255e:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004212562:	e9 d9 02 00 00       	jmpq   8004212840 <_dwarf_attr_init+0x561>
	case DW_FORM_data2:
	case DW_FORM_ref2:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 2);
  8004212567:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800421256e:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004212572:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004212579:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800421257d:	ba 02 00 00 00       	mov    $0x2,%edx
  8004212582:	48 89 cf             	mov    %rcx,%rdi
  8004212585:	ff d0                	callq  *%rax
  8004212587:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  800421258b:	e9 b0 02 00 00       	jmpq   8004212840 <_dwarf_attr_init+0x561>
	case DW_FORM_data4:
	case DW_FORM_ref4:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 4);
  8004212590:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004212597:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421259b:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042125a2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042125a6:	ba 04 00 00 00       	mov    $0x4,%edx
  80042125ab:	48 89 cf             	mov    %rcx,%rdi
  80042125ae:	ff d0                	callq  *%rax
  80042125b0:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  80042125b4:	e9 87 02 00 00       	jmpq   8004212840 <_dwarf_attr_init+0x561>
	case DW_FORM_data8:
	case DW_FORM_ref8:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 8);
  80042125b9:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042125c0:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042125c4:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042125cb:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042125cf:	ba 08 00 00 00       	mov    $0x8,%edx
  80042125d4:	48 89 cf             	mov    %rcx,%rdi
  80042125d7:	ff d0                	callq  *%rax
  80042125d9:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  80042125dd:	e9 5e 02 00 00       	jmpq   8004212840 <_dwarf_attr_init+0x561>
	case DW_FORM_indirect:
		form = _dwarf_read_uleb128(ds_data, offsetp);
  80042125e2:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  80042125e9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042125ed:	48 89 d6             	mov    %rdx,%rsi
  80042125f0:	48 89 c7             	mov    %rax,%rdi
  80042125f3:	48 b8 49 19 21 04 80 	movabs $0x8004211949,%rax
  80042125fa:	00 00 00 
  80042125fd:	ff d0                	callq  *%rax
  80042125ff:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
		return (_dwarf_attr_init(dbg, offsetp, cu, ret_die, ad, form, 1));
  8004212606:	4c 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%r8
  800421260d:	48 8b bd 48 ff ff ff 	mov    -0xb8(%rbp),%rdi
  8004212614:	48 8b 8d 50 ff ff ff 	mov    -0xb0(%rbp),%rcx
  800421261b:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  8004212622:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004212629:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004212630:	c7 04 24 01 00 00 00 	movl   $0x1,(%rsp)
  8004212637:	4d 89 c1             	mov    %r8,%r9
  800421263a:	49 89 f8             	mov    %rdi,%r8
  800421263d:	48 89 c7             	mov    %rax,%rdi
  8004212640:	48 b8 df 22 21 04 80 	movabs $0x80042122df,%rax
  8004212647:	00 00 00 
  800421264a:	ff d0                	callq  *%rax
  800421264c:	e9 1d 03 00 00       	jmpq   800421296e <_dwarf_attr_init+0x68f>
	case DW_FORM_ref_addr:
		if (cu->version == 2)
  8004212651:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004212658:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421265c:	66 83 f8 02          	cmp    $0x2,%ax
  8004212660:	75 2f                	jne    8004212691 <_dwarf_attr_init+0x3b2>
			atref.u[0].u64 = dbg->read(ds_data, offsetp, cu->addr_size);
  8004212662:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004212669:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421266d:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  8004212674:	0f b6 52 0a          	movzbl 0xa(%rdx),%edx
  8004212678:	0f b6 d2             	movzbl %dl,%edx
  800421267b:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004212682:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212686:	48 89 cf             	mov    %rcx,%rdi
  8004212689:	ff d0                	callq  *%rax
  800421268b:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800421268f:	eb 39                	jmp    80042126ca <_dwarf_attr_init+0x3eb>
		else if (cu->version == 3)
  8004212691:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004212698:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421269c:	66 83 f8 03          	cmp    $0x3,%ax
  80042126a0:	75 28                	jne    80042126ca <_dwarf_attr_init+0x3eb>
			atref.u[0].u64 = dbg->read(ds_data, offsetp, dwarf_size);
  80042126a2:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042126a9:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042126ad:	0f b6 55 e7          	movzbl -0x19(%rbp),%edx
  80042126b1:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042126b8:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042126bc:	48 89 cf             	mov    %rcx,%rdi
  80042126bf:	ff d0                	callq  *%rax
  80042126c1:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  80042126c5:	e9 76 01 00 00       	jmpq   8004212840 <_dwarf_attr_init+0x561>
  80042126ca:	e9 71 01 00 00       	jmpq   8004212840 <_dwarf_attr_init+0x561>
	case DW_FORM_ref_udata:
	case DW_FORM_udata:
		atref.u[0].u64 = _dwarf_read_uleb128(ds_data, offsetp);
  80042126cf:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  80042126d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042126da:	48 89 d6             	mov    %rdx,%rsi
  80042126dd:	48 89 c7             	mov    %rax,%rdi
  80042126e0:	48 b8 49 19 21 04 80 	movabs $0x8004211949,%rax
  80042126e7:	00 00 00 
  80042126ea:	ff d0                	callq  *%rax
  80042126ec:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  80042126f0:	e9 4b 01 00 00       	jmpq   8004212840 <_dwarf_attr_init+0x561>
	case DW_FORM_sdata:
		atref.u[0].s64 = _dwarf_read_sleb128(ds_data, offsetp);
  80042126f5:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  80042126fc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212700:	48 89 d6             	mov    %rdx,%rsi
  8004212703:	48 89 c7             	mov    %rax,%rdi
  8004212706:	48 b8 a5 18 21 04 80 	movabs $0x80042118a5,%rax
  800421270d:	00 00 00 
  8004212710:	ff d0                	callq  *%rax
  8004212712:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004212716:	e9 25 01 00 00       	jmpq   8004212840 <_dwarf_attr_init+0x561>
	case DW_FORM_sec_offset:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, dwarf_size);
  800421271b:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004212722:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004212726:	0f b6 55 e7          	movzbl -0x19(%rbp),%edx
  800421272a:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004212731:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212735:	48 89 cf             	mov    %rcx,%rdi
  8004212738:	ff d0                	callq  *%rax
  800421273a:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  800421273e:	e9 fd 00 00 00       	jmpq   8004212840 <_dwarf_attr_init+0x561>
	case DW_FORM_string:
		atref.u[0].s =(char*) _dwarf_read_string(ds_data, (uint64_t)ds->ds_size, offsetp);
  8004212743:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004212747:	48 8b 48 18          	mov    0x18(%rax),%rcx
  800421274b:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004212752:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212756:	48 89 ce             	mov    %rcx,%rsi
  8004212759:	48 89 c7             	mov    %rax,%rdi
  800421275c:	48 b8 c7 1a 21 04 80 	movabs $0x8004211ac7,%rax
  8004212763:	00 00 00 
  8004212766:	ff d0                	callq  *%rax
  8004212768:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  800421276c:	e9 cf 00 00 00       	jmpq   8004212840 <_dwarf_attr_init+0x561>
	case DW_FORM_strp:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, dwarf_size);
  8004212771:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004212778:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421277c:	0f b6 55 e7          	movzbl -0x19(%rbp),%edx
  8004212780:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004212787:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800421278b:	48 89 cf             	mov    %rcx,%rdi
  800421278e:	ff d0                	callq  *%rax
  8004212790:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		str = _dwarf_find_section(".debug_str");
  8004212794:	48 bf 72 08 22 04 80 	movabs $0x8004220872,%rdi
  800421279b:	00 00 00 
  800421279e:	48 b8 0e 65 21 04 80 	movabs $0x800421650e,%rax
  80042127a5:	00 00 00 
  80042127a8:	ff d0                	callq  *%rax
  80042127aa:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		assert(str != NULL);
  80042127ae:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  80042127b3:	75 35                	jne    80042127ea <_dwarf_attr_init+0x50b>
  80042127b5:	48 b9 7d 08 22 04 80 	movabs $0x800422087d,%rcx
  80042127bc:	00 00 00 
  80042127bf:	48 ba 0a 08 22 04 80 	movabs $0x800422080a,%rdx
  80042127c6:	00 00 00 
  80042127c9:	be 51 02 00 00       	mov    $0x251,%esi
  80042127ce:	48 bf 1f 08 22 04 80 	movabs $0x800422081f,%rdi
  80042127d5:	00 00 00 
  80042127d8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042127dd:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042127e4:	00 00 00 
  80042127e7:	41 ff d0             	callq  *%r8
		//atref.u[1].s = (char *)(elf_base_ptr + str->sh_offset) + atref.u[0].u64;
		atref.u[1].s = (char *)str->ds_data + atref.u[0].u64;
  80042127ea:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042127ee:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042127f2:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042127f6:	48 01 d0             	add    %rdx,%rax
  80042127f9:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  80042127fd:	eb 41                	jmp    8004212840 <_dwarf_attr_init+0x561>
	case DW_FORM_ref_sig8:
		atref.u[0].u64 = 8;
  80042127ff:	48 c7 45 98 08 00 00 	movq   $0x8,-0x68(%rbp)
  8004212806:	00 
		atref.u[1].u8p = (uint8_t*)(_dwarf_read_block(ds_data, offsetp, atref.u[0].u64));
  8004212807:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  800421280b:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  8004212812:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212816:	48 89 ce             	mov    %rcx,%rsi
  8004212819:	48 89 c7             	mov    %rax,%rdi
  800421281c:	48 b8 56 1b 21 04 80 	movabs $0x8004211b56,%rax
  8004212823:	00 00 00 
  8004212826:	ff d0                	callq  *%rax
  8004212828:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  800421282c:	eb 12                	jmp    8004212840 <_dwarf_attr_init+0x561>
	case DW_FORM_flag_present:
		/* This form has no value encoded in the DIE. */
		atref.u[0].u64 = 1;
  800421282e:	48 c7 45 98 01 00 00 	movq   $0x1,-0x68(%rbp)
  8004212835:	00 
		break;
  8004212836:	eb 08                	jmp    8004212840 <_dwarf_attr_init+0x561>
	default:
		//DWARF_SET_ERROR(dbg, error, DW_DLE_ATTR_FORM_BAD);
		ret = DW_DLE_ATTR_FORM_BAD;
  8004212838:	c7 45 fc 0e 00 00 00 	movl   $0xe,-0x4(%rbp)
		break;
  800421283f:	90                   	nop
	}

	if (ret == DW_DLE_NONE) {
  8004212840:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004212844:	0f 85 21 01 00 00    	jne    800421296b <_dwarf_attr_init+0x68c>
		if (form == DW_FORM_block || form == DW_FORM_block1 ||
  800421284a:	48 83 bd 40 ff ff ff 	cmpq   $0x9,-0xc0(%rbp)
  8004212851:	09 
  8004212852:	74 1e                	je     8004212872 <_dwarf_attr_init+0x593>
  8004212854:	48 83 bd 40 ff ff ff 	cmpq   $0xa,-0xc0(%rbp)
  800421285b:	0a 
  800421285c:	74 14                	je     8004212872 <_dwarf_attr_init+0x593>
  800421285e:	48 83 bd 40 ff ff ff 	cmpq   $0x3,-0xc0(%rbp)
  8004212865:	03 
  8004212866:	74 0a                	je     8004212872 <_dwarf_attr_init+0x593>
		    form == DW_FORM_block2 || form == DW_FORM_block4) {
  8004212868:	48 83 bd 40 ff ff ff 	cmpq   $0x4,-0xc0(%rbp)
  800421286f:	04 
  8004212870:	75 10                	jne    8004212882 <_dwarf_attr_init+0x5a3>
			atref.at_block.bl_len = atref.u[0].u64;
  8004212872:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212876:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			atref.at_block.bl_data = atref.u[1].u8p;
  800421287a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421287e:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
		}
		//ret = _dwarf_attr_add(die, &atref, NULL, error);
		if (atref.at_attrib == DW_AT_name) {
  8004212882:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004212886:	48 83 f8 03          	cmp    $0x3,%rax
  800421288a:	75 39                	jne    80042128c5 <_dwarf_attr_init+0x5e6>
			switch (atref.at_form) {
  800421288c:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004212890:	48 83 f8 08          	cmp    $0x8,%rax
  8004212894:	74 1c                	je     80042128b2 <_dwarf_attr_init+0x5d3>
  8004212896:	48 83 f8 0e          	cmp    $0xe,%rax
  800421289a:	74 02                	je     800421289e <_dwarf_attr_init+0x5bf>
				break;
			case DW_FORM_string:
				ret_die->die_name = atref.u[0].s;
				break;
			default:
				break;
  800421289c:	eb 27                	jmp    80042128c5 <_dwarf_attr_init+0x5e6>
		}
		//ret = _dwarf_attr_add(die, &atref, NULL, error);
		if (atref.at_attrib == DW_AT_name) {
			switch (atref.at_form) {
			case DW_FORM_strp:
				ret_die->die_name = atref.u[1].s;
  800421289e:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042128a2:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  80042128a9:	48 89 90 50 03 00 00 	mov    %rdx,0x350(%rax)
				break;
  80042128b0:	eb 13                	jmp    80042128c5 <_dwarf_attr_init+0x5e6>
			case DW_FORM_string:
				ret_die->die_name = atref.u[0].s;
  80042128b2:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  80042128b6:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  80042128bd:	48 89 90 50 03 00 00 	mov    %rdx,0x350(%rax)
				break;
  80042128c4:	90                   	nop
			default:
				break;
			}
		}
		ret_die->die_attr[ret_die->die_attr_count++] = atref;
  80042128c5:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  80042128cc:	0f b6 80 58 03 00 00 	movzbl 0x358(%rax),%eax
  80042128d3:	8d 48 01             	lea    0x1(%rax),%ecx
  80042128d6:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
  80042128dd:	88 8a 58 03 00 00    	mov    %cl,0x358(%rdx)
  80042128e3:	0f b6 c0             	movzbl %al,%eax
  80042128e6:	48 8b 8d 50 ff ff ff 	mov    -0xb0(%rbp),%rcx
  80042128ed:	48 63 d0             	movslq %eax,%rdx
  80042128f0:	48 89 d0             	mov    %rdx,%rax
  80042128f3:	48 01 c0             	add    %rax,%rax
  80042128f6:	48 01 d0             	add    %rdx,%rax
  80042128f9:	48 c1 e0 05          	shl    $0x5,%rax
  80042128fd:	48 01 c8             	add    %rcx,%rax
  8004212900:	48 05 70 03 00 00    	add    $0x370,%rax
  8004212906:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  800421290d:	48 89 10             	mov    %rdx,(%rax)
  8004212910:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  8004212917:	48 89 50 08          	mov    %rdx,0x8(%rax)
  800421291b:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  800421291f:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004212923:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  8004212927:	48 89 50 18          	mov    %rdx,0x18(%rax)
  800421292b:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  800421292f:	48 89 50 20          	mov    %rdx,0x20(%rax)
  8004212933:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004212937:	48 89 50 28          	mov    %rdx,0x28(%rax)
  800421293b:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800421293f:	48 89 50 30          	mov    %rdx,0x30(%rax)
  8004212943:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004212947:	48 89 50 38          	mov    %rdx,0x38(%rax)
  800421294b:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800421294f:	48 89 50 40          	mov    %rdx,0x40(%rax)
  8004212953:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004212957:	48 89 50 48          	mov    %rdx,0x48(%rax)
  800421295b:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421295f:	48 89 50 50          	mov    %rdx,0x50(%rax)
  8004212963:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004212967:	48 89 50 58          	mov    %rdx,0x58(%rax)
	}

	return (ret);
  800421296b:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  800421296e:	c9                   	leaveq 
  800421296f:	c3                   	retq   

0000008004212970 <dwarf_search_die_within_cu>:

int
dwarf_search_die_within_cu(Dwarf_Debug dbg, Dwarf_CU cu, uint64_t offset, Dwarf_Die *ret_die, int search_sibling)
{
  8004212970:	55                   	push   %rbp
  8004212971:	48 89 e5             	mov    %rsp,%rbp
  8004212974:	48 81 ec d0 03 00 00 	sub    $0x3d0,%rsp
  800421297b:	48 89 bd 88 fc ff ff 	mov    %rdi,-0x378(%rbp)
  8004212982:	48 89 b5 80 fc ff ff 	mov    %rsi,-0x380(%rbp)
  8004212989:	48 89 95 78 fc ff ff 	mov    %rdx,-0x388(%rbp)
  8004212990:	89 8d 74 fc ff ff    	mov    %ecx,-0x38c(%rbp)
	uint64_t abnum;
	uint64_t die_offset;
	int ret, level;
	int i;

	assert(dbg);
  8004212996:	48 83 bd 88 fc ff ff 	cmpq   $0x0,-0x378(%rbp)
  800421299d:	00 
  800421299e:	75 35                	jne    80042129d5 <dwarf_search_die_within_cu+0x65>
  80042129a0:	48 b9 98 09 22 04 80 	movabs $0x8004220998,%rcx
  80042129a7:	00 00 00 
  80042129aa:	48 ba 0a 08 22 04 80 	movabs $0x800422080a,%rdx
  80042129b1:	00 00 00 
  80042129b4:	be 86 02 00 00       	mov    $0x286,%esi
  80042129b9:	48 bf 1f 08 22 04 80 	movabs $0x800422081f,%rdi
  80042129c0:	00 00 00 
  80042129c3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042129c8:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042129cf:	00 00 00 
  80042129d2:	41 ff d0             	callq  *%r8
	//assert(cu);
	assert(ret_die);
  80042129d5:	48 83 bd 78 fc ff ff 	cmpq   $0x0,-0x388(%rbp)
  80042129dc:	00 
  80042129dd:	75 35                	jne    8004212a14 <dwarf_search_die_within_cu+0xa4>
  80042129df:	48 b9 9c 09 22 04 80 	movabs $0x800422099c,%rcx
  80042129e6:	00 00 00 
  80042129e9:	48 ba 0a 08 22 04 80 	movabs $0x800422080a,%rdx
  80042129f0:	00 00 00 
  80042129f3:	be 88 02 00 00       	mov    $0x288,%esi
  80042129f8:	48 bf 1f 08 22 04 80 	movabs $0x800422081f,%rdi
  80042129ff:	00 00 00 
  8004212a02:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212a07:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004212a0e:	00 00 00 
  8004212a11:	41 ff d0             	callq  *%r8

	level = 1;
  8004212a14:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)

	while (offset < cu.cu_next_offset && offset < dbg->dbg_info_size) {
  8004212a1b:	e9 17 02 00 00       	jmpq   8004212c37 <dwarf_search_die_within_cu+0x2c7>

		die_offset = offset;
  8004212a20:	48 8b 85 80 fc ff ff 	mov    -0x380(%rbp),%rax
  8004212a27:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

		abnum = _dwarf_read_uleb128((uint8_t *)dbg->dbg_info_offset_elf, &offset);
  8004212a2b:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  8004212a32:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004212a36:	48 8d 95 80 fc ff ff 	lea    -0x380(%rbp),%rdx
  8004212a3d:	48 89 d6             	mov    %rdx,%rsi
  8004212a40:	48 89 c7             	mov    %rax,%rdi
  8004212a43:	48 b8 49 19 21 04 80 	movabs $0x8004211949,%rax
  8004212a4a:	00 00 00 
  8004212a4d:	ff d0                	callq  *%rax
  8004212a4f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

		if (abnum == 0) {
  8004212a53:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004212a58:	75 22                	jne    8004212a7c <dwarf_search_die_within_cu+0x10c>
			if (level == 0 || !search_sibling) {
  8004212a5a:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004212a5e:	74 09                	je     8004212a69 <dwarf_search_die_within_cu+0xf9>
  8004212a60:	83 bd 74 fc ff ff 00 	cmpl   $0x0,-0x38c(%rbp)
  8004212a67:	75 0a                	jne    8004212a73 <dwarf_search_die_within_cu+0x103>
				//No more entry
				return (DW_DLE_NO_ENTRY);
  8004212a69:	b8 04 00 00 00       	mov    $0x4,%eax
  8004212a6e:	e9 f4 01 00 00       	jmpq   8004212c67 <dwarf_search_die_within_cu+0x2f7>
			}
			/*
			 * Return to previous DIE level.
			 */
			level--;
  8004212a73:	83 6d fc 01          	subl   $0x1,-0x4(%rbp)
			continue;
  8004212a77:	e9 bb 01 00 00       	jmpq   8004212c37 <dwarf_search_die_within_cu+0x2c7>
		}

		if ((ret = _dwarf_abbrev_find(dbg, cu, abnum, &ab)) != DW_DLE_NONE)
  8004212a7c:	48 8d 95 b0 fc ff ff 	lea    -0x350(%rbp),%rdx
  8004212a83:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212a87:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  8004212a8e:	48 8b 75 10          	mov    0x10(%rbp),%rsi
  8004212a92:	48 89 34 24          	mov    %rsi,(%rsp)
  8004212a96:	48 8b 75 18          	mov    0x18(%rbp),%rsi
  8004212a9a:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  8004212a9f:	48 8b 75 20          	mov    0x20(%rbp),%rsi
  8004212aa3:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  8004212aa8:	48 8b 75 28          	mov    0x28(%rbp),%rsi
  8004212aac:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  8004212ab1:	48 8b 75 30          	mov    0x30(%rbp),%rsi
  8004212ab5:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  8004212aba:	48 8b 75 38          	mov    0x38(%rbp),%rsi
  8004212abe:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  8004212ac3:	48 8b 75 40          	mov    0x40(%rbp),%rsi
  8004212ac7:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  8004212acc:	48 89 ce             	mov    %rcx,%rsi
  8004212acf:	48 89 c7             	mov    %rax,%rdi
  8004212ad2:	48 b8 ae 21 21 04 80 	movabs $0x80042121ae,%rax
  8004212ad9:	00 00 00 
  8004212adc:	ff d0                	callq  *%rax
  8004212ade:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004212ae1:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004212ae5:	74 08                	je     8004212aef <dwarf_search_die_within_cu+0x17f>
			return (ret);
  8004212ae7:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004212aea:	e9 78 01 00 00       	jmpq   8004212c67 <dwarf_search_die_within_cu+0x2f7>
		ret_die->die_offset = die_offset;
  8004212aef:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004212af6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004212afa:	48 89 10             	mov    %rdx,(%rax)
		ret_die->die_abnum  = abnum;
  8004212afd:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004212b04:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004212b08:	48 89 50 10          	mov    %rdx,0x10(%rax)
		ret_die->die_ab  = ab;
  8004212b0c:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004212b13:	48 8d 78 20          	lea    0x20(%rax),%rdi
  8004212b17:	48 8d 95 b0 fc ff ff 	lea    -0x350(%rbp),%rdx
  8004212b1e:	b8 66 00 00 00       	mov    $0x66,%eax
  8004212b23:	48 89 d6             	mov    %rdx,%rsi
  8004212b26:	48 89 c1             	mov    %rax,%rcx
  8004212b29:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
		ret_die->die_attr_count = 0;
  8004212b2c:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004212b33:	c6 80 58 03 00 00 00 	movb   $0x0,0x358(%rax)
		ret_die->die_tag = ab.ab_tag;
  8004212b3a:	48 8b 95 b8 fc ff ff 	mov    -0x348(%rbp),%rdx
  8004212b41:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004212b48:	48 89 50 18          	mov    %rdx,0x18(%rax)
		//ret_die->die_cu  = cu;
		//ret_die->die_dbg = cu->cu_dbg;

		for(i=0; i < ab.ab_atnum; i++)
  8004212b4c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  8004212b53:	e9 8e 00 00 00       	jmpq   8004212be6 <dwarf_search_die_within_cu+0x276>
		{
			if ((ret = _dwarf_attr_init(dbg, &offset, &cu, ret_die, &ab.ab_attrdef[i], ab.ab_attrdef[i].ad_form, 0)) != DW_DLE_NONE)
  8004212b58:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004212b5b:	48 63 d0             	movslq %eax,%rdx
  8004212b5e:	48 89 d0             	mov    %rdx,%rax
  8004212b61:	48 01 c0             	add    %rax,%rax
  8004212b64:	48 01 d0             	add    %rdx,%rax
  8004212b67:	48 c1 e0 03          	shl    $0x3,%rax
  8004212b6b:	48 01 e8             	add    %rbp,%rax
  8004212b6e:	48 2d 18 03 00 00    	sub    $0x318,%rax
  8004212b74:	48 8b 08             	mov    (%rax),%rcx
  8004212b77:	48 8d b5 b0 fc ff ff 	lea    -0x350(%rbp),%rsi
  8004212b7e:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004212b81:	48 63 d0             	movslq %eax,%rdx
  8004212b84:	48 89 d0             	mov    %rdx,%rax
  8004212b87:	48 01 c0             	add    %rax,%rax
  8004212b8a:	48 01 d0             	add    %rdx,%rax
  8004212b8d:	48 c1 e0 03          	shl    $0x3,%rax
  8004212b91:	48 83 c0 30          	add    $0x30,%rax
  8004212b95:	48 8d 3c 06          	lea    (%rsi,%rax,1),%rdi
  8004212b99:	48 8b 95 78 fc ff ff 	mov    -0x388(%rbp),%rdx
  8004212ba0:	48 8d b5 80 fc ff ff 	lea    -0x380(%rbp),%rsi
  8004212ba7:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  8004212bae:	c7 04 24 00 00 00 00 	movl   $0x0,(%rsp)
  8004212bb5:	49 89 c9             	mov    %rcx,%r9
  8004212bb8:	49 89 f8             	mov    %rdi,%r8
  8004212bbb:	48 89 d1             	mov    %rdx,%rcx
  8004212bbe:	48 8d 55 10          	lea    0x10(%rbp),%rdx
  8004212bc2:	48 89 c7             	mov    %rax,%rdi
  8004212bc5:	48 b8 df 22 21 04 80 	movabs $0x80042122df,%rax
  8004212bcc:	00 00 00 
  8004212bcf:	ff d0                	callq  *%rax
  8004212bd1:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004212bd4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004212bd8:	74 08                	je     8004212be2 <dwarf_search_die_within_cu+0x272>
				return (ret);
  8004212bda:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004212bdd:	e9 85 00 00 00       	jmpq   8004212c67 <dwarf_search_die_within_cu+0x2f7>
		ret_die->die_attr_count = 0;
		ret_die->die_tag = ab.ab_tag;
		//ret_die->die_cu  = cu;
		//ret_die->die_dbg = cu->cu_dbg;

		for(i=0; i < ab.ab_atnum; i++)
  8004212be2:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  8004212be6:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004212be9:	48 63 d0             	movslq %eax,%rdx
  8004212bec:	48 8b 85 d8 fc ff ff 	mov    -0x328(%rbp),%rax
  8004212bf3:	48 39 c2             	cmp    %rax,%rdx
  8004212bf6:	0f 82 5c ff ff ff    	jb     8004212b58 <dwarf_search_die_within_cu+0x1e8>
		{
			if ((ret = _dwarf_attr_init(dbg, &offset, &cu, ret_die, &ab.ab_attrdef[i], ab.ab_attrdef[i].ad_form, 0)) != DW_DLE_NONE)
				return (ret);
		}

		ret_die->die_next_off = offset;
  8004212bfc:	48 8b 95 80 fc ff ff 	mov    -0x380(%rbp),%rdx
  8004212c03:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004212c0a:	48 89 50 08          	mov    %rdx,0x8(%rax)
		if (search_sibling && level > 0) {
  8004212c0e:	83 bd 74 fc ff ff 00 	cmpl   $0x0,-0x38c(%rbp)
  8004212c15:	74 19                	je     8004212c30 <dwarf_search_die_within_cu+0x2c0>
  8004212c17:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004212c1b:	7e 13                	jle    8004212c30 <dwarf_search_die_within_cu+0x2c0>
			//dwarf_dealloc(dbg, die, DW_DLA_DIE);
			if (ab.ab_children == DW_CHILDREN_yes) {
  8004212c1d:	0f b6 85 c0 fc ff ff 	movzbl -0x340(%rbp),%eax
  8004212c24:	3c 01                	cmp    $0x1,%al
  8004212c26:	75 06                	jne    8004212c2e <dwarf_search_die_within_cu+0x2be>
				/* Advance to next DIE level. */
				level++;
  8004212c28:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
		}

		ret_die->die_next_off = offset;
		if (search_sibling && level > 0) {
			//dwarf_dealloc(dbg, die, DW_DLA_DIE);
			if (ab.ab_children == DW_CHILDREN_yes) {
  8004212c2c:	eb 09                	jmp    8004212c37 <dwarf_search_die_within_cu+0x2c7>
  8004212c2e:	eb 07                	jmp    8004212c37 <dwarf_search_die_within_cu+0x2c7>
				/* Advance to next DIE level. */
				level++;
			}
		} else {
			//*ret_die = die;
			return (DW_DLE_NONE);
  8004212c30:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212c35:	eb 30                	jmp    8004212c67 <dwarf_search_die_within_cu+0x2f7>
	//assert(cu);
	assert(ret_die);

	level = 1;

	while (offset < cu.cu_next_offset && offset < dbg->dbg_info_size) {
  8004212c37:	48 8b 55 30          	mov    0x30(%rbp),%rdx
  8004212c3b:	48 8b 85 80 fc ff ff 	mov    -0x380(%rbp),%rax
  8004212c42:	48 39 c2             	cmp    %rax,%rdx
  8004212c45:	76 1b                	jbe    8004212c62 <dwarf_search_die_within_cu+0x2f2>
  8004212c47:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  8004212c4e:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004212c52:	48 8b 85 80 fc ff ff 	mov    -0x380(%rbp),%rax
  8004212c59:	48 39 c2             	cmp    %rax,%rdx
  8004212c5c:	0f 87 be fd ff ff    	ja     8004212a20 <dwarf_search_die_within_cu+0xb0>
			//*ret_die = die;
			return (DW_DLE_NONE);
		}
	}

	return (DW_DLE_NO_ENTRY);
  8004212c62:	b8 04 00 00 00       	mov    $0x4,%eax
}
  8004212c67:	c9                   	leaveq 
  8004212c68:	c3                   	retq   

0000008004212c69 <dwarf_offdie>:

//Return 0 on success
int
dwarf_offdie(Dwarf_Debug dbg, uint64_t offset, Dwarf_Die *ret_die, Dwarf_CU cu)
{
  8004212c69:	55                   	push   %rbp
  8004212c6a:	48 89 e5             	mov    %rsp,%rbp
  8004212c6d:	48 83 ec 60          	sub    $0x60,%rsp
  8004212c71:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004212c75:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004212c79:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	int ret;

	assert(dbg);
  8004212c7d:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004212c82:	75 35                	jne    8004212cb9 <dwarf_offdie+0x50>
  8004212c84:	48 b9 98 09 22 04 80 	movabs $0x8004220998,%rcx
  8004212c8b:	00 00 00 
  8004212c8e:	48 ba 0a 08 22 04 80 	movabs $0x800422080a,%rdx
  8004212c95:	00 00 00 
  8004212c98:	be c4 02 00 00       	mov    $0x2c4,%esi
  8004212c9d:	48 bf 1f 08 22 04 80 	movabs $0x800422081f,%rdi
  8004212ca4:	00 00 00 
  8004212ca7:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212cac:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004212cb3:	00 00 00 
  8004212cb6:	41 ff d0             	callq  *%r8
	assert(ret_die);
  8004212cb9:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004212cbe:	75 35                	jne    8004212cf5 <dwarf_offdie+0x8c>
  8004212cc0:	48 b9 9c 09 22 04 80 	movabs $0x800422099c,%rcx
  8004212cc7:	00 00 00 
  8004212cca:	48 ba 0a 08 22 04 80 	movabs $0x800422080a,%rdx
  8004212cd1:	00 00 00 
  8004212cd4:	be c5 02 00 00       	mov    $0x2c5,%esi
  8004212cd9:	48 bf 1f 08 22 04 80 	movabs $0x800422081f,%rdi
  8004212ce0:	00 00 00 
  8004212ce3:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212ce8:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004212cef:	00 00 00 
  8004212cf2:	41 ff d0             	callq  *%r8

	/* First search the current CU. */
	if (offset < cu.cu_next_offset) {
  8004212cf5:	48 8b 45 30          	mov    0x30(%rbp),%rax
  8004212cf9:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004212cfd:	76 66                	jbe    8004212d65 <dwarf_offdie+0xfc>
		ret = dwarf_search_die_within_cu(dbg, cu, offset, ret_die, 0);
  8004212cff:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004212d03:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  8004212d07:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212d0b:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
  8004212d0f:	48 89 0c 24          	mov    %rcx,(%rsp)
  8004212d13:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
  8004212d17:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  8004212d1c:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
  8004212d20:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  8004212d25:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  8004212d29:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  8004212d2e:	48 8b 4d 30          	mov    0x30(%rbp),%rcx
  8004212d32:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  8004212d37:	48 8b 4d 38          	mov    0x38(%rbp),%rcx
  8004212d3b:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  8004212d40:	48 8b 4d 40          	mov    0x40(%rbp),%rcx
  8004212d44:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  8004212d49:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004212d4e:	48 89 c7             	mov    %rax,%rdi
  8004212d51:	48 b8 70 29 21 04 80 	movabs $0x8004212970,%rax
  8004212d58:	00 00 00 
  8004212d5b:	ff d0                	callq  *%rax
  8004212d5d:	89 45 fc             	mov    %eax,-0x4(%rbp)
		return ret;
  8004212d60:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004212d63:	eb 05                	jmp    8004212d6a <dwarf_offdie+0x101>
	}

	/*TODO: Search other CU*/
	return DW_DLV_OK;
  8004212d65:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004212d6a:	c9                   	leaveq 
  8004212d6b:	c3                   	retq   

0000008004212d6c <_dwarf_attr_find>:

Dwarf_Attribute*
_dwarf_attr_find(Dwarf_Die *die, uint16_t attr)
{
  8004212d6c:	55                   	push   %rbp
  8004212d6d:	48 89 e5             	mov    %rsp,%rbp
  8004212d70:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004212d74:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004212d78:	89 f0                	mov    %esi,%eax
  8004212d7a:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
	Dwarf_Attribute *myat = NULL;
  8004212d7e:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004212d85:	00 
	int i;
    
	for(i=0; i < die->die_attr_count; i++)
  8004212d86:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004212d8d:	eb 57                	jmp    8004212de6 <_dwarf_attr_find+0x7a>
	{
		if (die->die_attr[i].at_attrib == attr)
  8004212d8f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212d93:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004212d96:	48 63 d0             	movslq %eax,%rdx
  8004212d99:	48 89 d0             	mov    %rdx,%rax
  8004212d9c:	48 01 c0             	add    %rax,%rax
  8004212d9f:	48 01 d0             	add    %rdx,%rax
  8004212da2:	48 c1 e0 05          	shl    $0x5,%rax
  8004212da6:	48 01 c8             	add    %rcx,%rax
  8004212da9:	48 05 80 03 00 00    	add    $0x380,%rax
  8004212daf:	48 8b 10             	mov    (%rax),%rdx
  8004212db2:	0f b7 45 e4          	movzwl -0x1c(%rbp),%eax
  8004212db6:	48 39 c2             	cmp    %rax,%rdx
  8004212db9:	75 27                	jne    8004212de2 <_dwarf_attr_find+0x76>
		{
			myat = &(die->die_attr[i]);
  8004212dbb:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004212dbe:	48 63 d0             	movslq %eax,%rdx
  8004212dc1:	48 89 d0             	mov    %rdx,%rax
  8004212dc4:	48 01 c0             	add    %rax,%rax
  8004212dc7:	48 01 d0             	add    %rdx,%rax
  8004212dca:	48 c1 e0 05          	shl    $0x5,%rax
  8004212dce:	48 8d 90 70 03 00 00 	lea    0x370(%rax),%rdx
  8004212dd5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212dd9:	48 01 d0             	add    %rdx,%rax
  8004212ddc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			break;
  8004212de0:	eb 17                	jmp    8004212df9 <_dwarf_attr_find+0x8d>
_dwarf_attr_find(Dwarf_Die *die, uint16_t attr)
{
	Dwarf_Attribute *myat = NULL;
	int i;
    
	for(i=0; i < die->die_attr_count; i++)
  8004212de2:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004212de6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212dea:	0f b6 80 58 03 00 00 	movzbl 0x358(%rax),%eax
  8004212df1:	0f b6 c0             	movzbl %al,%eax
  8004212df4:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  8004212df7:	7f 96                	jg     8004212d8f <_dwarf_attr_find+0x23>
			myat = &(die->die_attr[i]);
			break;
		}
	}

	return myat;
  8004212df9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004212dfd:	c9                   	leaveq 
  8004212dfe:	c3                   	retq   

0000008004212dff <dwarf_siblingof>:

//Return 0 on success
int
dwarf_siblingof(Dwarf_Debug dbg, Dwarf_Die *die, Dwarf_Die *ret_die,
		Dwarf_CU *cu)
{
  8004212dff:	55                   	push   %rbp
  8004212e00:	48 89 e5             	mov    %rsp,%rbp
  8004212e03:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  8004212e07:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004212e0b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004212e0f:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  8004212e13:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
	Dwarf_Attribute *at;
	uint64_t offset;
	int ret, search_sibling;

	assert(dbg);
  8004212e17:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004212e1c:	75 35                	jne    8004212e53 <dwarf_siblingof+0x54>
  8004212e1e:	48 b9 98 09 22 04 80 	movabs $0x8004220998,%rcx
  8004212e25:	00 00 00 
  8004212e28:	48 ba 0a 08 22 04 80 	movabs $0x800422080a,%rdx
  8004212e2f:	00 00 00 
  8004212e32:	be ec 02 00 00       	mov    $0x2ec,%esi
  8004212e37:	48 bf 1f 08 22 04 80 	movabs $0x800422081f,%rdi
  8004212e3e:	00 00 00 
  8004212e41:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212e46:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004212e4d:	00 00 00 
  8004212e50:	41 ff d0             	callq  *%r8
	assert(ret_die);
  8004212e53:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004212e58:	75 35                	jne    8004212e8f <dwarf_siblingof+0x90>
  8004212e5a:	48 b9 9c 09 22 04 80 	movabs $0x800422099c,%rcx
  8004212e61:	00 00 00 
  8004212e64:	48 ba 0a 08 22 04 80 	movabs $0x800422080a,%rdx
  8004212e6b:	00 00 00 
  8004212e6e:	be ed 02 00 00       	mov    $0x2ed,%esi
  8004212e73:	48 bf 1f 08 22 04 80 	movabs $0x800422081f,%rdi
  8004212e7a:	00 00 00 
  8004212e7d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212e82:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004212e89:	00 00 00 
  8004212e8c:	41 ff d0             	callq  *%r8
	assert(cu);
  8004212e8f:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  8004212e94:	75 35                	jne    8004212ecb <dwarf_siblingof+0xcc>
  8004212e96:	48 b9 a4 09 22 04 80 	movabs $0x80042209a4,%rcx
  8004212e9d:	00 00 00 
  8004212ea0:	48 ba 0a 08 22 04 80 	movabs $0x800422080a,%rdx
  8004212ea7:	00 00 00 
  8004212eaa:	be ee 02 00 00       	mov    $0x2ee,%esi
  8004212eaf:	48 bf 1f 08 22 04 80 	movabs $0x800422081f,%rdi
  8004212eb6:	00 00 00 
  8004212eb9:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212ebe:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004212ec5:	00 00 00 
  8004212ec8:	41 ff d0             	callq  *%r8

	/* Application requests the first DIE in this CU. */
	if (die == NULL)
  8004212ecb:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004212ed0:	75 65                	jne    8004212f37 <dwarf_siblingof+0x138>
		return (dwarf_offdie(dbg, cu->cu_die_offset, ret_die, *cu));
  8004212ed2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004212ed6:	48 8b 70 28          	mov    0x28(%rax),%rsi
  8004212eda:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004212ede:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004212ee2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004212ee6:	48 8b 38             	mov    (%rax),%rdi
  8004212ee9:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004212eed:	48 8b 78 08          	mov    0x8(%rax),%rdi
  8004212ef1:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  8004212ef6:	48 8b 78 10          	mov    0x10(%rax),%rdi
  8004212efa:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  8004212eff:	48 8b 78 18          	mov    0x18(%rax),%rdi
  8004212f03:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  8004212f08:	48 8b 78 20          	mov    0x20(%rax),%rdi
  8004212f0c:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  8004212f11:	48 8b 78 28          	mov    0x28(%rax),%rdi
  8004212f15:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  8004212f1a:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004212f1e:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  8004212f23:	48 89 cf             	mov    %rcx,%rdi
  8004212f26:	48 b8 69 2c 21 04 80 	movabs $0x8004212c69,%rax
  8004212f2d:	00 00 00 
  8004212f30:	ff d0                	callq  *%rax
  8004212f32:	e9 0a 01 00 00       	jmpq   8004213041 <dwarf_siblingof+0x242>

	/*
	 * If the DIE doesn't have any children, its sibling sits next
	 * right to it.
	 */
	search_sibling = 0;
  8004212f37:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	if (die->die_ab.ab_children == DW_CHILDREN_no)
  8004212f3e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212f42:	0f b6 40 30          	movzbl 0x30(%rax),%eax
  8004212f46:	84 c0                	test   %al,%al
  8004212f48:	75 0e                	jne    8004212f58 <dwarf_siblingof+0x159>
		offset = die->die_next_off;
  8004212f4a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212f4e:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004212f52:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004212f56:	eb 6b                	jmp    8004212fc3 <dwarf_siblingof+0x1c4>
	else {
		/*
		 * Look for DW_AT_sibling attribute for the offset of
		 * its sibling.
		 */
		if ((at = _dwarf_attr_find(die, DW_AT_sibling)) != NULL) {
  8004212f58:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212f5c:	be 01 00 00 00       	mov    $0x1,%esi
  8004212f61:	48 89 c7             	mov    %rax,%rdi
  8004212f64:	48 b8 6c 2d 21 04 80 	movabs $0x8004212d6c,%rax
  8004212f6b:	00 00 00 
  8004212f6e:	ff d0                	callq  *%rax
  8004212f70:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004212f74:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004212f79:	74 35                	je     8004212fb0 <dwarf_siblingof+0x1b1>
			if (at->at_form != DW_FORM_ref_addr)
  8004212f7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212f7f:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004212f83:	48 83 f8 10          	cmp    $0x10,%rax
  8004212f87:	74 19                	je     8004212fa2 <dwarf_siblingof+0x1a3>
				offset = at->u[0].u64 + cu->cu_offset;
  8004212f89:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212f8d:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004212f91:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004212f95:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004212f99:	48 01 d0             	add    %rdx,%rax
  8004212f9c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004212fa0:	eb 21                	jmp    8004212fc3 <dwarf_siblingof+0x1c4>
			else
				offset = at->u[0].u64;
  8004212fa2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212fa6:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004212faa:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004212fae:	eb 13                	jmp    8004212fc3 <dwarf_siblingof+0x1c4>
		} else {
			offset = die->die_next_off;
  8004212fb0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212fb4:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004212fb8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			search_sibling = 1;
  8004212fbc:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
		}
	}

	ret = dwarf_search_die_within_cu(dbg, *cu, offset, ret_die, search_sibling);
  8004212fc3:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  8004212fc6:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004212fca:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  8004212fce:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  8004212fd2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004212fd6:	4c 8b 00             	mov    (%rax),%r8
  8004212fd9:	4c 89 04 24          	mov    %r8,(%rsp)
  8004212fdd:	4c 8b 40 08          	mov    0x8(%rax),%r8
  8004212fe1:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  8004212fe6:	4c 8b 40 10          	mov    0x10(%rax),%r8
  8004212fea:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
  8004212fef:	4c 8b 40 18          	mov    0x18(%rax),%r8
  8004212ff3:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
  8004212ff8:	4c 8b 40 20          	mov    0x20(%rax),%r8
  8004212ffc:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
  8004213001:	4c 8b 40 28          	mov    0x28(%rax),%r8
  8004213005:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
  800421300a:	48 8b 40 30          	mov    0x30(%rax),%rax
  800421300e:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  8004213013:	48 b8 70 29 21 04 80 	movabs $0x8004212970,%rax
  800421301a:	00 00 00 
  800421301d:	ff d0                	callq  *%rax
  800421301f:	89 45 e4             	mov    %eax,-0x1c(%rbp)


	if (ret == DW_DLE_NO_ENTRY) {
  8004213022:	83 7d e4 04          	cmpl   $0x4,-0x1c(%rbp)
  8004213026:	75 07                	jne    800421302f <dwarf_siblingof+0x230>
		return (DW_DLV_NO_ENTRY);
  8004213028:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800421302d:	eb 12                	jmp    8004213041 <dwarf_siblingof+0x242>
	} else if (ret != DW_DLE_NONE)
  800421302f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004213033:	74 07                	je     800421303c <dwarf_siblingof+0x23d>
		return (DW_DLV_ERROR);
  8004213035:	b8 01 00 00 00       	mov    $0x1,%eax
  800421303a:	eb 05                	jmp    8004213041 <dwarf_siblingof+0x242>


	return (DW_DLV_OK);
  800421303c:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004213041:	c9                   	leaveq 
  8004213042:	c3                   	retq   

0000008004213043 <dwarf_child>:

int
dwarf_child(Dwarf_Debug dbg, Dwarf_CU *cu, Dwarf_Die *die, Dwarf_Die *ret_die)
{
  8004213043:	55                   	push   %rbp
  8004213044:	48 89 e5             	mov    %rsp,%rbp
  8004213047:	48 83 ec 70          	sub    $0x70,%rsp
  800421304b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421304f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004213053:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004213057:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	int ret;

	assert(die);
  800421305b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004213060:	75 35                	jne    8004213097 <dwarf_child+0x54>
  8004213062:	48 b9 a7 09 22 04 80 	movabs $0x80042209a7,%rcx
  8004213069:	00 00 00 
  800421306c:	48 ba 0a 08 22 04 80 	movabs $0x800422080a,%rdx
  8004213073:	00 00 00 
  8004213076:	be 1c 03 00 00       	mov    $0x31c,%esi
  800421307b:	48 bf 1f 08 22 04 80 	movabs $0x800422081f,%rdi
  8004213082:	00 00 00 
  8004213085:	b8 00 00 00 00       	mov    $0x0,%eax
  800421308a:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004213091:	00 00 00 
  8004213094:	41 ff d0             	callq  *%r8
	assert(ret_die);
  8004213097:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800421309c:	75 35                	jne    80042130d3 <dwarf_child+0x90>
  800421309e:	48 b9 9c 09 22 04 80 	movabs $0x800422099c,%rcx
  80042130a5:	00 00 00 
  80042130a8:	48 ba 0a 08 22 04 80 	movabs $0x800422080a,%rdx
  80042130af:	00 00 00 
  80042130b2:	be 1d 03 00 00       	mov    $0x31d,%esi
  80042130b7:	48 bf 1f 08 22 04 80 	movabs $0x800422081f,%rdi
  80042130be:	00 00 00 
  80042130c1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042130c6:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042130cd:	00 00 00 
  80042130d0:	41 ff d0             	callq  *%r8
	assert(dbg);
  80042130d3:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042130d8:	75 35                	jne    800421310f <dwarf_child+0xcc>
  80042130da:	48 b9 98 09 22 04 80 	movabs $0x8004220998,%rcx
  80042130e1:	00 00 00 
  80042130e4:	48 ba 0a 08 22 04 80 	movabs $0x800422080a,%rdx
  80042130eb:	00 00 00 
  80042130ee:	be 1e 03 00 00       	mov    $0x31e,%esi
  80042130f3:	48 bf 1f 08 22 04 80 	movabs $0x800422081f,%rdi
  80042130fa:	00 00 00 
  80042130fd:	b8 00 00 00 00       	mov    $0x0,%eax
  8004213102:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004213109:	00 00 00 
  800421310c:	41 ff d0             	callq  *%r8
	assert(cu);
  800421310f:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004213114:	75 35                	jne    800421314b <dwarf_child+0x108>
  8004213116:	48 b9 a4 09 22 04 80 	movabs $0x80042209a4,%rcx
  800421311d:	00 00 00 
  8004213120:	48 ba 0a 08 22 04 80 	movabs $0x800422080a,%rdx
  8004213127:	00 00 00 
  800421312a:	be 1f 03 00 00       	mov    $0x31f,%esi
  800421312f:	48 bf 1f 08 22 04 80 	movabs $0x800422081f,%rdi
  8004213136:	00 00 00 
  8004213139:	b8 00 00 00 00       	mov    $0x0,%eax
  800421313e:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004213145:	00 00 00 
  8004213148:	41 ff d0             	callq  *%r8

	if (die->die_ab.ab_children == DW_CHILDREN_no)
  800421314b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421314f:	0f b6 40 30          	movzbl 0x30(%rax),%eax
  8004213153:	84 c0                	test   %al,%al
  8004213155:	75 0a                	jne    8004213161 <dwarf_child+0x11e>
		return (DW_DLE_NO_ENTRY);
  8004213157:	b8 04 00 00 00       	mov    $0x4,%eax
  800421315c:	e9 84 00 00 00       	jmpq   80042131e5 <dwarf_child+0x1a2>

	ret = dwarf_search_die_within_cu(dbg, *cu, die->die_next_off, ret_die, 0);
  8004213161:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004213165:	48 8b 70 08          	mov    0x8(%rax),%rsi
  8004213169:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421316d:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  8004213171:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004213175:	48 8b 08             	mov    (%rax),%rcx
  8004213178:	48 89 0c 24          	mov    %rcx,(%rsp)
  800421317c:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004213180:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  8004213185:	48 8b 48 10          	mov    0x10(%rax),%rcx
  8004213189:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  800421318e:	48 8b 48 18          	mov    0x18(%rax),%rcx
  8004213192:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  8004213197:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421319b:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  80042131a0:	48 8b 48 28          	mov    0x28(%rax),%rcx
  80042131a4:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  80042131a9:	48 8b 40 30          	mov    0x30(%rax),%rax
  80042131ad:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  80042131b2:	b9 00 00 00 00       	mov    $0x0,%ecx
  80042131b7:	48 b8 70 29 21 04 80 	movabs $0x8004212970,%rax
  80042131be:	00 00 00 
  80042131c1:	ff d0                	callq  *%rax
  80042131c3:	89 45 fc             	mov    %eax,-0x4(%rbp)

	if (ret == DW_DLE_NO_ENTRY) {
  80042131c6:	83 7d fc 04          	cmpl   $0x4,-0x4(%rbp)
  80042131ca:	75 07                	jne    80042131d3 <dwarf_child+0x190>
		DWARF_SET_ERROR(dbg, error, DW_DLE_NO_ENTRY);
		return (DW_DLV_NO_ENTRY);
  80042131cc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042131d1:	eb 12                	jmp    80042131e5 <dwarf_child+0x1a2>
	} else if (ret != DW_DLE_NONE)
  80042131d3:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  80042131d7:	74 07                	je     80042131e0 <dwarf_child+0x19d>
		return (DW_DLV_ERROR);
  80042131d9:	b8 01 00 00 00       	mov    $0x1,%eax
  80042131de:	eb 05                	jmp    80042131e5 <dwarf_child+0x1a2>

	return (DW_DLV_OK);
  80042131e0:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042131e5:	c9                   	leaveq 
  80042131e6:	c3                   	retq   

00000080042131e7 <_dwarf_find_section_enhanced>:


int  _dwarf_find_section_enhanced(Dwarf_Section *ds)
{
  80042131e7:	55                   	push   %rbp
  80042131e8:	48 89 e5             	mov    %rsp,%rbp
  80042131eb:	48 83 ec 20          	sub    $0x20,%rsp
  80042131ef:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	Dwarf_Section *secthdr = _dwarf_find_section(ds->ds_name);
  80042131f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042131f7:	48 8b 00             	mov    (%rax),%rax
  80042131fa:	48 89 c7             	mov    %rax,%rdi
  80042131fd:	48 b8 0e 65 21 04 80 	movabs $0x800421650e,%rax
  8004213204:	00 00 00 
  8004213207:	ff d0                	callq  *%rax
  8004213209:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	ds->ds_data = secthdr->ds_data;//(Dwarf_Small*)((uint8_t *)elf_base_ptr + secthdr->sh_offset);
  800421320d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004213211:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004213215:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213219:	48 89 50 08          	mov    %rdx,0x8(%rax)
	ds->ds_addr = secthdr->ds_addr;
  800421321d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004213221:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004213225:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213229:	48 89 50 10          	mov    %rdx,0x10(%rax)
	ds->ds_size = secthdr->ds_size;
  800421322d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004213231:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004213235:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213239:	48 89 50 18          	mov    %rdx,0x18(%rax)
	return 0;
  800421323d:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004213242:	c9                   	leaveq 
  8004213243:	c3                   	retq   

0000008004213244 <_dwarf_frame_params_init>:

extern int  _dwarf_find_section_enhanced(Dwarf_Section *ds);

void
_dwarf_frame_params_init(Dwarf_Debug dbg)
{
  8004213244:	55                   	push   %rbp
  8004213245:	48 89 e5             	mov    %rsp,%rbp
  8004213248:	48 83 ec 08          	sub    $0x8,%rsp
  800421324c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	/* Initialise call frame related parameters. */
	dbg->dbg_frame_rule_table_size = DW_FRAME_LAST_REG_NUM;
  8004213250:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004213254:	66 c7 40 48 42 00    	movw   $0x42,0x48(%rax)
	dbg->dbg_frame_rule_initial_value = DW_FRAME_REG_INITIAL_VALUE;
  800421325a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421325e:	66 c7 40 4a 0b 04    	movw   $0x40b,0x4a(%rax)
	dbg->dbg_frame_cfa_value = DW_FRAME_CFA_COL3;
  8004213264:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004213268:	66 c7 40 4c 9c 05    	movw   $0x59c,0x4c(%rax)
	dbg->dbg_frame_same_value = DW_FRAME_SAME_VAL;
  800421326e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004213272:	66 c7 40 4e 0b 04    	movw   $0x40b,0x4e(%rax)
	dbg->dbg_frame_undefined_value = DW_FRAME_UNDEFINED_VAL;
  8004213278:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421327c:	66 c7 40 50 0a 04    	movw   $0x40a,0x50(%rax)
}
  8004213282:	c9                   	leaveq 
  8004213283:	c3                   	retq   

0000008004213284 <dwarf_get_fde_at_pc>:

int
dwarf_get_fde_at_pc(Dwarf_Debug dbg, Dwarf_Addr pc,
		    struct _Dwarf_Fde *ret_fde, Dwarf_Cie cie,
		    Dwarf_Error *error)
{
  8004213284:	55                   	push   %rbp
  8004213285:	48 89 e5             	mov    %rsp,%rbp
  8004213288:	48 83 ec 40          	sub    $0x40,%rsp
  800421328c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004213290:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004213294:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004213298:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  800421329c:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
	Dwarf_Fde fde = ret_fde;
  80042132a0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042132a4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	memset(fde, 0, sizeof(struct _Dwarf_Fde));
  80042132a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042132ac:	ba 80 00 00 00       	mov    $0x80,%edx
  80042132b1:	be 00 00 00 00       	mov    $0x0,%esi
  80042132b6:	48 89 c7             	mov    %rax,%rdi
  80042132b9:	48 b8 37 0e 21 04 80 	movabs $0x8004210e37,%rax
  80042132c0:	00 00 00 
  80042132c3:	ff d0                	callq  *%rax
	fde->fde_cie = cie;
  80042132c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042132c9:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042132cd:	48 89 50 08          	mov    %rdx,0x8(%rax)
	
	if (ret_fde == NULL)
  80042132d1:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  80042132d6:	75 07                	jne    80042132df <dwarf_get_fde_at_pc+0x5b>
		return (DW_DLV_ERROR);
  80042132d8:	b8 01 00 00 00       	mov    $0x1,%eax
  80042132dd:	eb 75                	jmp    8004213354 <dwarf_get_fde_at_pc+0xd0>

	while(dbg->curr_off_eh < dbg->dbg_eh_size) {
  80042132df:	eb 59                	jmp    800421333a <dwarf_get_fde_at_pc+0xb6>
		if (_dwarf_get_next_fde(dbg, true, error, fde) < 0)
  80042132e1:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  80042132e5:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042132e9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042132ed:	be 01 00 00 00       	mov    $0x1,%esi
  80042132f2:	48 89 c7             	mov    %rax,%rdi
  80042132f5:	48 b8 99 54 21 04 80 	movabs $0x8004215499,%rax
  80042132fc:	00 00 00 
  80042132ff:	ff d0                	callq  *%rax
  8004213301:	85 c0                	test   %eax,%eax
  8004213303:	79 07                	jns    800421330c <dwarf_get_fde_at_pc+0x88>
		{
			return DW_DLV_NO_ENTRY;
  8004213305:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800421330a:	eb 48                	jmp    8004213354 <dwarf_get_fde_at_pc+0xd0>
		}
		if (pc >= fde->fde_initloc && pc < fde->fde_initloc +
  800421330c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004213310:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004213314:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004213318:	77 20                	ja     800421333a <dwarf_get_fde_at_pc+0xb6>
  800421331a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421331e:	48 8b 50 30          	mov    0x30(%rax),%rdx
		    fde->fde_adrange)
  8004213322:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004213326:	48 8b 40 38          	mov    0x38(%rax),%rax
	while(dbg->curr_off_eh < dbg->dbg_eh_size) {
		if (_dwarf_get_next_fde(dbg, true, error, fde) < 0)
		{
			return DW_DLV_NO_ENTRY;
		}
		if (pc >= fde->fde_initloc && pc < fde->fde_initloc +
  800421332a:	48 01 d0             	add    %rdx,%rax
  800421332d:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004213331:	76 07                	jbe    800421333a <dwarf_get_fde_at_pc+0xb6>
		    fde->fde_adrange)
			return (DW_DLV_OK);
  8004213333:	b8 00 00 00 00       	mov    $0x0,%eax
  8004213338:	eb 1a                	jmp    8004213354 <dwarf_get_fde_at_pc+0xd0>
	fde->fde_cie = cie;
	
	if (ret_fde == NULL)
		return (DW_DLV_ERROR);

	while(dbg->curr_off_eh < dbg->dbg_eh_size) {
  800421333a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421333e:	48 8b 50 30          	mov    0x30(%rax),%rdx
  8004213342:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213346:	48 8b 40 40          	mov    0x40(%rax),%rax
  800421334a:	48 39 c2             	cmp    %rax,%rdx
  800421334d:	72 92                	jb     80042132e1 <dwarf_get_fde_at_pc+0x5d>
		    fde->fde_adrange)
			return (DW_DLV_OK);
	}

	DWARF_SET_ERROR(dbg, error, DW_DLE_NO_ENTRY);
	return (DW_DLV_NO_ENTRY);
  800421334f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
  8004213354:	c9                   	leaveq 
  8004213355:	c3                   	retq   

0000008004213356 <_dwarf_frame_regtable_copy>:

int
_dwarf_frame_regtable_copy(Dwarf_Debug dbg, Dwarf_Regtable3 **dest,
			   Dwarf_Regtable3 *src, Dwarf_Error *error)
{
  8004213356:	55                   	push   %rbp
  8004213357:	48 89 e5             	mov    %rsp,%rbp
  800421335a:	53                   	push   %rbx
  800421335b:	48 83 ec 38          	sub    $0x38,%rsp
  800421335f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004213363:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004213367:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  800421336b:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
	int i;

	assert(dest != NULL);
  800421336f:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004213374:	75 35                	jne    80042133ab <_dwarf_frame_regtable_copy+0x55>
  8004213376:	48 b9 ba 09 22 04 80 	movabs $0x80042209ba,%rcx
  800421337d:	00 00 00 
  8004213380:	48 ba c7 09 22 04 80 	movabs $0x80042209c7,%rdx
  8004213387:	00 00 00 
  800421338a:	be 57 00 00 00       	mov    $0x57,%esi
  800421338f:	48 bf dc 09 22 04 80 	movabs $0x80042209dc,%rdi
  8004213396:	00 00 00 
  8004213399:	b8 00 00 00 00       	mov    $0x0,%eax
  800421339e:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042133a5:	00 00 00 
  80042133a8:	41 ff d0             	callq  *%r8
	assert(src != NULL);
  80042133ab:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  80042133b0:	75 35                	jne    80042133e7 <_dwarf_frame_regtable_copy+0x91>
  80042133b2:	48 b9 f2 09 22 04 80 	movabs $0x80042209f2,%rcx
  80042133b9:	00 00 00 
  80042133bc:	48 ba c7 09 22 04 80 	movabs $0x80042209c7,%rdx
  80042133c3:	00 00 00 
  80042133c6:	be 58 00 00 00       	mov    $0x58,%esi
  80042133cb:	48 bf dc 09 22 04 80 	movabs $0x80042209dc,%rdi
  80042133d2:	00 00 00 
  80042133d5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042133da:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042133e1:	00 00 00 
  80042133e4:	41 ff d0             	callq  *%r8

	if (*dest == NULL) {
  80042133e7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042133eb:	48 8b 00             	mov    (%rax),%rax
  80042133ee:	48 85 c0             	test   %rax,%rax
  80042133f1:	75 39                	jne    800421342c <_dwarf_frame_regtable_copy+0xd6>
		*dest = &global_rt_table_shadow;
  80042133f3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042133f7:	48 bb e0 06 4e 04 80 	movabs $0x80044e06e0,%rbx
  80042133fe:	00 00 00 
  8004213401:	48 89 18             	mov    %rbx,(%rax)
		(*dest)->rt3_reg_table_size = src->rt3_reg_table_size;
  8004213404:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004213408:	48 8b 00             	mov    (%rax),%rax
  800421340b:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421340f:	0f b7 52 18          	movzwl 0x18(%rdx),%edx
  8004213413:	66 89 50 18          	mov    %dx,0x18(%rax)
		(*dest)->rt3_rules = global_rules_shadow;
  8004213417:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421341b:	48 8b 00             	mov    (%rax),%rax
  800421341e:	48 bb 00 e8 6d 04 80 	movabs $0x80046de800,%rbx
  8004213425:	00 00 00 
  8004213428:	48 89 58 20          	mov    %rbx,0x20(%rax)
	}

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
  800421342c:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  8004213430:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004213434:	48 8b 00             	mov    (%rax),%rax
  8004213437:	ba 18 00 00 00       	mov    $0x18,%edx
  800421343c:	48 89 ce             	mov    %rcx,%rsi
  800421343f:	48 89 c7             	mov    %rax,%rdi
  8004213442:	48 b8 d9 0f 21 04 80 	movabs $0x8004210fd9,%rax
  8004213449:	00 00 00 
  800421344c:	ff d0                	callq  *%rax
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
  800421344e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  8004213455:	eb 5a                	jmp    80042134b1 <_dwarf_frame_regtable_copy+0x15b>
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
  8004213457:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421345b:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421345f:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004213462:	48 63 d0             	movslq %eax,%rdx
  8004213465:	48 89 d0             	mov    %rdx,%rax
  8004213468:	48 01 c0             	add    %rax,%rax
  800421346b:	48 01 d0             	add    %rdx,%rax
  800421346e:	48 c1 e0 03          	shl    $0x3,%rax
  8004213472:	48 01 c1             	add    %rax,%rcx
  8004213475:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004213479:	48 8b 00             	mov    (%rax),%rax
  800421347c:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004213480:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004213483:	48 63 d0             	movslq %eax,%rdx
  8004213486:	48 89 d0             	mov    %rdx,%rax
  8004213489:	48 01 c0             	add    %rax,%rax
  800421348c:	48 01 d0             	add    %rdx,%rax
  800421348f:	48 c1 e0 03          	shl    $0x3,%rax
  8004213493:	48 01 f0             	add    %rsi,%rax
  8004213496:	ba 18 00 00 00       	mov    $0x18,%edx
  800421349b:	48 89 ce             	mov    %rcx,%rsi
  800421349e:	48 89 c7             	mov    %rax,%rdi
  80042134a1:	48 b8 d9 0f 21 04 80 	movabs $0x8004210fd9,%rax
  80042134a8:	00 00 00 
  80042134ab:	ff d0                	callq  *%rax

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
		     i < src->rt3_reg_table_size; i++)
  80042134ad:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
	}

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
  80042134b1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042134b5:	48 8b 00             	mov    (%rax),%rax
  80042134b8:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042134bc:	0f b7 c0             	movzwl %ax,%eax
  80042134bf:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  80042134c2:	7e 10                	jle    80042134d4 <_dwarf_frame_regtable_copy+0x17e>
		     i < src->rt3_reg_table_size; i++)
  80042134c4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042134c8:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042134cc:	0f b7 c0             	movzwl %ax,%eax
	}

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
  80042134cf:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  80042134d2:	7f 83                	jg     8004213457 <_dwarf_frame_regtable_copy+0x101>
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
		       sizeof(Dwarf_Regtable_Entry3));

	for (; i < (*dest)->rt3_reg_table_size; i++)
  80042134d4:	eb 32                	jmp    8004213508 <_dwarf_frame_regtable_copy+0x1b2>
		(*dest)->rt3_rules[i].dw_regnum =
  80042134d6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042134da:	48 8b 00             	mov    (%rax),%rax
  80042134dd:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042134e1:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042134e4:	48 63 d0             	movslq %eax,%rdx
  80042134e7:	48 89 d0             	mov    %rdx,%rax
  80042134ea:	48 01 c0             	add    %rax,%rax
  80042134ed:	48 01 d0             	add    %rdx,%rax
  80042134f0:	48 c1 e0 03          	shl    $0x3,%rax
  80042134f4:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
			dbg->dbg_frame_undefined_value;
  80042134f8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042134fc:	0f b7 40 50          	movzwl 0x50(%rax),%eax
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
		       sizeof(Dwarf_Regtable_Entry3));

	for (; i < (*dest)->rt3_reg_table_size; i++)
		(*dest)->rt3_rules[i].dw_regnum =
  8004213500:	66 89 42 02          	mov    %ax,0x2(%rdx)
	for (i = 0; i < (*dest)->rt3_reg_table_size &&
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
		       sizeof(Dwarf_Regtable_Entry3));

	for (; i < (*dest)->rt3_reg_table_size; i++)
  8004213504:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  8004213508:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421350c:	48 8b 00             	mov    (%rax),%rax
  800421350f:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213513:	0f b7 c0             	movzwl %ax,%eax
  8004213516:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  8004213519:	7f bb                	jg     80042134d6 <_dwarf_frame_regtable_copy+0x180>
		(*dest)->rt3_rules[i].dw_regnum =
			dbg->dbg_frame_undefined_value;

	return (DW_DLE_NONE);
  800421351b:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004213520:	48 83 c4 38          	add    $0x38,%rsp
  8004213524:	5b                   	pop    %rbx
  8004213525:	5d                   	pop    %rbp
  8004213526:	c3                   	retq   

0000008004213527 <_dwarf_frame_run_inst>:

static int
_dwarf_frame_run_inst(Dwarf_Debug dbg, Dwarf_Regtable3 *rt, uint8_t *insts,
		      Dwarf_Unsigned len, Dwarf_Unsigned caf, Dwarf_Signed daf, Dwarf_Addr pc,
		      Dwarf_Addr pc_req, Dwarf_Addr *row_pc, Dwarf_Error *error)
{
  8004213527:	55                   	push   %rbp
  8004213528:	48 89 e5             	mov    %rsp,%rbp
  800421352b:	53                   	push   %rbx
  800421352c:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  8004213533:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  8004213537:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  800421353b:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  800421353f:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
  8004213543:	4c 89 85 78 ff ff ff 	mov    %r8,-0x88(%rbp)
  800421354a:	4c 89 8d 70 ff ff ff 	mov    %r9,-0x90(%rbp)
			ret = DW_DLE_DF_REG_NUM_TOO_HIGH;               \
			goto program_done;                              \
		}                                                       \
	} while(0)

	ret = DW_DLE_NONE;
  8004213551:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
	init_rt = saved_rt = NULL;
  8004213558:	48 c7 45 a8 00 00 00 	movq   $0x0,-0x58(%rbp)
  800421355f:	00 
  8004213560:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004213564:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	*row_pc = pc;
  8004213568:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800421356c:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213570:	48 89 10             	mov    %rdx,(%rax)

	/* Save a copy of the table as initial state. */
	_dwarf_frame_regtable_copy(dbg, &init_rt, rt, error);
  8004213573:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  8004213577:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  800421357b:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
  800421357f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213583:	48 89 c7             	mov    %rax,%rdi
  8004213586:	48 b8 56 33 21 04 80 	movabs $0x8004213356,%rax
  800421358d:	00 00 00 
  8004213590:	ff d0                	callq  *%rax
	p = insts;
  8004213592:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004213596:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
	pe = p + len;
  800421359a:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800421359e:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042135a2:	48 01 d0             	add    %rdx,%rax
  80042135a5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

	while (p < pe) {
  80042135a9:	e9 3a 0d 00 00       	jmpq   80042142e8 <_dwarf_frame_run_inst+0xdc1>
		if (*p == DW_CFA_nop) {
  80042135ae:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042135b2:	0f b6 00             	movzbl (%rax),%eax
  80042135b5:	84 c0                	test   %al,%al
  80042135b7:	75 11                	jne    80042135ca <_dwarf_frame_run_inst+0xa3>
			p++;
  80042135b9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042135bd:	48 83 c0 01          	add    $0x1,%rax
  80042135c1:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			continue;
  80042135c5:	e9 1e 0d 00 00       	jmpq   80042142e8 <_dwarf_frame_run_inst+0xdc1>
		}

		high2 = *p & 0xc0;
  80042135ca:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042135ce:	0f b6 00             	movzbl (%rax),%eax
  80042135d1:	83 e0 c0             	and    $0xffffffc0,%eax
  80042135d4:	88 45 df             	mov    %al,-0x21(%rbp)
		low6 = *p & 0x3f;
  80042135d7:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042135db:	0f b6 00             	movzbl (%rax),%eax
  80042135de:	83 e0 3f             	and    $0x3f,%eax
  80042135e1:	88 45 de             	mov    %al,-0x22(%rbp)
		p++;
  80042135e4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042135e8:	48 83 c0 01          	add    $0x1,%rax
  80042135ec:	48 89 45 a0          	mov    %rax,-0x60(%rbp)

		if (high2 > 0) {
  80042135f0:	80 7d df 00          	cmpb   $0x0,-0x21(%rbp)
  80042135f4:	0f 84 a1 01 00 00    	je     800421379b <_dwarf_frame_run_inst+0x274>
			switch (high2) {
  80042135fa:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  80042135fe:	3d 80 00 00 00       	cmp    $0x80,%eax
  8004213603:	74 38                	je     800421363d <_dwarf_frame_run_inst+0x116>
  8004213605:	3d c0 00 00 00       	cmp    $0xc0,%eax
  800421360a:	0f 84 01 01 00 00    	je     8004213711 <_dwarf_frame_run_inst+0x1ea>
  8004213610:	83 f8 40             	cmp    $0x40,%eax
  8004213613:	0f 85 71 01 00 00    	jne    800421378a <_dwarf_frame_run_inst+0x263>
			case DW_CFA_advance_loc:
			        pc += low6 * caf;
  8004213619:	0f b6 45 de          	movzbl -0x22(%rbp),%eax
  800421361d:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  8004213624:	ff 
  8004213625:	48 01 45 10          	add    %rax,0x10(%rbp)
			        if (pc_req < pc)
  8004213629:	48 8b 45 18          	mov    0x18(%rbp),%rax
  800421362d:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  8004213631:	73 05                	jae    8004213638 <_dwarf_frame_run_inst+0x111>
			                goto program_done;
  8004213633:	e9 be 0c 00 00       	jmpq   80042142f6 <_dwarf_frame_run_inst+0xdcf>
			        break;
  8004213638:	e9 59 01 00 00       	jmpq   8004213796 <_dwarf_frame_run_inst+0x26f>
			case DW_CFA_offset:
			        *row_pc = pc;
  800421363d:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213641:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213645:	48 89 10             	mov    %rdx,(%rax)
			        CHECK_TABLE_SIZE(low6);
  8004213648:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  800421364c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213650:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213654:	66 39 c2             	cmp    %ax,%dx
  8004213657:	72 0c                	jb     8004213665 <_dwarf_frame_run_inst+0x13e>
  8004213659:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213660:	e9 91 0c 00 00       	jmpq   80042142f6 <_dwarf_frame_run_inst+0xdcf>
			        RL[low6].dw_offset_relevant = 1;
  8004213665:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213669:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421366d:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  8004213671:	48 89 d0             	mov    %rdx,%rax
  8004213674:	48 01 c0             	add    %rax,%rax
  8004213677:	48 01 d0             	add    %rdx,%rax
  800421367a:	48 c1 e0 03          	shl    $0x3,%rax
  800421367e:	48 01 c8             	add    %rcx,%rax
  8004213681:	c6 00 01             	movb   $0x1,(%rax)
			        RL[low6].dw_value_type = DW_EXPR_OFFSET;
  8004213684:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213688:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421368c:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  8004213690:	48 89 d0             	mov    %rdx,%rax
  8004213693:	48 01 c0             	add    %rax,%rax
  8004213696:	48 01 d0             	add    %rdx,%rax
  8004213699:	48 c1 e0 03          	shl    $0x3,%rax
  800421369d:	48 01 c8             	add    %rcx,%rax
  80042136a0:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			        RL[low6].dw_regnum = dbg->dbg_frame_cfa_value;
  80042136a4:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042136a8:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042136ac:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  80042136b0:	48 89 d0             	mov    %rdx,%rax
  80042136b3:	48 01 c0             	add    %rax,%rax
  80042136b6:	48 01 d0             	add    %rdx,%rax
  80042136b9:	48 c1 e0 03          	shl    $0x3,%rax
  80042136bd:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  80042136c1:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042136c5:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  80042136c9:	66 89 42 02          	mov    %ax,0x2(%rdx)
			        RL[low6].dw_offset_or_block_len =
  80042136cd:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042136d1:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042136d5:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  80042136d9:	48 89 d0             	mov    %rdx,%rax
  80042136dc:	48 01 c0             	add    %rax,%rax
  80042136df:	48 01 d0             	add    %rdx,%rax
  80042136e2:	48 c1 e0 03          	shl    $0x3,%rax
  80042136e6:	48 8d 1c 01          	lea    (%rcx,%rax,1),%rbx
					_dwarf_decode_uleb128(&p) * daf;
  80042136ea:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042136ee:	48 89 c7             	mov    %rax,%rdi
  80042136f1:	48 b8 5a 1a 21 04 80 	movabs $0x8004211a5a,%rax
  80042136f8:	00 00 00 
  80042136fb:	ff d0                	callq  *%rax
  80042136fd:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  8004213704:	48 0f af c2          	imul   %rdx,%rax
			        *row_pc = pc;
			        CHECK_TABLE_SIZE(low6);
			        RL[low6].dw_offset_relevant = 1;
			        RL[low6].dw_value_type = DW_EXPR_OFFSET;
			        RL[low6].dw_regnum = dbg->dbg_frame_cfa_value;
			        RL[low6].dw_offset_or_block_len =
  8004213708:	48 89 43 08          	mov    %rax,0x8(%rbx)
					_dwarf_decode_uleb128(&p) * daf;
			        break;
  800421370c:	e9 85 00 00 00       	jmpq   8004213796 <_dwarf_frame_run_inst+0x26f>
			case DW_CFA_restore:
			        *row_pc = pc;
  8004213711:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213715:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213719:	48 89 10             	mov    %rdx,(%rax)
			        CHECK_TABLE_SIZE(low6);
  800421371c:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  8004213720:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213724:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213728:	66 39 c2             	cmp    %ax,%dx
  800421372b:	72 0c                	jb     8004213739 <_dwarf_frame_run_inst+0x212>
  800421372d:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213734:	e9 bd 0b 00 00       	jmpq   80042142f6 <_dwarf_frame_run_inst+0xdcf>
			        memcpy(&RL[low6], &INITRL[low6],
  8004213739:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421373d:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213741:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  8004213745:	48 89 d0             	mov    %rdx,%rax
  8004213748:	48 01 c0             	add    %rax,%rax
  800421374b:	48 01 d0             	add    %rdx,%rax
  800421374e:	48 c1 e0 03          	shl    $0x3,%rax
  8004213752:	48 01 c1             	add    %rax,%rcx
  8004213755:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213759:	48 8b 70 20          	mov    0x20(%rax),%rsi
  800421375d:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  8004213761:	48 89 d0             	mov    %rdx,%rax
  8004213764:	48 01 c0             	add    %rax,%rax
  8004213767:	48 01 d0             	add    %rdx,%rax
  800421376a:	48 c1 e0 03          	shl    $0x3,%rax
  800421376e:	48 01 f0             	add    %rsi,%rax
  8004213771:	ba 18 00 00 00       	mov    $0x18,%edx
  8004213776:	48 89 ce             	mov    %rcx,%rsi
  8004213779:	48 89 c7             	mov    %rax,%rdi
  800421377c:	48 b8 d9 0f 21 04 80 	movabs $0x8004210fd9,%rax
  8004213783:	00 00 00 
  8004213786:	ff d0                	callq  *%rax
				       sizeof(Dwarf_Regtable_Entry3));
			        break;
  8004213788:	eb 0c                	jmp    8004213796 <_dwarf_frame_run_inst+0x26f>
			default:
			        DWARF_SET_ERROR(dbg, error,
						DW_DLE_FRAME_INSTR_EXEC_ERROR);
			        ret = DW_DLE_FRAME_INSTR_EXEC_ERROR;
  800421378a:	c7 45 ec 15 00 00 00 	movl   $0x15,-0x14(%rbp)
			        goto program_done;
  8004213791:	e9 60 0b 00 00       	jmpq   80042142f6 <_dwarf_frame_run_inst+0xdcf>
			}

			continue;
  8004213796:	e9 4d 0b 00 00       	jmpq   80042142e8 <_dwarf_frame_run_inst+0xdc1>
		}

		switch (low6) {
  800421379b:	0f b6 45 de          	movzbl -0x22(%rbp),%eax
  800421379f:	83 f8 16             	cmp    $0x16,%eax
  80042137a2:	0f 87 37 0b 00 00    	ja     80042142df <_dwarf_frame_run_inst+0xdb8>
  80042137a8:	89 c0                	mov    %eax,%eax
  80042137aa:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042137b1:	00 
  80042137b2:	48 b8 00 0a 22 04 80 	movabs $0x8004220a00,%rax
  80042137b9:	00 00 00 
  80042137bc:	48 01 d0             	add    %rdx,%rax
  80042137bf:	48 8b 00             	mov    (%rax),%rax
  80042137c2:	ff e0                	jmpq   *%rax
		case DW_CFA_set_loc:
			pc = dbg->decode(&p, dbg->dbg_pointer_size);
  80042137c4:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042137c8:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042137cc:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  80042137d0:	8b 4a 28             	mov    0x28(%rdx),%ecx
  80042137d3:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  80042137d7:	89 ce                	mov    %ecx,%esi
  80042137d9:	48 89 d7             	mov    %rdx,%rdi
  80042137dc:	ff d0                	callq  *%rax
  80042137de:	48 89 45 10          	mov    %rax,0x10(%rbp)
			if (pc_req < pc)
  80042137e2:	48 8b 45 18          	mov    0x18(%rbp),%rax
  80042137e6:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  80042137ea:	73 05                	jae    80042137f1 <_dwarf_frame_run_inst+0x2ca>
			        goto program_done;
  80042137ec:	e9 05 0b 00 00       	jmpq   80042142f6 <_dwarf_frame_run_inst+0xdcf>
			break;
  80042137f1:	e9 f2 0a 00 00       	jmpq   80042142e8 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_advance_loc1:
			pc += dbg->decode(&p, 1) * caf;
  80042137f6:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042137fa:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042137fe:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  8004213802:	be 01 00 00 00       	mov    $0x1,%esi
  8004213807:	48 89 d7             	mov    %rdx,%rdi
  800421380a:	ff d0                	callq  *%rax
  800421380c:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  8004213813:	ff 
  8004213814:	48 01 45 10          	add    %rax,0x10(%rbp)
			if (pc_req < pc)
  8004213818:	48 8b 45 18          	mov    0x18(%rbp),%rax
  800421381c:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  8004213820:	73 05                	jae    8004213827 <_dwarf_frame_run_inst+0x300>
			        goto program_done;
  8004213822:	e9 cf 0a 00 00       	jmpq   80042142f6 <_dwarf_frame_run_inst+0xdcf>
			break;
  8004213827:	e9 bc 0a 00 00       	jmpq   80042142e8 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_advance_loc2:
			pc += dbg->decode(&p, 2) * caf;
  800421382c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213830:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004213834:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  8004213838:	be 02 00 00 00       	mov    $0x2,%esi
  800421383d:	48 89 d7             	mov    %rdx,%rdi
  8004213840:	ff d0                	callq  *%rax
  8004213842:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  8004213849:	ff 
  800421384a:	48 01 45 10          	add    %rax,0x10(%rbp)
			if (pc_req < pc)
  800421384e:	48 8b 45 18          	mov    0x18(%rbp),%rax
  8004213852:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  8004213856:	73 05                	jae    800421385d <_dwarf_frame_run_inst+0x336>
			        goto program_done;
  8004213858:	e9 99 0a 00 00       	jmpq   80042142f6 <_dwarf_frame_run_inst+0xdcf>
			break;
  800421385d:	e9 86 0a 00 00       	jmpq   80042142e8 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_advance_loc4:
			pc += dbg->decode(&p, 4) * caf;
  8004213862:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213866:	48 8b 40 20          	mov    0x20(%rax),%rax
  800421386a:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  800421386e:	be 04 00 00 00       	mov    $0x4,%esi
  8004213873:	48 89 d7             	mov    %rdx,%rdi
  8004213876:	ff d0                	callq  *%rax
  8004213878:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  800421387f:	ff 
  8004213880:	48 01 45 10          	add    %rax,0x10(%rbp)
			if (pc_req < pc)
  8004213884:	48 8b 45 18          	mov    0x18(%rbp),%rax
  8004213888:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  800421388c:	73 05                	jae    8004213893 <_dwarf_frame_run_inst+0x36c>
			        goto program_done;
  800421388e:	e9 63 0a 00 00       	jmpq   80042142f6 <_dwarf_frame_run_inst+0xdcf>
			break;
  8004213893:	e9 50 0a 00 00       	jmpq   80042142e8 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_offset_extended:
			*row_pc = pc;
  8004213898:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800421389c:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042138a0:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  80042138a3:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042138a7:	48 89 c7             	mov    %rax,%rdi
  80042138aa:	48 b8 5a 1a 21 04 80 	movabs $0x8004211a5a,%rax
  80042138b1:	00 00 00 
  80042138b4:	ff d0                	callq  *%rax
  80042138b6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			uoff = _dwarf_decode_uleb128(&p);
  80042138ba:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042138be:	48 89 c7             	mov    %rax,%rdi
  80042138c1:	48 b8 5a 1a 21 04 80 	movabs $0x8004211a5a,%rax
  80042138c8:	00 00 00 
  80042138cb:	ff d0                	callq  *%rax
  80042138cd:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CHECK_TABLE_SIZE(reg);
  80042138d1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042138d5:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042138d9:	0f b7 c0             	movzwl %ax,%eax
  80042138dc:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  80042138e0:	77 0c                	ja     80042138ee <_dwarf_frame_run_inst+0x3c7>
  80042138e2:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  80042138e9:	e9 08 0a 00 00       	jmpq   80042142f6 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  80042138ee:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042138f2:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042138f6:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042138fa:	48 89 d0             	mov    %rdx,%rax
  80042138fd:	48 01 c0             	add    %rax,%rax
  8004213900:	48 01 d0             	add    %rdx,%rax
  8004213903:	48 c1 e0 03          	shl    $0x3,%rax
  8004213907:	48 01 c8             	add    %rcx,%rax
  800421390a:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_OFFSET;
  800421390d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213911:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213915:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213919:	48 89 d0             	mov    %rdx,%rax
  800421391c:	48 01 c0             	add    %rax,%rax
  800421391f:	48 01 d0             	add    %rdx,%rax
  8004213922:	48 c1 e0 03          	shl    $0x3,%rax
  8004213926:	48 01 c8             	add    %rcx,%rax
  8004213929:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  800421392d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213931:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213935:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213939:	48 89 d0             	mov    %rdx,%rax
  800421393c:	48 01 c0             	add    %rax,%rax
  800421393f:	48 01 d0             	add    %rdx,%rax
  8004213942:	48 c1 e0 03          	shl    $0x3,%rax
  8004213946:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  800421394a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421394e:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004213952:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = uoff * daf;
  8004213956:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421395a:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421395e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213962:	48 89 d0             	mov    %rdx,%rax
  8004213965:	48 01 c0             	add    %rax,%rax
  8004213968:	48 01 d0             	add    %rdx,%rax
  800421396b:	48 c1 e0 03          	shl    $0x3,%rax
  800421396f:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213973:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  800421397a:	48 0f af 45 c8       	imul   -0x38(%rbp),%rax
  800421397f:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  8004213983:	e9 60 09 00 00       	jmpq   80042142e8 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_restore_extended:
			*row_pc = pc;
  8004213988:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800421398c:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213990:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213993:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213997:	48 89 c7             	mov    %rax,%rdi
  800421399a:	48 b8 5a 1a 21 04 80 	movabs $0x8004211a5a,%rax
  80042139a1:	00 00 00 
  80042139a4:	ff d0                	callq  *%rax
  80042139a6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  80042139aa:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042139ae:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042139b2:	0f b7 c0             	movzwl %ax,%eax
  80042139b5:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  80042139b9:	77 0c                	ja     80042139c7 <_dwarf_frame_run_inst+0x4a0>
  80042139bb:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  80042139c2:	e9 2f 09 00 00       	jmpq   80042142f6 <_dwarf_frame_run_inst+0xdcf>
			memcpy(&RL[reg], &INITRL[reg],
  80042139c7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042139cb:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042139cf:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042139d3:	48 89 d0             	mov    %rdx,%rax
  80042139d6:	48 01 c0             	add    %rax,%rax
  80042139d9:	48 01 d0             	add    %rdx,%rax
  80042139dc:	48 c1 e0 03          	shl    $0x3,%rax
  80042139e0:	48 01 c1             	add    %rax,%rcx
  80042139e3:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042139e7:	48 8b 70 20          	mov    0x20(%rax),%rsi
  80042139eb:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042139ef:	48 89 d0             	mov    %rdx,%rax
  80042139f2:	48 01 c0             	add    %rax,%rax
  80042139f5:	48 01 d0             	add    %rdx,%rax
  80042139f8:	48 c1 e0 03          	shl    $0x3,%rax
  80042139fc:	48 01 f0             	add    %rsi,%rax
  80042139ff:	ba 18 00 00 00       	mov    $0x18,%edx
  8004213a04:	48 89 ce             	mov    %rcx,%rsi
  8004213a07:	48 89 c7             	mov    %rax,%rdi
  8004213a0a:	48 b8 d9 0f 21 04 80 	movabs $0x8004210fd9,%rax
  8004213a11:	00 00 00 
  8004213a14:	ff d0                	callq  *%rax
			       sizeof(Dwarf_Regtable_Entry3));
			break;
  8004213a16:	e9 cd 08 00 00       	jmpq   80042142e8 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_undefined:
			*row_pc = pc;
  8004213a1b:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213a1f:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213a23:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213a26:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213a2a:	48 89 c7             	mov    %rax,%rdi
  8004213a2d:	48 b8 5a 1a 21 04 80 	movabs $0x8004211a5a,%rax
  8004213a34:	00 00 00 
  8004213a37:	ff d0                	callq  *%rax
  8004213a39:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213a3d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213a41:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213a45:	0f b7 c0             	movzwl %ax,%eax
  8004213a48:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213a4c:	77 0c                	ja     8004213a5a <_dwarf_frame_run_inst+0x533>
  8004213a4e:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213a55:	e9 9c 08 00 00       	jmpq   80042142f6 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  8004213a5a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213a5e:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213a62:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213a66:	48 89 d0             	mov    %rdx,%rax
  8004213a69:	48 01 c0             	add    %rax,%rax
  8004213a6c:	48 01 d0             	add    %rdx,%rax
  8004213a6f:	48 c1 e0 03          	shl    $0x3,%rax
  8004213a73:	48 01 c8             	add    %rcx,%rax
  8004213a76:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_undefined_value;
  8004213a79:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213a7d:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213a81:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213a85:	48 89 d0             	mov    %rdx,%rax
  8004213a88:	48 01 c0             	add    %rax,%rax
  8004213a8b:	48 01 d0             	add    %rdx,%rax
  8004213a8e:	48 c1 e0 03          	shl    $0x3,%rax
  8004213a92:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213a96:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213a9a:	0f b7 40 50          	movzwl 0x50(%rax),%eax
  8004213a9e:	66 89 42 02          	mov    %ax,0x2(%rdx)
			break;
  8004213aa2:	e9 41 08 00 00       	jmpq   80042142e8 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_same_value:
			reg = _dwarf_decode_uleb128(&p);
  8004213aa7:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213aab:	48 89 c7             	mov    %rax,%rdi
  8004213aae:	48 b8 5a 1a 21 04 80 	movabs $0x8004211a5a,%rax
  8004213ab5:	00 00 00 
  8004213ab8:	ff d0                	callq  *%rax
  8004213aba:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213abe:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213ac2:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213ac6:	0f b7 c0             	movzwl %ax,%eax
  8004213ac9:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213acd:	77 0c                	ja     8004213adb <_dwarf_frame_run_inst+0x5b4>
  8004213acf:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213ad6:	e9 1b 08 00 00       	jmpq   80042142f6 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  8004213adb:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213adf:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213ae3:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213ae7:	48 89 d0             	mov    %rdx,%rax
  8004213aea:	48 01 c0             	add    %rax,%rax
  8004213aed:	48 01 d0             	add    %rdx,%rax
  8004213af0:	48 c1 e0 03          	shl    $0x3,%rax
  8004213af4:	48 01 c8             	add    %rcx,%rax
  8004213af7:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_same_value;
  8004213afa:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213afe:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213b02:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213b06:	48 89 d0             	mov    %rdx,%rax
  8004213b09:	48 01 c0             	add    %rax,%rax
  8004213b0c:	48 01 d0             	add    %rdx,%rax
  8004213b0f:	48 c1 e0 03          	shl    $0x3,%rax
  8004213b13:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213b17:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213b1b:	0f b7 40 4e          	movzwl 0x4e(%rax),%eax
  8004213b1f:	66 89 42 02          	mov    %ax,0x2(%rdx)
			break;
  8004213b23:	e9 c0 07 00 00       	jmpq   80042142e8 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_register:
			*row_pc = pc;
  8004213b28:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213b2c:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213b30:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213b33:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213b37:	48 89 c7             	mov    %rax,%rdi
  8004213b3a:	48 b8 5a 1a 21 04 80 	movabs $0x8004211a5a,%rax
  8004213b41:	00 00 00 
  8004213b44:	ff d0                	callq  *%rax
  8004213b46:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			reg2 = _dwarf_decode_uleb128(&p);
  8004213b4a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213b4e:	48 89 c7             	mov    %rax,%rdi
  8004213b51:	48 b8 5a 1a 21 04 80 	movabs $0x8004211a5a,%rax
  8004213b58:	00 00 00 
  8004213b5b:	ff d0                	callq  *%rax
  8004213b5d:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213b61:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213b65:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213b69:	0f b7 c0             	movzwl %ax,%eax
  8004213b6c:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213b70:	77 0c                	ja     8004213b7e <_dwarf_frame_run_inst+0x657>
  8004213b72:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213b79:	e9 78 07 00 00       	jmpq   80042142f6 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  8004213b7e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213b82:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213b86:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213b8a:	48 89 d0             	mov    %rdx,%rax
  8004213b8d:	48 01 c0             	add    %rax,%rax
  8004213b90:	48 01 d0             	add    %rdx,%rax
  8004213b93:	48 c1 e0 03          	shl    $0x3,%rax
  8004213b97:	48 01 c8             	add    %rcx,%rax
  8004213b9a:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_regnum = reg2;
  8004213b9d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213ba1:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213ba5:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213ba9:	48 89 d0             	mov    %rdx,%rax
  8004213bac:	48 01 c0             	add    %rax,%rax
  8004213baf:	48 01 d0             	add    %rdx,%rax
  8004213bb2:	48 c1 e0 03          	shl    $0x3,%rax
  8004213bb6:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213bba:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213bbe:	66 89 42 02          	mov    %ax,0x2(%rdx)
			break;
  8004213bc2:	e9 21 07 00 00       	jmpq   80042142e8 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_remember_state:
			_dwarf_frame_regtable_copy(dbg, &saved_rt, rt, error);
  8004213bc7:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  8004213bcb:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  8004213bcf:	48 8d 75 a8          	lea    -0x58(%rbp),%rsi
  8004213bd3:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213bd7:	48 89 c7             	mov    %rax,%rdi
  8004213bda:	48 b8 56 33 21 04 80 	movabs $0x8004213356,%rax
  8004213be1:	00 00 00 
  8004213be4:	ff d0                	callq  *%rax
			break;
  8004213be6:	e9 fd 06 00 00       	jmpq   80042142e8 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_restore_state:
			*row_pc = pc;
  8004213beb:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213bef:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213bf3:	48 89 10             	mov    %rdx,(%rax)
			_dwarf_frame_regtable_copy(dbg, &rt, saved_rt, error);
  8004213bf6:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004213bfa:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  8004213bfe:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
  8004213c02:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213c06:	48 89 c7             	mov    %rax,%rdi
  8004213c09:	48 b8 56 33 21 04 80 	movabs $0x8004213356,%rax
  8004213c10:	00 00 00 
  8004213c13:	ff d0                	callq  *%rax
			break;
  8004213c15:	e9 ce 06 00 00       	jmpq   80042142e8 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa:
			*row_pc = pc;
  8004213c1a:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213c1e:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213c22:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213c25:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213c29:	48 89 c7             	mov    %rax,%rdi
  8004213c2c:	48 b8 5a 1a 21 04 80 	movabs $0x8004211a5a,%rax
  8004213c33:	00 00 00 
  8004213c36:	ff d0                	callq  *%rax
  8004213c38:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			uoff = _dwarf_decode_uleb128(&p);
  8004213c3c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213c40:	48 89 c7             	mov    %rax,%rdi
  8004213c43:	48 b8 5a 1a 21 04 80 	movabs $0x8004211a5a,%rax
  8004213c4a:	00 00 00 
  8004213c4d:	ff d0                	callq  *%rax
  8004213c4f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CFA.dw_offset_relevant = 1;
  8004213c53:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213c57:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  8004213c5a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213c5e:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_regnum = reg;
  8004213c62:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213c66:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213c6a:	66 89 50 02          	mov    %dx,0x2(%rax)
			CFA.dw_offset_or_block_len = uoff;
  8004213c6e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213c72:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004213c76:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  8004213c7a:	e9 69 06 00 00       	jmpq   80042142e8 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_register:
			*row_pc = pc;
  8004213c7f:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213c83:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213c87:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213c8a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213c8e:	48 89 c7             	mov    %rax,%rdi
  8004213c91:	48 b8 5a 1a 21 04 80 	movabs $0x8004211a5a,%rax
  8004213c98:	00 00 00 
  8004213c9b:	ff d0                	callq  *%rax
  8004213c9d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CFA.dw_regnum = reg;
  8004213ca1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213ca5:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213ca9:	66 89 50 02          	mov    %dx,0x2(%rax)
			 * Note that DW_CFA_def_cfa_register change the CFA
			 * rule register while keep the old offset. So we
			 * should not touch the CFA.dw_offset_relevant flag
			 * here.
			 */
			break;
  8004213cad:	e9 36 06 00 00       	jmpq   80042142e8 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_offset:
			*row_pc = pc;
  8004213cb2:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213cb6:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213cba:	48 89 10             	mov    %rdx,(%rax)
			uoff = _dwarf_decode_uleb128(&p);
  8004213cbd:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213cc1:	48 89 c7             	mov    %rax,%rdi
  8004213cc4:	48 b8 5a 1a 21 04 80 	movabs $0x8004211a5a,%rax
  8004213ccb:	00 00 00 
  8004213cce:	ff d0                	callq  *%rax
  8004213cd0:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CFA.dw_offset_relevant = 1;
  8004213cd4:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213cd8:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  8004213cdb:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213cdf:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_offset_or_block_len = uoff;
  8004213ce3:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213ce7:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004213ceb:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  8004213cef:	e9 f4 05 00 00       	jmpq   80042142e8 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_expression:
			*row_pc = pc;
  8004213cf4:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213cf8:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213cfc:	48 89 10             	mov    %rdx,(%rax)
			CFA.dw_offset_relevant = 0;
  8004213cff:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213d03:	c6 00 00             	movb   $0x0,(%rax)
			CFA.dw_value_type = DW_EXPR_EXPRESSION;
  8004213d06:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213d0a:	c6 40 01 02          	movb   $0x2,0x1(%rax)
			CFA.dw_offset_or_block_len = _dwarf_decode_uleb128(&p);
  8004213d0e:	48 8b 5d 90          	mov    -0x70(%rbp),%rbx
  8004213d12:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213d16:	48 89 c7             	mov    %rax,%rdi
  8004213d19:	48 b8 5a 1a 21 04 80 	movabs $0x8004211a5a,%rax
  8004213d20:	00 00 00 
  8004213d23:	ff d0                	callq  *%rax
  8004213d25:	48 89 43 08          	mov    %rax,0x8(%rbx)
			CFA.dw_block_ptr = p;
  8004213d29:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213d2d:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004213d31:	48 89 50 10          	mov    %rdx,0x10(%rax)
			p += CFA.dw_offset_or_block_len;
  8004213d35:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004213d39:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213d3d:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004213d41:	48 01 d0             	add    %rdx,%rax
  8004213d44:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			break;
  8004213d48:	e9 9b 05 00 00       	jmpq   80042142e8 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_expression:
			*row_pc = pc;
  8004213d4d:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213d51:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213d55:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213d58:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213d5c:	48 89 c7             	mov    %rax,%rdi
  8004213d5f:	48 b8 5a 1a 21 04 80 	movabs $0x8004211a5a,%rax
  8004213d66:	00 00 00 
  8004213d69:	ff d0                	callq  *%rax
  8004213d6b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213d6f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213d73:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213d77:	0f b7 c0             	movzwl %ax,%eax
  8004213d7a:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213d7e:	77 0c                	ja     8004213d8c <_dwarf_frame_run_inst+0x865>
  8004213d80:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213d87:	e9 6a 05 00 00       	jmpq   80042142f6 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  8004213d8c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213d90:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213d94:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213d98:	48 89 d0             	mov    %rdx,%rax
  8004213d9b:	48 01 c0             	add    %rax,%rax
  8004213d9e:	48 01 d0             	add    %rdx,%rax
  8004213da1:	48 c1 e0 03          	shl    $0x3,%rax
  8004213da5:	48 01 c8             	add    %rcx,%rax
  8004213da8:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_value_type = DW_EXPR_EXPRESSION;
  8004213dab:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213daf:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213db3:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213db7:	48 89 d0             	mov    %rdx,%rax
  8004213dba:	48 01 c0             	add    %rax,%rax
  8004213dbd:	48 01 d0             	add    %rdx,%rax
  8004213dc0:	48 c1 e0 03          	shl    $0x3,%rax
  8004213dc4:	48 01 c8             	add    %rcx,%rax
  8004213dc7:	c6 40 01 02          	movb   $0x2,0x1(%rax)
			RL[reg].dw_offset_or_block_len =
  8004213dcb:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213dcf:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213dd3:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213dd7:	48 89 d0             	mov    %rdx,%rax
  8004213dda:	48 01 c0             	add    %rax,%rax
  8004213ddd:	48 01 d0             	add    %rdx,%rax
  8004213de0:	48 c1 e0 03          	shl    $0x3,%rax
  8004213de4:	48 8d 1c 01          	lea    (%rcx,%rax,1),%rbx
				_dwarf_decode_uleb128(&p);
  8004213de8:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213dec:	48 89 c7             	mov    %rax,%rdi
  8004213def:	48 b8 5a 1a 21 04 80 	movabs $0x8004211a5a,%rax
  8004213df6:	00 00 00 
  8004213df9:	ff d0                	callq  *%rax
			*row_pc = pc;
			reg = _dwarf_decode_uleb128(&p);
			CHECK_TABLE_SIZE(reg);
			RL[reg].dw_offset_relevant = 0;
			RL[reg].dw_value_type = DW_EXPR_EXPRESSION;
			RL[reg].dw_offset_or_block_len =
  8004213dfb:	48 89 43 08          	mov    %rax,0x8(%rbx)
				_dwarf_decode_uleb128(&p);
			RL[reg].dw_block_ptr = p;
  8004213dff:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213e03:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213e07:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213e0b:	48 89 d0             	mov    %rdx,%rax
  8004213e0e:	48 01 c0             	add    %rax,%rax
  8004213e11:	48 01 d0             	add    %rdx,%rax
  8004213e14:	48 c1 e0 03          	shl    $0x3,%rax
  8004213e18:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213e1c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004213e20:	48 89 42 10          	mov    %rax,0x10(%rdx)
			p += RL[reg].dw_offset_or_block_len;
  8004213e24:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004213e28:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213e2c:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004213e30:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213e34:	48 89 d0             	mov    %rdx,%rax
  8004213e37:	48 01 c0             	add    %rax,%rax
  8004213e3a:	48 01 d0             	add    %rdx,%rax
  8004213e3d:	48 c1 e0 03          	shl    $0x3,%rax
  8004213e41:	48 01 f0             	add    %rsi,%rax
  8004213e44:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004213e48:	48 01 c8             	add    %rcx,%rax
  8004213e4b:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			break;
  8004213e4f:	e9 94 04 00 00       	jmpq   80042142e8 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_offset_extended_sf:
			*row_pc = pc;
  8004213e54:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213e58:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213e5c:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213e5f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213e63:	48 89 c7             	mov    %rax,%rdi
  8004213e66:	48 b8 5a 1a 21 04 80 	movabs $0x8004211a5a,%rax
  8004213e6d:	00 00 00 
  8004213e70:	ff d0                	callq  *%rax
  8004213e72:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			soff = _dwarf_decode_sleb128(&p);
  8004213e76:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213e7a:	48 89 c7             	mov    %rax,%rdi
  8004213e7d:	48 b8 c8 19 21 04 80 	movabs $0x80042119c8,%rax
  8004213e84:	00 00 00 
  8004213e87:	ff d0                	callq  *%rax
  8004213e89:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213e8d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213e91:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213e95:	0f b7 c0             	movzwl %ax,%eax
  8004213e98:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213e9c:	77 0c                	ja     8004213eaa <_dwarf_frame_run_inst+0x983>
  8004213e9e:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213ea5:	e9 4c 04 00 00       	jmpq   80042142f6 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  8004213eaa:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213eae:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213eb2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213eb6:	48 89 d0             	mov    %rdx,%rax
  8004213eb9:	48 01 c0             	add    %rax,%rax
  8004213ebc:	48 01 d0             	add    %rdx,%rax
  8004213ebf:	48 c1 e0 03          	shl    $0x3,%rax
  8004213ec3:	48 01 c8             	add    %rcx,%rax
  8004213ec6:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_OFFSET;
  8004213ec9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213ecd:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213ed1:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213ed5:	48 89 d0             	mov    %rdx,%rax
  8004213ed8:	48 01 c0             	add    %rax,%rax
  8004213edb:	48 01 d0             	add    %rdx,%rax
  8004213ede:	48 c1 e0 03          	shl    $0x3,%rax
  8004213ee2:	48 01 c8             	add    %rcx,%rax
  8004213ee5:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  8004213ee9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213eed:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213ef1:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213ef5:	48 89 d0             	mov    %rdx,%rax
  8004213ef8:	48 01 c0             	add    %rax,%rax
  8004213efb:	48 01 d0             	add    %rdx,%rax
  8004213efe:	48 c1 e0 03          	shl    $0x3,%rax
  8004213f02:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213f06:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213f0a:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004213f0e:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = soff * daf;
  8004213f12:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213f16:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213f1a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213f1e:	48 89 d0             	mov    %rdx,%rax
  8004213f21:	48 01 c0             	add    %rax,%rax
  8004213f24:	48 01 d0             	add    %rdx,%rax
  8004213f27:	48 c1 e0 03          	shl    $0x3,%rax
  8004213f2b:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213f2f:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004213f36:	48 0f af 45 b8       	imul   -0x48(%rbp),%rax
  8004213f3b:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  8004213f3f:	e9 a4 03 00 00       	jmpq   80042142e8 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_sf:
			*row_pc = pc;
  8004213f44:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213f48:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213f4c:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213f4f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213f53:	48 89 c7             	mov    %rax,%rdi
  8004213f56:	48 b8 5a 1a 21 04 80 	movabs $0x8004211a5a,%rax
  8004213f5d:	00 00 00 
  8004213f60:	ff d0                	callq  *%rax
  8004213f62:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			soff = _dwarf_decode_sleb128(&p);
  8004213f66:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213f6a:	48 89 c7             	mov    %rax,%rdi
  8004213f6d:	48 b8 c8 19 21 04 80 	movabs $0x80042119c8,%rax
  8004213f74:	00 00 00 
  8004213f77:	ff d0                	callq  *%rax
  8004213f79:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CFA.dw_offset_relevant = 1;
  8004213f7d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213f81:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  8004213f84:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213f88:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_regnum = reg;
  8004213f8c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213f90:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213f94:	66 89 50 02          	mov    %dx,0x2(%rax)
			CFA.dw_offset_or_block_len = soff * daf;
  8004213f98:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213f9c:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  8004213fa3:	48 0f af 55 b8       	imul   -0x48(%rbp),%rdx
  8004213fa8:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  8004213fac:	e9 37 03 00 00       	jmpq   80042142e8 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_offset_sf:
			*row_pc = pc;
  8004213fb1:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213fb5:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213fb9:	48 89 10             	mov    %rdx,(%rax)
			soff = _dwarf_decode_sleb128(&p);
  8004213fbc:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213fc0:	48 89 c7             	mov    %rax,%rdi
  8004213fc3:	48 b8 c8 19 21 04 80 	movabs $0x80042119c8,%rax
  8004213fca:	00 00 00 
  8004213fcd:	ff d0                	callq  *%rax
  8004213fcf:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CFA.dw_offset_relevant = 1;
  8004213fd3:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213fd7:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  8004213fda:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213fde:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_offset_or_block_len = soff * daf;
  8004213fe2:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213fe6:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  8004213fed:	48 0f af 55 b8       	imul   -0x48(%rbp),%rdx
  8004213ff2:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  8004213ff6:	e9 ed 02 00 00       	jmpq   80042142e8 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_val_offset:
			*row_pc = pc;
  8004213ffb:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213fff:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004214003:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004214006:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421400a:	48 89 c7             	mov    %rax,%rdi
  800421400d:	48 b8 5a 1a 21 04 80 	movabs $0x8004211a5a,%rax
  8004214014:	00 00 00 
  8004214017:	ff d0                	callq  *%rax
  8004214019:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			uoff = _dwarf_decode_uleb128(&p);
  800421401d:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004214021:	48 89 c7             	mov    %rax,%rdi
  8004214024:	48 b8 5a 1a 21 04 80 	movabs $0x8004211a5a,%rax
  800421402b:	00 00 00 
  800421402e:	ff d0                	callq  *%rax
  8004214030:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004214034:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214038:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800421403c:	0f b7 c0             	movzwl %ax,%eax
  800421403f:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004214043:	77 0c                	ja     8004214051 <_dwarf_frame_run_inst+0xb2a>
  8004214045:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  800421404c:	e9 a5 02 00 00       	jmpq   80042142f6 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  8004214051:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214055:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004214059:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421405d:	48 89 d0             	mov    %rdx,%rax
  8004214060:	48 01 c0             	add    %rax,%rax
  8004214063:	48 01 d0             	add    %rdx,%rax
  8004214066:	48 c1 e0 03          	shl    $0x3,%rax
  800421406a:	48 01 c8             	add    %rcx,%rax
  800421406d:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_VAL_OFFSET;
  8004214070:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214074:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004214078:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421407c:	48 89 d0             	mov    %rdx,%rax
  800421407f:	48 01 c0             	add    %rax,%rax
  8004214082:	48 01 d0             	add    %rdx,%rax
  8004214085:	48 c1 e0 03          	shl    $0x3,%rax
  8004214089:	48 01 c8             	add    %rcx,%rax
  800421408c:	c6 40 01 01          	movb   $0x1,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  8004214090:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214094:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004214098:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421409c:	48 89 d0             	mov    %rdx,%rax
  800421409f:	48 01 c0             	add    %rax,%rax
  80042140a2:	48 01 d0             	add    %rdx,%rax
  80042140a5:	48 c1 e0 03          	shl    $0x3,%rax
  80042140a9:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  80042140ad:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042140b1:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  80042140b5:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = uoff * daf;
  80042140b9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042140bd:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042140c1:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042140c5:	48 89 d0             	mov    %rdx,%rax
  80042140c8:	48 01 c0             	add    %rax,%rax
  80042140cb:	48 01 d0             	add    %rdx,%rax
  80042140ce:	48 c1 e0 03          	shl    $0x3,%rax
  80042140d2:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  80042140d6:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  80042140dd:	48 0f af 45 c8       	imul   -0x38(%rbp),%rax
  80042140e2:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  80042140e6:	e9 fd 01 00 00       	jmpq   80042142e8 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_val_offset_sf:
			*row_pc = pc;
  80042140eb:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042140ef:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042140f3:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  80042140f6:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042140fa:	48 89 c7             	mov    %rax,%rdi
  80042140fd:	48 b8 5a 1a 21 04 80 	movabs $0x8004211a5a,%rax
  8004214104:	00 00 00 
  8004214107:	ff d0                	callq  *%rax
  8004214109:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			soff = _dwarf_decode_sleb128(&p);
  800421410d:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004214111:	48 89 c7             	mov    %rax,%rdi
  8004214114:	48 b8 c8 19 21 04 80 	movabs $0x80042119c8,%rax
  800421411b:	00 00 00 
  800421411e:	ff d0                	callq  *%rax
  8004214120:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004214124:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214128:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800421412c:	0f b7 c0             	movzwl %ax,%eax
  800421412f:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004214133:	77 0c                	ja     8004214141 <_dwarf_frame_run_inst+0xc1a>
  8004214135:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  800421413c:	e9 b5 01 00 00       	jmpq   80042142f6 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  8004214141:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214145:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004214149:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421414d:	48 89 d0             	mov    %rdx,%rax
  8004214150:	48 01 c0             	add    %rax,%rax
  8004214153:	48 01 d0             	add    %rdx,%rax
  8004214156:	48 c1 e0 03          	shl    $0x3,%rax
  800421415a:	48 01 c8             	add    %rcx,%rax
  800421415d:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_VAL_OFFSET;
  8004214160:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214164:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004214168:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421416c:	48 89 d0             	mov    %rdx,%rax
  800421416f:	48 01 c0             	add    %rax,%rax
  8004214172:	48 01 d0             	add    %rdx,%rax
  8004214175:	48 c1 e0 03          	shl    $0x3,%rax
  8004214179:	48 01 c8             	add    %rcx,%rax
  800421417c:	c6 40 01 01          	movb   $0x1,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  8004214180:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214184:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004214188:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421418c:	48 89 d0             	mov    %rdx,%rax
  800421418f:	48 01 c0             	add    %rax,%rax
  8004214192:	48 01 d0             	add    %rdx,%rax
  8004214195:	48 c1 e0 03          	shl    $0x3,%rax
  8004214199:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  800421419d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042141a1:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  80042141a5:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = soff * daf;
  80042141a9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042141ad:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042141b1:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042141b5:	48 89 d0             	mov    %rdx,%rax
  80042141b8:	48 01 c0             	add    %rax,%rax
  80042141bb:	48 01 d0             	add    %rdx,%rax
  80042141be:	48 c1 e0 03          	shl    $0x3,%rax
  80042141c2:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  80042141c6:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  80042141cd:	48 0f af 45 b8       	imul   -0x48(%rbp),%rax
  80042141d2:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  80042141d6:	e9 0d 01 00 00       	jmpq   80042142e8 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_val_expression:
			*row_pc = pc;
  80042141db:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042141df:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042141e3:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  80042141e6:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042141ea:	48 89 c7             	mov    %rax,%rdi
  80042141ed:	48 b8 5a 1a 21 04 80 	movabs $0x8004211a5a,%rax
  80042141f4:	00 00 00 
  80042141f7:	ff d0                	callq  *%rax
  80042141f9:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  80042141fd:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214201:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004214205:	0f b7 c0             	movzwl %ax,%eax
  8004214208:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  800421420c:	77 0c                	ja     800421421a <_dwarf_frame_run_inst+0xcf3>
  800421420e:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004214215:	e9 dc 00 00 00       	jmpq   80042142f6 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  800421421a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421421e:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004214222:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004214226:	48 89 d0             	mov    %rdx,%rax
  8004214229:	48 01 c0             	add    %rax,%rax
  800421422c:	48 01 d0             	add    %rdx,%rax
  800421422f:	48 c1 e0 03          	shl    $0x3,%rax
  8004214233:	48 01 c8             	add    %rcx,%rax
  8004214236:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_value_type = DW_EXPR_VAL_EXPRESSION;
  8004214239:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421423d:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004214241:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004214245:	48 89 d0             	mov    %rdx,%rax
  8004214248:	48 01 c0             	add    %rax,%rax
  800421424b:	48 01 d0             	add    %rdx,%rax
  800421424e:	48 c1 e0 03          	shl    $0x3,%rax
  8004214252:	48 01 c8             	add    %rcx,%rax
  8004214255:	c6 40 01 03          	movb   $0x3,0x1(%rax)
			RL[reg].dw_offset_or_block_len =
  8004214259:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421425d:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004214261:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004214265:	48 89 d0             	mov    %rdx,%rax
  8004214268:	48 01 c0             	add    %rax,%rax
  800421426b:	48 01 d0             	add    %rdx,%rax
  800421426e:	48 c1 e0 03          	shl    $0x3,%rax
  8004214272:	48 8d 1c 01          	lea    (%rcx,%rax,1),%rbx
				_dwarf_decode_uleb128(&p);
  8004214276:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421427a:	48 89 c7             	mov    %rax,%rdi
  800421427d:	48 b8 5a 1a 21 04 80 	movabs $0x8004211a5a,%rax
  8004214284:	00 00 00 
  8004214287:	ff d0                	callq  *%rax
			*row_pc = pc;
			reg = _dwarf_decode_uleb128(&p);
			CHECK_TABLE_SIZE(reg);
			RL[reg].dw_offset_relevant = 0;
			RL[reg].dw_value_type = DW_EXPR_VAL_EXPRESSION;
			RL[reg].dw_offset_or_block_len =
  8004214289:	48 89 43 08          	mov    %rax,0x8(%rbx)
				_dwarf_decode_uleb128(&p);
			RL[reg].dw_block_ptr = p;
  800421428d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214291:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004214295:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004214299:	48 89 d0             	mov    %rdx,%rax
  800421429c:	48 01 c0             	add    %rax,%rax
  800421429f:	48 01 d0             	add    %rdx,%rax
  80042142a2:	48 c1 e0 03          	shl    $0x3,%rax
  80042142a6:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  80042142aa:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042142ae:	48 89 42 10          	mov    %rax,0x10(%rdx)
			p += RL[reg].dw_offset_or_block_len;
  80042142b2:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042142b6:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042142ba:	48 8b 70 20          	mov    0x20(%rax),%rsi
  80042142be:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042142c2:	48 89 d0             	mov    %rdx,%rax
  80042142c5:	48 01 c0             	add    %rax,%rax
  80042142c8:	48 01 d0             	add    %rdx,%rax
  80042142cb:	48 c1 e0 03          	shl    $0x3,%rax
  80042142cf:	48 01 f0             	add    %rsi,%rax
  80042142d2:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042142d6:	48 01 c8             	add    %rcx,%rax
  80042142d9:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			break;
  80042142dd:	eb 09                	jmp    80042142e8 <_dwarf_frame_run_inst+0xdc1>
		default:
			DWARF_SET_ERROR(dbg, error,
					DW_DLE_FRAME_INSTR_EXEC_ERROR);
			ret = DW_DLE_FRAME_INSTR_EXEC_ERROR;
  80042142df:	c7 45 ec 15 00 00 00 	movl   $0x15,-0x14(%rbp)
			goto program_done;
  80042142e6:	eb 0e                	jmp    80042142f6 <_dwarf_frame_run_inst+0xdcf>
	/* Save a copy of the table as initial state. */
	_dwarf_frame_regtable_copy(dbg, &init_rt, rt, error);
	p = insts;
	pe = p + len;

	while (p < pe) {
  80042142e8:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042142ec:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  80042142f0:	0f 82 b8 f2 ff ff    	jb     80042135ae <_dwarf_frame_run_inst+0x87>
			goto program_done;
		}
	}

program_done:
	return (ret);
  80042142f6:	8b 45 ec             	mov    -0x14(%rbp),%eax
#undef  CFA
#undef  INITCFA
#undef  RL
#undef  INITRL
#undef  CHECK_TABLE_SIZE
}
  80042142f9:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  8004214300:	5b                   	pop    %rbx
  8004214301:	5d                   	pop    %rbp
  8004214302:	c3                   	retq   

0000008004214303 <_dwarf_frame_get_internal_table>:
int
_dwarf_frame_get_internal_table(Dwarf_Debug dbg, Dwarf_Fde fde,
				Dwarf_Addr pc_req, Dwarf_Regtable3 **ret_rt,
				Dwarf_Addr *ret_row_pc,
				Dwarf_Error *error)
{
  8004214303:	55                   	push   %rbp
  8004214304:	48 89 e5             	mov    %rsp,%rbp
  8004214307:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  800421430b:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421430f:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004214313:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  8004214317:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  800421431b:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
  800421431f:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
	Dwarf_Cie cie;
	Dwarf_Regtable3 *rt;
	Dwarf_Addr row_pc;
	int i, ret;

	assert(ret_rt != NULL);
  8004214323:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  8004214328:	75 35                	jne    800421435f <_dwarf_frame_get_internal_table+0x5c>
  800421432a:	48 b9 b8 0a 22 04 80 	movabs $0x8004220ab8,%rcx
  8004214331:	00 00 00 
  8004214334:	48 ba c7 09 22 04 80 	movabs $0x80042209c7,%rdx
  800421433b:	00 00 00 
  800421433e:	be 83 01 00 00       	mov    $0x183,%esi
  8004214343:	48 bf dc 09 22 04 80 	movabs $0x80042209dc,%rdi
  800421434a:	00 00 00 
  800421434d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004214352:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004214359:	00 00 00 
  800421435c:	41 ff d0             	callq  *%r8

	//dbg = fde->fde_dbg;
	assert(dbg != NULL);
  800421435f:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004214364:	75 35                	jne    800421439b <_dwarf_frame_get_internal_table+0x98>
  8004214366:	48 b9 c7 0a 22 04 80 	movabs $0x8004220ac7,%rcx
  800421436d:	00 00 00 
  8004214370:	48 ba c7 09 22 04 80 	movabs $0x80042209c7,%rdx
  8004214377:	00 00 00 
  800421437a:	be 86 01 00 00       	mov    $0x186,%esi
  800421437f:	48 bf dc 09 22 04 80 	movabs $0x80042209dc,%rdi
  8004214386:	00 00 00 
  8004214389:	b8 00 00 00 00       	mov    $0x0,%eax
  800421438e:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004214395:	00 00 00 
  8004214398:	41 ff d0             	callq  *%r8

	rt = dbg->dbg_internal_reg_table;
  800421439b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421439f:	48 8b 40 58          	mov    0x58(%rax),%rax
  80042143a3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	/* Clear the content of regtable from previous run. */
	memset(&rt->rt3_cfa_rule, 0, sizeof(Dwarf_Regtable_Entry3));
  80042143a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042143ab:	ba 18 00 00 00       	mov    $0x18,%edx
  80042143b0:	be 00 00 00 00       	mov    $0x0,%esi
  80042143b5:	48 89 c7             	mov    %rax,%rdi
  80042143b8:	48 b8 37 0e 21 04 80 	movabs $0x8004210e37,%rax
  80042143bf:	00 00 00 
  80042143c2:	ff d0                	callq  *%rax
	memset(rt->rt3_rules, 0, rt->rt3_reg_table_size *
  80042143c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042143c8:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042143cc:	0f b7 d0             	movzwl %ax,%edx
  80042143cf:	48 89 d0             	mov    %rdx,%rax
  80042143d2:	48 01 c0             	add    %rax,%rax
  80042143d5:	48 01 d0             	add    %rdx,%rax
  80042143d8:	48 c1 e0 03          	shl    $0x3,%rax
  80042143dc:	48 89 c2             	mov    %rax,%rdx
  80042143df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042143e3:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042143e7:	be 00 00 00 00       	mov    $0x0,%esi
  80042143ec:	48 89 c7             	mov    %rax,%rdi
  80042143ef:	48 b8 37 0e 21 04 80 	movabs $0x8004210e37,%rax
  80042143f6:	00 00 00 
  80042143f9:	ff d0                	callq  *%rax
	       sizeof(Dwarf_Regtable_Entry3));

	/* Set rules to initial values. */
	for (i = 0; i < rt->rt3_reg_table_size; i++)
  80042143fb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004214402:	eb 2f                	jmp    8004214433 <_dwarf_frame_get_internal_table+0x130>
		rt->rt3_rules[i].dw_regnum = dbg->dbg_frame_rule_initial_value;
  8004214404:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004214408:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421440c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421440f:	48 63 d0             	movslq %eax,%rdx
  8004214412:	48 89 d0             	mov    %rdx,%rax
  8004214415:	48 01 c0             	add    %rax,%rax
  8004214418:	48 01 d0             	add    %rdx,%rax
  800421441b:	48 c1 e0 03          	shl    $0x3,%rax
  800421441f:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004214423:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214427:	0f b7 40 4a          	movzwl 0x4a(%rax),%eax
  800421442b:	66 89 42 02          	mov    %ax,0x2(%rdx)
	memset(&rt->rt3_cfa_rule, 0, sizeof(Dwarf_Regtable_Entry3));
	memset(rt->rt3_rules, 0, rt->rt3_reg_table_size *
	       sizeof(Dwarf_Regtable_Entry3));

	/* Set rules to initial values. */
	for (i = 0; i < rt->rt3_reg_table_size; i++)
  800421442f:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004214433:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004214437:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800421443b:	0f b7 c0             	movzwl %ax,%eax
  800421443e:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  8004214441:	7f c1                	jg     8004214404 <_dwarf_frame_get_internal_table+0x101>
		rt->rt3_rules[i].dw_regnum = dbg->dbg_frame_rule_initial_value;

	/* Run initial instructions in CIE. */
	cie = fde->fde_cie;
  8004214443:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214447:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421444b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	assert(cie != NULL);
  800421444f:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004214454:	75 35                	jne    800421448b <_dwarf_frame_get_internal_table+0x188>
  8004214456:	48 b9 d3 0a 22 04 80 	movabs $0x8004220ad3,%rcx
  800421445d:	00 00 00 
  8004214460:	48 ba c7 09 22 04 80 	movabs $0x80042209c7,%rdx
  8004214467:	00 00 00 
  800421446a:	be 95 01 00 00       	mov    $0x195,%esi
  800421446f:	48 bf dc 09 22 04 80 	movabs $0x80042209dc,%rdi
  8004214476:	00 00 00 
  8004214479:	b8 00 00 00 00       	mov    $0x0,%eax
  800421447e:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004214485:	00 00 00 
  8004214488:	41 ff d0             	callq  *%r8
	ret = _dwarf_frame_run_inst(dbg, rt, cie->cie_initinst,
  800421448b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421448f:	4c 8b 48 40          	mov    0x40(%rax),%r9
  8004214493:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214497:	4c 8b 40 38          	mov    0x38(%rax),%r8
  800421449b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421449f:	48 8b 48 70          	mov    0x70(%rax),%rcx
  80042144a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042144a7:	48 8b 50 68          	mov    0x68(%rax),%rdx
  80042144ab:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  80042144af:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042144b3:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  80042144b7:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  80042144bc:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
  80042144c0:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  80042144c5:	48 c7 44 24 08 ff ff 	movq   $0xffffffffffffffff,0x8(%rsp)
  80042144cc:	ff ff 
  80042144ce:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
  80042144d5:	00 
  80042144d6:	48 89 c7             	mov    %rax,%rdi
  80042144d9:	48 b8 27 35 21 04 80 	movabs $0x8004213527,%rax
  80042144e0:	00 00 00 
  80042144e3:	ff d0                	callq  *%rax
  80042144e5:	89 45 e4             	mov    %eax,-0x1c(%rbp)
				    cie->cie_instlen, cie->cie_caf,
				    cie->cie_daf, 0, ~0ULL,
				    &row_pc, error);
	if (ret != DW_DLE_NONE)
  80042144e8:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  80042144ec:	74 08                	je     80042144f6 <_dwarf_frame_get_internal_table+0x1f3>
		return (ret);
  80042144ee:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042144f1:	e9 98 00 00 00       	jmpq   800421458e <_dwarf_frame_get_internal_table+0x28b>
	/* Run instructions in FDE. */
	if (pc_req >= fde->fde_initloc) {
  80042144f6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042144fa:	48 8b 40 30          	mov    0x30(%rax),%rax
  80042144fe:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004214502:	77 6f                	ja     8004214573 <_dwarf_frame_get_internal_table+0x270>
		ret = _dwarf_frame_run_inst(dbg, rt, fde->fde_inst,
  8004214504:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214508:	48 8b 78 30          	mov    0x30(%rax),%rdi
  800421450c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214510:	4c 8b 48 40          	mov    0x40(%rax),%r9
  8004214514:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214518:	4c 8b 50 38          	mov    0x38(%rax),%r10
  800421451c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214520:	48 8b 48 58          	mov    0x58(%rax),%rcx
  8004214524:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214528:	48 8b 50 50          	mov    0x50(%rax),%rdx
  800421452c:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  8004214530:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214534:	4c 8b 45 a0          	mov    -0x60(%rbp),%r8
  8004214538:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
  800421453d:	4c 8d 45 d8          	lea    -0x28(%rbp),%r8
  8004214541:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
  8004214546:	4c 8b 45 b8          	mov    -0x48(%rbp),%r8
  800421454a:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  800421454f:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004214553:	4d 89 d0             	mov    %r10,%r8
  8004214556:	48 89 c7             	mov    %rax,%rdi
  8004214559:	48 b8 27 35 21 04 80 	movabs $0x8004213527,%rax
  8004214560:	00 00 00 
  8004214563:	ff d0                	callq  *%rax
  8004214565:	89 45 e4             	mov    %eax,-0x1c(%rbp)
					    fde->fde_instlen, cie->cie_caf,
					    cie->cie_daf,
					    fde->fde_initloc, pc_req,
					    &row_pc, error);
		if (ret != DW_DLE_NONE)
  8004214568:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800421456c:	74 05                	je     8004214573 <_dwarf_frame_get_internal_table+0x270>
			return (ret);
  800421456e:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004214571:	eb 1b                	jmp    800421458e <_dwarf_frame_get_internal_table+0x28b>
	}

	*ret_rt = rt;
  8004214573:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214577:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800421457b:	48 89 10             	mov    %rdx,(%rax)
	*ret_row_pc = row_pc;
  800421457e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004214582:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004214586:	48 89 10             	mov    %rdx,(%rax)

	return (DW_DLE_NONE);
  8004214589:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421458e:	c9                   	leaveq 
  800421458f:	c3                   	retq   

0000008004214590 <dwarf_get_fde_info_for_all_regs>:
int
dwarf_get_fde_info_for_all_regs(Dwarf_Debug dbg, Dwarf_Fde fde,
				Dwarf_Addr pc_requested,
				Dwarf_Regtable *reg_table, Dwarf_Addr *row_pc,
				Dwarf_Error *error)
{
  8004214590:	55                   	push   %rbp
  8004214591:	48 89 e5             	mov    %rsp,%rbp
  8004214594:	48 83 ec 50          	sub    $0x50,%rsp
  8004214598:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800421459c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  80042145a0:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  80042145a4:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  80042145a8:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
  80042145ac:	4c 89 4d b0          	mov    %r9,-0x50(%rbp)
	Dwarf_Regtable3 *rt;
	Dwarf_Addr pc;
	Dwarf_Half cfa;
	int i, ret;

	if (fde == NULL || reg_table == NULL) {
  80042145b0:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  80042145b5:	74 07                	je     80042145be <dwarf_get_fde_info_for_all_regs+0x2e>
  80042145b7:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  80042145bc:	75 0a                	jne    80042145c8 <dwarf_get_fde_info_for_all_regs+0x38>
		DWARF_SET_ERROR(dbg, error, DW_DLE_ARGUMENT);
		return (DW_DLV_ERROR);
  80042145be:	b8 01 00 00 00       	mov    $0x1,%eax
  80042145c3:	e9 eb 02 00 00       	jmpq   80042148b3 <dwarf_get_fde_info_for_all_regs+0x323>
	}

	assert(dbg != NULL);
  80042145c8:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  80042145cd:	75 35                	jne    8004214604 <dwarf_get_fde_info_for_all_regs+0x74>
  80042145cf:	48 b9 c7 0a 22 04 80 	movabs $0x8004220ac7,%rcx
  80042145d6:	00 00 00 
  80042145d9:	48 ba c7 09 22 04 80 	movabs $0x80042209c7,%rdx
  80042145e0:	00 00 00 
  80042145e3:	be bf 01 00 00       	mov    $0x1bf,%esi
  80042145e8:	48 bf dc 09 22 04 80 	movabs $0x80042209dc,%rdi
  80042145ef:	00 00 00 
  80042145f2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042145f7:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042145fe:	00 00 00 
  8004214601:	41 ff d0             	callq  *%r8

	if (pc_requested < fde->fde_initloc ||
  8004214604:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004214608:	48 8b 40 30          	mov    0x30(%rax),%rax
  800421460c:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004214610:	77 19                	ja     800421462b <dwarf_get_fde_info_for_all_regs+0x9b>
	    pc_requested >= fde->fde_initloc + fde->fde_adrange) {
  8004214612:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004214616:	48 8b 50 30          	mov    0x30(%rax),%rdx
  800421461a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421461e:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214622:	48 01 d0             	add    %rdx,%rax
		return (DW_DLV_ERROR);
	}

	assert(dbg != NULL);

	if (pc_requested < fde->fde_initloc ||
  8004214625:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004214629:	77 0a                	ja     8004214635 <dwarf_get_fde_info_for_all_regs+0xa5>
	    pc_requested >= fde->fde_initloc + fde->fde_adrange) {
		DWARF_SET_ERROR(dbg, error, DW_DLE_PC_NOT_IN_FDE_RANGE);
		return (DW_DLV_ERROR);
  800421462b:	b8 01 00 00 00       	mov    $0x1,%eax
  8004214630:	e9 7e 02 00 00       	jmpq   80042148b3 <dwarf_get_fde_info_for_all_regs+0x323>
	}

	ret = _dwarf_frame_get_internal_table(dbg, fde, pc_requested, &rt, &pc,
  8004214635:	4c 8b 45 b0          	mov    -0x50(%rbp),%r8
  8004214639:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
  800421463d:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
  8004214641:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214645:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004214649:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421464d:	4d 89 c1             	mov    %r8,%r9
  8004214650:	49 89 f8             	mov    %rdi,%r8
  8004214653:	48 89 c7             	mov    %rax,%rdi
  8004214656:	48 b8 03 43 21 04 80 	movabs $0x8004214303,%rax
  800421465d:	00 00 00 
  8004214660:	ff d0                	callq  *%rax
  8004214662:	89 45 f8             	mov    %eax,-0x8(%rbp)
					      error);
	if (ret != DW_DLE_NONE)
  8004214665:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  8004214669:	74 0a                	je     8004214675 <dwarf_get_fde_info_for_all_regs+0xe5>
		return (DW_DLV_ERROR);
  800421466b:	b8 01 00 00 00       	mov    $0x1,%eax
  8004214670:	e9 3e 02 00 00       	jmpq   80042148b3 <dwarf_get_fde_info_for_all_regs+0x323>
	/*
	 * Copy the CFA rule to the column intended for holding the CFA,
	 * if it's within the range of regtable.
	 */
#define CFA rt->rt3_cfa_rule
	cfa = dbg->dbg_frame_cfa_value;
  8004214675:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004214679:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  800421467d:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
	if (cfa < DW_REG_TABLE_SIZE) {
  8004214681:	66 83 7d f6 41       	cmpw   $0x41,-0xa(%rbp)
  8004214686:	0f 87 b1 00 00 00    	ja     800421473d <dwarf_get_fde_info_for_all_regs+0x1ad>
		reg_table->rules[cfa].dw_offset_relevant =
  800421468c:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
			CFA.dw_offset_relevant;
  8004214690:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214694:	0f b6 00             	movzbl (%rax),%eax
	 * if it's within the range of regtable.
	 */
#define CFA rt->rt3_cfa_rule
	cfa = dbg->dbg_frame_cfa_value;
	if (cfa < DW_REG_TABLE_SIZE) {
		reg_table->rules[cfa].dw_offset_relevant =
  8004214697:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421469b:	48 63 c9             	movslq %ecx,%rcx
  800421469e:	48 83 c1 01          	add    $0x1,%rcx
  80042146a2:	48 c1 e1 04          	shl    $0x4,%rcx
  80042146a6:	48 01 ca             	add    %rcx,%rdx
  80042146a9:	88 02                	mov    %al,(%rdx)
			CFA.dw_offset_relevant;
		reg_table->rules[cfa].dw_value_type = CFA.dw_value_type;
  80042146ab:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
  80042146af:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042146b3:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  80042146b7:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042146bb:	48 63 c9             	movslq %ecx,%rcx
  80042146be:	48 83 c1 01          	add    $0x1,%rcx
  80042146c2:	48 c1 e1 04          	shl    $0x4,%rcx
  80042146c6:	48 01 ca             	add    %rcx,%rdx
  80042146c9:	88 42 01             	mov    %al,0x1(%rdx)
		reg_table->rules[cfa].dw_regnum = CFA.dw_regnum;
  80042146cc:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
  80042146d0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042146d4:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  80042146d8:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042146dc:	48 63 c9             	movslq %ecx,%rcx
  80042146df:	48 83 c1 01          	add    $0x1,%rcx
  80042146e3:	48 c1 e1 04          	shl    $0x4,%rcx
  80042146e7:	48 01 ca             	add    %rcx,%rdx
  80042146ea:	66 89 42 02          	mov    %ax,0x2(%rdx)
		reg_table->rules[cfa].dw_offset = CFA.dw_offset_or_block_len;
  80042146ee:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
  80042146f2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042146f6:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042146fa:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042146fe:	48 63 c9             	movslq %ecx,%rcx
  8004214701:	48 83 c1 01          	add    $0x1,%rcx
  8004214705:	48 c1 e1 04          	shl    $0x4,%rcx
  8004214709:	48 01 ca             	add    %rcx,%rdx
  800421470c:	48 83 c2 08          	add    $0x8,%rdx
  8004214710:	48 89 02             	mov    %rax,(%rdx)
		reg_table->cfa_rule = reg_table->rules[cfa];
  8004214713:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  8004214717:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  800421471b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421471f:	48 63 d2             	movslq %edx,%rdx
  8004214722:	48 83 c2 01          	add    $0x1,%rdx
  8004214726:	48 c1 e2 04          	shl    $0x4,%rdx
  800421472a:	48 01 d0             	add    %rdx,%rax
  800421472d:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004214731:	48 8b 00             	mov    (%rax),%rax
  8004214734:	48 89 01             	mov    %rax,(%rcx)
  8004214737:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  800421473b:	eb 3c                	jmp    8004214779 <dwarf_get_fde_info_for_all_regs+0x1e9>
	} else {
		reg_table->cfa_rule.dw_offset_relevant =
		    CFA.dw_offset_relevant;
  800421473d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214741:	0f b6 10             	movzbl (%rax),%edx
		reg_table->rules[cfa].dw_value_type = CFA.dw_value_type;
		reg_table->rules[cfa].dw_regnum = CFA.dw_regnum;
		reg_table->rules[cfa].dw_offset = CFA.dw_offset_or_block_len;
		reg_table->cfa_rule = reg_table->rules[cfa];
	} else {
		reg_table->cfa_rule.dw_offset_relevant =
  8004214744:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214748:	88 10                	mov    %dl,(%rax)
		    CFA.dw_offset_relevant;
		reg_table->cfa_rule.dw_value_type = CFA.dw_value_type;
  800421474a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421474e:	0f b6 50 01          	movzbl 0x1(%rax),%edx
  8004214752:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214756:	88 50 01             	mov    %dl,0x1(%rax)
		reg_table->cfa_rule.dw_regnum = CFA.dw_regnum;
  8004214759:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421475d:	0f b7 50 02          	movzwl 0x2(%rax),%edx
  8004214761:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214765:	66 89 50 02          	mov    %dx,0x2(%rax)
		reg_table->cfa_rule.dw_offset = CFA.dw_offset_or_block_len;
  8004214769:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421476d:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004214771:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214775:	48 89 50 08          	mov    %rdx,0x8(%rax)
	}

	/*
	 * Copy other columns.
	 */
	for (i = 0; i < DW_REG_TABLE_SIZE && i < dbg->dbg_frame_rule_table_size;
  8004214779:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004214780:	e9 fd 00 00 00       	jmpq   8004214882 <dwarf_get_fde_info_for_all_regs+0x2f2>
	     i++) {

		/* Do not overwrite CFA column */
		if (i == cfa)
  8004214785:	0f b7 45 f6          	movzwl -0xa(%rbp),%eax
  8004214789:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  800421478c:	75 05                	jne    8004214793 <dwarf_get_fde_info_for_all_regs+0x203>
			continue;
  800421478e:	e9 eb 00 00 00       	jmpq   800421487e <dwarf_get_fde_info_for_all_regs+0x2ee>

		reg_table->rules[i].dw_offset_relevant =
			rt->rt3_rules[i].dw_offset_relevant;
  8004214793:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214797:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421479b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421479e:	48 63 d0             	movslq %eax,%rdx
  80042147a1:	48 89 d0             	mov    %rdx,%rax
  80042147a4:	48 01 c0             	add    %rax,%rax
  80042147a7:	48 01 d0             	add    %rdx,%rax
  80042147aa:	48 c1 e0 03          	shl    $0x3,%rax
  80042147ae:	48 01 c8             	add    %rcx,%rax
  80042147b1:	0f b6 00             	movzbl (%rax),%eax

		/* Do not overwrite CFA column */
		if (i == cfa)
			continue;

		reg_table->rules[i].dw_offset_relevant =
  80042147b4:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042147b8:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  80042147bb:	48 63 c9             	movslq %ecx,%rcx
  80042147be:	48 83 c1 01          	add    $0x1,%rcx
  80042147c2:	48 c1 e1 04          	shl    $0x4,%rcx
  80042147c6:	48 01 ca             	add    %rcx,%rdx
  80042147c9:	88 02                	mov    %al,(%rdx)
			rt->rt3_rules[i].dw_offset_relevant;
		reg_table->rules[i].dw_value_type =
			rt->rt3_rules[i].dw_value_type;
  80042147cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042147cf:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042147d3:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042147d6:	48 63 d0             	movslq %eax,%rdx
  80042147d9:	48 89 d0             	mov    %rdx,%rax
  80042147dc:	48 01 c0             	add    %rax,%rax
  80042147df:	48 01 d0             	add    %rdx,%rax
  80042147e2:	48 c1 e0 03          	shl    $0x3,%rax
  80042147e6:	48 01 c8             	add    %rcx,%rax
  80042147e9:	0f b6 40 01          	movzbl 0x1(%rax),%eax
		if (i == cfa)
			continue;

		reg_table->rules[i].dw_offset_relevant =
			rt->rt3_rules[i].dw_offset_relevant;
		reg_table->rules[i].dw_value_type =
  80042147ed:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042147f1:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  80042147f4:	48 63 c9             	movslq %ecx,%rcx
  80042147f7:	48 83 c1 01          	add    $0x1,%rcx
  80042147fb:	48 c1 e1 04          	shl    $0x4,%rcx
  80042147ff:	48 01 ca             	add    %rcx,%rdx
  8004214802:	88 42 01             	mov    %al,0x1(%rdx)
			rt->rt3_rules[i].dw_value_type;
		reg_table->rules[i].dw_regnum = rt->rt3_rules[i].dw_regnum;
  8004214805:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214809:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421480d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004214810:	48 63 d0             	movslq %eax,%rdx
  8004214813:	48 89 d0             	mov    %rdx,%rax
  8004214816:	48 01 c0             	add    %rax,%rax
  8004214819:	48 01 d0             	add    %rdx,%rax
  800421481c:	48 c1 e0 03          	shl    $0x3,%rax
  8004214820:	48 01 c8             	add    %rcx,%rax
  8004214823:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  8004214827:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421482b:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  800421482e:	48 63 c9             	movslq %ecx,%rcx
  8004214831:	48 83 c1 01          	add    $0x1,%rcx
  8004214835:	48 c1 e1 04          	shl    $0x4,%rcx
  8004214839:	48 01 ca             	add    %rcx,%rdx
  800421483c:	66 89 42 02          	mov    %ax,0x2(%rdx)
		reg_table->rules[i].dw_offset =
			rt->rt3_rules[i].dw_offset_or_block_len;
  8004214840:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214844:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004214848:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421484b:	48 63 d0             	movslq %eax,%rdx
  800421484e:	48 89 d0             	mov    %rdx,%rax
  8004214851:	48 01 c0             	add    %rax,%rax
  8004214854:	48 01 d0             	add    %rdx,%rax
  8004214857:	48 c1 e0 03          	shl    $0x3,%rax
  800421485b:	48 01 c8             	add    %rcx,%rax
  800421485e:	48 8b 40 08          	mov    0x8(%rax),%rax
		reg_table->rules[i].dw_offset_relevant =
			rt->rt3_rules[i].dw_offset_relevant;
		reg_table->rules[i].dw_value_type =
			rt->rt3_rules[i].dw_value_type;
		reg_table->rules[i].dw_regnum = rt->rt3_rules[i].dw_regnum;
		reg_table->rules[i].dw_offset =
  8004214862:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004214866:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004214869:	48 63 c9             	movslq %ecx,%rcx
  800421486c:	48 83 c1 01          	add    $0x1,%rcx
  8004214870:	48 c1 e1 04          	shl    $0x4,%rcx
  8004214874:	48 01 ca             	add    %rcx,%rdx
  8004214877:	48 83 c2 08          	add    $0x8,%rdx
  800421487b:	48 89 02             	mov    %rax,(%rdx)

	/*
	 * Copy other columns.
	 */
	for (i = 0; i < DW_REG_TABLE_SIZE && i < dbg->dbg_frame_rule_table_size;
	     i++) {
  800421487e:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
	}

	/*
	 * Copy other columns.
	 */
	for (i = 0; i < DW_REG_TABLE_SIZE && i < dbg->dbg_frame_rule_table_size;
  8004214882:	83 7d fc 41          	cmpl   $0x41,-0x4(%rbp)
  8004214886:	7f 14                	jg     800421489c <dwarf_get_fde_info_for_all_regs+0x30c>
  8004214888:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421488c:	0f b7 40 48          	movzwl 0x48(%rax),%eax
  8004214890:	0f b7 c0             	movzwl %ax,%eax
  8004214893:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  8004214896:	0f 8f e9 fe ff ff    	jg     8004214785 <dwarf_get_fde_info_for_all_regs+0x1f5>
		reg_table->rules[i].dw_regnum = rt->rt3_rules[i].dw_regnum;
		reg_table->rules[i].dw_offset =
			rt->rt3_rules[i].dw_offset_or_block_len;
	}

	if (row_pc) *row_pc = pc;
  800421489c:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  80042148a1:	74 0b                	je     80042148ae <dwarf_get_fde_info_for_all_regs+0x31e>
  80042148a3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042148a7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042148ab:	48 89 10             	mov    %rdx,(%rax)
	return (DW_DLV_OK);
  80042148ae:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042148b3:	c9                   	leaveq 
  80042148b4:	c3                   	retq   

00000080042148b5 <_dwarf_frame_read_lsb_encoded>:

static int
_dwarf_frame_read_lsb_encoded(Dwarf_Debug dbg, uint64_t *val, uint8_t *data,
			      uint64_t *offsetp, uint8_t encode, Dwarf_Addr pc, Dwarf_Error *error)
{
  80042148b5:	55                   	push   %rbp
  80042148b6:	48 89 e5             	mov    %rsp,%rbp
  80042148b9:	48 83 ec 40          	sub    $0x40,%rsp
  80042148bd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042148c1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042148c5:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  80042148c9:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  80042148cd:	44 89 c0             	mov    %r8d,%eax
  80042148d0:	4c 89 4d c0          	mov    %r9,-0x40(%rbp)
  80042148d4:	88 45 cc             	mov    %al,-0x34(%rbp)
	uint8_t application;

	if (encode == DW_EH_PE_omit)
  80042148d7:	80 7d cc ff          	cmpb   $0xff,-0x34(%rbp)
  80042148db:	75 0a                	jne    80042148e7 <_dwarf_frame_read_lsb_encoded+0x32>
		return (DW_DLE_NONE);
  80042148dd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042148e2:	e9 e6 01 00 00       	jmpq   8004214acd <_dwarf_frame_read_lsb_encoded+0x218>

	application = encode & 0xf0;
  80042148e7:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  80042148eb:	83 e0 f0             	and    $0xfffffff0,%eax
  80042148ee:	88 45 ff             	mov    %al,-0x1(%rbp)
	encode &= 0x0f;
  80042148f1:	80 65 cc 0f          	andb   $0xf,-0x34(%rbp)

	switch (encode) {
  80042148f5:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  80042148f9:	83 f8 0c             	cmp    $0xc,%eax
  80042148fc:	0f 87 72 01 00 00    	ja     8004214a74 <_dwarf_frame_read_lsb_encoded+0x1bf>
  8004214902:	89 c0                	mov    %eax,%eax
  8004214904:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421490b:	00 
  800421490c:	48 b8 e0 0a 22 04 80 	movabs $0x8004220ae0,%rax
  8004214913:	00 00 00 
  8004214916:	48 01 d0             	add    %rdx,%rax
  8004214919:	48 8b 00             	mov    (%rax),%rax
  800421491c:	ff e0                	jmpq   *%rax
	case DW_EH_PE_absptr:
		*val = dbg->read(data, offsetp, dbg->dbg_pointer_size);
  800421491e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214922:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214926:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421492a:	8b 52 28             	mov    0x28(%rdx),%edx
  800421492d:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004214931:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004214935:	48 89 cf             	mov    %rcx,%rdi
  8004214938:	ff d0                	callq  *%rax
  800421493a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800421493e:	48 89 02             	mov    %rax,(%rdx)
		break;
  8004214941:	e9 35 01 00 00       	jmpq   8004214a7b <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_uleb128:
		*val = _dwarf_read_uleb128(data, offsetp);
  8004214946:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421494a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421494e:	48 89 d6             	mov    %rdx,%rsi
  8004214951:	48 89 c7             	mov    %rax,%rdi
  8004214954:	48 b8 49 19 21 04 80 	movabs $0x8004211949,%rax
  800421495b:	00 00 00 
  800421495e:	ff d0                	callq  *%rax
  8004214960:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004214964:	48 89 02             	mov    %rax,(%rdx)
		break;
  8004214967:	e9 0f 01 00 00       	jmpq   8004214a7b <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_udata2:
		*val = dbg->read(data, offsetp, 2);
  800421496c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214970:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214974:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004214978:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800421497c:	ba 02 00 00 00       	mov    $0x2,%edx
  8004214981:	48 89 cf             	mov    %rcx,%rdi
  8004214984:	ff d0                	callq  *%rax
  8004214986:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800421498a:	48 89 02             	mov    %rax,(%rdx)
		break;
  800421498d:	e9 e9 00 00 00       	jmpq   8004214a7b <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_udata4:
		*val = dbg->read(data, offsetp, 4);
  8004214992:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214996:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421499a:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  800421499e:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  80042149a2:	ba 04 00 00 00       	mov    $0x4,%edx
  80042149a7:	48 89 cf             	mov    %rcx,%rdi
  80042149aa:	ff d0                	callq  *%rax
  80042149ac:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042149b0:	48 89 02             	mov    %rax,(%rdx)
		break;
  80042149b3:	e9 c3 00 00 00       	jmpq   8004214a7b <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_udata8:
		*val = dbg->read(data, offsetp, 8);
  80042149b8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042149bc:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042149c0:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  80042149c4:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  80042149c8:	ba 08 00 00 00       	mov    $0x8,%edx
  80042149cd:	48 89 cf             	mov    %rcx,%rdi
  80042149d0:	ff d0                	callq  *%rax
  80042149d2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042149d6:	48 89 02             	mov    %rax,(%rdx)
		break;
  80042149d9:	e9 9d 00 00 00       	jmpq   8004214a7b <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sleb128:
		*val = _dwarf_read_sleb128(data, offsetp);
  80042149de:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042149e2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042149e6:	48 89 d6             	mov    %rdx,%rsi
  80042149e9:	48 89 c7             	mov    %rax,%rdi
  80042149ec:	48 b8 a5 18 21 04 80 	movabs $0x80042118a5,%rax
  80042149f3:	00 00 00 
  80042149f6:	ff d0                	callq  *%rax
  80042149f8:	48 89 c2             	mov    %rax,%rdx
  80042149fb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042149ff:	48 89 10             	mov    %rdx,(%rax)
		break;
  8004214a02:	eb 77                	jmp    8004214a7b <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sdata2:
		*val = (int16_t) dbg->read(data, offsetp, 2);
  8004214a04:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214a08:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214a0c:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004214a10:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004214a14:	ba 02 00 00 00       	mov    $0x2,%edx
  8004214a19:	48 89 cf             	mov    %rcx,%rdi
  8004214a1c:	ff d0                	callq  *%rax
  8004214a1e:	48 0f bf d0          	movswq %ax,%rdx
  8004214a22:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004214a26:	48 89 10             	mov    %rdx,(%rax)
		break;
  8004214a29:	eb 50                	jmp    8004214a7b <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sdata4:
		*val = (int32_t) dbg->read(data, offsetp, 4);
  8004214a2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214a2f:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214a33:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004214a37:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004214a3b:	ba 04 00 00 00       	mov    $0x4,%edx
  8004214a40:	48 89 cf             	mov    %rcx,%rdi
  8004214a43:	ff d0                	callq  *%rax
  8004214a45:	48 63 d0             	movslq %eax,%rdx
  8004214a48:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004214a4c:	48 89 10             	mov    %rdx,(%rax)
		break;
  8004214a4f:	eb 2a                	jmp    8004214a7b <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sdata8:
		*val = dbg->read(data, offsetp, 8);
  8004214a51:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214a55:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214a59:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004214a5d:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004214a61:	ba 08 00 00 00       	mov    $0x8,%edx
  8004214a66:	48 89 cf             	mov    %rcx,%rdi
  8004214a69:	ff d0                	callq  *%rax
  8004214a6b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004214a6f:	48 89 02             	mov    %rax,(%rdx)
		break;
  8004214a72:	eb 07                	jmp    8004214a7b <_dwarf_frame_read_lsb_encoded+0x1c6>
	default:
		DWARF_SET_ERROR(dbg, error, DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
		return (DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
  8004214a74:	b8 14 00 00 00       	mov    $0x14,%eax
  8004214a79:	eb 52                	jmp    8004214acd <_dwarf_frame_read_lsb_encoded+0x218>
	}

	if (application == DW_EH_PE_pcrel) {
  8004214a7b:	80 7d ff 10          	cmpb   $0x10,-0x1(%rbp)
  8004214a7f:	75 47                	jne    8004214ac8 <_dwarf_frame_read_lsb_encoded+0x213>
		/*
		 * Value is relative to .eh_frame section virtual addr.
		 */
		switch (encode) {
  8004214a81:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  8004214a85:	83 f8 01             	cmp    $0x1,%eax
  8004214a88:	7c 3d                	jl     8004214ac7 <_dwarf_frame_read_lsb_encoded+0x212>
  8004214a8a:	83 f8 04             	cmp    $0x4,%eax
  8004214a8d:	7e 0a                	jle    8004214a99 <_dwarf_frame_read_lsb_encoded+0x1e4>
  8004214a8f:	83 e8 09             	sub    $0x9,%eax
  8004214a92:	83 f8 03             	cmp    $0x3,%eax
  8004214a95:	77 30                	ja     8004214ac7 <_dwarf_frame_read_lsb_encoded+0x212>
  8004214a97:	eb 17                	jmp    8004214ab0 <_dwarf_frame_read_lsb_encoded+0x1fb>
		case DW_EH_PE_uleb128:
		case DW_EH_PE_udata2:
		case DW_EH_PE_udata4:
		case DW_EH_PE_udata8:
			*val += pc;
  8004214a99:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004214a9d:	48 8b 10             	mov    (%rax),%rdx
  8004214aa0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214aa4:	48 01 c2             	add    %rax,%rdx
  8004214aa7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004214aab:	48 89 10             	mov    %rdx,(%rax)
			break;
  8004214aae:	eb 18                	jmp    8004214ac8 <_dwarf_frame_read_lsb_encoded+0x213>
		case DW_EH_PE_sleb128:
		case DW_EH_PE_sdata2:
		case DW_EH_PE_sdata4:
		case DW_EH_PE_sdata8:
			*val = pc + (int64_t) *val;
  8004214ab0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004214ab4:	48 8b 10             	mov    (%rax),%rdx
  8004214ab7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214abb:	48 01 c2             	add    %rax,%rdx
  8004214abe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004214ac2:	48 89 10             	mov    %rdx,(%rax)
			break;
  8004214ac5:	eb 01                	jmp    8004214ac8 <_dwarf_frame_read_lsb_encoded+0x213>
		default:
			/* DW_EH_PE_absptr is absolute value. */
			break;
  8004214ac7:	90                   	nop
		}
	}

	/* XXX Applications other than DW_EH_PE_pcrel are not handled. */

	return (DW_DLE_NONE);
  8004214ac8:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004214acd:	c9                   	leaveq 
  8004214ace:	c3                   	retq   

0000008004214acf <_dwarf_frame_parse_lsb_cie_augment>:

static int
_dwarf_frame_parse_lsb_cie_augment(Dwarf_Debug dbg, Dwarf_Cie cie,
				   Dwarf_Error *error)
{
  8004214acf:	55                   	push   %rbp
  8004214ad0:	48 89 e5             	mov    %rsp,%rbp
  8004214ad3:	48 83 ec 50          	sub    $0x50,%rsp
  8004214ad7:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004214adb:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004214adf:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
	uint8_t *aug_p, *augdata_p;
	uint64_t val, offset;
	uint8_t encode;
	int ret;

	assert(cie->cie_augment != NULL && *cie->cie_augment == 'z');
  8004214ae3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214ae7:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214aeb:	48 85 c0             	test   %rax,%rax
  8004214aee:	74 0f                	je     8004214aff <_dwarf_frame_parse_lsb_cie_augment+0x30>
  8004214af0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214af4:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214af8:	0f b6 00             	movzbl (%rax),%eax
  8004214afb:	3c 7a                	cmp    $0x7a,%al
  8004214afd:	74 35                	je     8004214b34 <_dwarf_frame_parse_lsb_cie_augment+0x65>
  8004214aff:	48 b9 48 0b 22 04 80 	movabs $0x8004220b48,%rcx
  8004214b06:	00 00 00 
  8004214b09:	48 ba c7 09 22 04 80 	movabs $0x80042209c7,%rdx
  8004214b10:	00 00 00 
  8004214b13:	be 4a 02 00 00       	mov    $0x24a,%esi
  8004214b18:	48 bf dc 09 22 04 80 	movabs $0x80042209dc,%rdi
  8004214b1f:	00 00 00 
  8004214b22:	b8 00 00 00 00       	mov    $0x0,%eax
  8004214b27:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004214b2e:	00 00 00 
  8004214b31:	41 ff d0             	callq  *%r8
	/*
	 * Here we're only interested in the presence of augment 'R'
	 * and associated CIE augment data, which describes the
	 * encoding scheme of FDE PC begin and range.
	 */
	aug_p = &cie->cie_augment[1];
  8004214b34:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214b38:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214b3c:	48 83 c0 01          	add    $0x1,%rax
  8004214b40:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	augdata_p = cie->cie_augdata;
  8004214b44:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214b48:	48 8b 40 58          	mov    0x58(%rax),%rax
  8004214b4c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	while (*aug_p != '\0') {
  8004214b50:	e9 af 00 00 00       	jmpq   8004214c04 <_dwarf_frame_parse_lsb_cie_augment+0x135>
		switch (*aug_p) {
  8004214b55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214b59:	0f b6 00             	movzbl (%rax),%eax
  8004214b5c:	0f b6 c0             	movzbl %al,%eax
  8004214b5f:	83 f8 50             	cmp    $0x50,%eax
  8004214b62:	74 18                	je     8004214b7c <_dwarf_frame_parse_lsb_cie_augment+0xad>
  8004214b64:	83 f8 52             	cmp    $0x52,%eax
  8004214b67:	74 77                	je     8004214be0 <_dwarf_frame_parse_lsb_cie_augment+0x111>
  8004214b69:	83 f8 4c             	cmp    $0x4c,%eax
  8004214b6c:	0f 85 86 00 00 00    	jne    8004214bf8 <_dwarf_frame_parse_lsb_cie_augment+0x129>
		case 'L':
			/* Skip one augment in augment data. */
			augdata_p++;
  8004214b72:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
			break;
  8004214b77:	e9 83 00 00 00       	jmpq   8004214bff <_dwarf_frame_parse_lsb_cie_augment+0x130>
		case 'P':
			/* Skip two augments in augment data. */
			encode = *augdata_p++;
  8004214b7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004214b80:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004214b84:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  8004214b88:	0f b6 00             	movzbl (%rax),%eax
  8004214b8b:	88 45 ef             	mov    %al,-0x11(%rbp)
			offset = 0;
  8004214b8e:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  8004214b95:	00 
			ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  8004214b96:	44 0f b6 45 ef       	movzbl -0x11(%rbp),%r8d
  8004214b9b:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  8004214b9f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004214ba3:	48 8d 75 e0          	lea    -0x20(%rbp),%rsi
  8004214ba7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214bab:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  8004214baf:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004214bb3:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  8004214bb9:	48 89 c7             	mov    %rax,%rdi
  8004214bbc:	48 b8 b5 48 21 04 80 	movabs $0x80042148b5,%rax
  8004214bc3:	00 00 00 
  8004214bc6:	ff d0                	callq  *%rax
  8004214bc8:	89 45 e8             	mov    %eax,-0x18(%rbp)
							    augdata_p, &offset, encode, 0, error);
			if (ret != DW_DLE_NONE)
  8004214bcb:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)
  8004214bcf:	74 05                	je     8004214bd6 <_dwarf_frame_parse_lsb_cie_augment+0x107>
				return (ret);
  8004214bd1:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004214bd4:	eb 42                	jmp    8004214c18 <_dwarf_frame_parse_lsb_cie_augment+0x149>
			augdata_p += offset;
  8004214bd6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004214bda:	48 01 45 f0          	add    %rax,-0x10(%rbp)
			break;
  8004214bde:	eb 1f                	jmp    8004214bff <_dwarf_frame_parse_lsb_cie_augment+0x130>
		case 'R':
			cie->cie_fde_encode = *augdata_p++;
  8004214be0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004214be4:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004214be8:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  8004214bec:	0f b6 10             	movzbl (%rax),%edx
  8004214bef:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214bf3:	88 50 60             	mov    %dl,0x60(%rax)
			break;
  8004214bf6:	eb 07                	jmp    8004214bff <_dwarf_frame_parse_lsb_cie_augment+0x130>
		default:
			DWARF_SET_ERROR(dbg, error,
					DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
			return (DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
  8004214bf8:	b8 14 00 00 00       	mov    $0x14,%eax
  8004214bfd:	eb 19                	jmp    8004214c18 <_dwarf_frame_parse_lsb_cie_augment+0x149>
		}
		aug_p++;
  8004214bff:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
	 * and associated CIE augment data, which describes the
	 * encoding scheme of FDE PC begin and range.
	 */
	aug_p = &cie->cie_augment[1];
	augdata_p = cie->cie_augdata;
	while (*aug_p != '\0') {
  8004214c04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214c08:	0f b6 00             	movzbl (%rax),%eax
  8004214c0b:	84 c0                	test   %al,%al
  8004214c0d:	0f 85 42 ff ff ff    	jne    8004214b55 <_dwarf_frame_parse_lsb_cie_augment+0x86>
			return (DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
		}
		aug_p++;
	}

	return (DW_DLE_NONE);
  8004214c13:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004214c18:	c9                   	leaveq 
  8004214c19:	c3                   	retq   

0000008004214c1a <_dwarf_frame_set_cie>:


static int
_dwarf_frame_set_cie(Dwarf_Debug dbg, Dwarf_Section *ds,
		     Dwarf_Unsigned *off, Dwarf_Cie ret_cie, Dwarf_Error *error)
{
  8004214c1a:	55                   	push   %rbp
  8004214c1b:	48 89 e5             	mov    %rsp,%rbp
  8004214c1e:	48 83 ec 60          	sub    $0x60,%rsp
  8004214c22:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004214c26:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004214c2a:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  8004214c2e:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  8004214c32:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
	Dwarf_Cie cie;
	uint64_t length;
	int dwarf_size, ret;
	char *p;

	assert(ret_cie);
  8004214c36:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  8004214c3b:	75 35                	jne    8004214c72 <_dwarf_frame_set_cie+0x58>
  8004214c3d:	48 b9 7d 0b 22 04 80 	movabs $0x8004220b7d,%rcx
  8004214c44:	00 00 00 
  8004214c47:	48 ba c7 09 22 04 80 	movabs $0x80042209c7,%rdx
  8004214c4e:	00 00 00 
  8004214c51:	be 7b 02 00 00       	mov    $0x27b,%esi
  8004214c56:	48 bf dc 09 22 04 80 	movabs $0x80042209dc,%rdi
  8004214c5d:	00 00 00 
  8004214c60:	b8 00 00 00 00       	mov    $0x0,%eax
  8004214c65:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004214c6c:	00 00 00 
  8004214c6f:	41 ff d0             	callq  *%r8
	cie = ret_cie;
  8004214c72:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214c76:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	cie->cie_dbg = dbg;
  8004214c7a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214c7e:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214c82:	48 89 10             	mov    %rdx,(%rax)
	cie->cie_offset = *off;
  8004214c85:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214c89:	48 8b 10             	mov    (%rax),%rdx
  8004214c8c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214c90:	48 89 50 10          	mov    %rdx,0x10(%rax)

	length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 4);
  8004214c94:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214c98:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214c9c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214ca0:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214ca4:	48 89 d1             	mov    %rdx,%rcx
  8004214ca7:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004214cab:	ba 04 00 00 00       	mov    $0x4,%edx
  8004214cb0:	48 89 cf             	mov    %rcx,%rdi
  8004214cb3:	ff d0                	callq  *%rax
  8004214cb5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (length == 0xffffffff) {
  8004214cb9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004214cbe:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004214cc2:	75 2e                	jne    8004214cf2 <_dwarf_frame_set_cie+0xd8>
		dwarf_size = 8;
  8004214cc4:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
		length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 8);
  8004214ccb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214ccf:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214cd3:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214cd7:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214cdb:	48 89 d1             	mov    %rdx,%rcx
  8004214cde:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004214ce2:	ba 08 00 00 00       	mov    $0x8,%edx
  8004214ce7:	48 89 cf             	mov    %rcx,%rdi
  8004214cea:	ff d0                	callq  *%rax
  8004214cec:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004214cf0:	eb 07                	jmp    8004214cf9 <_dwarf_frame_set_cie+0xdf>
	} else
		dwarf_size = 4;
  8004214cf2:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%rbp)

	if (length > dbg->dbg_eh_size - *off) {
  8004214cf9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214cfd:	48 8b 50 40          	mov    0x40(%rax),%rdx
  8004214d01:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214d05:	48 8b 00             	mov    (%rax),%rax
  8004214d08:	48 29 c2             	sub    %rax,%rdx
  8004214d0b:	48 89 d0             	mov    %rdx,%rax
  8004214d0e:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004214d12:	73 0a                	jae    8004214d1e <_dwarf_frame_set_cie+0x104>
		DWARF_SET_ERROR(dbg, error, DW_DLE_DEBUG_FRAME_LENGTH_BAD);
		return (DW_DLE_DEBUG_FRAME_LENGTH_BAD);
  8004214d14:	b8 12 00 00 00       	mov    $0x12,%eax
  8004214d19:	e9 5d 03 00 00       	jmpq   800421507b <_dwarf_frame_set_cie+0x461>
	}

	(void) dbg->read((uint8_t *)dbg->dbg_eh_offset, off, dwarf_size); /* Skip CIE id. */
  8004214d1e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214d22:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214d26:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214d2a:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214d2e:	48 89 d1             	mov    %rdx,%rcx
  8004214d31:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004214d34:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004214d38:	48 89 cf             	mov    %rcx,%rdi
  8004214d3b:	ff d0                	callq  *%rax
	cie->cie_length = length;
  8004214d3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214d41:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004214d45:	48 89 50 18          	mov    %rdx,0x18(%rax)

	cie->cie_version = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 1);
  8004214d49:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214d4d:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214d51:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214d55:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214d59:	48 89 d1             	mov    %rdx,%rcx
  8004214d5c:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004214d60:	ba 01 00 00 00       	mov    $0x1,%edx
  8004214d65:	48 89 cf             	mov    %rcx,%rdi
  8004214d68:	ff d0                	callq  *%rax
  8004214d6a:	89 c2                	mov    %eax,%edx
  8004214d6c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214d70:	66 89 50 20          	mov    %dx,0x20(%rax)
	if (cie->cie_version != 1 && cie->cie_version != 3 &&
  8004214d74:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214d78:	0f b7 40 20          	movzwl 0x20(%rax),%eax
  8004214d7c:	66 83 f8 01          	cmp    $0x1,%ax
  8004214d80:	74 26                	je     8004214da8 <_dwarf_frame_set_cie+0x18e>
  8004214d82:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214d86:	0f b7 40 20          	movzwl 0x20(%rax),%eax
  8004214d8a:	66 83 f8 03          	cmp    $0x3,%ax
  8004214d8e:	74 18                	je     8004214da8 <_dwarf_frame_set_cie+0x18e>
	    cie->cie_version != 4) {
  8004214d90:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214d94:	0f b7 40 20          	movzwl 0x20(%rax),%eax

	(void) dbg->read((uint8_t *)dbg->dbg_eh_offset, off, dwarf_size); /* Skip CIE id. */
	cie->cie_length = length;

	cie->cie_version = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 1);
	if (cie->cie_version != 1 && cie->cie_version != 3 &&
  8004214d98:	66 83 f8 04          	cmp    $0x4,%ax
  8004214d9c:	74 0a                	je     8004214da8 <_dwarf_frame_set_cie+0x18e>
	    cie->cie_version != 4) {
		DWARF_SET_ERROR(dbg, error, DW_DLE_FRAME_VERSION_BAD);
		return (DW_DLE_FRAME_VERSION_BAD);
  8004214d9e:	b8 16 00 00 00       	mov    $0x16,%eax
  8004214da3:	e9 d3 02 00 00       	jmpq   800421507b <_dwarf_frame_set_cie+0x461>
	}

	cie->cie_augment = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004214da8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214dac:	48 8b 10             	mov    (%rax),%rdx
  8004214daf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214db3:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214db7:	48 01 d0             	add    %rdx,%rax
  8004214dba:	48 89 c2             	mov    %rax,%rdx
  8004214dbd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214dc1:	48 89 50 28          	mov    %rdx,0x28(%rax)
	p = (char *)dbg->dbg_eh_offset;
  8004214dc5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214dc9:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214dcd:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	while (p[(*off)++] != '\0')
  8004214dd1:	90                   	nop
  8004214dd2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214dd6:	48 8b 00             	mov    (%rax),%rax
  8004214dd9:	48 8d 48 01          	lea    0x1(%rax),%rcx
  8004214ddd:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004214de1:	48 89 0a             	mov    %rcx,(%rdx)
  8004214de4:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004214de8:	48 01 d0             	add    %rdx,%rax
  8004214deb:	0f b6 00             	movzbl (%rax),%eax
  8004214dee:	84 c0                	test   %al,%al
  8004214df0:	75 e0                	jne    8004214dd2 <_dwarf_frame_set_cie+0x1b8>
		;

	/* We only recognize normal .dwarf_frame and GNU .eh_frame sections. */
	if (*cie->cie_augment != 0 && *cie->cie_augment != 'z') {
  8004214df2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214df6:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214dfa:	0f b6 00             	movzbl (%rax),%eax
  8004214dfd:	84 c0                	test   %al,%al
  8004214dff:	74 48                	je     8004214e49 <_dwarf_frame_set_cie+0x22f>
  8004214e01:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214e05:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214e09:	0f b6 00             	movzbl (%rax),%eax
  8004214e0c:	3c 7a                	cmp    $0x7a,%al
  8004214e0e:	74 39                	je     8004214e49 <_dwarf_frame_set_cie+0x22f>
		*off = cie->cie_offset + ((dwarf_size == 4) ? 4 : 12) +
  8004214e10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214e14:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004214e18:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  8004214e1c:	75 07                	jne    8004214e25 <_dwarf_frame_set_cie+0x20b>
  8004214e1e:	b8 04 00 00 00       	mov    $0x4,%eax
  8004214e23:	eb 05                	jmp    8004214e2a <_dwarf_frame_set_cie+0x210>
  8004214e25:	b8 0c 00 00 00       	mov    $0xc,%eax
  8004214e2a:	48 01 c2             	add    %rax,%rdx
			cie->cie_length;
  8004214e2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214e31:	48 8b 40 18          	mov    0x18(%rax),%rax
	while (p[(*off)++] != '\0')
		;

	/* We only recognize normal .dwarf_frame and GNU .eh_frame sections. */
	if (*cie->cie_augment != 0 && *cie->cie_augment != 'z') {
		*off = cie->cie_offset + ((dwarf_size == 4) ? 4 : 12) +
  8004214e35:	48 01 c2             	add    %rax,%rdx
  8004214e38:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214e3c:	48 89 10             	mov    %rdx,(%rax)
			cie->cie_length;
		return (DW_DLE_NONE);
  8004214e3f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004214e44:	e9 32 02 00 00       	jmpq   800421507b <_dwarf_frame_set_cie+0x461>
	}

	/* Optional EH Data field for .eh_frame section. */
	if (strstr((char *)cie->cie_augment, "eh") != NULL)
  8004214e49:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214e4d:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214e51:	48 be 85 0b 22 04 80 	movabs $0x8004220b85,%rsi
  8004214e58:	00 00 00 
  8004214e5b:	48 89 c7             	mov    %rax,%rdi
  8004214e5e:	48 b8 5c 12 21 04 80 	movabs $0x800421125c,%rax
  8004214e65:	00 00 00 
  8004214e68:	ff d0                	callq  *%rax
  8004214e6a:	48 85 c0             	test   %rax,%rax
  8004214e6d:	74 28                	je     8004214e97 <_dwarf_frame_set_cie+0x27d>
		cie->cie_ehdata = dbg->read((uint8_t *)dbg->dbg_eh_offset, off,
  8004214e6f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214e73:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214e77:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214e7b:	8b 52 28             	mov    0x28(%rdx),%edx
  8004214e7e:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  8004214e82:	48 8b 49 38          	mov    0x38(%rcx),%rcx
  8004214e86:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004214e8a:	48 89 cf             	mov    %rcx,%rdi
  8004214e8d:	ff d0                	callq  *%rax
  8004214e8f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214e93:	48 89 42 30          	mov    %rax,0x30(%rdx)
					    dbg->dbg_pointer_size);

	cie->cie_caf = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  8004214e97:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214e9b:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214e9f:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004214ea3:	48 89 d6             	mov    %rdx,%rsi
  8004214ea6:	48 89 c7             	mov    %rax,%rdi
  8004214ea9:	48 b8 49 19 21 04 80 	movabs $0x8004211949,%rax
  8004214eb0:	00 00 00 
  8004214eb3:	ff d0                	callq  *%rax
  8004214eb5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214eb9:	48 89 42 38          	mov    %rax,0x38(%rdx)
	cie->cie_daf = _dwarf_read_sleb128((uint8_t *)dbg->dbg_eh_offset, off);
  8004214ebd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214ec1:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214ec5:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004214ec9:	48 89 d6             	mov    %rdx,%rsi
  8004214ecc:	48 89 c7             	mov    %rax,%rdi
  8004214ecf:	48 b8 a5 18 21 04 80 	movabs $0x80042118a5,%rax
  8004214ed6:	00 00 00 
  8004214ed9:	ff d0                	callq  *%rax
  8004214edb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214edf:	48 89 42 40          	mov    %rax,0x40(%rdx)

	/* Return address register. */
	if (cie->cie_version == 1)
  8004214ee3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214ee7:	0f b7 40 20          	movzwl 0x20(%rax),%eax
  8004214eeb:	66 83 f8 01          	cmp    $0x1,%ax
  8004214eef:	75 2b                	jne    8004214f1c <_dwarf_frame_set_cie+0x302>
		cie->cie_ra = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 1);
  8004214ef1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214ef5:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214ef9:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214efd:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214f01:	48 89 d1             	mov    %rdx,%rcx
  8004214f04:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004214f08:	ba 01 00 00 00       	mov    $0x1,%edx
  8004214f0d:	48 89 cf             	mov    %rcx,%rdi
  8004214f10:	ff d0                	callq  *%rax
  8004214f12:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214f16:	48 89 42 48          	mov    %rax,0x48(%rdx)
  8004214f1a:	eb 26                	jmp    8004214f42 <_dwarf_frame_set_cie+0x328>
	else
		cie->cie_ra = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  8004214f1c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214f20:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214f24:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004214f28:	48 89 d6             	mov    %rdx,%rsi
  8004214f2b:	48 89 c7             	mov    %rax,%rdi
  8004214f2e:	48 b8 49 19 21 04 80 	movabs $0x8004211949,%rax
  8004214f35:	00 00 00 
  8004214f38:	ff d0                	callq  *%rax
  8004214f3a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214f3e:	48 89 42 48          	mov    %rax,0x48(%rdx)

	/* Optional CIE augmentation data for .eh_frame section. */
	if (*cie->cie_augment == 'z') {
  8004214f42:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214f46:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214f4a:	0f b6 00             	movzbl (%rax),%eax
  8004214f4d:	3c 7a                	cmp    $0x7a,%al
  8004214f4f:	0f 85 93 00 00 00    	jne    8004214fe8 <_dwarf_frame_set_cie+0x3ce>
		cie->cie_auglen = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  8004214f55:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214f59:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214f5d:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004214f61:	48 89 d6             	mov    %rdx,%rsi
  8004214f64:	48 89 c7             	mov    %rax,%rdi
  8004214f67:	48 b8 49 19 21 04 80 	movabs $0x8004211949,%rax
  8004214f6e:	00 00 00 
  8004214f71:	ff d0                	callq  *%rax
  8004214f73:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214f77:	48 89 42 50          	mov    %rax,0x50(%rdx)
		cie->cie_augdata = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004214f7b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214f7f:	48 8b 10             	mov    (%rax),%rdx
  8004214f82:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214f86:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214f8a:	48 01 d0             	add    %rdx,%rax
  8004214f8d:	48 89 c2             	mov    %rax,%rdx
  8004214f90:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214f94:	48 89 50 58          	mov    %rdx,0x58(%rax)
		*off += cie->cie_auglen;
  8004214f98:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214f9c:	48 8b 10             	mov    (%rax),%rdx
  8004214f9f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214fa3:	48 8b 40 50          	mov    0x50(%rax),%rax
  8004214fa7:	48 01 c2             	add    %rax,%rdx
  8004214faa:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214fae:	48 89 10             	mov    %rdx,(%rax)
		/*
		 * XXX Use DW_EH_PE_absptr for default FDE PC start/range,
		 * in case _dwarf_frame_parse_lsb_cie_augment fails to
		 * find out the real encode.
		 */
		cie->cie_fde_encode = DW_EH_PE_absptr;
  8004214fb1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214fb5:	c6 40 60 00          	movb   $0x0,0x60(%rax)
		ret = _dwarf_frame_parse_lsb_cie_augment(dbg, cie, error);
  8004214fb9:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004214fbd:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004214fc1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214fc5:	48 89 ce             	mov    %rcx,%rsi
  8004214fc8:	48 89 c7             	mov    %rax,%rdi
  8004214fcb:	48 b8 cf 4a 21 04 80 	movabs $0x8004214acf,%rax
  8004214fd2:	00 00 00 
  8004214fd5:	ff d0                	callq  *%rax
  8004214fd7:	89 45 dc             	mov    %eax,-0x24(%rbp)
		if (ret != DW_DLE_NONE)
  8004214fda:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004214fde:	74 08                	je     8004214fe8 <_dwarf_frame_set_cie+0x3ce>
			return (ret);
  8004214fe0:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004214fe3:	e9 93 00 00 00       	jmpq   800421507b <_dwarf_frame_set_cie+0x461>
	}

	/* CIE Initial instructions. */
	cie->cie_initinst = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004214fe8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214fec:	48 8b 10             	mov    (%rax),%rdx
  8004214fef:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214ff3:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214ff7:	48 01 d0             	add    %rdx,%rax
  8004214ffa:	48 89 c2             	mov    %rax,%rdx
  8004214ffd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215001:	48 89 50 68          	mov    %rdx,0x68(%rax)
	if (dwarf_size == 4)
  8004215005:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  8004215009:	75 2a                	jne    8004215035 <_dwarf_frame_set_cie+0x41b>
		cie->cie_instlen = cie->cie_offset + 4 + length - *off;
  800421500b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421500f:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004215013:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215017:	48 01 c2             	add    %rax,%rdx
  800421501a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421501e:	48 8b 00             	mov    (%rax),%rax
  8004215021:	48 29 c2             	sub    %rax,%rdx
  8004215024:	48 89 d0             	mov    %rdx,%rax
  8004215027:	48 8d 50 04          	lea    0x4(%rax),%rdx
  800421502b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421502f:	48 89 50 70          	mov    %rdx,0x70(%rax)
  8004215033:	eb 28                	jmp    800421505d <_dwarf_frame_set_cie+0x443>
	else
		cie->cie_instlen = cie->cie_offset + 12 + length - *off;
  8004215035:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215039:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800421503d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215041:	48 01 c2             	add    %rax,%rdx
  8004215044:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215048:	48 8b 00             	mov    (%rax),%rax
  800421504b:	48 29 c2             	sub    %rax,%rdx
  800421504e:	48 89 d0             	mov    %rdx,%rax
  8004215051:	48 8d 50 0c          	lea    0xc(%rax),%rdx
  8004215055:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215059:	48 89 50 70          	mov    %rdx,0x70(%rax)

	*off += cie->cie_instlen;
  800421505d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215061:	48 8b 10             	mov    (%rax),%rdx
  8004215064:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215068:	48 8b 40 70          	mov    0x70(%rax),%rax
  800421506c:	48 01 c2             	add    %rax,%rdx
  800421506f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215073:	48 89 10             	mov    %rdx,(%rax)
	return (DW_DLE_NONE);
  8004215076:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421507b:	c9                   	leaveq 
  800421507c:	c3                   	retq   

000000800421507d <_dwarf_frame_set_fde>:

static int
_dwarf_frame_set_fde(Dwarf_Debug dbg, Dwarf_Fde ret_fde, Dwarf_Section *ds,
		     Dwarf_Unsigned *off, int eh_frame, Dwarf_Cie cie, Dwarf_Error *error)
{
  800421507d:	55                   	push   %rbp
  800421507e:	48 89 e5             	mov    %rsp,%rbp
  8004215081:	48 83 ec 70          	sub    $0x70,%rsp
  8004215085:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004215089:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  800421508d:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  8004215091:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  8004215095:	44 89 45 ac          	mov    %r8d,-0x54(%rbp)
  8004215099:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
	Dwarf_Fde fde;
	Dwarf_Unsigned cieoff;
	uint64_t length, val;
	int dwarf_size, ret;

	fde = ret_fde;
  800421509d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042150a1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	fde->fde_dbg = dbg;
  80042150a5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042150a9:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042150ad:	48 89 10             	mov    %rdx,(%rax)
	fde->fde_addr = (uint8_t *)dbg->dbg_eh_offset + *off;
  80042150b0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042150b4:	48 8b 10             	mov    (%rax),%rdx
  80042150b7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042150bb:	48 8b 40 38          	mov    0x38(%rax),%rax
  80042150bf:	48 01 d0             	add    %rdx,%rax
  80042150c2:	48 89 c2             	mov    %rax,%rdx
  80042150c5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042150c9:	48 89 50 10          	mov    %rdx,0x10(%rax)
	fde->fde_offset = *off;
  80042150cd:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042150d1:	48 8b 10             	mov    (%rax),%rdx
  80042150d4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042150d8:	48 89 50 18          	mov    %rdx,0x18(%rax)

	length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 4);
  80042150dc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042150e0:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042150e4:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042150e8:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  80042150ec:	48 89 d1             	mov    %rdx,%rcx
  80042150ef:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  80042150f3:	ba 04 00 00 00       	mov    $0x4,%edx
  80042150f8:	48 89 cf             	mov    %rcx,%rdi
  80042150fb:	ff d0                	callq  *%rax
  80042150fd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (length == 0xffffffff) {
  8004215101:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004215106:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  800421510a:	75 2e                	jne    800421513a <_dwarf_frame_set_fde+0xbd>
		dwarf_size = 8;
  800421510c:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
		length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 8);
  8004215113:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215117:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421511b:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421511f:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004215123:	48 89 d1             	mov    %rdx,%rcx
  8004215126:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  800421512a:	ba 08 00 00 00       	mov    $0x8,%edx
  800421512f:	48 89 cf             	mov    %rcx,%rdi
  8004215132:	ff d0                	callq  *%rax
  8004215134:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004215138:	eb 07                	jmp    8004215141 <_dwarf_frame_set_fde+0xc4>
	} else
		dwarf_size = 4;
  800421513a:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%rbp)

	if (length > dbg->dbg_eh_size - *off) {
  8004215141:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215145:	48 8b 50 40          	mov    0x40(%rax),%rdx
  8004215149:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421514d:	48 8b 00             	mov    (%rax),%rax
  8004215150:	48 29 c2             	sub    %rax,%rdx
  8004215153:	48 89 d0             	mov    %rdx,%rax
  8004215156:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  800421515a:	73 0a                	jae    8004215166 <_dwarf_frame_set_fde+0xe9>
		DWARF_SET_ERROR(dbg, error, DW_DLE_DEBUG_FRAME_LENGTH_BAD);
		return (DW_DLE_DEBUG_FRAME_LENGTH_BAD);
  800421515c:	b8 12 00 00 00       	mov    $0x12,%eax
  8004215161:	e9 ca 02 00 00       	jmpq   8004215430 <_dwarf_frame_set_fde+0x3b3>
	}

	fde->fde_length = length;
  8004215166:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421516a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421516e:	48 89 50 20          	mov    %rdx,0x20(%rax)

	if (eh_frame) {
  8004215172:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  8004215176:	74 5e                	je     80042151d6 <_dwarf_frame_set_fde+0x159>
		fde->fde_cieoff = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 4);
  8004215178:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421517c:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215180:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004215184:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004215188:	48 89 d1             	mov    %rdx,%rcx
  800421518b:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  800421518f:	ba 04 00 00 00       	mov    $0x4,%edx
  8004215194:	48 89 cf             	mov    %rcx,%rdi
  8004215197:	ff d0                	callq  *%rax
  8004215199:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421519d:	48 89 42 28          	mov    %rax,0x28(%rdx)
		cieoff = *off - (4 + fde->fde_cieoff);
  80042151a1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042151a5:	48 8b 10             	mov    (%rax),%rdx
  80042151a8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042151ac:	48 8b 40 28          	mov    0x28(%rax),%rax
  80042151b0:	48 29 c2             	sub    %rax,%rdx
  80042151b3:	48 89 d0             	mov    %rdx,%rax
  80042151b6:	48 83 e8 04          	sub    $0x4,%rax
  80042151ba:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		/* This delta should never be 0. */
		if (cieoff == fde->fde_offset) {
  80042151be:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042151c2:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042151c6:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  80042151ca:	75 3d                	jne    8004215209 <_dwarf_frame_set_fde+0x18c>
			DWARF_SET_ERROR(dbg, error, DW_DLE_NO_CIE_FOR_FDE);
			return (DW_DLE_NO_CIE_FOR_FDE);
  80042151cc:	b8 13 00 00 00       	mov    $0x13,%eax
  80042151d1:	e9 5a 02 00 00       	jmpq   8004215430 <_dwarf_frame_set_fde+0x3b3>
		}
	} else {
		fde->fde_cieoff = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, dwarf_size);
  80042151d6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042151da:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042151de:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042151e2:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  80042151e6:	48 89 d1             	mov    %rdx,%rcx
  80042151e9:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042151ec:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  80042151f0:	48 89 cf             	mov    %rcx,%rdi
  80042151f3:	ff d0                	callq  *%rax
  80042151f5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042151f9:	48 89 42 28          	mov    %rax,0x28(%rdx)
		cieoff = fde->fde_cieoff;
  80042151fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215201:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004215205:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	}

	if (eh_frame) {
  8004215209:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  800421520d:	0f 84 c9 00 00 00    	je     80042152dc <_dwarf_frame_set_fde+0x25f>
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, ds->ds_addr + *off, error);
  8004215213:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215217:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800421521b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421521f:	48 8b 00             	mov    (%rax),%rax
	if (eh_frame) {
		/*
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  8004215222:	4c 8d 0c 02          	lea    (%rdx,%rax,1),%r9
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, ds->ds_addr + *off, error);
  8004215226:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421522a:	0f b6 40 60          	movzbl 0x60(%rax),%eax
	if (eh_frame) {
		/*
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  800421522e:	44 0f b6 c0          	movzbl %al,%r8d
						    (uint8_t *)dbg->dbg_eh_offset,
  8004215232:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215236:	48 8b 40 38          	mov    0x38(%rax),%rax
	if (eh_frame) {
		/*
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  800421523a:	48 89 c2             	mov    %rax,%rdx
  800421523d:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  8004215241:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
  8004215245:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215249:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  800421524d:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004215251:	48 89 c7             	mov    %rax,%rdi
  8004215254:	48 b8 b5 48 21 04 80 	movabs $0x80042148b5,%rax
  800421525b:	00 00 00 
  800421525e:	ff d0                	callq  *%rax
  8004215260:	89 45 dc             	mov    %eax,-0x24(%rbp)
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, ds->ds_addr + *off, error);
		if (ret != DW_DLE_NONE)
  8004215263:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004215267:	74 08                	je     8004215271 <_dwarf_frame_set_fde+0x1f4>
			return (ret);
  8004215269:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421526c:	e9 bf 01 00 00       	jmpq   8004215430 <_dwarf_frame_set_fde+0x3b3>
		fde->fde_initloc = val;
  8004215271:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215275:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215279:	48 89 50 30          	mov    %rdx,0x30(%rax)
		 * FDE PC range should not be relative value to anything.
		 * So pass 0 for pc value.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, 0, error);
  800421527d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004215281:	0f b6 40 60          	movzbl 0x60(%rax),%eax
		fde->fde_initloc = val;
		/*
		 * FDE PC range should not be relative value to anything.
		 * So pass 0 for pc value.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  8004215285:	44 0f b6 c0          	movzbl %al,%r8d
						    (uint8_t *)dbg->dbg_eh_offset,
  8004215289:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421528d:	48 8b 40 38          	mov    0x38(%rax),%rax
		fde->fde_initloc = val;
		/*
		 * FDE PC range should not be relative value to anything.
		 * So pass 0 for pc value.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  8004215291:	48 89 c2             	mov    %rax,%rdx
  8004215294:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  8004215298:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
  800421529c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042152a0:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  80042152a4:	48 89 3c 24          	mov    %rdi,(%rsp)
  80042152a8:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  80042152ae:	48 89 c7             	mov    %rax,%rdi
  80042152b1:	48 b8 b5 48 21 04 80 	movabs $0x80042148b5,%rax
  80042152b8:	00 00 00 
  80042152bb:	ff d0                	callq  *%rax
  80042152bd:	89 45 dc             	mov    %eax,-0x24(%rbp)
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, 0, error);
		if (ret != DW_DLE_NONE)
  80042152c0:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  80042152c4:	74 08                	je     80042152ce <_dwarf_frame_set_fde+0x251>
			return (ret);
  80042152c6:	8b 45 dc             	mov    -0x24(%rbp),%eax
  80042152c9:	e9 62 01 00 00       	jmpq   8004215430 <_dwarf_frame_set_fde+0x3b3>
		fde->fde_adrange = val;
  80042152ce:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042152d2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042152d6:	48 89 50 38          	mov    %rdx,0x38(%rax)
  80042152da:	eb 50                	jmp    800421532c <_dwarf_frame_set_fde+0x2af>
	} else {
		fde->fde_initloc = dbg->read((uint8_t *)dbg->dbg_eh_offset, off,
  80042152dc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042152e0:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042152e4:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042152e8:	8b 52 28             	mov    0x28(%rdx),%edx
  80042152eb:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  80042152ef:	48 8b 49 38          	mov    0x38(%rcx),%rcx
  80042152f3:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  80042152f7:	48 89 cf             	mov    %rcx,%rdi
  80042152fa:	ff d0                	callq  *%rax
  80042152fc:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215300:	48 89 42 30          	mov    %rax,0x30(%rdx)
					     dbg->dbg_pointer_size);
		fde->fde_adrange = dbg->read((uint8_t *)dbg->dbg_eh_offset, off,
  8004215304:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215308:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421530c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004215310:	8b 52 28             	mov    0x28(%rdx),%edx
  8004215313:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  8004215317:	48 8b 49 38          	mov    0x38(%rcx),%rcx
  800421531b:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  800421531f:	48 89 cf             	mov    %rcx,%rdi
  8004215322:	ff d0                	callq  *%rax
  8004215324:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215328:	48 89 42 38          	mov    %rax,0x38(%rdx)
					     dbg->dbg_pointer_size);
	}

	/* Optional FDE augmentation data for .eh_frame section. (ignored) */
	if (eh_frame && *cie->cie_augment == 'z') {
  800421532c:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  8004215330:	74 6b                	je     800421539d <_dwarf_frame_set_fde+0x320>
  8004215332:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004215336:	48 8b 40 28          	mov    0x28(%rax),%rax
  800421533a:	0f b6 00             	movzbl (%rax),%eax
  800421533d:	3c 7a                	cmp    $0x7a,%al
  800421533f:	75 5c                	jne    800421539d <_dwarf_frame_set_fde+0x320>
		fde->fde_auglen = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  8004215341:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215345:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004215349:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800421534d:	48 89 d6             	mov    %rdx,%rsi
  8004215350:	48 89 c7             	mov    %rax,%rdi
  8004215353:	48 b8 49 19 21 04 80 	movabs $0x8004211949,%rax
  800421535a:	00 00 00 
  800421535d:	ff d0                	callq  *%rax
  800421535f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215363:	48 89 42 40          	mov    %rax,0x40(%rdx)
		fde->fde_augdata = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004215367:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421536b:	48 8b 10             	mov    (%rax),%rdx
  800421536e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215372:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004215376:	48 01 d0             	add    %rdx,%rax
  8004215379:	48 89 c2             	mov    %rax,%rdx
  800421537c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215380:	48 89 50 48          	mov    %rdx,0x48(%rax)
		*off += fde->fde_auglen;
  8004215384:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004215388:	48 8b 10             	mov    (%rax),%rdx
  800421538b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421538f:	48 8b 40 40          	mov    0x40(%rax),%rax
  8004215393:	48 01 c2             	add    %rax,%rdx
  8004215396:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421539a:	48 89 10             	mov    %rdx,(%rax)
	}

	fde->fde_inst = (uint8_t *)dbg->dbg_eh_offset + *off;
  800421539d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042153a1:	48 8b 10             	mov    (%rax),%rdx
  80042153a4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042153a8:	48 8b 40 38          	mov    0x38(%rax),%rax
  80042153ac:	48 01 d0             	add    %rdx,%rax
  80042153af:	48 89 c2             	mov    %rax,%rdx
  80042153b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042153b6:	48 89 50 50          	mov    %rdx,0x50(%rax)
	if (dwarf_size == 4)
  80042153ba:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  80042153be:	75 2a                	jne    80042153ea <_dwarf_frame_set_fde+0x36d>
		fde->fde_instlen = fde->fde_offset + 4 + length - *off;
  80042153c0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042153c4:	48 8b 50 18          	mov    0x18(%rax),%rdx
  80042153c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042153cc:	48 01 c2             	add    %rax,%rdx
  80042153cf:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042153d3:	48 8b 00             	mov    (%rax),%rax
  80042153d6:	48 29 c2             	sub    %rax,%rdx
  80042153d9:	48 89 d0             	mov    %rdx,%rax
  80042153dc:	48 8d 50 04          	lea    0x4(%rax),%rdx
  80042153e0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042153e4:	48 89 50 58          	mov    %rdx,0x58(%rax)
  80042153e8:	eb 28                	jmp    8004215412 <_dwarf_frame_set_fde+0x395>
	else
		fde->fde_instlen = fde->fde_offset + 12 + length - *off;
  80042153ea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042153ee:	48 8b 50 18          	mov    0x18(%rax),%rdx
  80042153f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042153f6:	48 01 c2             	add    %rax,%rdx
  80042153f9:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042153fd:	48 8b 00             	mov    (%rax),%rax
  8004215400:	48 29 c2             	sub    %rax,%rdx
  8004215403:	48 89 d0             	mov    %rdx,%rax
  8004215406:	48 8d 50 0c          	lea    0xc(%rax),%rdx
  800421540a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421540e:	48 89 50 58          	mov    %rdx,0x58(%rax)

	*off += fde->fde_instlen;
  8004215412:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004215416:	48 8b 10             	mov    (%rax),%rdx
  8004215419:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421541d:	48 8b 40 58          	mov    0x58(%rax),%rax
  8004215421:	48 01 c2             	add    %rax,%rdx
  8004215424:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004215428:	48 89 10             	mov    %rdx,(%rax)
	return (DW_DLE_NONE);
  800421542b:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004215430:	c9                   	leaveq 
  8004215431:	c3                   	retq   

0000008004215432 <_dwarf_frame_interal_table_init>:


int
_dwarf_frame_interal_table_init(Dwarf_Debug dbg, Dwarf_Error *error)
{
  8004215432:	55                   	push   %rbp
  8004215433:	48 89 e5             	mov    %rsp,%rbp
  8004215436:	48 83 ec 20          	sub    $0x20,%rsp
  800421543a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421543e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	Dwarf_Regtable3 *rt = &global_rt_table;
  8004215442:	48 b8 a0 06 4e 04 80 	movabs $0x80044e06a0,%rax
  8004215449:	00 00 00 
  800421544c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	if (dbg->dbg_internal_reg_table != NULL)
  8004215450:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215454:	48 8b 40 58          	mov    0x58(%rax),%rax
  8004215458:	48 85 c0             	test   %rax,%rax
  800421545b:	74 07                	je     8004215464 <_dwarf_frame_interal_table_init+0x32>
		return (DW_DLE_NONE);
  800421545d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215462:	eb 33                	jmp    8004215497 <_dwarf_frame_interal_table_init+0x65>

	rt->rt3_reg_table_size = dbg->dbg_frame_rule_table_size;
  8004215464:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215468:	0f b7 50 48          	movzwl 0x48(%rax),%edx
  800421546c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215470:	66 89 50 18          	mov    %dx,0x18(%rax)
	rt->rt3_rules = global_rules;
  8004215474:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215478:	48 b9 40 ee 6d 04 80 	movabs $0x80046dee40,%rcx
  800421547f:	00 00 00 
  8004215482:	48 89 48 20          	mov    %rcx,0x20(%rax)

	dbg->dbg_internal_reg_table = rt;
  8004215486:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421548a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421548e:	48 89 50 58          	mov    %rdx,0x58(%rax)

	return (DW_DLE_NONE);
  8004215492:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004215497:	c9                   	leaveq 
  8004215498:	c3                   	retq   

0000008004215499 <_dwarf_get_next_fde>:

static int
_dwarf_get_next_fde(Dwarf_Debug dbg,
		    int eh_frame, Dwarf_Error *error, Dwarf_Fde ret_fde)
{
  8004215499:	55                   	push   %rbp
  800421549a:	48 89 e5             	mov    %rsp,%rbp
  800421549d:	48 83 ec 60          	sub    $0x60,%rsp
  80042154a1:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  80042154a5:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  80042154a8:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  80042154ac:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
	Dwarf_Section *ds = &debug_frame_sec; 
  80042154b0:	48 b8 a0 56 23 04 80 	movabs $0x80042356a0,%rax
  80042154b7:	00 00 00 
  80042154ba:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	uint64_t length, offset, cie_id, entry_off;
	int dwarf_size, i, ret=-1;
  80042154be:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%rbp)

	offset = dbg->curr_off_eh;
  80042154c5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042154c9:	48 8b 40 30          	mov    0x30(%rax),%rax
  80042154cd:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	if (offset < dbg->dbg_eh_size) {
  80042154d1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042154d5:	48 8b 50 40          	mov    0x40(%rax),%rdx
  80042154d9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042154dd:	48 39 c2             	cmp    %rax,%rdx
  80042154e0:	0f 86 fe 01 00 00    	jbe    80042156e4 <_dwarf_get_next_fde+0x24b>
		entry_off = offset;
  80042154e6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042154ea:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		length = dbg->read((uint8_t *)dbg->dbg_eh_offset, &offset, 4);
  80042154ee:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042154f2:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042154f6:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042154fa:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  80042154fe:	48 89 d1             	mov    %rdx,%rcx
  8004215501:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  8004215505:	ba 04 00 00 00       	mov    $0x4,%edx
  800421550a:	48 89 cf             	mov    %rcx,%rdi
  800421550d:	ff d0                	callq  *%rax
  800421550f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		if (length == 0xffffffff) {
  8004215513:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004215518:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  800421551c:	75 2e                	jne    800421554c <_dwarf_get_next_fde+0xb3>
			dwarf_size = 8;
  800421551e:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
			length = dbg->read((uint8_t *)dbg->dbg_eh_offset, &offset, 8);
  8004215525:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215529:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421552d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004215531:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004215535:	48 89 d1             	mov    %rdx,%rcx
  8004215538:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  800421553c:	ba 08 00 00 00       	mov    $0x8,%edx
  8004215541:	48 89 cf             	mov    %rcx,%rdi
  8004215544:	ff d0                	callq  *%rax
  8004215546:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421554a:	eb 07                	jmp    8004215553 <_dwarf_get_next_fde+0xba>
		} else
			dwarf_size = 4;
  800421554c:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%rbp)

		if (length > dbg->dbg_eh_size - offset || (length == 0 && !eh_frame)) {
  8004215553:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215557:	48 8b 50 40          	mov    0x40(%rax),%rdx
  800421555b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421555f:	48 29 c2             	sub    %rax,%rdx
  8004215562:	48 89 d0             	mov    %rdx,%rax
  8004215565:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004215569:	72 0d                	jb     8004215578 <_dwarf_get_next_fde+0xdf>
  800421556b:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004215570:	75 10                	jne    8004215582 <_dwarf_get_next_fde+0xe9>
  8004215572:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  8004215576:	75 0a                	jne    8004215582 <_dwarf_get_next_fde+0xe9>
			DWARF_SET_ERROR(dbg, error,
					DW_DLE_DEBUG_FRAME_LENGTH_BAD);
			return (DW_DLE_DEBUG_FRAME_LENGTH_BAD);
  8004215578:	b8 12 00 00 00       	mov    $0x12,%eax
  800421557d:	e9 67 01 00 00       	jmpq   80042156e9 <_dwarf_get_next_fde+0x250>
		}

		/* Check terminator for .eh_frame */
		if (eh_frame && length == 0)
  8004215582:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  8004215586:	74 11                	je     8004215599 <_dwarf_get_next_fde+0x100>
  8004215588:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800421558d:	75 0a                	jne    8004215599 <_dwarf_get_next_fde+0x100>
			return(-1);
  800421558f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004215594:	e9 50 01 00 00       	jmpq   80042156e9 <_dwarf_get_next_fde+0x250>

		cie_id = dbg->read((uint8_t *)dbg->dbg_eh_offset, &offset, dwarf_size);
  8004215599:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421559d:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042155a1:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042155a5:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  80042155a9:	48 89 d1             	mov    %rdx,%rcx
  80042155ac:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042155af:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  80042155b3:	48 89 cf             	mov    %rcx,%rdi
  80042155b6:	ff d0                	callq  *%rax
  80042155b8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

		if (eh_frame) {
  80042155bc:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  80042155c0:	74 79                	je     800421563b <_dwarf_get_next_fde+0x1a2>
			/* GNU .eh_frame use CIE id 0. */
			if (cie_id == 0)
  80042155c2:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  80042155c7:	75 32                	jne    80042155fb <_dwarf_get_next_fde+0x162>
				ret = _dwarf_frame_set_cie(dbg, ds,
  80042155c9:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042155cd:	48 8b 48 08          	mov    0x8(%rax),%rcx
  80042155d1:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  80042155d5:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  80042155d9:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  80042155dd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042155e1:	49 89 f8             	mov    %rdi,%r8
  80042155e4:	48 89 c7             	mov    %rax,%rdi
  80042155e7:	48 b8 1a 4c 21 04 80 	movabs $0x8004214c1a,%rax
  80042155ee:	00 00 00 
  80042155f1:	ff d0                	callq  *%rax
  80042155f3:	89 45 f0             	mov    %eax,-0x10(%rbp)
  80042155f6:	e9 c8 00 00 00       	jmpq   80042156c3 <_dwarf_get_next_fde+0x22a>
							   &entry_off, ret_fde->fde_cie, error);
			else
				ret = _dwarf_frame_set_fde(dbg,ret_fde, ds,
  80042155fb:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042155ff:	4c 8b 40 08          	mov    0x8(%rax),%r8
  8004215603:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  8004215607:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421560b:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  800421560f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215613:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  8004215617:	48 89 3c 24          	mov    %rdi,(%rsp)
  800421561b:	4d 89 c1             	mov    %r8,%r9
  800421561e:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  8004215624:	48 89 c7             	mov    %rax,%rdi
  8004215627:	48 b8 7d 50 21 04 80 	movabs $0x800421507d,%rax
  800421562e:	00 00 00 
  8004215631:	ff d0                	callq  *%rax
  8004215633:	89 45 f0             	mov    %eax,-0x10(%rbp)
  8004215636:	e9 88 00 00 00       	jmpq   80042156c3 <_dwarf_get_next_fde+0x22a>
							   &entry_off, 1, ret_fde->fde_cie, error);
		} else {
			/* .dwarf_frame use CIE id ~0 */
			if ((dwarf_size == 4 && cie_id == ~0U) ||
  800421563b:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  800421563f:	75 0b                	jne    800421564c <_dwarf_get_next_fde+0x1b3>
  8004215641:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004215646:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  800421564a:	74 0d                	je     8004215659 <_dwarf_get_next_fde+0x1c0>
  800421564c:	83 7d f4 08          	cmpl   $0x8,-0xc(%rbp)
  8004215650:	75 36                	jne    8004215688 <_dwarf_get_next_fde+0x1ef>
			    (dwarf_size == 8 && cie_id == ~0ULL))
  8004215652:	48 83 7d e0 ff       	cmpq   $0xffffffffffffffff,-0x20(%rbp)
  8004215657:	75 2f                	jne    8004215688 <_dwarf_get_next_fde+0x1ef>
				ret = _dwarf_frame_set_cie(dbg, ds,
  8004215659:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421565d:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004215661:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  8004215665:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  8004215669:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  800421566d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215671:	49 89 f8             	mov    %rdi,%r8
  8004215674:	48 89 c7             	mov    %rax,%rdi
  8004215677:	48 b8 1a 4c 21 04 80 	movabs $0x8004214c1a,%rax
  800421567e:	00 00 00 
  8004215681:	ff d0                	callq  *%rax
  8004215683:	89 45 f0             	mov    %eax,-0x10(%rbp)
  8004215686:	eb 3b                	jmp    80042156c3 <_dwarf_get_next_fde+0x22a>
							   &entry_off, ret_fde->fde_cie, error);
			else
				ret = _dwarf_frame_set_fde(dbg, ret_fde, ds,
  8004215688:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421568c:	4c 8b 40 08          	mov    0x8(%rax),%r8
  8004215690:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  8004215694:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215698:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  800421569c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042156a0:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  80042156a4:	48 89 3c 24          	mov    %rdi,(%rsp)
  80042156a8:	4d 89 c1             	mov    %r8,%r9
  80042156ab:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  80042156b1:	48 89 c7             	mov    %rax,%rdi
  80042156b4:	48 b8 7d 50 21 04 80 	movabs $0x800421507d,%rax
  80042156bb:	00 00 00 
  80042156be:	ff d0                	callq  *%rax
  80042156c0:	89 45 f0             	mov    %eax,-0x10(%rbp)
							   &entry_off, 0, ret_fde->fde_cie, error);
		}

		if (ret != DW_DLE_NONE)
  80042156c3:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  80042156c7:	74 07                	je     80042156d0 <_dwarf_get_next_fde+0x237>
			return(-1);
  80042156c9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042156ce:	eb 19                	jmp    80042156e9 <_dwarf_get_next_fde+0x250>

		offset = entry_off;
  80042156d0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042156d4:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		dbg->curr_off_eh = offset;
  80042156d8:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042156dc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042156e0:	48 89 50 30          	mov    %rdx,0x30(%rax)
	}

	return (0);
  80042156e4:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042156e9:	c9                   	leaveq 
  80042156ea:	c3                   	retq   

00000080042156eb <dwarf_set_frame_cfa_value>:

Dwarf_Half
dwarf_set_frame_cfa_value(Dwarf_Debug dbg, Dwarf_Half value)
{
  80042156eb:	55                   	push   %rbp
  80042156ec:	48 89 e5             	mov    %rsp,%rbp
  80042156ef:	48 83 ec 1c          	sub    $0x1c,%rsp
  80042156f3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042156f7:	89 f0                	mov    %esi,%eax
  80042156f9:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
	Dwarf_Half old_value;

	old_value = dbg->dbg_frame_cfa_value;
  80042156fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215701:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004215705:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
	dbg->dbg_frame_cfa_value = value;
  8004215709:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421570d:	0f b7 55 e4          	movzwl -0x1c(%rbp),%edx
  8004215711:	66 89 50 4c          	mov    %dx,0x4c(%rax)

	return (old_value);
  8004215715:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
}
  8004215719:	c9                   	leaveq 
  800421571a:	c3                   	retq   

000000800421571b <dwarf_init_eh_section>:

int dwarf_init_eh_section(Dwarf_Debug dbg, Dwarf_Error *error)
{
  800421571b:	55                   	push   %rbp
  800421571c:	48 89 e5             	mov    %rsp,%rbp
  800421571f:	48 83 ec 10          	sub    $0x10,%rsp
  8004215723:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004215727:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	Dwarf_Section *section;

	if (dbg == NULL) {
  800421572b:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004215730:	75 0a                	jne    800421573c <dwarf_init_eh_section+0x21>
		DWARF_SET_ERROR(dbg, error, DW_DLE_ARGUMENT);
		return (DW_DLV_ERROR);
  8004215732:	b8 01 00 00 00       	mov    $0x1,%eax
  8004215737:	e9 85 00 00 00       	jmpq   80042157c1 <dwarf_init_eh_section+0xa6>
	}

	if (dbg->dbg_internal_reg_table == NULL) {
  800421573c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215740:	48 8b 40 58          	mov    0x58(%rax),%rax
  8004215744:	48 85 c0             	test   %rax,%rax
  8004215747:	75 25                	jne    800421576e <dwarf_init_eh_section+0x53>
		if (_dwarf_frame_interal_table_init(dbg, error) != DW_DLE_NONE)
  8004215749:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800421574d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215751:	48 89 d6             	mov    %rdx,%rsi
  8004215754:	48 89 c7             	mov    %rax,%rdi
  8004215757:	48 b8 32 54 21 04 80 	movabs $0x8004215432,%rax
  800421575e:	00 00 00 
  8004215761:	ff d0                	callq  *%rax
  8004215763:	85 c0                	test   %eax,%eax
  8004215765:	74 07                	je     800421576e <dwarf_init_eh_section+0x53>
			return (DW_DLV_ERROR);
  8004215767:	b8 01 00 00 00       	mov    $0x1,%eax
  800421576c:	eb 53                	jmp    80042157c1 <dwarf_init_eh_section+0xa6>
	}

	_dwarf_find_section_enhanced(&debug_frame_sec);
  800421576e:	48 bf a0 56 23 04 80 	movabs $0x80042356a0,%rdi
  8004215775:	00 00 00 
  8004215778:	48 b8 e7 31 21 04 80 	movabs $0x80042131e7,%rax
  800421577f:	00 00 00 
  8004215782:	ff d0                	callq  *%rax

	dbg->curr_off_eh = 0;
  8004215784:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215788:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
  800421578f:	00 
	dbg->dbg_eh_offset = debug_frame_sec.ds_addr;
  8004215790:	48 b8 a0 56 23 04 80 	movabs $0x80042356a0,%rax
  8004215797:	00 00 00 
  800421579a:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800421579e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042157a2:	48 89 50 38          	mov    %rdx,0x38(%rax)
	dbg->dbg_eh_size = debug_frame_sec.ds_size;
  80042157a6:	48 b8 a0 56 23 04 80 	movabs $0x80042356a0,%rax
  80042157ad:	00 00 00 
  80042157b0:	48 8b 50 18          	mov    0x18(%rax),%rdx
  80042157b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042157b8:	48 89 50 40          	mov    %rdx,0x40(%rax)

	return (DW_DLV_OK);
  80042157bc:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042157c1:	c9                   	leaveq 
  80042157c2:	c3                   	retq   

00000080042157c3 <_dwarf_lineno_run_program>:
int  _dwarf_find_section_enhanced(Dwarf_Section *ds);

static int
_dwarf_lineno_run_program(Dwarf_CU *cu, Dwarf_LineInfo li, uint8_t *p,
			  uint8_t *pe, Dwarf_Addr pc, Dwarf_Error *error)
{
  80042157c3:	55                   	push   %rbp
  80042157c4:	48 89 e5             	mov    %rsp,%rbp
  80042157c7:	53                   	push   %rbx
  80042157c8:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  80042157cf:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  80042157d3:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
  80042157d7:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  80042157de:	48 89 8d 70 ff ff ff 	mov    %rcx,-0x90(%rbp)
  80042157e5:	4c 89 85 68 ff ff ff 	mov    %r8,-0x98(%rbp)
  80042157ec:	4c 89 8d 60 ff ff ff 	mov    %r9,-0xa0(%rbp)
	uint64_t address, file, line, column, isa, opsize;
	int is_stmt, basic_block, end_sequence;
	int prologue_end, epilogue_begin;
	int ret;

	ln = &li->li_line;
  80042157f3:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042157f7:	48 83 c0 48          	add    $0x48,%rax
  80042157fb:	48 89 45 b8          	mov    %rax,-0x48(%rbp)

	/*
	 *   ln->ln_li     = li;             \
	 * Set registers to their default values.
	 */
	RESET_REGISTERS;
  80042157ff:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004215806:	00 
  8004215807:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  800421580e:	00 
  800421580f:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
  8004215816:	00 
  8004215817:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  800421581e:	00 
  800421581f:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215823:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  8004215827:	0f b6 c0             	movzbl %al,%eax
  800421582a:	89 45 cc             	mov    %eax,-0x34(%rbp)
  800421582d:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
  8004215834:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
  800421583b:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  8004215842:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)

	/*
	 * Start line number program.
	 */
	while (p < pe) {
  8004215849:	e9 0a 05 00 00       	jmpq   8004215d58 <_dwarf_lineno_run_program+0x595>
		if (*p == 0) {
  800421584e:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215855:	0f b6 00             	movzbl (%rax),%eax
  8004215858:	84 c0                	test   %al,%al
  800421585a:	0f 85 78 01 00 00    	jne    80042159d8 <_dwarf_lineno_run_program+0x215>

			/*
			 * Extended Opcodes.
			 */

			p++;
  8004215860:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215867:	48 83 c0 01          	add    $0x1,%rax
  800421586b:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
			opsize = _dwarf_decode_uleb128(&p);
  8004215872:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004215879:	48 89 c7             	mov    %rax,%rdi
  800421587c:	48 b8 5a 1a 21 04 80 	movabs $0x8004211a5a,%rax
  8004215883:	00 00 00 
  8004215886:	ff d0                	callq  *%rax
  8004215888:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			switch (*p) {
  800421588c:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215893:	0f b6 00             	movzbl (%rax),%eax
  8004215896:	0f b6 c0             	movzbl %al,%eax
  8004215899:	83 f8 02             	cmp    $0x2,%eax
  800421589c:	74 7a                	je     8004215918 <_dwarf_lineno_run_program+0x155>
  800421589e:	83 f8 03             	cmp    $0x3,%eax
  80042158a1:	0f 84 b3 00 00 00    	je     800421595a <_dwarf_lineno_run_program+0x197>
  80042158a7:	83 f8 01             	cmp    $0x1,%eax
  80042158aa:	0f 85 09 01 00 00    	jne    80042159b9 <_dwarf_lineno_run_program+0x1f6>
			case DW_LNE_end_sequence:
				p++;
  80042158b0:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042158b7:	48 83 c0 01          	add    $0x1,%rax
  80042158bb:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
				end_sequence = 1;
  80042158c2:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%rbp)
				RESET_REGISTERS;
  80042158c9:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  80042158d0:	00 
  80042158d1:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  80042158d8:	00 
  80042158d9:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
  80042158e0:	00 
  80042158e1:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  80042158e8:	00 
  80042158e9:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042158ed:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  80042158f1:	0f b6 c0             	movzbl %al,%eax
  80042158f4:	89 45 cc             	mov    %eax,-0x34(%rbp)
  80042158f7:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
  80042158fe:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
  8004215905:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  800421590c:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
				break;
  8004215913:	e9 bb 00 00 00       	jmpq   80042159d3 <_dwarf_lineno_run_program+0x210>
			case DW_LNE_set_address:
				p++;
  8004215918:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800421591f:	48 83 c0 01          	add    $0x1,%rax
  8004215923:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
				address = dbg->decode(&p, cu->addr_size);
  800421592a:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  8004215931:	00 00 00 
  8004215934:	48 8b 00             	mov    (%rax),%rax
  8004215937:	48 8b 40 20          	mov    0x20(%rax),%rax
  800421593b:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  800421593f:	0f b6 52 0a          	movzbl 0xa(%rdx),%edx
  8004215943:	0f b6 ca             	movzbl %dl,%ecx
  8004215946:	48 8d 95 78 ff ff ff 	lea    -0x88(%rbp),%rdx
  800421594d:	89 ce                	mov    %ecx,%esi
  800421594f:	48 89 d7             	mov    %rdx,%rdi
  8004215952:	ff d0                	callq  *%rax
  8004215954:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
				break;
  8004215958:	eb 79                	jmp    80042159d3 <_dwarf_lineno_run_program+0x210>
			case DW_LNE_define_file:
				p++;
  800421595a:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215961:	48 83 c0 01          	add    $0x1,%rax
  8004215965:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
				ret = _dwarf_lineno_add_file(li, &p, NULL,
  800421596c:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  8004215973:	00 00 00 
  8004215976:	48 8b 08             	mov    (%rax),%rcx
  8004215979:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004215980:	48 8d b5 78 ff ff ff 	lea    -0x88(%rbp),%rsi
  8004215987:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  800421598b:	49 89 c8             	mov    %rcx,%r8
  800421598e:	48 89 d1             	mov    %rdx,%rcx
  8004215991:	ba 00 00 00 00       	mov    $0x0,%edx
  8004215996:	48 89 c7             	mov    %rax,%rdi
  8004215999:	48 b8 7b 5d 21 04 80 	movabs $0x8004215d7b,%rax
  80042159a0:	00 00 00 
  80042159a3:	ff d0                	callq  *%rax
  80042159a5:	89 45 a4             	mov    %eax,-0x5c(%rbp)
							     error, dbg);
				if (ret != DW_DLE_NONE)
  80042159a8:	83 7d a4 00          	cmpl   $0x0,-0x5c(%rbp)
  80042159ac:	74 09                	je     80042159b7 <_dwarf_lineno_run_program+0x1f4>
					goto prog_fail;
  80042159ae:	90                   	nop

	return (DW_DLE_NONE);

prog_fail:

	return (ret);
  80042159af:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  80042159b2:	e9 ba 03 00 00       	jmpq   8004215d71 <_dwarf_lineno_run_program+0x5ae>
				p++;
				ret = _dwarf_lineno_add_file(li, &p, NULL,
							     error, dbg);
				if (ret != DW_DLE_NONE)
					goto prog_fail;
				break;
  80042159b7:	eb 1a                	jmp    80042159d3 <_dwarf_lineno_run_program+0x210>
			default:
				/* Unrecognized extened opcodes. */
				p += opsize;
  80042159b9:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  80042159c0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042159c4:	48 01 d0             	add    %rdx,%rax
  80042159c7:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  80042159ce:	e9 85 03 00 00       	jmpq   8004215d58 <_dwarf_lineno_run_program+0x595>
  80042159d3:	e9 80 03 00 00       	jmpq   8004215d58 <_dwarf_lineno_run_program+0x595>
			}

		} else if (*p > 0 && *p < li->li_opbase) {
  80042159d8:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042159df:	0f b6 00             	movzbl (%rax),%eax
  80042159e2:	84 c0                	test   %al,%al
  80042159e4:	0f 84 3c 02 00 00    	je     8004215c26 <_dwarf_lineno_run_program+0x463>
  80042159ea:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042159f1:	0f b6 10             	movzbl (%rax),%edx
  80042159f4:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042159f8:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  80042159fc:	38 c2                	cmp    %al,%dl
  80042159fe:	0f 83 22 02 00 00    	jae    8004215c26 <_dwarf_lineno_run_program+0x463>

			/*
			 * Standard Opcodes.
			 */

			switch (*p++) {
  8004215a04:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215a0b:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004215a0f:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  8004215a16:	0f b6 00             	movzbl (%rax),%eax
  8004215a19:	0f b6 c0             	movzbl %al,%eax
  8004215a1c:	83 f8 0c             	cmp    $0xc,%eax
  8004215a1f:	0f 87 fb 01 00 00    	ja     8004215c20 <_dwarf_lineno_run_program+0x45d>
  8004215a25:	89 c0                	mov    %eax,%eax
  8004215a27:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004215a2e:	00 
  8004215a2f:	48 b8 88 0b 22 04 80 	movabs $0x8004220b88,%rax
  8004215a36:	00 00 00 
  8004215a39:	48 01 d0             	add    %rdx,%rax
  8004215a3c:	48 8b 00             	mov    (%rax),%rax
  8004215a3f:	ff e0                	jmpq   *%rax
			case DW_LNS_copy:
				APPEND_ROW;
  8004215a41:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004215a48:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004215a4c:	73 0a                	jae    8004215a58 <_dwarf_lineno_run_program+0x295>
  8004215a4e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215a53:	e9 19 03 00 00       	jmpq   8004215d71 <_dwarf_lineno_run_program+0x5ae>
  8004215a58:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215a5c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215a60:	48 89 10             	mov    %rdx,(%rax)
  8004215a63:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215a67:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  8004215a6e:	00 
  8004215a6f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215a73:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004215a77:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004215a7b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215a7f:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004215a83:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004215a87:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215a8b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215a8f:	48 89 50 20          	mov    %rdx,0x20(%rax)
  8004215a93:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215a97:	8b 55 c8             	mov    -0x38(%rbp),%edx
  8004215a9a:	89 50 28             	mov    %edx,0x28(%rax)
  8004215a9d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215aa1:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004215aa4:	89 50 2c             	mov    %edx,0x2c(%rax)
  8004215aa7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215aab:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004215aae:	89 50 30             	mov    %edx,0x30(%rax)
  8004215ab1:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215ab5:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
  8004215abc:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004215ac0:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215ac4:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
				basic_block = 0;
  8004215acb:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
				prologue_end = 0;
  8004215ad2:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
				epilogue_begin = 0;
  8004215ad9:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
				break;
  8004215ae0:	e9 3c 01 00 00       	jmpq   8004215c21 <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_advance_pc:
				address += _dwarf_decode_uleb128(&p) *
  8004215ae5:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004215aec:	48 89 c7             	mov    %rax,%rdi
  8004215aef:	48 b8 5a 1a 21 04 80 	movabs $0x8004211a5a,%rax
  8004215af6:	00 00 00 
  8004215af9:	ff d0                	callq  *%rax
					li->li_minlen;
  8004215afb:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  8004215aff:	0f b6 52 18          	movzbl 0x18(%rdx),%edx
				basic_block = 0;
				prologue_end = 0;
				epilogue_begin = 0;
				break;
			case DW_LNS_advance_pc:
				address += _dwarf_decode_uleb128(&p) *
  8004215b03:	0f b6 d2             	movzbl %dl,%edx
  8004215b06:	48 0f af c2          	imul   %rdx,%rax
  8004215b0a:	48 01 45 e8          	add    %rax,-0x18(%rbp)
					li->li_minlen;
				break;
  8004215b0e:	e9 0e 01 00 00       	jmpq   8004215c21 <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_advance_line:
				line += _dwarf_decode_sleb128(&p);
  8004215b13:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004215b1a:	48 89 c7             	mov    %rax,%rdi
  8004215b1d:	48 b8 c8 19 21 04 80 	movabs $0x80042119c8,%rax
  8004215b24:	00 00 00 
  8004215b27:	ff d0                	callq  *%rax
  8004215b29:	48 01 45 d8          	add    %rax,-0x28(%rbp)
				break;
  8004215b2d:	e9 ef 00 00 00       	jmpq   8004215c21 <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_file:
				file = _dwarf_decode_uleb128(&p);
  8004215b32:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004215b39:	48 89 c7             	mov    %rax,%rdi
  8004215b3c:	48 b8 5a 1a 21 04 80 	movabs $0x8004211a5a,%rax
  8004215b43:	00 00 00 
  8004215b46:	ff d0                	callq  *%rax
  8004215b48:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
				break;
  8004215b4c:	e9 d0 00 00 00       	jmpq   8004215c21 <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_column:
				column = _dwarf_decode_uleb128(&p);
  8004215b51:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004215b58:	48 89 c7             	mov    %rax,%rdi
  8004215b5b:	48 b8 5a 1a 21 04 80 	movabs $0x8004211a5a,%rax
  8004215b62:	00 00 00 
  8004215b65:	ff d0                	callq  *%rax
  8004215b67:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
				break;
  8004215b6b:	e9 b1 00 00 00       	jmpq   8004215c21 <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_negate_stmt:
				is_stmt = !is_stmt;
  8004215b70:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  8004215b74:	0f 94 c0             	sete   %al
  8004215b77:	0f b6 c0             	movzbl %al,%eax
  8004215b7a:	89 45 cc             	mov    %eax,-0x34(%rbp)
				break;
  8004215b7d:	e9 9f 00 00 00       	jmpq   8004215c21 <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_basic_block:
				basic_block = 1;
  8004215b82:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%rbp)
				break;
  8004215b89:	e9 93 00 00 00       	jmpq   8004215c21 <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_const_add_pc:
				address += ADDRESS(255);
  8004215b8e:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215b92:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004215b96:	0f b6 c0             	movzbl %al,%eax
  8004215b99:	ba ff 00 00 00       	mov    $0xff,%edx
  8004215b9e:	89 d1                	mov    %edx,%ecx
  8004215ba0:	29 c1                	sub    %eax,%ecx
  8004215ba2:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215ba6:	0f b6 40 1b          	movzbl 0x1b(%rax),%eax
  8004215baa:	0f b6 d8             	movzbl %al,%ebx
  8004215bad:	89 c8                	mov    %ecx,%eax
  8004215baf:	99                   	cltd   
  8004215bb0:	f7 fb                	idiv   %ebx
  8004215bb2:	89 c2                	mov    %eax,%edx
  8004215bb4:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215bb8:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  8004215bbc:	0f b6 c0             	movzbl %al,%eax
  8004215bbf:	0f af c2             	imul   %edx,%eax
  8004215bc2:	48 98                	cltq   
  8004215bc4:	48 01 45 e8          	add    %rax,-0x18(%rbp)
				break;
  8004215bc8:	eb 57                	jmp    8004215c21 <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_fixed_advance_pc:
				address += dbg->decode(&p, 2);
  8004215bca:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  8004215bd1:	00 00 00 
  8004215bd4:	48 8b 00             	mov    (%rax),%rax
  8004215bd7:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004215bdb:	48 8d 95 78 ff ff ff 	lea    -0x88(%rbp),%rdx
  8004215be2:	be 02 00 00 00       	mov    $0x2,%esi
  8004215be7:	48 89 d7             	mov    %rdx,%rdi
  8004215bea:	ff d0                	callq  *%rax
  8004215bec:	48 01 45 e8          	add    %rax,-0x18(%rbp)
				break;
  8004215bf0:	eb 2f                	jmp    8004215c21 <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_prologue_end:
				prologue_end = 1;
  8004215bf2:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%rbp)
				break;
  8004215bf9:	eb 26                	jmp    8004215c21 <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_epilogue_begin:
				epilogue_begin = 1;
  8004215bfb:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%rbp)
				break;
  8004215c02:	eb 1d                	jmp    8004215c21 <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_isa:
				isa = _dwarf_decode_uleb128(&p);
  8004215c04:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004215c0b:	48 89 c7             	mov    %rax,%rdi
  8004215c0e:	48 b8 5a 1a 21 04 80 	movabs $0x8004211a5a,%rax
  8004215c15:	00 00 00 
  8004215c18:	ff d0                	callq  *%rax
  8004215c1a:	48 89 45 98          	mov    %rax,-0x68(%rbp)
				break;
  8004215c1e:	eb 01                	jmp    8004215c21 <_dwarf_lineno_run_program+0x45e>
			default:
				/* Unrecognized extened opcodes. What to do? */
				break;
  8004215c20:	90                   	nop
			}

		} else {
  8004215c21:	e9 32 01 00 00       	jmpq   8004215d58 <_dwarf_lineno_run_program+0x595>

			/*
			 * Special Opcodes.
			 */

			line += LINE(*p);
  8004215c26:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215c2a:	0f b6 40 1a          	movzbl 0x1a(%rax),%eax
  8004215c2e:	0f be c8             	movsbl %al,%ecx
  8004215c31:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215c38:	0f b6 00             	movzbl (%rax),%eax
  8004215c3b:	0f b6 d0             	movzbl %al,%edx
  8004215c3e:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215c42:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004215c46:	0f b6 c0             	movzbl %al,%eax
  8004215c49:	29 c2                	sub    %eax,%edx
  8004215c4b:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215c4f:	0f b6 40 1b          	movzbl 0x1b(%rax),%eax
  8004215c53:	0f b6 f0             	movzbl %al,%esi
  8004215c56:	89 d0                	mov    %edx,%eax
  8004215c58:	99                   	cltd   
  8004215c59:	f7 fe                	idiv   %esi
  8004215c5b:	89 d0                	mov    %edx,%eax
  8004215c5d:	01 c8                	add    %ecx,%eax
  8004215c5f:	48 98                	cltq   
  8004215c61:	48 01 45 d8          	add    %rax,-0x28(%rbp)
			address += ADDRESS(*p);
  8004215c65:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215c6c:	0f b6 00             	movzbl (%rax),%eax
  8004215c6f:	0f b6 d0             	movzbl %al,%edx
  8004215c72:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215c76:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004215c7a:	0f b6 c0             	movzbl %al,%eax
  8004215c7d:	89 d1                	mov    %edx,%ecx
  8004215c7f:	29 c1                	sub    %eax,%ecx
  8004215c81:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215c85:	0f b6 40 1b          	movzbl 0x1b(%rax),%eax
  8004215c89:	0f b6 d8             	movzbl %al,%ebx
  8004215c8c:	89 c8                	mov    %ecx,%eax
  8004215c8e:	99                   	cltd   
  8004215c8f:	f7 fb                	idiv   %ebx
  8004215c91:	89 c2                	mov    %eax,%edx
  8004215c93:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215c97:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  8004215c9b:	0f b6 c0             	movzbl %al,%eax
  8004215c9e:	0f af c2             	imul   %edx,%eax
  8004215ca1:	48 98                	cltq   
  8004215ca3:	48 01 45 e8          	add    %rax,-0x18(%rbp)
			APPEND_ROW;
  8004215ca7:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004215cae:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004215cb2:	73 0a                	jae    8004215cbe <_dwarf_lineno_run_program+0x4fb>
  8004215cb4:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215cb9:	e9 b3 00 00 00       	jmpq   8004215d71 <_dwarf_lineno_run_program+0x5ae>
  8004215cbe:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215cc2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215cc6:	48 89 10             	mov    %rdx,(%rax)
  8004215cc9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215ccd:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  8004215cd4:	00 
  8004215cd5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215cd9:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004215cdd:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004215ce1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215ce5:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004215ce9:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004215ced:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215cf1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215cf5:	48 89 50 20          	mov    %rdx,0x20(%rax)
  8004215cf9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215cfd:	8b 55 c8             	mov    -0x38(%rbp),%edx
  8004215d00:	89 50 28             	mov    %edx,0x28(%rax)
  8004215d03:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215d07:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004215d0a:	89 50 2c             	mov    %edx,0x2c(%rax)
  8004215d0d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215d11:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004215d14:	89 50 30             	mov    %edx,0x30(%rax)
  8004215d17:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215d1b:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
  8004215d22:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004215d26:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215d2a:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
			basic_block = 0;
  8004215d31:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
			prologue_end = 0;
  8004215d38:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
			epilogue_begin = 0;
  8004215d3f:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
			p++;
  8004215d46:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215d4d:	48 83 c0 01          	add    $0x1,%rax
  8004215d51:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
	RESET_REGISTERS;

	/*
	 * Start line number program.
	 */
	while (p < pe) {
  8004215d58:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215d5f:	48 3b 85 70 ff ff ff 	cmp    -0x90(%rbp),%rax
  8004215d66:	0f 82 e2 fa ff ff    	jb     800421584e <_dwarf_lineno_run_program+0x8b>
			epilogue_begin = 0;
			p++;
		}
	}

	return (DW_DLE_NONE);
  8004215d6c:	b8 00 00 00 00       	mov    $0x0,%eax

#undef  RESET_REGISTERS
#undef  APPEND_ROW
#undef  LINE
#undef  ADDRESS
}
  8004215d71:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  8004215d78:	5b                   	pop    %rbx
  8004215d79:	5d                   	pop    %rbp
  8004215d7a:	c3                   	retq   

0000008004215d7b <_dwarf_lineno_add_file>:

static int
_dwarf_lineno_add_file(Dwarf_LineInfo li, uint8_t **p, const char *compdir,
		       Dwarf_Error *error, Dwarf_Debug dbg)
{
  8004215d7b:	55                   	push   %rbp
  8004215d7c:	48 89 e5             	mov    %rsp,%rbp
  8004215d7f:	53                   	push   %rbx
  8004215d80:	48 83 ec 48          	sub    $0x48,%rsp
  8004215d84:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004215d88:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004215d8c:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  8004215d90:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  8004215d94:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
	char *fname;
	//const char *dirname;
	uint8_t *src;
	int slen;

	src = *p;
  8004215d98:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215d9c:	48 8b 00             	mov    (%rax),%rax
  8004215d9f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  DWARF_SET_ERROR(dbg, error, DW_DLE_MEMORY);
  return (DW_DLE_MEMORY);
  }
*/  
	//lf->lf_fullpath = NULL;
	fname = (char *) src;
  8004215da3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004215da7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	src += strlen(fname) + 1;
  8004215dab:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
  8004215daf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215db3:	48 89 c7             	mov    %rax,%rdi
  8004215db6:	48 b8 32 0b 21 04 80 	movabs $0x8004210b32,%rax
  8004215dbd:	00 00 00 
  8004215dc0:	ff d0                	callq  *%rax
  8004215dc2:	48 98                	cltq   
  8004215dc4:	48 83 c0 01          	add    $0x1,%rax
  8004215dc8:	48 01 d8             	add    %rbx,%rax
  8004215dcb:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	_dwarf_decode_uleb128(&src);
  8004215dcf:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004215dd3:	48 89 c7             	mov    %rax,%rdi
  8004215dd6:	48 b8 5a 1a 21 04 80 	movabs $0x8004211a5a,%rax
  8004215ddd:	00 00 00 
  8004215de0:	ff d0                	callq  *%rax
	   snprintf(lf->lf_fullpath, slen, "%s/%s", dirname,
	   lf->lf_fname);
	   }
	   }
	*/
	_dwarf_decode_uleb128(&src);
  8004215de2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004215de6:	48 89 c7             	mov    %rax,%rdi
  8004215de9:	48 b8 5a 1a 21 04 80 	movabs $0x8004211a5a,%rax
  8004215df0:	00 00 00 
  8004215df3:	ff d0                	callq  *%rax
	_dwarf_decode_uleb128(&src);
  8004215df5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004215df9:	48 89 c7             	mov    %rax,%rdi
  8004215dfc:	48 b8 5a 1a 21 04 80 	movabs $0x8004211a5a,%rax
  8004215e03:	00 00 00 
  8004215e06:	ff d0                	callq  *%rax
	//STAILQ_INSERT_TAIL(&li->li_lflist, lf, lf_next);
	//li->li_lflen++;

	*p = src;
  8004215e08:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004215e0c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215e10:	48 89 10             	mov    %rdx,(%rax)

	return (DW_DLE_NONE);
  8004215e13:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004215e18:	48 83 c4 48          	add    $0x48,%rsp
  8004215e1c:	5b                   	pop    %rbx
  8004215e1d:	5d                   	pop    %rbp
  8004215e1e:	c3                   	retq   

0000008004215e1f <_dwarf_lineno_init>:

int     
_dwarf_lineno_init(Dwarf_Die *die, uint64_t offset, Dwarf_LineInfo linfo, Dwarf_Addr pc, Dwarf_Error *error)
{   
  8004215e1f:	55                   	push   %rbp
  8004215e20:	48 89 e5             	mov    %rsp,%rbp
  8004215e23:	53                   	push   %rbx
  8004215e24:	48 81 ec 08 01 00 00 	sub    $0x108,%rsp
  8004215e2b:	48 89 bd 18 ff ff ff 	mov    %rdi,-0xe8(%rbp)
  8004215e32:	48 89 b5 10 ff ff ff 	mov    %rsi,-0xf0(%rbp)
  8004215e39:	48 89 95 08 ff ff ff 	mov    %rdx,-0xf8(%rbp)
  8004215e40:	48 89 8d 00 ff ff ff 	mov    %rcx,-0x100(%rbp)
  8004215e47:	4c 89 85 f8 fe ff ff 	mov    %r8,-0x108(%rbp)
	Dwarf_Section myds = {.ds_name = ".debug_line"};
  8004215e4e:	48 c7 45 90 00 00 00 	movq   $0x0,-0x70(%rbp)
  8004215e55:	00 
  8004215e56:	48 c7 45 98 00 00 00 	movq   $0x0,-0x68(%rbp)
  8004215e5d:	00 
  8004215e5e:	48 c7 45 a0 00 00 00 	movq   $0x0,-0x60(%rbp)
  8004215e65:	00 
  8004215e66:	48 c7 45 a8 00 00 00 	movq   $0x0,-0x58(%rbp)
  8004215e6d:	00 
  8004215e6e:	48 b8 f0 0b 22 04 80 	movabs $0x8004220bf0,%rax
  8004215e75:	00 00 00 
  8004215e78:	48 89 45 90          	mov    %rax,-0x70(%rbp)
	Dwarf_Section *ds = &myds;
  8004215e7c:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  8004215e80:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	//Dwarf_LineFile lf, tlf;
	uint64_t length, hdroff, endoff;
	uint8_t *p;
	int dwarf_size, i, ret;
            
	cu = die->cu_header;
  8004215e84:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  8004215e8b:	48 8b 80 60 03 00 00 	mov    0x360(%rax),%rax
  8004215e92:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	assert(cu != NULL); 
  8004215e96:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004215e9b:	75 35                	jne    8004215ed2 <_dwarf_lineno_init+0xb3>
  8004215e9d:	48 b9 fc 0b 22 04 80 	movabs $0x8004220bfc,%rcx
  8004215ea4:	00 00 00 
  8004215ea7:	48 ba 07 0c 22 04 80 	movabs $0x8004220c07,%rdx
  8004215eae:	00 00 00 
  8004215eb1:	be 13 01 00 00       	mov    $0x113,%esi
  8004215eb6:	48 bf 1c 0c 22 04 80 	movabs $0x8004220c1c,%rdi
  8004215ebd:	00 00 00 
  8004215ec0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215ec5:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004215ecc:	00 00 00 
  8004215ecf:	41 ff d0             	callq  *%r8
	assert(dbg != NULL);
  8004215ed2:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  8004215ed9:	00 00 00 
  8004215edc:	48 8b 00             	mov    (%rax),%rax
  8004215edf:	48 85 c0             	test   %rax,%rax
  8004215ee2:	75 35                	jne    8004215f19 <_dwarf_lineno_init+0xfa>
  8004215ee4:	48 b9 33 0c 22 04 80 	movabs $0x8004220c33,%rcx
  8004215eeb:	00 00 00 
  8004215eee:	48 ba 07 0c 22 04 80 	movabs $0x8004220c07,%rdx
  8004215ef5:	00 00 00 
  8004215ef8:	be 14 01 00 00       	mov    $0x114,%esi
  8004215efd:	48 bf 1c 0c 22 04 80 	movabs $0x8004220c1c,%rdi
  8004215f04:	00 00 00 
  8004215f07:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215f0c:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004215f13:	00 00 00 
  8004215f16:	41 ff d0             	callq  *%r8

	if ((_dwarf_find_section_enhanced(ds)) != 0)
  8004215f19:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215f1d:	48 89 c7             	mov    %rax,%rdi
  8004215f20:	48 b8 e7 31 21 04 80 	movabs $0x80042131e7,%rax
  8004215f27:	00 00 00 
  8004215f2a:	ff d0                	callq  *%rax
  8004215f2c:	85 c0                	test   %eax,%eax
  8004215f2e:	74 0a                	je     8004215f3a <_dwarf_lineno_init+0x11b>
		return (DW_DLE_NONE);
  8004215f30:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215f35:	e9 4f 04 00 00       	jmpq   8004216389 <_dwarf_lineno_init+0x56a>

	li = linfo;
  8004215f3a:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  8004215f41:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	 break;
	 }
	 }
	*/

	length = dbg->read(ds->ds_data, &offset, 4);
  8004215f45:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  8004215f4c:	00 00 00 
  8004215f4f:	48 8b 00             	mov    (%rax),%rax
  8004215f52:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215f56:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215f5a:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215f5e:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215f65:	ba 04 00 00 00       	mov    $0x4,%edx
  8004215f6a:	48 89 cf             	mov    %rcx,%rdi
  8004215f6d:	ff d0                	callq  *%rax
  8004215f6f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (length == 0xffffffff) {
  8004215f73:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004215f78:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  8004215f7c:	75 37                	jne    8004215fb5 <_dwarf_lineno_init+0x196>
		dwarf_size = 8;
  8004215f7e:	c7 45 e4 08 00 00 00 	movl   $0x8,-0x1c(%rbp)
		length = dbg->read(ds->ds_data, &offset, 8);
  8004215f85:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  8004215f8c:	00 00 00 
  8004215f8f:	48 8b 00             	mov    (%rax),%rax
  8004215f92:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215f96:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215f9a:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215f9e:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215fa5:	ba 08 00 00 00       	mov    $0x8,%edx
  8004215faa:	48 89 cf             	mov    %rcx,%rdi
  8004215fad:	ff d0                	callq  *%rax
  8004215faf:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004215fb3:	eb 07                	jmp    8004215fbc <_dwarf_lineno_init+0x19d>
	} else
		dwarf_size = 4;
  8004215fb5:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%rbp)

	if (length > ds->ds_size - offset) {
  8004215fbc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215fc0:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215fc4:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  8004215fcb:	48 29 c2             	sub    %rax,%rdx
  8004215fce:	48 89 d0             	mov    %rdx,%rax
  8004215fd1:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004215fd5:	73 0a                	jae    8004215fe1 <_dwarf_lineno_init+0x1c2>
		DWARF_SET_ERROR(dbg, error, DW_DLE_DEBUG_LINE_LENGTH_BAD);
		return (DW_DLE_DEBUG_LINE_LENGTH_BAD);
  8004215fd7:	b8 0f 00 00 00       	mov    $0xf,%eax
  8004215fdc:	e9 a8 03 00 00       	jmpq   8004216389 <_dwarf_lineno_init+0x56a>
	}
	/*
	 * Read in line number program header.
	 */
	li->li_length = length;
  8004215fe1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215fe5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215fe9:	48 89 10             	mov    %rdx,(%rax)
	endoff = offset + length;
  8004215fec:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
  8004215ff3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215ff7:	48 01 d0             	add    %rdx,%rax
  8004215ffa:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	li->li_version = dbg->read(ds->ds_data, &offset, 2); /* FIXME: verify version */
  8004215ffe:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  8004216005:	00 00 00 
  8004216008:	48 8b 00             	mov    (%rax),%rax
  800421600b:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421600f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004216013:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004216017:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  800421601e:	ba 02 00 00 00       	mov    $0x2,%edx
  8004216023:	48 89 cf             	mov    %rcx,%rdi
  8004216026:	ff d0                	callq  *%rax
  8004216028:	89 c2                	mov    %eax,%edx
  800421602a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421602e:	66 89 50 08          	mov    %dx,0x8(%rax)
	li->li_hdrlen = dbg->read(ds->ds_data, &offset, dwarf_size);
  8004216032:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  8004216039:	00 00 00 
  800421603c:	48 8b 00             	mov    (%rax),%rax
  800421603f:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004216043:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004216047:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800421604b:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  800421604e:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004216055:	48 89 cf             	mov    %rcx,%rdi
  8004216058:	ff d0                	callq  *%rax
  800421605a:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421605e:	48 89 42 10          	mov    %rax,0x10(%rdx)
	hdroff = offset;
  8004216062:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  8004216069:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	li->li_minlen = dbg->read(ds->ds_data, &offset, 1);
  800421606d:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  8004216074:	00 00 00 
  8004216077:	48 8b 00             	mov    (%rax),%rax
  800421607a:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421607e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004216082:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004216086:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  800421608d:	ba 01 00 00 00       	mov    $0x1,%edx
  8004216092:	48 89 cf             	mov    %rcx,%rdi
  8004216095:	ff d0                	callq  *%rax
  8004216097:	89 c2                	mov    %eax,%edx
  8004216099:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421609d:	88 50 18             	mov    %dl,0x18(%rax)
	li->li_defstmt = dbg->read(ds->ds_data, &offset, 1);
  80042160a0:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  80042160a7:	00 00 00 
  80042160aa:	48 8b 00             	mov    (%rax),%rax
  80042160ad:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042160b1:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042160b5:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  80042160b9:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  80042160c0:	ba 01 00 00 00       	mov    $0x1,%edx
  80042160c5:	48 89 cf             	mov    %rcx,%rdi
  80042160c8:	ff d0                	callq  *%rax
  80042160ca:	89 c2                	mov    %eax,%edx
  80042160cc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042160d0:	88 50 19             	mov    %dl,0x19(%rax)
	li->li_lbase = dbg->read(ds->ds_data, &offset, 1);
  80042160d3:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  80042160da:	00 00 00 
  80042160dd:	48 8b 00             	mov    (%rax),%rax
  80042160e0:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042160e4:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042160e8:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  80042160ec:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  80042160f3:	ba 01 00 00 00       	mov    $0x1,%edx
  80042160f8:	48 89 cf             	mov    %rcx,%rdi
  80042160fb:	ff d0                	callq  *%rax
  80042160fd:	89 c2                	mov    %eax,%edx
  80042160ff:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004216103:	88 50 1a             	mov    %dl,0x1a(%rax)
	li->li_lrange = dbg->read(ds->ds_data, &offset, 1);
  8004216106:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800421610d:	00 00 00 
  8004216110:	48 8b 00             	mov    (%rax),%rax
  8004216113:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004216117:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421611b:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800421611f:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004216126:	ba 01 00 00 00       	mov    $0x1,%edx
  800421612b:	48 89 cf             	mov    %rcx,%rdi
  800421612e:	ff d0                	callq  *%rax
  8004216130:	89 c2                	mov    %eax,%edx
  8004216132:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004216136:	88 50 1b             	mov    %dl,0x1b(%rax)
	li->li_opbase = dbg->read(ds->ds_data, &offset, 1);
  8004216139:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  8004216140:	00 00 00 
  8004216143:	48 8b 00             	mov    (%rax),%rax
  8004216146:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421614a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421614e:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004216152:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004216159:	ba 01 00 00 00       	mov    $0x1,%edx
  800421615e:	48 89 cf             	mov    %rcx,%rdi
  8004216161:	ff d0                	callq  *%rax
  8004216163:	89 c2                	mov    %eax,%edx
  8004216165:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004216169:	88 50 1c             	mov    %dl,0x1c(%rax)
	//STAILQ_INIT(&li->li_lflist);
	//STAILQ_INIT(&li->li_lnlist);

	if ((int)li->li_hdrlen - 5 < li->li_opbase - 1) {
  800421616c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004216170:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004216174:	8d 50 fb             	lea    -0x5(%rax),%edx
  8004216177:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421617b:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  800421617f:	0f b6 c0             	movzbl %al,%eax
  8004216182:	83 e8 01             	sub    $0x1,%eax
  8004216185:	39 c2                	cmp    %eax,%edx
  8004216187:	7d 0c                	jge    8004216195 <_dwarf_lineno_init+0x376>
		ret = DW_DLE_DEBUG_LINE_LENGTH_BAD;
  8004216189:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
		DWARF_SET_ERROR(dbg, error, ret);
		goto fail_cleanup;
  8004216190:	e9 f1 01 00 00       	jmpq   8004216386 <_dwarf_lineno_init+0x567>
	}

	li->li_oplen = global_std_op;
  8004216195:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004216199:	48 bb 80 f4 6d 04 80 	movabs $0x80046df480,%rbx
  80042161a0:	00 00 00 
  80042161a3:	48 89 58 20          	mov    %rbx,0x20(%rax)

	/*
	 * Read in std opcode arg length list. Note that the first
	 * element is not used.
	 */
	for (i = 1; i < li->li_opbase; i++)
  80042161a7:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%rbp)
  80042161ae:	eb 41                	jmp    80042161f1 <_dwarf_lineno_init+0x3d2>
		li->li_oplen[i] = dbg->read(ds->ds_data, &offset, 1);
  80042161b0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042161b4:	48 8b 50 20          	mov    0x20(%rax),%rdx
  80042161b8:	8b 45 e0             	mov    -0x20(%rbp),%eax
  80042161bb:	48 98                	cltq   
  80042161bd:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  80042161c1:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  80042161c8:	00 00 00 
  80042161cb:	48 8b 00             	mov    (%rax),%rax
  80042161ce:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042161d2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042161d6:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  80042161da:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  80042161e1:	ba 01 00 00 00       	mov    $0x1,%edx
  80042161e6:	48 89 cf             	mov    %rcx,%rdi
  80042161e9:	ff d0                	callq  *%rax
  80042161eb:	88 03                	mov    %al,(%rbx)

	/*
	 * Read in std opcode arg length list. Note that the first
	 * element is not used.
	 */
	for (i = 1; i < li->li_opbase; i++)
  80042161ed:	83 45 e0 01          	addl   $0x1,-0x20(%rbp)
  80042161f1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042161f5:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  80042161f9:	0f b6 c0             	movzbl %al,%eax
  80042161fc:	3b 45 e0             	cmp    -0x20(%rbp),%eax
  80042161ff:	7f af                	jg     80042161b0 <_dwarf_lineno_init+0x391>
		li->li_oplen[i] = dbg->read(ds->ds_data, &offset, 1);

	/*
	 * Check how many strings in the include dir string array.
	 */
	length = 0;
  8004216201:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004216208:	00 
	p = ds->ds_data + offset;
  8004216209:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421620d:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004216211:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  8004216218:	48 01 d0             	add    %rdx,%rax
  800421621b:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
	while (*p != '\0') {
  8004216222:	eb 1f                	jmp    8004216243 <_dwarf_lineno_init+0x424>
		while (*p++ != '\0')
  8004216224:	90                   	nop
  8004216225:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  800421622c:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004216230:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
  8004216237:	0f b6 00             	movzbl (%rax),%eax
  800421623a:	84 c0                	test   %al,%al
  800421623c:	75 e7                	jne    8004216225 <_dwarf_lineno_init+0x406>
			;
		length++;
  800421623e:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
	/*
	 * Check how many strings in the include dir string array.
	 */
	length = 0;
	p = ds->ds_data + offset;
	while (*p != '\0') {
  8004216243:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  800421624a:	0f b6 00             	movzbl (%rax),%eax
  800421624d:	84 c0                	test   %al,%al
  800421624f:	75 d3                	jne    8004216224 <_dwarf_lineno_init+0x405>
		while (*p++ != '\0')
			;
		length++;
	}
	li->li_inclen = length;
  8004216251:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004216255:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004216259:	48 89 50 30          	mov    %rdx,0x30(%rax)

	/* Sanity check. */
	if (p - ds->ds_data > (int) ds->ds_size) {
  800421625d:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004216264:	48 89 c2             	mov    %rax,%rdx
  8004216267:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421626b:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421626f:	48 29 c2             	sub    %rax,%rdx
  8004216272:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216276:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421627a:	48 98                	cltq   
  800421627c:	48 39 c2             	cmp    %rax,%rdx
  800421627f:	7e 0c                	jle    800421628d <_dwarf_lineno_init+0x46e>
		ret = DW_DLE_DEBUG_LINE_LENGTH_BAD;
  8004216281:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
		DWARF_SET_ERROR(dbg, error, ret);
		goto fail_cleanup;
  8004216288:	e9 f9 00 00 00       	jmpq   8004216386 <_dwarf_lineno_init+0x567>
	}
	p++;
  800421628d:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004216294:	48 83 c0 01          	add    $0x1,%rax
  8004216298:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)

	/*
	 * Process file list.
	 */
	while (*p != '\0') {
  800421629f:	eb 3c                	jmp    80042162dd <_dwarf_lineno_init+0x4be>
		ret = _dwarf_lineno_add_file(li, &p, NULL, error, dbg);
  80042162a1:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  80042162a8:	00 00 00 
  80042162ab:	48 8b 08             	mov    (%rax),%rcx
  80042162ae:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  80042162b5:	48 8d b5 28 ff ff ff 	lea    -0xd8(%rbp),%rsi
  80042162bc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042162c0:	49 89 c8             	mov    %rcx,%r8
  80042162c3:	48 89 d1             	mov    %rdx,%rcx
  80042162c6:	ba 00 00 00 00       	mov    $0x0,%edx
  80042162cb:	48 89 c7             	mov    %rax,%rdi
  80042162ce:	48 b8 7b 5d 21 04 80 	movabs $0x8004215d7b,%rax
  80042162d5:	00 00 00 
  80042162d8:	ff d0                	callq  *%rax
  80042162da:	89 45 dc             	mov    %eax,-0x24(%rbp)
	p++;

	/*
	 * Process file list.
	 */
	while (*p != '\0') {
  80042162dd:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  80042162e4:	0f b6 00             	movzbl (%rax),%eax
  80042162e7:	84 c0                	test   %al,%al
  80042162e9:	75 b6                	jne    80042162a1 <_dwarf_lineno_init+0x482>
		ret = _dwarf_lineno_add_file(li, &p, NULL, error, dbg);
		//p++;
	}

	p++;
  80042162eb:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  80042162f2:	48 83 c0 01          	add    $0x1,%rax
  80042162f6:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
	/* Sanity check. */
	if (p - ds->ds_data - hdroff != li->li_hdrlen) {
  80042162fd:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004216304:	48 89 c2             	mov    %rax,%rdx
  8004216307:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421630b:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421630f:	48 29 c2             	sub    %rax,%rdx
  8004216312:	48 89 d0             	mov    %rdx,%rax
  8004216315:	48 2b 45 b0          	sub    -0x50(%rbp),%rax
  8004216319:	48 89 c2             	mov    %rax,%rdx
  800421631c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004216320:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004216324:	48 39 c2             	cmp    %rax,%rdx
  8004216327:	74 09                	je     8004216332 <_dwarf_lineno_init+0x513>
		ret = DW_DLE_DEBUG_LINE_LENGTH_BAD;
  8004216329:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
		DWARF_SET_ERROR(dbg, error, ret);
		goto fail_cleanup;
  8004216330:	eb 54                	jmp    8004216386 <_dwarf_lineno_init+0x567>
	}

	/*
	 * Process line number program.
	 */
	ret = _dwarf_lineno_run_program(cu, li, p, ds->ds_data + endoff, pc,
  8004216332:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216336:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800421633a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421633e:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  8004216342:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
  8004216349:	4c 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%r8
  8004216350:	48 8b bd 00 ff ff ff 	mov    -0x100(%rbp),%rdi
  8004216357:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  800421635b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421635f:	4d 89 c1             	mov    %r8,%r9
  8004216362:	49 89 f8             	mov    %rdi,%r8
  8004216365:	48 89 c7             	mov    %rax,%rdi
  8004216368:	48 b8 c3 57 21 04 80 	movabs $0x80042157c3,%rax
  800421636f:	00 00 00 
  8004216372:	ff d0                	callq  *%rax
  8004216374:	89 45 dc             	mov    %eax,-0x24(%rbp)
					error);
	if (ret != DW_DLE_NONE)
  8004216377:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421637b:	74 02                	je     800421637f <_dwarf_lineno_init+0x560>
		goto fail_cleanup;
  800421637d:	eb 07                	jmp    8004216386 <_dwarf_lineno_init+0x567>

	//cu->cu_lineinfo = li;

	return (DW_DLE_NONE);
  800421637f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216384:	eb 03                	jmp    8004216389 <_dwarf_lineno_init+0x56a>
fail_cleanup:

	/*if (li->li_oplen)
	  free(li->li_oplen);*/

	return (ret);
  8004216386:	8b 45 dc             	mov    -0x24(%rbp),%eax
}
  8004216389:	48 81 c4 08 01 00 00 	add    $0x108,%rsp
  8004216390:	5b                   	pop    %rbx
  8004216391:	5d                   	pop    %rbp
  8004216392:	c3                   	retq   

0000008004216393 <dwarf_srclines>:

int
dwarf_srclines(Dwarf_Die *die, Dwarf_Line linebuf, Dwarf_Addr pc, Dwarf_Error *error)
{
  8004216393:	55                   	push   %rbp
  8004216394:	48 89 e5             	mov    %rsp,%rbp
  8004216397:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  800421639e:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  80042163a5:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
  80042163ac:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  80042163b3:	48 89 8d 50 ff ff ff 	mov    %rcx,-0xb0(%rbp)
	_Dwarf_LineInfo li;
	Dwarf_Attribute *at;

	assert(die);
  80042163ba:	48 83 bd 68 ff ff ff 	cmpq   $0x0,-0x98(%rbp)
  80042163c1:	00 
  80042163c2:	75 35                	jne    80042163f9 <dwarf_srclines+0x66>
  80042163c4:	48 b9 3f 0c 22 04 80 	movabs $0x8004220c3f,%rcx
  80042163cb:	00 00 00 
  80042163ce:	48 ba 07 0c 22 04 80 	movabs $0x8004220c07,%rdx
  80042163d5:	00 00 00 
  80042163d8:	be 9a 01 00 00       	mov    $0x19a,%esi
  80042163dd:	48 bf 1c 0c 22 04 80 	movabs $0x8004220c1c,%rdi
  80042163e4:	00 00 00 
  80042163e7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042163ec:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042163f3:	00 00 00 
  80042163f6:	41 ff d0             	callq  *%r8
	assert(linebuf);
  80042163f9:	48 83 bd 60 ff ff ff 	cmpq   $0x0,-0xa0(%rbp)
  8004216400:	00 
  8004216401:	75 35                	jne    8004216438 <dwarf_srclines+0xa5>
  8004216403:	48 b9 43 0c 22 04 80 	movabs $0x8004220c43,%rcx
  800421640a:	00 00 00 
  800421640d:	48 ba 07 0c 22 04 80 	movabs $0x8004220c07,%rdx
  8004216414:	00 00 00 
  8004216417:	be 9b 01 00 00       	mov    $0x19b,%esi
  800421641c:	48 bf 1c 0c 22 04 80 	movabs $0x8004220c1c,%rdi
  8004216423:	00 00 00 
  8004216426:	b8 00 00 00 00       	mov    $0x0,%eax
  800421642b:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004216432:	00 00 00 
  8004216435:	41 ff d0             	callq  *%r8

	memset(&li, 0, sizeof(_Dwarf_LineInfo));
  8004216438:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  800421643f:	ba 88 00 00 00       	mov    $0x88,%edx
  8004216444:	be 00 00 00 00       	mov    $0x0,%esi
  8004216449:	48 89 c7             	mov    %rax,%rdi
  800421644c:	48 b8 37 0e 21 04 80 	movabs $0x8004210e37,%rax
  8004216453:	00 00 00 
  8004216456:	ff d0                	callq  *%rax

	if ((at = _dwarf_attr_find(die, DW_AT_stmt_list)) == NULL) {
  8004216458:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800421645f:	be 10 00 00 00       	mov    $0x10,%esi
  8004216464:	48 89 c7             	mov    %rax,%rdi
  8004216467:	48 b8 6c 2d 21 04 80 	movabs $0x8004212d6c,%rax
  800421646e:	00 00 00 
  8004216471:	ff d0                	callq  *%rax
  8004216473:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004216477:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800421647c:	75 0a                	jne    8004216488 <dwarf_srclines+0xf5>
		DWARF_SET_ERROR(dbg, error, DW_DLE_NO_ENTRY);
		return (DW_DLV_NO_ENTRY);
  800421647e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004216483:	e9 84 00 00 00       	jmpq   800421650c <dwarf_srclines+0x179>
	}

	if (_dwarf_lineno_init(die, at->u[0].u64, &li, pc, error) !=
  8004216488:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421648c:	48 8b 70 28          	mov    0x28(%rax),%rsi
  8004216490:	48 8b bd 50 ff ff ff 	mov    -0xb0(%rbp),%rdi
  8004216497:	48 8b 8d 58 ff ff ff 	mov    -0xa8(%rbp),%rcx
  800421649e:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
  80042164a5:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042164ac:	49 89 f8             	mov    %rdi,%r8
  80042164af:	48 89 c7             	mov    %rax,%rdi
  80042164b2:	48 b8 1f 5e 21 04 80 	movabs $0x8004215e1f,%rax
  80042164b9:	00 00 00 
  80042164bc:	ff d0                	callq  *%rax
  80042164be:	85 c0                	test   %eax,%eax
  80042164c0:	74 07                	je     80042164c9 <dwarf_srclines+0x136>
	    DW_DLE_NONE)
	{
		return (DW_DLV_ERROR);
  80042164c2:	b8 01 00 00 00       	mov    $0x1,%eax
  80042164c7:	eb 43                	jmp    800421650c <dwarf_srclines+0x179>
	}
	*linebuf = li.li_line;
  80042164c9:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042164d0:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  80042164d4:	48 89 10             	mov    %rdx,(%rax)
  80042164d7:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042164db:	48 89 50 08          	mov    %rdx,0x8(%rax)
  80042164df:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042164e3:	48 89 50 10          	mov    %rdx,0x10(%rax)
  80042164e7:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042164eb:	48 89 50 18          	mov    %rdx,0x18(%rax)
  80042164ef:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042164f3:	48 89 50 20          	mov    %rdx,0x20(%rax)
  80042164f7:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042164fb:	48 89 50 28          	mov    %rdx,0x28(%rax)
  80042164ff:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004216503:	48 89 50 30          	mov    %rdx,0x30(%rax)

	return (DW_DLV_OK);
  8004216507:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421650c:	c9                   	leaveq 
  800421650d:	c3                   	retq   

000000800421650e <_dwarf_find_section>:
  800421650e:	55                   	push   %rbp
  800421650f:	48 89 e5             	mov    %rsp,%rbp
  8004216512:	48 83 ec 20          	sub    $0x20,%rsp
  8004216516:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421651a:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004216521:	00 
  8004216522:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004216529:	eb 57                	jmp    8004216582 <_dwarf_find_section+0x74>
  800421652b:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216532:	00 00 00 
  8004216535:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004216538:	48 63 d2             	movslq %edx,%rdx
  800421653b:	48 c1 e2 05          	shl    $0x5,%rdx
  800421653f:	48 01 d0             	add    %rdx,%rax
  8004216542:	48 8b 00             	mov    (%rax),%rax
  8004216545:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004216549:	48 89 d6             	mov    %rdx,%rsi
  800421654c:	48 89 c7             	mov    %rax,%rdi
  800421654f:	48 b8 00 0d 21 04 80 	movabs $0x8004210d00,%rax
  8004216556:	00 00 00 
  8004216559:	ff d0                	callq  *%rax
  800421655b:	85 c0                	test   %eax,%eax
  800421655d:	75 1f                	jne    800421657e <_dwarf_find_section+0x70>
  800421655f:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216562:	48 98                	cltq   
  8004216564:	48 c1 e0 05          	shl    $0x5,%rax
  8004216568:	48 89 c2             	mov    %rax,%rdx
  800421656b:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216572:	00 00 00 
  8004216575:	48 01 d0             	add    %rdx,%rax
  8004216578:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421657c:	eb 0a                	jmp    8004216588 <_dwarf_find_section+0x7a>
  800421657e:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004216582:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  8004216586:	7e a3                	jle    800421652b <_dwarf_find_section+0x1d>
  8004216588:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421658c:	c9                   	leaveq 
  800421658d:	c3                   	retq   

000000800421658e <find_debug_sections>:
  800421658e:	55                   	push   %rbp
  800421658f:	48 89 e5             	mov    %rsp,%rbp
  8004216592:	48 83 ec 40          	sub    $0x40,%rsp
  8004216596:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421659a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421659e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042165a2:	48 c7 45 f8 00 00 20 	movq   $0x200000,-0x8(%rbp)
  80042165a9:	00 
  80042165aa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042165ae:	48 8b 50 28          	mov    0x28(%rax),%rdx
  80042165b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042165b6:	48 01 d0             	add    %rdx,%rax
  80042165b9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042165bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042165c1:	0f b7 40 3e          	movzwl 0x3e(%rax),%eax
  80042165c5:	0f b7 c0             	movzwl %ax,%eax
  80042165c8:	48 c1 e0 06          	shl    $0x6,%rax
  80042165cc:	48 89 c2             	mov    %rax,%rdx
  80042165cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042165d3:	48 01 d0             	add    %rdx,%rax
  80042165d6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042165da:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042165de:	0f b7 40 3c          	movzwl 0x3c(%rax),%eax
  80042165e2:	0f b7 c0             	movzwl %ax,%eax
  80042165e5:	48 c1 e0 06          	shl    $0x6,%rax
  80042165e9:	48 89 c2             	mov    %rax,%rdx
  80042165ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042165f0:	48 01 d0             	add    %rdx,%rax
  80042165f3:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042165f7:	e9 4b 02 00 00       	jmpq   8004216847 <find_debug_sections+0x2b9>
  80042165fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216600:	8b 00                	mov    (%rax),%eax
  8004216602:	89 c2                	mov    %eax,%edx
  8004216604:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216608:	48 8b 48 18          	mov    0x18(%rax),%rcx
  800421660c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004216610:	48 01 c8             	add    %rcx,%rax
  8004216613:	48 01 d0             	add    %rdx,%rax
  8004216616:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421661a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421661e:	48 be 4b 0c 22 04 80 	movabs $0x8004220c4b,%rsi
  8004216625:	00 00 00 
  8004216628:	48 89 c7             	mov    %rax,%rdi
  800421662b:	48 b8 00 0d 21 04 80 	movabs $0x8004210d00,%rax
  8004216632:	00 00 00 
  8004216635:	ff d0                	callq  *%rax
  8004216637:	85 c0                	test   %eax,%eax
  8004216639:	75 4b                	jne    8004216686 <find_debug_sections+0xf8>
  800421663b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421663f:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216646:	00 00 00 
  8004216649:	48 89 50 08          	mov    %rdx,0x8(%rax)
  800421664d:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216654:	00 00 00 
  8004216657:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421665b:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800421665f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216663:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216667:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  800421666e:	00 00 00 
  8004216671:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004216675:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216679:	48 8b 40 20          	mov    0x20(%rax),%rax
  800421667d:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  8004216681:	e9 bc 01 00 00       	jmpq   8004216842 <find_debug_sections+0x2b4>
  8004216686:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421668a:	48 be 57 0c 22 04 80 	movabs $0x8004220c57,%rsi
  8004216691:	00 00 00 
  8004216694:	48 89 c7             	mov    %rax,%rdi
  8004216697:	48 b8 00 0d 21 04 80 	movabs $0x8004210d00,%rax
  800421669e:	00 00 00 
  80042166a1:	ff d0                	callq  *%rax
  80042166a3:	85 c0                	test   %eax,%eax
  80042166a5:	75 4b                	jne    80042166f2 <find_debug_sections+0x164>
  80042166a7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042166ab:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  80042166b2:	00 00 00 
  80042166b5:	48 89 50 28          	mov    %rdx,0x28(%rax)
  80042166b9:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  80042166c0:	00 00 00 
  80042166c3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042166c7:	48 89 50 30          	mov    %rdx,0x30(%rax)
  80042166cb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042166cf:	48 8b 50 20          	mov    0x20(%rax),%rdx
  80042166d3:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  80042166da:	00 00 00 
  80042166dd:	48 89 50 38          	mov    %rdx,0x38(%rax)
  80042166e1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042166e5:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042166e9:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  80042166ed:	e9 50 01 00 00       	jmpq   8004216842 <find_debug_sections+0x2b4>
  80042166f2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042166f6:	48 be 6f 0c 22 04 80 	movabs $0x8004220c6f,%rsi
  80042166fd:	00 00 00 
  8004216700:	48 89 c7             	mov    %rax,%rdi
  8004216703:	48 b8 00 0d 21 04 80 	movabs $0x8004210d00,%rax
  800421670a:	00 00 00 
  800421670d:	ff d0                	callq  *%rax
  800421670f:	85 c0                	test   %eax,%eax
  8004216711:	75 4b                	jne    800421675e <find_debug_sections+0x1d0>
  8004216713:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004216717:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  800421671e:	00 00 00 
  8004216721:	48 89 50 68          	mov    %rdx,0x68(%rax)
  8004216725:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  800421672c:	00 00 00 
  800421672f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004216733:	48 89 50 70          	mov    %rdx,0x70(%rax)
  8004216737:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421673b:	48 8b 50 20          	mov    0x20(%rax),%rdx
  800421673f:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216746:	00 00 00 
  8004216749:	48 89 50 78          	mov    %rdx,0x78(%rax)
  800421674d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216751:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004216755:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  8004216759:	e9 e4 00 00 00       	jmpq   8004216842 <find_debug_sections+0x2b4>
  800421675e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216762:	48 be 65 0c 22 04 80 	movabs $0x8004220c65,%rsi
  8004216769:	00 00 00 
  800421676c:	48 89 c7             	mov    %rax,%rdi
  800421676f:	48 b8 00 0d 21 04 80 	movabs $0x8004210d00,%rax
  8004216776:	00 00 00 
  8004216779:	ff d0                	callq  *%rax
  800421677b:	85 c0                	test   %eax,%eax
  800421677d:	75 53                	jne    80042167d2 <find_debug_sections+0x244>
  800421677f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216783:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004216787:	48 89 c2             	mov    %rax,%rdx
  800421678a:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216791:	00 00 00 
  8004216794:	48 89 50 48          	mov    %rdx,0x48(%rax)
  8004216798:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421679c:	48 8b 50 10          	mov    0x10(%rax),%rdx
  80042167a0:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  80042167a7:	00 00 00 
  80042167aa:	48 89 50 50          	mov    %rdx,0x50(%rax)
  80042167ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042167b2:	48 8b 50 20          	mov    0x20(%rax),%rdx
  80042167b6:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  80042167bd:	00 00 00 
  80042167c0:	48 89 50 58          	mov    %rdx,0x58(%rax)
  80042167c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042167c8:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042167cc:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  80042167d0:	eb 70                	jmp    8004216842 <find_debug_sections+0x2b4>
  80042167d2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042167d6:	48 be 7b 0c 22 04 80 	movabs $0x8004220c7b,%rsi
  80042167dd:	00 00 00 
  80042167e0:	48 89 c7             	mov    %rax,%rdi
  80042167e3:	48 b8 00 0d 21 04 80 	movabs $0x8004210d00,%rax
  80042167ea:	00 00 00 
  80042167ed:	ff d0                	callq  *%rax
  80042167ef:	85 c0                	test   %eax,%eax
  80042167f1:	75 4f                	jne    8004216842 <find_debug_sections+0x2b4>
  80042167f3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042167f7:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  80042167fe:	00 00 00 
  8004216801:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
  8004216808:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  800421680f:	00 00 00 
  8004216812:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004216816:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
  800421681d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216821:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216825:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  800421682c:	00 00 00 
  800421682f:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  8004216836:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421683a:	48 8b 40 20          	mov    0x20(%rax),%rax
  800421683e:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  8004216842:	48 83 45 f0 40       	addq   $0x40,-0x10(%rbp)
  8004216847:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421684b:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  800421684f:	0f 82 a7 fd ff ff    	jb     80042165fc <find_debug_sections+0x6e>
  8004216855:	c9                   	leaveq 
  8004216856:	c3                   	retq   

0000008004216857 <read_section_headers>:
  8004216857:	55                   	push   %rbp
  8004216858:	48 89 e5             	mov    %rsp,%rbp
  800421685b:	48 81 ec 60 01 00 00 	sub    $0x160,%rsp
  8004216862:	48 89 bd a8 fe ff ff 	mov    %rdi,-0x158(%rbp)
  8004216869:	48 89 b5 a0 fe ff ff 	mov    %rsi,-0x160(%rbp)
  8004216870:	48 8d b5 c0 fe ff ff 	lea    -0x140(%rbp),%rsi
  8004216877:	b8 00 00 00 00       	mov    $0x0,%eax
  800421687c:	ba 14 00 00 00       	mov    $0x14,%edx
  8004216881:	48 89 f7             	mov    %rsi,%rdi
  8004216884:	48 89 d1             	mov    %rdx,%rcx
  8004216887:	f3 48 ab             	rep stos %rax,%es:(%rdi)
  800421688a:	48 c7 45 e8 00 02 00 	movq   $0x200,-0x18(%rbp)
  8004216891:	00 
  8004216892:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216896:	48 8b 95 a0 fe ff ff 	mov    -0x160(%rbp),%rdx
  800421689d:	48 01 d0             	add    %rdx,%rax
  80042168a0:	48 83 e8 01          	sub    $0x1,%rax
  80042168a4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042168a8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042168ac:	ba 00 00 00 00       	mov    $0x0,%edx
  80042168b1:	48 f7 75 e8          	divq   -0x18(%rbp)
  80042168b5:	48 89 d0             	mov    %rdx,%rax
  80042168b8:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042168bc:	48 29 c2             	sub    %rax,%rdx
  80042168bf:	48 89 d0             	mov    %rdx,%rax
  80042168c2:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042168c6:	48 c7 85 b8 fe ff ff 	movq   $0x0,-0x148(%rbp)
  80042168cd:	00 00 00 00 
  80042168d1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042168d5:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042168d9:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  80042168e0:	00 
  80042168e1:	48 b8 00 00 01 04 80 	movabs $0x8004010000,%rax
  80042168e8:	00 00 00 
  80042168eb:	48 39 85 a8 fe ff ff 	cmp    %rax,-0x158(%rbp)
  80042168f2:	75 11                	jne    8004216905 <read_section_headers+0xae>
  80042168f4:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  80042168fb:	48 8b 40 28          	mov    0x28(%rax),%rax
  80042168ff:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004216903:	eb 26                	jmp    800421692b <read_section_headers+0xd4>
  8004216905:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  800421690c:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004216910:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004216917:	48 01 c2             	add    %rax,%rdx
  800421691a:	48 b8 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rax
  8004216921:	ff ff ff 
  8004216924:	48 01 d0             	add    %rdx,%rax
  8004216927:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421692b:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004216932:	0f b7 40 3c          	movzwl 0x3c(%rax),%eax
  8004216936:	0f b7 c0             	movzwl %ax,%eax
  8004216939:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  800421693c:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004216943:	0f b7 40 3a          	movzwl 0x3a(%rax),%eax
  8004216947:	0f b7 c0             	movzwl %ax,%eax
  800421694a:	89 45 c0             	mov    %eax,-0x40(%rbp)
  800421694d:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004216954:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004216958:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800421695b:	0f af 45 c0          	imul   -0x40(%rbp),%eax
  800421695f:	48 63 f0             	movslq %eax,%rsi
  8004216962:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216966:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  800421696d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004216971:	48 89 c7             	mov    %rax,%rdi
  8004216974:	48 b8 96 6f 21 04 80 	movabs $0x8004216f96,%rax
  800421697b:	00 00 00 
  800421697e:	ff d0                	callq  *%rax
  8004216980:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216984:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004216988:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421698c:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004216992:	48 89 c2             	mov    %rax,%rdx
  8004216995:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216999:	48 29 d0             	sub    %rdx,%rax
  800421699c:	48 89 c2             	mov    %rax,%rdx
  800421699f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042169a3:	48 01 d0             	add    %rdx,%rax
  80042169a6:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042169aa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  80042169b1:	eb 24                	jmp    80042169d7 <read_section_headers+0x180>
  80042169b3:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042169b6:	48 98                	cltq   
  80042169b8:	48 c1 e0 06          	shl    $0x6,%rax
  80042169bc:	48 89 c2             	mov    %rax,%rdx
  80042169bf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042169c3:	48 01 c2             	add    %rax,%rdx
  80042169c6:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042169c9:	48 98                	cltq   
  80042169cb:	48 89 94 c5 c0 fe ff 	mov    %rdx,-0x140(%rbp,%rax,8)
  80042169d2:	ff 
  80042169d3:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  80042169d7:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042169da:	3b 45 c4             	cmp    -0x3c(%rbp),%eax
  80042169dd:	7c d4                	jl     80042169b3 <read_section_headers+0x15c>
  80042169df:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042169e3:	0f b7 40 3e          	movzwl 0x3e(%rax),%eax
  80042169e7:	0f b7 c0             	movzwl %ax,%eax
  80042169ea:	48 98                	cltq   
  80042169ec:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042169f3:	ff 
  80042169f4:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  80042169f8:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  80042169ff:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004216a03:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004216a07:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216a0b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004216a0f:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004216a13:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  8004216a1a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216a1e:	48 01 c8             	add    %rcx,%rax
  8004216a21:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004216a28:	48 89 c7             	mov    %rax,%rdi
  8004216a2b:	48 b8 96 6f 21 04 80 	movabs $0x8004216f96,%rax
  8004216a32:	00 00 00 
  8004216a35:	ff d0                	callq  *%rax
  8004216a37:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004216a3b:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216a3f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004216a43:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004216a47:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  8004216a4b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004216a4f:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004216a55:	48 29 c2             	sub    %rax,%rdx
  8004216a58:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216a5c:	48 01 c2             	add    %rax,%rdx
  8004216a5f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216a63:	48 01 d0             	add    %rdx,%rax
  8004216a66:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  8004216a6a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004216a71:	e9 04 05 00 00       	jmpq   8004216f7a <read_section_headers+0x723>
  8004216a76:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216a79:	48 98                	cltq   
  8004216a7b:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216a82:	ff 
  8004216a83:	8b 00                	mov    (%rax),%eax
  8004216a85:	89 c2                	mov    %eax,%edx
  8004216a87:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004216a8b:	48 01 d0             	add    %rdx,%rax
  8004216a8e:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  8004216a92:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  8004216a99:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004216a9e:	48 85 c0             	test   %rax,%rax
  8004216aa1:	74 35                	je     8004216ad8 <read_section_headers+0x281>
  8004216aa3:	48 b9 86 0c 22 04 80 	movabs $0x8004220c86,%rcx
  8004216aaa:	00 00 00 
  8004216aad:	48 ba 9f 0c 22 04 80 	movabs $0x8004220c9f,%rdx
  8004216ab4:	00 00 00 
  8004216ab7:	be 8a 00 00 00       	mov    $0x8a,%esi
  8004216abc:	48 bf b4 0c 22 04 80 	movabs $0x8004220cb4,%rdi
  8004216ac3:	00 00 00 
  8004216ac6:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216acb:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004216ad2:	00 00 00 
  8004216ad5:	41 ff d0             	callq  *%r8
  8004216ad8:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  8004216adf:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004216ae3:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004216ae7:	48 be 4b 0c 22 04 80 	movabs $0x8004220c4b,%rsi
  8004216aee:	00 00 00 
  8004216af1:	48 89 c7             	mov    %rax,%rdi
  8004216af4:	48 b8 00 0d 21 04 80 	movabs $0x8004210d00,%rax
  8004216afb:	00 00 00 
  8004216afe:	ff d0                	callq  *%rax
  8004216b00:	85 c0                	test   %eax,%eax
  8004216b02:	0f 85 d8 00 00 00    	jne    8004216be0 <read_section_headers+0x389>
  8004216b08:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216b0b:	48 98                	cltq   
  8004216b0d:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216b14:	ff 
  8004216b15:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216b19:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216b1c:	48 98                	cltq   
  8004216b1e:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216b25:	ff 
  8004216b26:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004216b2a:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  8004216b31:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216b35:	48 01 c8             	add    %rcx,%rax
  8004216b38:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004216b3f:	48 89 c7             	mov    %rax,%rdi
  8004216b42:	48 b8 96 6f 21 04 80 	movabs $0x8004216f96,%rax
  8004216b49:	00 00 00 
  8004216b4c:	ff d0                	callq  *%rax
  8004216b4e:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216b51:	48 98                	cltq   
  8004216b53:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216b5a:	ff 
  8004216b5b:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216b5f:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216b62:	48 98                	cltq   
  8004216b64:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216b6b:	ff 
  8004216b6c:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004216b70:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  8004216b74:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004216b78:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004216b7e:	48 29 c2             	sub    %rax,%rdx
  8004216b81:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216b85:	48 01 c2             	add    %rax,%rdx
  8004216b88:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216b8c:	48 01 c2             	add    %rax,%rdx
  8004216b8f:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216b96:	00 00 00 
  8004216b99:	48 89 50 08          	mov    %rdx,0x8(%rax)
  8004216b9d:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216ba4:	00 00 00 
  8004216ba7:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004216bab:	48 89 c2             	mov    %rax,%rdx
  8004216bae:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216bb5:	00 00 00 
  8004216bb8:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004216bbc:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216bbf:	48 98                	cltq   
  8004216bc1:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216bc8:	ff 
  8004216bc9:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216bcd:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216bd4:	00 00 00 
  8004216bd7:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004216bdb:	e9 96 03 00 00       	jmpq   8004216f76 <read_section_headers+0x71f>
  8004216be0:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004216be4:	48 be 57 0c 22 04 80 	movabs $0x8004220c57,%rsi
  8004216beb:	00 00 00 
  8004216bee:	48 89 c7             	mov    %rax,%rdi
  8004216bf1:	48 b8 00 0d 21 04 80 	movabs $0x8004210d00,%rax
  8004216bf8:	00 00 00 
  8004216bfb:	ff d0                	callq  *%rax
  8004216bfd:	85 c0                	test   %eax,%eax
  8004216bff:	0f 85 de 00 00 00    	jne    8004216ce3 <read_section_headers+0x48c>
  8004216c05:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216c08:	48 98                	cltq   
  8004216c0a:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216c11:	ff 
  8004216c12:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216c16:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216c19:	48 98                	cltq   
  8004216c1b:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216c22:	ff 
  8004216c23:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004216c27:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  8004216c2e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216c32:	48 01 c8             	add    %rcx,%rax
  8004216c35:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004216c3c:	48 89 c7             	mov    %rax,%rdi
  8004216c3f:	48 b8 96 6f 21 04 80 	movabs $0x8004216f96,%rax
  8004216c46:	00 00 00 
  8004216c49:	ff d0                	callq  *%rax
  8004216c4b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216c4e:	48 98                	cltq   
  8004216c50:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216c57:	ff 
  8004216c58:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216c5c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216c5f:	48 98                	cltq   
  8004216c61:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216c68:	ff 
  8004216c69:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004216c6d:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  8004216c74:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004216c7b:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004216c81:	48 29 c2             	sub    %rax,%rdx
  8004216c84:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216c88:	48 01 c2             	add    %rax,%rdx
  8004216c8b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216c8f:	48 01 c2             	add    %rax,%rdx
  8004216c92:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216c99:	00 00 00 
  8004216c9c:	48 89 50 28          	mov    %rdx,0x28(%rax)
  8004216ca0:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216ca7:	00 00 00 
  8004216caa:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004216cae:	48 89 c2             	mov    %rax,%rdx
  8004216cb1:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216cb8:	00 00 00 
  8004216cbb:	48 89 50 30          	mov    %rdx,0x30(%rax)
  8004216cbf:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216cc2:	48 98                	cltq   
  8004216cc4:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216ccb:	ff 
  8004216ccc:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216cd0:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216cd7:	00 00 00 
  8004216cda:	48 89 50 38          	mov    %rdx,0x38(%rax)
  8004216cde:	e9 93 02 00 00       	jmpq   8004216f76 <read_section_headers+0x71f>
  8004216ce3:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004216ce7:	48 be 6f 0c 22 04 80 	movabs $0x8004220c6f,%rsi
  8004216cee:	00 00 00 
  8004216cf1:	48 89 c7             	mov    %rax,%rdi
  8004216cf4:	48 b8 00 0d 21 04 80 	movabs $0x8004210d00,%rax
  8004216cfb:	00 00 00 
  8004216cfe:	ff d0                	callq  *%rax
  8004216d00:	85 c0                	test   %eax,%eax
  8004216d02:	0f 85 de 00 00 00    	jne    8004216de6 <read_section_headers+0x58f>
  8004216d08:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216d0b:	48 98                	cltq   
  8004216d0d:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216d14:	ff 
  8004216d15:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216d19:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216d1c:	48 98                	cltq   
  8004216d1e:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216d25:	ff 
  8004216d26:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004216d2a:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  8004216d31:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216d35:	48 01 c8             	add    %rcx,%rax
  8004216d38:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004216d3f:	48 89 c7             	mov    %rax,%rdi
  8004216d42:	48 b8 96 6f 21 04 80 	movabs $0x8004216f96,%rax
  8004216d49:	00 00 00 
  8004216d4c:	ff d0                	callq  *%rax
  8004216d4e:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216d51:	48 98                	cltq   
  8004216d53:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216d5a:	ff 
  8004216d5b:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216d5f:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216d62:	48 98                	cltq   
  8004216d64:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216d6b:	ff 
  8004216d6c:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004216d70:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  8004216d77:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004216d7e:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004216d84:	48 29 c2             	sub    %rax,%rdx
  8004216d87:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216d8b:	48 01 c2             	add    %rax,%rdx
  8004216d8e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216d92:	48 01 c2             	add    %rax,%rdx
  8004216d95:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216d9c:	00 00 00 
  8004216d9f:	48 89 50 68          	mov    %rdx,0x68(%rax)
  8004216da3:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216daa:	00 00 00 
  8004216dad:	48 8b 40 68          	mov    0x68(%rax),%rax
  8004216db1:	48 89 c2             	mov    %rax,%rdx
  8004216db4:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216dbb:	00 00 00 
  8004216dbe:	48 89 50 70          	mov    %rdx,0x70(%rax)
  8004216dc2:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216dc5:	48 98                	cltq   
  8004216dc7:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216dce:	ff 
  8004216dcf:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216dd3:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216dda:	00 00 00 
  8004216ddd:	48 89 50 78          	mov    %rdx,0x78(%rax)
  8004216de1:	e9 90 01 00 00       	jmpq   8004216f76 <read_section_headers+0x71f>
  8004216de6:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004216dea:	48 be 65 0c 22 04 80 	movabs $0x8004220c65,%rsi
  8004216df1:	00 00 00 
  8004216df4:	48 89 c7             	mov    %rax,%rdi
  8004216df7:	48 b8 00 0d 21 04 80 	movabs $0x8004210d00,%rax
  8004216dfe:	00 00 00 
  8004216e01:	ff d0                	callq  *%rax
  8004216e03:	85 c0                	test   %eax,%eax
  8004216e05:	75 65                	jne    8004216e6c <read_section_headers+0x615>
  8004216e07:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216e0a:	48 98                	cltq   
  8004216e0c:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216e13:	ff 
  8004216e14:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004216e18:	48 89 c2             	mov    %rax,%rdx
  8004216e1b:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216e22:	00 00 00 
  8004216e25:	48 89 50 48          	mov    %rdx,0x48(%rax)
  8004216e29:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216e30:	00 00 00 
  8004216e33:	48 8b 40 48          	mov    0x48(%rax),%rax
  8004216e37:	48 89 c2             	mov    %rax,%rdx
  8004216e3a:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216e41:	00 00 00 
  8004216e44:	48 89 50 50          	mov    %rdx,0x50(%rax)
  8004216e48:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216e4b:	48 98                	cltq   
  8004216e4d:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216e54:	ff 
  8004216e55:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216e59:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216e60:	00 00 00 
  8004216e63:	48 89 50 58          	mov    %rdx,0x58(%rax)
  8004216e67:	e9 0a 01 00 00       	jmpq   8004216f76 <read_section_headers+0x71f>
  8004216e6c:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004216e70:	48 be 7b 0c 22 04 80 	movabs $0x8004220c7b,%rsi
  8004216e77:	00 00 00 
  8004216e7a:	48 89 c7             	mov    %rax,%rdi
  8004216e7d:	48 b8 00 0d 21 04 80 	movabs $0x8004210d00,%rax
  8004216e84:	00 00 00 
  8004216e87:	ff d0                	callq  *%rax
  8004216e89:	85 c0                	test   %eax,%eax
  8004216e8b:	0f 85 e5 00 00 00    	jne    8004216f76 <read_section_headers+0x71f>
  8004216e91:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216e94:	48 98                	cltq   
  8004216e96:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216e9d:	ff 
  8004216e9e:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216ea2:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216ea5:	48 98                	cltq   
  8004216ea7:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216eae:	ff 
  8004216eaf:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004216eb3:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  8004216eba:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216ebe:	48 01 c8             	add    %rcx,%rax
  8004216ec1:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004216ec8:	48 89 c7             	mov    %rax,%rdi
  8004216ecb:	48 b8 96 6f 21 04 80 	movabs $0x8004216f96,%rax
  8004216ed2:	00 00 00 
  8004216ed5:	ff d0                	callq  *%rax
  8004216ed7:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216eda:	48 98                	cltq   
  8004216edc:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216ee3:	ff 
  8004216ee4:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216ee8:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216eeb:	48 98                	cltq   
  8004216eed:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216ef4:	ff 
  8004216ef5:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004216ef9:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  8004216f00:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004216f07:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004216f0d:	48 29 c2             	sub    %rax,%rdx
  8004216f10:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216f14:	48 01 c2             	add    %rax,%rdx
  8004216f17:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216f1b:	48 01 c2             	add    %rax,%rdx
  8004216f1e:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216f25:	00 00 00 
  8004216f28:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
  8004216f2f:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216f36:	00 00 00 
  8004216f39:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  8004216f40:	48 89 c2             	mov    %rax,%rdx
  8004216f43:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216f4a:	00 00 00 
  8004216f4d:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
  8004216f54:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216f57:	48 98                	cltq   
  8004216f59:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216f60:	ff 
  8004216f61:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216f65:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216f6c:	00 00 00 
  8004216f6f:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  8004216f76:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004216f7a:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216f7d:	3b 45 c4             	cmp    -0x3c(%rbp),%eax
  8004216f80:	0f 8c f0 fa ff ff    	jl     8004216a76 <read_section_headers+0x21f>
  8004216f86:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004216f8a:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  8004216f91:	48 01 d0             	add    %rdx,%rax
  8004216f94:	c9                   	leaveq 
  8004216f95:	c3                   	retq   

0000008004216f96 <readseg>:
  8004216f96:	55                   	push   %rbp
  8004216f97:	48 89 e5             	mov    %rsp,%rbp
  8004216f9a:	48 83 ec 30          	sub    $0x30,%rsp
  8004216f9e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004216fa2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004216fa6:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004216faa:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  8004216fae:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216fb2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004216fb6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216fba:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004216fbe:	48 01 d0             	add    %rdx,%rax
  8004216fc1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004216fc5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216fc9:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004216fce:	48 85 c0             	test   %rax,%rax
  8004216fd1:	74 35                	je     8004217008 <readseg+0x72>
  8004216fd3:	48 b9 c5 0c 22 04 80 	movabs $0x8004220cc5,%rcx
  8004216fda:	00 00 00 
  8004216fdd:	48 ba 9f 0c 22 04 80 	movabs $0x8004220c9f,%rdx
  8004216fe4:	00 00 00 
  8004216fe7:	be c4 00 00 00       	mov    $0xc4,%esi
  8004216fec:	48 bf b4 0c 22 04 80 	movabs $0x8004220cb4,%rdi
  8004216ff3:	00 00 00 
  8004216ff6:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216ffb:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004217002:	00 00 00 
  8004217005:	41 ff d0             	callq  *%r8
  8004217008:	48 81 65 e8 00 fe ff 	andq   $0xfffffffffffffe00,-0x18(%rbp)
  800421700f:	ff 
  8004217010:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217014:	48 c1 e8 09          	shr    $0x9,%rax
  8004217018:	48 83 c0 01          	add    $0x1,%rax
  800421701c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004217020:	eb 3c                	jmp    800421705e <readseg+0xc8>
  8004217022:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217026:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  800421702a:	48 89 d6             	mov    %rdx,%rsi
  800421702d:	48 89 c7             	mov    %rax,%rdi
  8004217030:	48 b8 26 71 21 04 80 	movabs $0x8004217126,%rax
  8004217037:	00 00 00 
  800421703a:	ff d0                	callq  *%rax
  800421703c:	48 81 45 e8 00 02 00 	addq   $0x200,-0x18(%rbp)
  8004217043:	00 
  8004217044:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217048:	48 8b 00             	mov    (%rax),%rax
  800421704b:	48 8d 90 00 02 00 00 	lea    0x200(%rax),%rdx
  8004217052:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217056:	48 89 10             	mov    %rdx,(%rax)
  8004217059:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  800421705e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217062:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  8004217066:	72 ba                	jb     8004217022 <readseg+0x8c>
  8004217068:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421706c:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004217071:	48 89 c2             	mov    %rax,%rdx
  8004217074:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217078:	48 01 d0             	add    %rdx,%rax
  800421707b:	48 3d 00 02 00 00    	cmp    $0x200,%rax
  8004217081:	76 2f                	jbe    80042170b2 <readseg+0x11c>
  8004217083:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217087:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  800421708b:	48 89 d6             	mov    %rdx,%rsi
  800421708e:	48 89 c7             	mov    %rax,%rdi
  8004217091:	48 b8 26 71 21 04 80 	movabs $0x8004217126,%rax
  8004217098:	00 00 00 
  800421709b:	ff d0                	callq  *%rax
  800421709d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042170a1:	48 8b 00             	mov    (%rax),%rax
  80042170a4:	48 8d 90 00 02 00 00 	lea    0x200(%rax),%rdx
  80042170ab:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042170af:	48 89 10             	mov    %rdx,(%rax)
  80042170b2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042170b6:	48 8b 00             	mov    (%rax),%rax
  80042170b9:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042170be:	48 85 c0             	test   %rax,%rax
  80042170c1:	74 35                	je     80042170f8 <readseg+0x162>
  80042170c3:	48 b9 d8 0c 22 04 80 	movabs $0x8004220cd8,%rcx
  80042170ca:	00 00 00 
  80042170cd:	48 ba 9f 0c 22 04 80 	movabs $0x8004220c9f,%rdx
  80042170d4:	00 00 00 
  80042170d7:	be da 00 00 00       	mov    $0xda,%esi
  80042170dc:	48 bf b4 0c 22 04 80 	movabs $0x8004220cb4,%rdi
  80042170e3:	00 00 00 
  80042170e6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042170eb:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042170f2:	00 00 00 
  80042170f5:	41 ff d0             	callq  *%r8
  80042170f8:	c9                   	leaveq 
  80042170f9:	c3                   	retq   

00000080042170fa <waitdisk>:
  80042170fa:	55                   	push   %rbp
  80042170fb:	48 89 e5             	mov    %rsp,%rbp
  80042170fe:	48 83 ec 10          	sub    $0x10,%rsp
  8004217102:	90                   	nop
  8004217103:	c7 45 fc f7 01 00 00 	movl   $0x1f7,-0x4(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  800421710a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421710d:	89 c2                	mov    %eax,%edx
  800421710f:	ec                   	in     (%dx),%al
  8004217110:	88 45 fb             	mov    %al,-0x5(%rbp)
	return data;
  8004217113:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004217117:	0f b6 c0             	movzbl %al,%eax
  800421711a:	25 c0 00 00 00       	and    $0xc0,%eax
  800421711f:	83 f8 40             	cmp    $0x40,%eax
  8004217122:	75 df                	jne    8004217103 <waitdisk+0x9>
  8004217124:	c9                   	leaveq 
  8004217125:	c3                   	retq   

0000008004217126 <readsect>:
  8004217126:	55                   	push   %rbp
  8004217127:	48 89 e5             	mov    %rsp,%rbp
  800421712a:	48 83 ec 60          	sub    $0x60,%rsp
  800421712e:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  8004217132:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  8004217136:	48 b8 fa 70 21 04 80 	movabs $0x80042170fa,%rax
  800421713d:	00 00 00 
  8004217140:	ff d0                	callq  *%rax
  8004217142:	c7 45 fc f2 01 00 00 	movl   $0x1f2,-0x4(%rbp)
  8004217149:	c6 45 fb 01          	movb   $0x1,-0x5(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  800421714d:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004217151:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217154:	ee                   	out    %al,(%dx)
  8004217155:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004217159:	0f b6 c0             	movzbl %al,%eax
  800421715c:	c7 45 f4 f3 01 00 00 	movl   $0x1f3,-0xc(%rbp)
  8004217163:	88 45 f3             	mov    %al,-0xd(%rbp)
  8004217166:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  800421716a:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421716d:	ee                   	out    %al,(%dx)
  800421716e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004217172:	48 c1 e8 08          	shr    $0x8,%rax
  8004217176:	0f b6 c0             	movzbl %al,%eax
  8004217179:	c7 45 ec f4 01 00 00 	movl   $0x1f4,-0x14(%rbp)
  8004217180:	88 45 eb             	mov    %al,-0x15(%rbp)
  8004217183:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  8004217187:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421718a:	ee                   	out    %al,(%dx)
  800421718b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421718f:	48 c1 e8 10          	shr    $0x10,%rax
  8004217193:	0f b6 c0             	movzbl %al,%eax
  8004217196:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%rbp)
  800421719d:	88 45 e3             	mov    %al,-0x1d(%rbp)
  80042171a0:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  80042171a4:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  80042171a7:	ee                   	out    %al,(%dx)
  80042171a8:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042171ac:	48 c1 e8 18          	shr    $0x18,%rax
  80042171b0:	83 c8 e0             	or     $0xffffffe0,%eax
  80042171b3:	0f b6 c0             	movzbl %al,%eax
  80042171b6:	c7 45 dc f6 01 00 00 	movl   $0x1f6,-0x24(%rbp)
  80042171bd:	88 45 db             	mov    %al,-0x25(%rbp)
  80042171c0:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  80042171c4:	8b 55 dc             	mov    -0x24(%rbp),%edx
  80042171c7:	ee                   	out    %al,(%dx)
  80042171c8:	c7 45 d4 f7 01 00 00 	movl   $0x1f7,-0x2c(%rbp)
  80042171cf:	c6 45 d3 20          	movb   $0x20,-0x2d(%rbp)
  80042171d3:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  80042171d7:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  80042171da:	ee                   	out    %al,(%dx)
  80042171db:	48 b8 fa 70 21 04 80 	movabs $0x80042170fa,%rax
  80042171e2:	00 00 00 
  80042171e5:	ff d0                	callq  *%rax
  80042171e7:	c7 45 cc f0 01 00 00 	movl   $0x1f0,-0x34(%rbp)
  80042171ee:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042171f2:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  80042171f6:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%rbp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
  80042171fd:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004217200:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  8004217204:	8b 45 bc             	mov    -0x44(%rbp),%eax
  8004217207:	48 89 ce             	mov    %rcx,%rsi
  800421720a:	48 89 f7             	mov    %rsi,%rdi
  800421720d:	89 c1                	mov    %eax,%ecx
  800421720f:	fc                   	cld    
  8004217210:	f2 6d                	repnz insl (%dx),%es:(%rdi)
  8004217212:	89 c8                	mov    %ecx,%eax
  8004217214:	48 89 fe             	mov    %rdi,%rsi
  8004217217:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  800421721b:	89 45 bc             	mov    %eax,-0x44(%rbp)
  800421721e:	c9                   	leaveq 
  800421721f:	c3                   	retq   

0000008004217220 <mpentry_start>:
.set pml4, pml4phys

.code16           
.globl mpentry_start
mpentry_start:
	cli
  8004217220:	fa                   	cli    
	xorw    %ax, %ax
  8004217221:	31 c0                	xor    %eax,%eax
	movw    %ax, %ds
  8004217223:	8e d8                	mov    %eax,%ds
	movw    %ax, %es
  8004217225:	8e c0                	mov    %eax,%es
	movw    %ax, %ss
  8004217227:	8e d0                	mov    %eax,%ss
	
	
	lgdt    MPBOOTPHYS(gdt32desc)   // load 32 bit global descritor table
  8004217229:	0f 01 16             	lgdt   (%rsi)
  800421722c:	e0 70                	loopne 800421729e <start64+0x10>
	movl    %cr0, %eax
  800421722e:	0f 20 c0             	mov    %cr0,%rax
	orl     $CR0_PE, %eax
  8004217231:	66 83 c8 01          	or     $0x1,%ax
	movl    %eax, %cr0
  8004217235:	0f 22 c0             	mov    %rax,%cr0
	ljmp	$(PROT_MODE_CSEG),$(MPBOOTPHYS(start32))
  8004217238:	ea                   	(bad)  
  8004217239:	1d 70 08 00 66       	sbb    $0x66000870,%eax

000000800421723d <start32>:

.code32
start32:
	
	movw    $(PROT_MODE_DSEG), %ax
  800421723d:	66 b8 10 00          	mov    $0x10,%ax
	movw    %ax, %ds
  8004217241:	8e d8                	mov    %eax,%ds
	movw    %ax, %es
  8004217243:	8e c0                	mov    %eax,%es
	movw    %ax, %ss
  8004217245:	8e d0                	mov    %eax,%ss
	movw    $0, %ax
  8004217247:	66 b8 00 00          	mov    $0x0,%ax
	movw    %ax, %fs
  800421724b:	8e e0                	mov    %eax,%fs
	movw    %ax, %gs
  800421724d:	8e e8                	mov    %eax,%gs

#ifndef VMM_GUEST
	movl $CR4_PAE,%eax
  800421724f:	b8 20 00 00 00       	mov    $0x20,%eax
#else
	movl $(CR4_PAE|CR4_VMXE),%eax
#endif

	movl %eax,%cr4
  8004217254:	0f 22 e0             	mov    %rax,%cr4
	
	lgdt    MPBOOTPHYS(gdtdesc)
  8004217257:	0f 01 15 c0 70 00 00 	lgdt   0x70c0(%rip)        # 800421e31e <handle_vmcall+0xd8>
	movl    %cr0, %eax
  800421725e:	0f 20 c0             	mov    %cr0,%rax
	orl     $CR0_PE, %eax
  8004217261:	83 c8 01             	or     $0x1,%eax
	movl    %eax, %cr0
  8004217264:	0f 22 c0             	mov    %rax,%cr0
	
	# Set up initial page table. We cannot use kern_pgdir yet because
	# we are still running at a low EIP.
	movl    $pml4, %eax
  8004217267:	b8 00 20 10 00       	mov    $0x102000,%eax
	movl    %eax, %cr3
  800421726c:	0f 22 d8             	mov    %rax,%cr3
	
	# enable the long mode in MSR
	movl $EFER_MSR,%ecx
  800421726f:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
	rdmsr
  8004217274:	0f 32                	rdmsr  
	btsl $EFER_LME,%eax
  8004217276:	0f ba e8 08          	bts    $0x8,%eax
	wrmsr
  800421727a:	0f 30                	wrmsr  
	
	# Turn on paging.
	movl    %cr0, %eax
  800421727c:	0f 20 c0             	mov    %cr0,%rax
	orl     $(CR0_PE|CR0_PG|CR0_WP), %eax
  800421727f:	0d 01 00 01 80       	or     $0x80010001,%eax
	movl    %eax, %cr0
  8004217284:	0f 22 c0             	mov    %rax,%cr0
	

	ljmpl   $(LONG_MODE_CSEG), $(MPBOOTPHYS(start64))
  8004217287:	ea                   	(bad)  
  8004217288:	6e                   	outsb  %ds:(%rsi),(%dx)
  8004217289:	70 00                	jo     800421728b <start32+0x4e>
  800421728b:	00 08                	add    %cl,(%rax)
	...

000000800421728e <start64>:

.code64
start64:
	movw    $(LONG_MODE_DSEG), %ax
  800421728e:	66 b8 10 00          	mov    $0x10,%ax
	movw    %ax, %ds
  8004217292:	8e d8                	mov    %eax,%ds
	movw    %ax, %es
  8004217294:	8e c0                	mov    %eax,%es
	movw    %ax, %ss
  8004217296:	8e d0                	mov    %eax,%ss
	movw    $0, %ax
  8004217298:	66 b8 00 00          	mov    $0x0,%ax
	movw    %ax, %fs
  800421729c:	8e e0                	mov    %eax,%fs
	movw    %ax, %gs
  800421729e:	8e e8                	mov    %eax,%gs

	# Switch to the per-cpu stack allocated in boot_aps()
	movabs    mpentry_kstack, %rax
  80042172a0:	48 a1 e0 e5 6d 04 80 	movabs 0x80046de5e0,%rax
  80042172a7:	00 00 00 
	movq    %rax,%rsp
  80042172aa:	48 89 c4             	mov    %rax,%rsp
	movq    $0x0, %rbp       # nuke frame pointer
  80042172ad:	48 c7 c5 00 00 00 00 	mov    $0x0,%rbp

	# Call mp_main().  (Exercise for the reader: why the indirect call?)
	movabs    $mp_main, %rax
  80042172b4:	48 b8 0f 04 20 04 80 	movabs $0x800420040f,%rax
  80042172bb:	00 00 00 
	call    *%rax
  80042172be:	ff d0                	callq  *%rax

00000080042172c0 <spin>:

	# If mp_main returns (it shouldn't), loop.
spin:
	jmp     spin
  80042172c0:	eb fe                	jmp    80042172c0 <spin>
  80042172c2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000080042172c8 <gdt>:
	...
  80042172d0:	ff                   	(bad)  
  80042172d1:	ff 00                	incl   (%rax)
  80042172d3:	00 00                	add    %al,(%rax)
  80042172d5:	9a                   	(bad)  
  80042172d6:	af                   	scas   %es:(%rdi),%eax
  80042172d7:	00 ff                	add    %bh,%bh
  80042172d9:	ff 00                	incl   (%rax)
  80042172db:	00 00                	add    %al,(%rax)
  80042172dd:	92                   	xchg   %eax,%edx
  80042172de:	af                   	scas   %es:(%rdi),%eax
	...

00000080042172e0 <gdtdesc>:
  80042172e0:	17                   	(bad)  
  80042172e1:	00 a8 70 00 00 66    	add    %ch,0x66000070(%rax)
  80042172e7:	90                   	nop

00000080042172e8 <gdt32>:
	...
  80042172f0:	ff                   	(bad)  
  80042172f1:	ff 00                	incl   (%rax)
  80042172f3:	00 00                	add    %al,(%rax)
  80042172f5:	9a                   	(bad)  
  80042172f6:	cf                   	iret   
  80042172f7:	00 ff                	add    %bh,%bh
  80042172f9:	ff 00                	incl   (%rax)
  80042172fb:	00 00                	add    %al,(%rax)
  80042172fd:	92                   	xchg   %eax,%edx
  80042172fe:	cf                   	iret   
	...

0000008004217300 <gdt32desc>:
  8004217300:	17                   	(bad)  
  8004217301:	00 c8                	add    %cl,%al
  8004217303:	70 00                	jo     8004217305 <gdt32desc+0x5>
	...

0000008004217306 <mpentry_end>:
	.long   MPBOOTPHYS(gdt32)			# address gdt


.globl mpentry_end
mpentry_end:
	nop
  8004217306:	90                   	nop

0000008004217307 <sum>:
  8004217307:	55                   	push   %rbp
  8004217308:	48 89 e5             	mov    %rsp,%rbp
  800421730b:	48 83 ec 1c          	sub    $0x1c,%rsp
  800421730f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004217313:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004217316:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  800421731d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004217324:	eb 1a                	jmp    8004217340 <sum+0x39>
  8004217326:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217329:	48 63 d0             	movslq %eax,%rdx
  800421732c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217330:	48 01 d0             	add    %rdx,%rax
  8004217333:	0f b6 00             	movzbl (%rax),%eax
  8004217336:	0f b6 c0             	movzbl %al,%eax
  8004217339:	01 45 f8             	add    %eax,-0x8(%rbp)
  800421733c:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004217340:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217343:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
  8004217346:	7c de                	jl     8004217326 <sum+0x1f>
  8004217348:	8b 45 f8             	mov    -0x8(%rbp),%eax
  800421734b:	c9                   	leaveq 
  800421734c:	c3                   	retq   

000000800421734d <mpsearch1>:
  800421734d:	55                   	push   %rbp
  800421734e:	48 89 e5             	mov    %rsp,%rbp
  8004217351:	48 83 ec 40          	sub    $0x40,%rsp
  8004217355:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004217359:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  800421735c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004217360:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004217364:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217368:	48 c1 e8 0c          	shr    $0xc,%rax
  800421736c:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800421736f:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004217372:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  8004217379:	00 00 00 
  800421737c:	48 8b 00             	mov    (%rax),%rax
  800421737f:	48 39 c2             	cmp    %rax,%rdx
  8004217382:	72 32                	jb     80042173b6 <mpsearch1+0x69>
  8004217384:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217388:	48 89 c1             	mov    %rax,%rcx
  800421738b:	48 ba f8 0c 22 04 80 	movabs $0x8004220cf8,%rdx
  8004217392:	00 00 00 
  8004217395:	be 74 00 00 00       	mov    $0x74,%esi
  800421739a:	48 bf 1b 0d 22 04 80 	movabs $0x8004220d1b,%rdi
  80042173a1:	00 00 00 
  80042173a4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042173a9:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042173b0:	00 00 00 
  80042173b3:	41 ff d0             	callq  *%r8
  80042173b6:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042173bd:	00 00 00 
  80042173c0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042173c4:	48 01 d0             	add    %rdx,%rax
  80042173c7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042173cb:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  80042173ce:	48 63 d0             	movslq %eax,%rdx
  80042173d1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042173d5:	48 01 d0             	add    %rdx,%rax
  80042173d8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042173dc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042173e0:	48 c1 e8 0c          	shr    $0xc,%rax
  80042173e4:	89 45 dc             	mov    %eax,-0x24(%rbp)
  80042173e7:	8b 55 dc             	mov    -0x24(%rbp),%edx
  80042173ea:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  80042173f1:	00 00 00 
  80042173f4:	48 8b 00             	mov    (%rax),%rax
  80042173f7:	48 39 c2             	cmp    %rax,%rdx
  80042173fa:	72 32                	jb     800421742e <mpsearch1+0xe1>
  80042173fc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217400:	48 89 c1             	mov    %rax,%rcx
  8004217403:	48 ba f8 0c 22 04 80 	movabs $0x8004220cf8,%rdx
  800421740a:	00 00 00 
  800421740d:	be 74 00 00 00       	mov    $0x74,%esi
  8004217412:	48 bf 1b 0d 22 04 80 	movabs $0x8004220d1b,%rdi
  8004217419:	00 00 00 
  800421741c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217421:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004217428:	00 00 00 
  800421742b:	41 ff d0             	callq  *%r8
  800421742e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004217435:	00 00 00 
  8004217438:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421743c:	48 01 d0             	add    %rdx,%rax
  800421743f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004217443:	eb 4d                	jmp    8004217492 <mpsearch1+0x145>
  8004217445:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217449:	ba 04 00 00 00       	mov    $0x4,%edx
  800421744e:	48 be 2e 0d 22 04 80 	movabs $0x8004220d2e,%rsi
  8004217455:	00 00 00 
  8004217458:	48 89 c7             	mov    %rax,%rdi
  800421745b:	48 b8 0d 10 21 04 80 	movabs $0x800421100d,%rax
  8004217462:	00 00 00 
  8004217465:	ff d0                	callq  *%rax
  8004217467:	85 c0                	test   %eax,%eax
  8004217469:	75 22                	jne    800421748d <mpsearch1+0x140>
  800421746b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421746f:	be 10 00 00 00       	mov    $0x10,%esi
  8004217474:	48 89 c7             	mov    %rax,%rdi
  8004217477:	48 b8 07 73 21 04 80 	movabs $0x8004217307,%rax
  800421747e:	00 00 00 
  8004217481:	ff d0                	callq  *%rax
  8004217483:	84 c0                	test   %al,%al
  8004217485:	75 06                	jne    800421748d <mpsearch1+0x140>
  8004217487:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421748b:	eb 14                	jmp    80042174a1 <mpsearch1+0x154>
  800421748d:	48 83 45 f8 10       	addq   $0x10,-0x8(%rbp)
  8004217492:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217496:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  800421749a:	72 a9                	jb     8004217445 <mpsearch1+0xf8>
  800421749c:	b8 00 00 00 00       	mov    $0x0,%eax
  80042174a1:	c9                   	leaveq 
  80042174a2:	c3                   	retq   

00000080042174a3 <mpsearch>:
  80042174a3:	55                   	push   %rbp
  80042174a4:	48 89 e5             	mov    %rsp,%rbp
  80042174a7:	48 83 ec 30          	sub    $0x30,%rsp
  80042174ab:	48 c7 45 f8 00 04 00 	movq   $0x400,-0x8(%rbp)
  80042174b2:	00 
  80042174b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042174b7:	48 c1 e8 0c          	shr    $0xc,%rax
  80042174bb:	89 45 f4             	mov    %eax,-0xc(%rbp)
  80042174be:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042174c1:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  80042174c8:	00 00 00 
  80042174cb:	48 8b 00             	mov    (%rax),%rax
  80042174ce:	48 39 c2             	cmp    %rax,%rdx
  80042174d1:	72 32                	jb     8004217505 <mpsearch+0x62>
  80042174d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042174d7:	48 89 c1             	mov    %rax,%rcx
  80042174da:	48 ba f8 0c 22 04 80 	movabs $0x8004220cf8,%rdx
  80042174e1:	00 00 00 
  80042174e4:	be 8c 00 00 00       	mov    $0x8c,%esi
  80042174e9:	48 bf 1b 0d 22 04 80 	movabs $0x8004220d1b,%rdi
  80042174f0:	00 00 00 
  80042174f3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042174f8:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042174ff:	00 00 00 
  8004217502:	41 ff d0             	callq  *%r8
  8004217505:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800421750c:	00 00 00 
  800421750f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217513:	48 01 d0             	add    %rdx,%rax
  8004217516:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421751a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421751e:	48 83 c0 0e          	add    $0xe,%rax
  8004217522:	0f b7 00             	movzwl (%rax),%eax
  8004217525:	0f b7 c0             	movzwl %ax,%eax
  8004217528:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  800421752b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800421752f:	74 2c                	je     800421755d <mpsearch+0xba>
  8004217531:	c1 65 e4 04          	shll   $0x4,-0x1c(%rbp)
  8004217535:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004217538:	be 00 04 00 00       	mov    $0x400,%esi
  800421753d:	48 89 c7             	mov    %rax,%rdi
  8004217540:	48 b8 4d 73 21 04 80 	movabs $0x800421734d,%rax
  8004217547:	00 00 00 
  800421754a:	ff d0                	callq  *%rax
  800421754c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004217550:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004217555:	74 49                	je     80042175a0 <mpsearch+0xfd>
  8004217557:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421755b:	eb 59                	jmp    80042175b6 <mpsearch+0x113>
  800421755d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217561:	48 83 c0 13          	add    $0x13,%rax
  8004217565:	0f b7 00             	movzwl (%rax),%eax
  8004217568:	0f b7 c0             	movzwl %ax,%eax
  800421756b:	c1 e0 0a             	shl    $0xa,%eax
  800421756e:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004217571:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004217574:	2d 00 04 00 00       	sub    $0x400,%eax
  8004217579:	89 c0                	mov    %eax,%eax
  800421757b:	be 00 04 00 00       	mov    $0x400,%esi
  8004217580:	48 89 c7             	mov    %rax,%rdi
  8004217583:	48 b8 4d 73 21 04 80 	movabs $0x800421734d,%rax
  800421758a:	00 00 00 
  800421758d:	ff d0                	callq  *%rax
  800421758f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004217593:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004217598:	74 06                	je     80042175a0 <mpsearch+0xfd>
  800421759a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421759e:	eb 16                	jmp    80042175b6 <mpsearch+0x113>
  80042175a0:	be 00 00 01 00       	mov    $0x10000,%esi
  80042175a5:	bf 00 00 0f 00       	mov    $0xf0000,%edi
  80042175aa:	48 b8 4d 73 21 04 80 	movabs $0x800421734d,%rax
  80042175b1:	00 00 00 
  80042175b4:	ff d0                	callq  *%rax
  80042175b6:	c9                   	leaveq 
  80042175b7:	c3                   	retq   

00000080042175b8 <mpconfig>:
  80042175b8:	55                   	push   %rbp
  80042175b9:	48 89 e5             	mov    %rsp,%rbp
  80042175bc:	48 83 ec 30          	sub    $0x30,%rsp
  80042175c0:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042175c4:	48 b8 a3 74 21 04 80 	movabs $0x80042174a3,%rax
  80042175cb:	00 00 00 
  80042175ce:	ff d0                	callq  *%rax
  80042175d0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042175d4:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042175d9:	75 0a                	jne    80042175e5 <mpconfig+0x2d>
  80042175db:	b8 00 00 00 00       	mov    $0x0,%eax
  80042175e0:	e9 f6 01 00 00       	jmpq   80042177db <mpconfig+0x223>
  80042175e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042175e9:	8b 40 04             	mov    0x4(%rax),%eax
  80042175ec:	85 c0                	test   %eax,%eax
  80042175ee:	74 0c                	je     80042175fc <mpconfig+0x44>
  80042175f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042175f4:	0f b6 40 0b          	movzbl 0xb(%rax),%eax
  80042175f8:	84 c0                	test   %al,%al
  80042175fa:	74 25                	je     8004217621 <mpconfig+0x69>
  80042175fc:	48 bf 38 0d 22 04 80 	movabs $0x8004220d38,%rdi
  8004217603:	00 00 00 
  8004217606:	b8 00 00 00 00       	mov    $0x0,%eax
  800421760b:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004217612:	00 00 00 
  8004217615:	ff d2                	callq  *%rdx
  8004217617:	b8 00 00 00 00       	mov    $0x0,%eax
  800421761c:	e9 ba 01 00 00       	jmpq   80042177db <mpconfig+0x223>
  8004217621:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217625:	8b 40 04             	mov    0x4(%rax),%eax
  8004217628:	89 c0                	mov    %eax,%eax
  800421762a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421762e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217632:	48 c1 e8 0c          	shr    $0xc,%rax
  8004217636:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004217639:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421763c:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  8004217643:	00 00 00 
  8004217646:	48 8b 00             	mov    (%rax),%rax
  8004217649:	48 39 c2             	cmp    %rax,%rdx
  800421764c:	72 32                	jb     8004217680 <mpconfig+0xc8>
  800421764e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217652:	48 89 c1             	mov    %rax,%rcx
  8004217655:	48 ba f8 0c 22 04 80 	movabs $0x8004220cf8,%rdx
  800421765c:	00 00 00 
  800421765f:	be ad 00 00 00       	mov    $0xad,%esi
  8004217664:	48 bf 1b 0d 22 04 80 	movabs $0x8004220d1b,%rdi
  800421766b:	00 00 00 
  800421766e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217673:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421767a:	00 00 00 
  800421767d:	41 ff d0             	callq  *%r8
  8004217680:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004217687:	00 00 00 
  800421768a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421768e:	48 01 d0             	add    %rdx,%rax
  8004217691:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004217695:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217699:	ba 04 00 00 00       	mov    $0x4,%edx
  800421769e:	48 be 65 0d 22 04 80 	movabs $0x8004220d65,%rsi
  80042176a5:	00 00 00 
  80042176a8:	48 89 c7             	mov    %rax,%rdi
  80042176ab:	48 b8 0d 10 21 04 80 	movabs $0x800421100d,%rax
  80042176b2:	00 00 00 
  80042176b5:	ff d0                	callq  *%rax
  80042176b7:	85 c0                	test   %eax,%eax
  80042176b9:	74 25                	je     80042176e0 <mpconfig+0x128>
  80042176bb:	48 bf 70 0d 22 04 80 	movabs $0x8004220d70,%rdi
  80042176c2:	00 00 00 
  80042176c5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042176ca:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  80042176d1:	00 00 00 
  80042176d4:	ff d2                	callq  *%rdx
  80042176d6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042176db:	e9 fb 00 00 00       	jmpq   80042177db <mpconfig+0x223>
  80042176e0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042176e4:	0f b7 40 04          	movzwl 0x4(%rax),%eax
  80042176e8:	0f b7 d0             	movzwl %ax,%edx
  80042176eb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042176ef:	89 d6                	mov    %edx,%esi
  80042176f1:	48 89 c7             	mov    %rax,%rdi
  80042176f4:	48 b8 07 73 21 04 80 	movabs $0x8004217307,%rax
  80042176fb:	00 00 00 
  80042176fe:	ff d0                	callq  *%rax
  8004217700:	84 c0                	test   %al,%al
  8004217702:	74 25                	je     8004217729 <mpconfig+0x171>
  8004217704:	48 bf a8 0d 22 04 80 	movabs $0x8004220da8,%rdi
  800421770b:	00 00 00 
  800421770e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217713:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421771a:	00 00 00 
  800421771d:	ff d2                	callq  *%rdx
  800421771f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217724:	e9 b2 00 00 00       	jmpq   80042177db <mpconfig+0x223>
  8004217729:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421772d:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  8004217731:	3c 01                	cmp    $0x1,%al
  8004217733:	74 3b                	je     8004217770 <mpconfig+0x1b8>
  8004217735:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217739:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  800421773d:	3c 04                	cmp    $0x4,%al
  800421773f:	74 2f                	je     8004217770 <mpconfig+0x1b8>
  8004217741:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217745:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  8004217749:	0f b6 c0             	movzbl %al,%eax
  800421774c:	89 c6                	mov    %eax,%esi
  800421774e:	48 bf d0 0d 22 04 80 	movabs $0x8004220dd0,%rdi
  8004217755:	00 00 00 
  8004217758:	b8 00 00 00 00       	mov    $0x0,%eax
  800421775d:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004217764:	00 00 00 
  8004217767:	ff d2                	callq  *%rdx
  8004217769:	b8 00 00 00 00       	mov    $0x0,%eax
  800421776e:	eb 6b                	jmp    80042177db <mpconfig+0x223>
  8004217770:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217774:	0f b7 40 28          	movzwl 0x28(%rax),%eax
  8004217778:	0f b7 c0             	movzwl %ax,%eax
  800421777b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800421777f:	0f b7 52 04          	movzwl 0x4(%rdx),%edx
  8004217783:	0f b7 ca             	movzwl %dx,%ecx
  8004217786:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800421778a:	48 01 ca             	add    %rcx,%rdx
  800421778d:	89 c6                	mov    %eax,%esi
  800421778f:	48 89 d7             	mov    %rdx,%rdi
  8004217792:	48 b8 07 73 21 04 80 	movabs $0x8004217307,%rax
  8004217799:	00 00 00 
  800421779c:	ff d0                	callq  *%rax
  800421779e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042177a2:	0f b6 52 2a          	movzbl 0x2a(%rdx),%edx
  80042177a6:	38 d0                	cmp    %dl,%al
  80042177a8:	74 22                	je     80042177cc <mpconfig+0x214>
  80042177aa:	48 bf f0 0d 22 04 80 	movabs $0x8004220df0,%rdi
  80042177b1:	00 00 00 
  80042177b4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042177b9:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  80042177c0:	00 00 00 
  80042177c3:	ff d2                	callq  *%rdx
  80042177c5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042177ca:	eb 0f                	jmp    80042177db <mpconfig+0x223>
  80042177cc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042177d0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042177d4:	48 89 10             	mov    %rdx,(%rax)
  80042177d7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042177db:	c9                   	leaveq 
  80042177dc:	c3                   	retq   

00000080042177dd <mp_init>:
  80042177dd:	55                   	push   %rbp
  80042177de:	48 89 e5             	mov    %rsp,%rbp
  80042177e1:	53                   	push   %rbx
  80042177e2:	48 83 ec 58          	sub    $0x58,%rsp
  80042177e6:	48 b8 40 02 6e 04 80 	movabs $0x80046e0240,%rax
  80042177ed:	00 00 00 
  80042177f0:	48 bb 20 00 6e 04 80 	movabs $0x80046e0020,%rbx
  80042177f7:	00 00 00 
  80042177fa:	48 89 18             	mov    %rbx,(%rax)
  80042177fd:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  8004217801:	48 89 c7             	mov    %rax,%rdi
  8004217804:	48 b8 b8 75 21 04 80 	movabs $0x80042175b8,%rax
  800421780b:	00 00 00 
  800421780e:	ff d0                	callq  *%rax
  8004217810:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004217814:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004217819:	75 05                	jne    8004217820 <mp_init+0x43>
  800421781b:	e9 d2 03 00 00       	jmpq   8004217bf2 <mp_init+0x415>
  8004217820:	48 b8 00 00 6e 04 80 	movabs $0x80046e0000,%rax
  8004217827:	00 00 00 
  800421782a:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
  8004217830:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217834:	8b 40 24             	mov    0x24(%rax),%eax
  8004217837:	89 c2                	mov    %eax,%edx
  8004217839:	48 b8 00 10 72 04 80 	movabs $0x8004721000,%rax
  8004217840:	00 00 00 
  8004217843:	48 89 10             	mov    %rdx,(%rax)
  8004217846:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421784a:	48 83 c0 2c          	add    $0x2c,%rax
  800421784e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004217852:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  8004217859:	e9 17 02 00 00       	jmpq   8004217a75 <mp_init+0x298>
  800421785e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217862:	0f b6 00             	movzbl (%rax),%eax
  8004217865:	0f b6 c0             	movzbl %al,%eax
  8004217868:	85 c0                	test   %eax,%eax
  800421786a:	74 16                	je     8004217882 <mp_init+0xa5>
  800421786c:	85 c0                	test   %eax,%eax
  800421786e:	0f 88 b8 01 00 00    	js     8004217a2c <mp_init+0x24f>
  8004217874:	83 f8 04             	cmp    $0x4,%eax
  8004217877:	0f 8f af 01 00 00    	jg     8004217a2c <mp_init+0x24f>
  800421787d:	e9 a3 01 00 00       	jmpq   8004217a25 <mp_init+0x248>
  8004217882:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217886:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421788a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421788e:	0f b6 40 03          	movzbl 0x3(%rax),%eax
  8004217892:	0f b6 c0             	movzbl %al,%eax
  8004217895:	83 e0 02             	and    $0x2,%eax
  8004217898:	85 c0                	test   %eax,%eax
  800421789a:	74 51                	je     80042178ed <mp_init+0x110>
  800421789c:	48 b8 48 02 6e 04 80 	movabs $0x80046e0248,%rax
  80042178a3:	00 00 00 
  80042178a6:	8b 00                	mov    (%rax),%eax
  80042178a8:	48 98                	cltq   
  80042178aa:	48 c1 e0 03          	shl    $0x3,%rax
  80042178ae:	48 89 c2             	mov    %rax,%rdx
  80042178b1:	48 c1 e2 04          	shl    $0x4,%rdx
  80042178b5:	48 01 d0             	add    %rdx,%rax
  80042178b8:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  80042178bf:	00 00 00 
  80042178c2:	48 01 c2             	add    %rax,%rdx
  80042178c5:	48 b8 40 02 6e 04 80 	movabs $0x80046e0240,%rax
  80042178cc:	00 00 00 
  80042178cf:	48 89 10             	mov    %rdx,(%rax)
  80042178d2:	48 bf 1d 0e 22 04 80 	movabs $0x8004220e1d,%rdi
  80042178d9:	00 00 00 
  80042178dc:	b8 00 00 00 00       	mov    $0x0,%eax
  80042178e1:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  80042178e8:	00 00 00 
  80042178eb:	ff d2                	callq  *%rdx
  80042178ed:	48 b8 48 02 6e 04 80 	movabs $0x80046e0248,%rax
  80042178f4:	00 00 00 
  80042178f7:	8b 00                	mov    (%rax),%eax
  80042178f9:	83 f8 03             	cmp    $0x3,%eax
  80042178fc:	0f 8f f4 00 00 00    	jg     80042179f6 <mp_init+0x219>
  8004217902:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217906:	4c 8d 40 0c          	lea    0xc(%rax),%r8
  800421790a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421790e:	0f b6 40 03          	movzbl 0x3(%rax),%eax
  8004217912:	0f b6 f0             	movzbl %al,%esi
  8004217915:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217919:	8b 78 08             	mov    0x8(%rax),%edi
  800421791c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217920:	4c 8d 50 04          	lea    0x4(%rax),%r10
  8004217924:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217928:	0f b6 40 02          	movzbl 0x2(%rax),%eax
  800421792c:	0f b6 c8             	movzbl %al,%ecx
  800421792f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217933:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  8004217937:	0f b6 d0             	movzbl %al,%edx
  800421793a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421793e:	0f b6 00             	movzbl (%rax),%eax
  8004217941:	0f b6 c0             	movzbl %al,%eax
  8004217944:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  8004217949:	89 34 24             	mov    %esi,(%rsp)
  800421794c:	41 89 f9             	mov    %edi,%r9d
  800421794f:	4d 89 d0             	mov    %r10,%r8
  8004217952:	89 c6                	mov    %eax,%esi
  8004217954:	48 bf 30 0e 22 04 80 	movabs $0x8004220e30,%rdi
  800421795b:	00 00 00 
  800421795e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217963:	49 ba 83 9c 20 04 80 	movabs $0x8004209c83,%r10
  800421796a:	00 00 00 
  800421796d:	41 ff d2             	callq  *%r10
  8004217970:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217974:	0f b6 40 03          	movzbl 0x3(%rax),%eax
  8004217978:	0f b6 c0             	movzbl %al,%eax
  800421797b:	83 e0 01             	and    $0x1,%eax
  800421797e:	85 c0                	test   %eax,%eax
  8004217980:	74 57                	je     80042179d9 <mp_init+0x1fc>
  8004217982:	48 b8 48 02 6e 04 80 	movabs $0x80046e0248,%rax
  8004217989:	00 00 00 
  800421798c:	8b 30                	mov    (%rax),%esi
  800421798e:	48 b8 48 02 6e 04 80 	movabs $0x80046e0248,%rax
  8004217995:	00 00 00 
  8004217998:	8b 00                	mov    (%rax),%eax
  800421799a:	89 c2                	mov    %eax,%edx
  800421799c:	48 b9 20 00 6e 04 80 	movabs $0x80046e0020,%rcx
  80042179a3:	00 00 00 
  80042179a6:	48 63 c6             	movslq %esi,%rax
  80042179a9:	48 c1 e0 03          	shl    $0x3,%rax
  80042179ad:	48 89 c6             	mov    %rax,%rsi
  80042179b0:	48 c1 e6 04          	shl    $0x4,%rsi
  80042179b4:	48 01 f0             	add    %rsi,%rax
  80042179b7:	48 01 c8             	add    %rcx,%rax
  80042179ba:	88 10                	mov    %dl,(%rax)
  80042179bc:	48 b8 48 02 6e 04 80 	movabs $0x80046e0248,%rax
  80042179c3:	00 00 00 
  80042179c6:	8b 00                	mov    (%rax),%eax
  80042179c8:	8d 50 01             	lea    0x1(%rax),%edx
  80042179cb:	48 b8 48 02 6e 04 80 	movabs $0x80046e0248,%rax
  80042179d2:	00 00 00 
  80042179d5:	89 10                	mov    %edx,(%rax)
  80042179d7:	eb 45                	jmp    8004217a1e <mp_init+0x241>
  80042179d9:	48 bf 80 0e 22 04 80 	movabs $0x8004220e80,%rdi
  80042179e0:	00 00 00 
  80042179e3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042179e8:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  80042179ef:	00 00 00 
  80042179f2:	ff d2                	callq  *%rdx
  80042179f4:	eb 28                	jmp    8004217a1e <mp_init+0x241>
  80042179f6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042179fa:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  80042179fe:	0f b6 c0             	movzbl %al,%eax
  8004217a01:	89 c6                	mov    %eax,%esi
  8004217a03:	48 bf b0 0e 22 04 80 	movabs $0x8004220eb0,%rdi
  8004217a0a:	00 00 00 
  8004217a0d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217a12:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004217a19:	00 00 00 
  8004217a1c:	ff d2                	callq  *%rdx
  8004217a1e:	48 83 45 e8 14       	addq   $0x14,-0x18(%rbp)
  8004217a23:	eb 4c                	jmp    8004217a71 <mp_init+0x294>
  8004217a25:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
  8004217a2a:	eb 45                	jmp    8004217a71 <mp_init+0x294>
  8004217a2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217a30:	0f b6 00             	movzbl (%rax),%eax
  8004217a33:	0f b6 c0             	movzbl %al,%eax
  8004217a36:	89 c6                	mov    %eax,%esi
  8004217a38:	48 bf d8 0e 22 04 80 	movabs $0x8004220ed8,%rdi
  8004217a3f:	00 00 00 
  8004217a42:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217a47:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004217a4e:	00 00 00 
  8004217a51:	ff d2                	callq  *%rdx
  8004217a53:	48 b8 00 00 6e 04 80 	movabs $0x80046e0000,%rax
  8004217a5a:	00 00 00 
  8004217a5d:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  8004217a63:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217a67:	0f b7 40 22          	movzwl 0x22(%rax),%eax
  8004217a6b:	0f b7 c0             	movzwl %ax,%eax
  8004217a6e:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004217a71:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
  8004217a75:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217a79:	0f b7 40 22          	movzwl 0x22(%rax),%eax
  8004217a7d:	0f b7 c0             	movzwl %ax,%eax
  8004217a80:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
  8004217a83:	0f 87 d5 fd ff ff    	ja     800421785e <mp_init+0x81>
  8004217a89:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  8004217a90:	eb 53                	jmp    8004217ae5 <mp_init+0x308>
  8004217a92:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  8004217a99:	00 00 00 
  8004217a9c:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004217a9f:	48 c1 e0 03          	shl    $0x3,%rax
  8004217aa3:	48 89 c1             	mov    %rax,%rcx
  8004217aa6:	48 c1 e1 04          	shl    $0x4,%rcx
  8004217aaa:	48 01 c8             	add    %rcx,%rax
  8004217aad:	48 01 d0             	add    %rdx,%rax
  8004217ab0:	48 83 c0 70          	add    $0x70,%rax
  8004217ab4:	c6 40 08 00          	movb   $0x0,0x8(%rax)
  8004217ab8:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  8004217abf:	00 00 00 
  8004217ac2:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004217ac5:	48 c1 e0 03          	shl    $0x3,%rax
  8004217ac9:	48 89 c1             	mov    %rax,%rcx
  8004217acc:	48 c1 e1 04          	shl    $0x4,%rcx
  8004217ad0:	48 01 c8             	add    %rcx,%rax
  8004217ad3:	48 01 d0             	add    %rdx,%rax
  8004217ad6:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  8004217ada:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004217ae1:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
  8004217ae5:	83 7d e4 03          	cmpl   $0x3,-0x1c(%rbp)
  8004217ae9:	76 a7                	jbe    8004217a92 <mp_init+0x2b5>
  8004217aeb:	48 b8 40 02 6e 04 80 	movabs $0x80046e0240,%rax
  8004217af2:	00 00 00 
  8004217af5:	48 8b 00             	mov    (%rax),%rax
  8004217af8:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%rax)
  8004217aff:	48 b8 00 00 6e 04 80 	movabs $0x80046e0000,%rax
  8004217b06:	00 00 00 
  8004217b09:	8b 00                	mov    (%rax),%eax
  8004217b0b:	85 c0                	test   %eax,%eax
  8004217b0d:	75 41                	jne    8004217b50 <mp_init+0x373>
  8004217b0f:	48 b8 48 02 6e 04 80 	movabs $0x80046e0248,%rax
  8004217b16:	00 00 00 
  8004217b19:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
  8004217b1f:	48 b8 00 10 72 04 80 	movabs $0x8004721000,%rax
  8004217b26:	00 00 00 
  8004217b29:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004217b30:	48 bf f8 0e 22 04 80 	movabs $0x8004220ef8,%rdi
  8004217b37:	00 00 00 
  8004217b3a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217b3f:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004217b46:	00 00 00 
  8004217b49:	ff d2                	callq  *%rdx
  8004217b4b:	e9 a2 00 00 00       	jmpq   8004217bf2 <mp_init+0x415>
  8004217b50:	48 b8 48 02 6e 04 80 	movabs $0x80046e0248,%rax
  8004217b57:	00 00 00 
  8004217b5a:	8b 10                	mov    (%rax),%edx
  8004217b5c:	48 b8 40 02 6e 04 80 	movabs $0x80046e0240,%rax
  8004217b63:	00 00 00 
  8004217b66:	48 8b 00             	mov    (%rax),%rax
  8004217b69:	0f b6 00             	movzbl (%rax),%eax
  8004217b6c:	0f b6 c0             	movzbl %al,%eax
  8004217b6f:	89 c6                	mov    %eax,%esi
  8004217b71:	48 bf 24 0f 22 04 80 	movabs $0x8004220f24,%rdi
  8004217b78:	00 00 00 
  8004217b7b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217b80:	48 b9 83 9c 20 04 80 	movabs $0x8004209c83,%rcx
  8004217b87:	00 00 00 
  8004217b8a:	ff d1                	callq  *%rcx
  8004217b8c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004217b90:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  8004217b94:	84 c0                	test   %al,%al
  8004217b96:	74 5a                	je     8004217bf2 <mp_init+0x415>
  8004217b98:	48 bf 48 0f 22 04 80 	movabs $0x8004220f48,%rdi
  8004217b9f:	00 00 00 
  8004217ba2:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217ba7:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004217bae:	00 00 00 
  8004217bb1:	ff d2                	callq  *%rdx
  8004217bb3:	c7 45 cc 22 00 00 00 	movl   $0x22,-0x34(%rbp)
  8004217bba:	c6 45 cb 70          	movb   $0x70,-0x35(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004217bbe:	0f b6 45 cb          	movzbl -0x35(%rbp),%eax
  8004217bc2:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004217bc5:	ee                   	out    %al,(%dx)
  8004217bc6:	c7 45 c4 23 00 00 00 	movl   $0x23,-0x3c(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004217bcd:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  8004217bd0:	89 c2                	mov    %eax,%edx
  8004217bd2:	ec                   	in     (%dx),%al
  8004217bd3:	88 45 c3             	mov    %al,-0x3d(%rbp)
	return data;
  8004217bd6:	0f b6 45 c3          	movzbl -0x3d(%rbp),%eax
  8004217bda:	83 c8 01             	or     $0x1,%eax
  8004217bdd:	0f b6 c0             	movzbl %al,%eax
  8004217be0:	c7 45 bc 23 00 00 00 	movl   $0x23,-0x44(%rbp)
  8004217be7:	88 45 bb             	mov    %al,-0x45(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004217bea:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
  8004217bee:	8b 55 bc             	mov    -0x44(%rbp),%edx
  8004217bf1:	ee                   	out    %al,(%dx)
  8004217bf2:	48 83 c4 58          	add    $0x58,%rsp
  8004217bf6:	5b                   	pop    %rbx
  8004217bf7:	5d                   	pop    %rbp
  8004217bf8:	c3                   	retq   

0000008004217bf9 <lapicw>:
  8004217bf9:	55                   	push   %rbp
  8004217bfa:	48 89 e5             	mov    %rsp,%rbp
  8004217bfd:	48 83 ec 08          	sub    $0x8,%rsp
  8004217c01:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004217c04:	89 75 f8             	mov    %esi,-0x8(%rbp)
  8004217c07:	48 b8 08 10 72 04 80 	movabs $0x8004721008,%rax
  8004217c0e:	00 00 00 
  8004217c11:	48 8b 00             	mov    (%rax),%rax
  8004217c14:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217c17:	48 63 d2             	movslq %edx,%rdx
  8004217c1a:	48 c1 e2 02          	shl    $0x2,%rdx
  8004217c1e:	48 01 c2             	add    %rax,%rdx
  8004217c21:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004217c24:	89 02                	mov    %eax,(%rdx)
  8004217c26:	48 b8 08 10 72 04 80 	movabs $0x8004721008,%rax
  8004217c2d:	00 00 00 
  8004217c30:	48 8b 00             	mov    (%rax),%rax
  8004217c33:	48 83 c0 20          	add    $0x20,%rax
  8004217c37:	8b 00                	mov    (%rax),%eax
  8004217c39:	c9                   	leaveq 
  8004217c3a:	c3                   	retq   

0000008004217c3b <lapic_init>:
  8004217c3b:	55                   	push   %rbp
  8004217c3c:	48 89 e5             	mov    %rsp,%rbp
  8004217c3f:	48 b8 00 10 72 04 80 	movabs $0x8004721000,%rax
  8004217c46:	00 00 00 
  8004217c49:	48 8b 00             	mov    (%rax),%rax
  8004217c4c:	48 85 c0             	test   %rax,%rax
  8004217c4f:	75 05                	jne    8004217c56 <lapic_init+0x1b>
  8004217c51:	e9 da 01 00 00       	jmpq   8004217e30 <lapic_init+0x1f5>
  8004217c56:	48 b8 00 10 72 04 80 	movabs $0x8004721000,%rax
  8004217c5d:	00 00 00 
  8004217c60:	48 8b 00             	mov    (%rax),%rax
  8004217c63:	be 00 10 00 00       	mov    $0x1000,%esi
  8004217c68:	48 89 c7             	mov    %rax,%rdi
  8004217c6b:	48 b8 56 3f 20 04 80 	movabs $0x8004203f56,%rax
  8004217c72:	00 00 00 
  8004217c75:	ff d0                	callq  *%rax
  8004217c77:	48 ba 08 10 72 04 80 	movabs $0x8004721008,%rdx
  8004217c7e:	00 00 00 
  8004217c81:	48 89 02             	mov    %rax,(%rdx)
  8004217c84:	be 27 01 00 00       	mov    $0x127,%esi
  8004217c89:	bf 3c 00 00 00       	mov    $0x3c,%edi
  8004217c8e:	48 b8 f9 7b 21 04 80 	movabs $0x8004217bf9,%rax
  8004217c95:	00 00 00 
  8004217c98:	ff d0                	callq  *%rax
  8004217c9a:	be 0b 00 00 00       	mov    $0xb,%esi
  8004217c9f:	bf f8 00 00 00       	mov    $0xf8,%edi
  8004217ca4:	48 b8 f9 7b 21 04 80 	movabs $0x8004217bf9,%rax
  8004217cab:	00 00 00 
  8004217cae:	ff d0                	callq  *%rax
  8004217cb0:	be 20 00 02 00       	mov    $0x20020,%esi
  8004217cb5:	bf c8 00 00 00       	mov    $0xc8,%edi
  8004217cba:	48 b8 f9 7b 21 04 80 	movabs $0x8004217bf9,%rax
  8004217cc1:	00 00 00 
  8004217cc4:	ff d0                	callq  *%rax
  8004217cc6:	be 80 96 98 00       	mov    $0x989680,%esi
  8004217ccb:	bf e0 00 00 00       	mov    $0xe0,%edi
  8004217cd0:	48 b8 f9 7b 21 04 80 	movabs $0x8004217bf9,%rax
  8004217cd7:	00 00 00 
  8004217cda:	ff d0                	callq  *%rax
  8004217cdc:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  8004217ce3:	00 00 00 
  8004217ce6:	ff d0                	callq  *%rax
  8004217ce8:	48 98                	cltq   
  8004217cea:	48 c1 e0 03          	shl    $0x3,%rax
  8004217cee:	48 89 c2             	mov    %rax,%rdx
  8004217cf1:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217cf5:	48 01 d0             	add    %rdx,%rax
  8004217cf8:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  8004217cff:	00 00 00 
  8004217d02:	48 01 c2             	add    %rax,%rdx
  8004217d05:	48 b8 40 02 6e 04 80 	movabs $0x80046e0240,%rax
  8004217d0c:	00 00 00 
  8004217d0f:	48 8b 00             	mov    (%rax),%rax
  8004217d12:	48 39 c2             	cmp    %rax,%rdx
  8004217d15:	74 16                	je     8004217d2d <lapic_init+0xf2>
  8004217d17:	be 00 00 01 00       	mov    $0x10000,%esi
  8004217d1c:	bf d4 00 00 00       	mov    $0xd4,%edi
  8004217d21:	48 b8 f9 7b 21 04 80 	movabs $0x8004217bf9,%rax
  8004217d28:	00 00 00 
  8004217d2b:	ff d0                	callq  *%rax
  8004217d2d:	be 00 00 01 00       	mov    $0x10000,%esi
  8004217d32:	bf d8 00 00 00       	mov    $0xd8,%edi
  8004217d37:	48 b8 f9 7b 21 04 80 	movabs $0x8004217bf9,%rax
  8004217d3e:	00 00 00 
  8004217d41:	ff d0                	callq  *%rax
  8004217d43:	48 b8 08 10 72 04 80 	movabs $0x8004721008,%rax
  8004217d4a:	00 00 00 
  8004217d4d:	48 8b 00             	mov    (%rax),%rax
  8004217d50:	48 83 c0 30          	add    $0x30,%rax
  8004217d54:	8b 00                	mov    (%rax),%eax
  8004217d56:	c1 e8 10             	shr    $0x10,%eax
  8004217d59:	0f b6 c0             	movzbl %al,%eax
  8004217d5c:	83 f8 03             	cmp    $0x3,%eax
  8004217d5f:	76 16                	jbe    8004217d77 <lapic_init+0x13c>
  8004217d61:	be 00 00 01 00       	mov    $0x10000,%esi
  8004217d66:	bf d0 00 00 00       	mov    $0xd0,%edi
  8004217d6b:	48 b8 f9 7b 21 04 80 	movabs $0x8004217bf9,%rax
  8004217d72:	00 00 00 
  8004217d75:	ff d0                	callq  *%rax
  8004217d77:	be 33 00 00 00       	mov    $0x33,%esi
  8004217d7c:	bf dc 00 00 00       	mov    $0xdc,%edi
  8004217d81:	48 b8 f9 7b 21 04 80 	movabs $0x8004217bf9,%rax
  8004217d88:	00 00 00 
  8004217d8b:	ff d0                	callq  *%rax
  8004217d8d:	be 00 00 00 00       	mov    $0x0,%esi
  8004217d92:	bf a0 00 00 00       	mov    $0xa0,%edi
  8004217d97:	48 b8 f9 7b 21 04 80 	movabs $0x8004217bf9,%rax
  8004217d9e:	00 00 00 
  8004217da1:	ff d0                	callq  *%rax
  8004217da3:	be 00 00 00 00       	mov    $0x0,%esi
  8004217da8:	bf a0 00 00 00       	mov    $0xa0,%edi
  8004217dad:	48 b8 f9 7b 21 04 80 	movabs $0x8004217bf9,%rax
  8004217db4:	00 00 00 
  8004217db7:	ff d0                	callq  *%rax
  8004217db9:	be 00 00 00 00       	mov    $0x0,%esi
  8004217dbe:	bf 2c 00 00 00       	mov    $0x2c,%edi
  8004217dc3:	48 b8 f9 7b 21 04 80 	movabs $0x8004217bf9,%rax
  8004217dca:	00 00 00 
  8004217dcd:	ff d0                	callq  *%rax
  8004217dcf:	be 00 00 00 00       	mov    $0x0,%esi
  8004217dd4:	bf c4 00 00 00       	mov    $0xc4,%edi
  8004217dd9:	48 b8 f9 7b 21 04 80 	movabs $0x8004217bf9,%rax
  8004217de0:	00 00 00 
  8004217de3:	ff d0                	callq  *%rax
  8004217de5:	be 00 85 08 00       	mov    $0x88500,%esi
  8004217dea:	bf c0 00 00 00       	mov    $0xc0,%edi
  8004217def:	48 b8 f9 7b 21 04 80 	movabs $0x8004217bf9,%rax
  8004217df6:	00 00 00 
  8004217df9:	ff d0                	callq  *%rax
  8004217dfb:	90                   	nop
  8004217dfc:	48 b8 08 10 72 04 80 	movabs $0x8004721008,%rax
  8004217e03:	00 00 00 
  8004217e06:	48 8b 00             	mov    (%rax),%rax
  8004217e09:	48 05 00 03 00 00    	add    $0x300,%rax
  8004217e0f:	8b 00                	mov    (%rax),%eax
  8004217e11:	25 00 10 00 00       	and    $0x1000,%eax
  8004217e16:	85 c0                	test   %eax,%eax
  8004217e18:	75 e2                	jne    8004217dfc <lapic_init+0x1c1>
  8004217e1a:	be 00 00 00 00       	mov    $0x0,%esi
  8004217e1f:	bf 20 00 00 00       	mov    $0x20,%edi
  8004217e24:	48 b8 f9 7b 21 04 80 	movabs $0x8004217bf9,%rax
  8004217e2b:	00 00 00 
  8004217e2e:	ff d0                	callq  *%rax
  8004217e30:	5d                   	pop    %rbp
  8004217e31:	c3                   	retq   

0000008004217e32 <cpunum>:
  8004217e32:	55                   	push   %rbp
  8004217e33:	48 89 e5             	mov    %rsp,%rbp
  8004217e36:	48 b8 08 10 72 04 80 	movabs $0x8004721008,%rax
  8004217e3d:	00 00 00 
  8004217e40:	48 8b 00             	mov    (%rax),%rax
  8004217e43:	48 85 c0             	test   %rax,%rax
  8004217e46:	74 18                	je     8004217e60 <cpunum+0x2e>
  8004217e48:	48 b8 08 10 72 04 80 	movabs $0x8004721008,%rax
  8004217e4f:	00 00 00 
  8004217e52:	48 8b 00             	mov    (%rax),%rax
  8004217e55:	48 83 c0 20          	add    $0x20,%rax
  8004217e59:	8b 00                	mov    (%rax),%eax
  8004217e5b:	c1 e8 18             	shr    $0x18,%eax
  8004217e5e:	eb 05                	jmp    8004217e65 <cpunum+0x33>
  8004217e60:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217e65:	5d                   	pop    %rbp
  8004217e66:	c3                   	retq   

0000008004217e67 <lapic_eoi>:
  8004217e67:	55                   	push   %rbp
  8004217e68:	48 89 e5             	mov    %rsp,%rbp
  8004217e6b:	48 b8 08 10 72 04 80 	movabs $0x8004721008,%rax
  8004217e72:	00 00 00 
  8004217e75:	48 8b 00             	mov    (%rax),%rax
  8004217e78:	48 85 c0             	test   %rax,%rax
  8004217e7b:	74 16                	je     8004217e93 <lapic_eoi+0x2c>
  8004217e7d:	be 00 00 00 00       	mov    $0x0,%esi
  8004217e82:	bf 2c 00 00 00       	mov    $0x2c,%edi
  8004217e87:	48 b8 f9 7b 21 04 80 	movabs $0x8004217bf9,%rax
  8004217e8e:	00 00 00 
  8004217e91:	ff d0                	callq  *%rax
  8004217e93:	5d                   	pop    %rbp
  8004217e94:	c3                   	retq   

0000008004217e95 <microdelay>:
  8004217e95:	55                   	push   %rbp
  8004217e96:	48 89 e5             	mov    %rsp,%rbp
  8004217e99:	48 83 ec 04          	sub    $0x4,%rsp
  8004217e9d:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004217ea0:	c9                   	leaveq 
  8004217ea1:	c3                   	retq   

0000008004217ea2 <lapic_startap>:
  8004217ea2:	55                   	push   %rbp
  8004217ea3:	48 89 e5             	mov    %rsp,%rbp
  8004217ea6:	48 83 ec 40          	sub    $0x40,%rsp
  8004217eaa:	89 f8                	mov    %edi,%eax
  8004217eac:	89 75 c8             	mov    %esi,-0x38(%rbp)
  8004217eaf:	88 45 cc             	mov    %al,-0x34(%rbp)
  8004217eb2:	c7 45 dc 70 00 00 00 	movl   $0x70,-0x24(%rbp)
  8004217eb9:	c6 45 db 0f          	movb   $0xf,-0x25(%rbp)
  8004217ebd:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  8004217ec1:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004217ec4:	ee                   	out    %al,(%dx)
  8004217ec5:	c7 45 d4 71 00 00 00 	movl   $0x71,-0x2c(%rbp)
  8004217ecc:	c6 45 d3 0a          	movb   $0xa,-0x2d(%rbp)
  8004217ed0:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004217ed4:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004217ed7:	ee                   	out    %al,(%dx)
  8004217ed8:	48 c7 45 f0 67 04 00 	movq   $0x467,-0x10(%rbp)
  8004217edf:	00 
  8004217ee0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217ee4:	48 c1 e8 0c          	shr    $0xc,%rax
  8004217ee8:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004217eeb:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004217eee:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  8004217ef5:	00 00 00 
  8004217ef8:	48 8b 00             	mov    (%rax),%rax
  8004217efb:	48 39 c2             	cmp    %rax,%rdx
  8004217efe:	72 32                	jb     8004217f32 <lapic_startap+0x90>
  8004217f00:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217f04:	48 89 c1             	mov    %rax,%rcx
  8004217f07:	48 ba 90 0f 22 04 80 	movabs $0x8004220f90,%rdx
  8004217f0e:	00 00 00 
  8004217f11:	be 99 00 00 00       	mov    $0x99,%esi
  8004217f16:	48 bf b3 0f 22 04 80 	movabs $0x8004220fb3,%rdi
  8004217f1d:	00 00 00 
  8004217f20:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217f25:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004217f2c:	00 00 00 
  8004217f2f:	41 ff d0             	callq  *%r8
  8004217f32:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004217f39:	00 00 00 
  8004217f3c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217f40:	48 01 d0             	add    %rdx,%rax
  8004217f43:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004217f47:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217f4b:	66 c7 00 00 00       	movw   $0x0,(%rax)
  8004217f50:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217f54:	48 8d 50 02          	lea    0x2(%rax),%rdx
  8004217f58:	8b 45 c8             	mov    -0x38(%rbp),%eax
  8004217f5b:	c1 e8 04             	shr    $0x4,%eax
  8004217f5e:	66 89 02             	mov    %ax,(%rdx)
  8004217f61:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  8004217f65:	c1 e0 18             	shl    $0x18,%eax
  8004217f68:	89 c6                	mov    %eax,%esi
  8004217f6a:	bf c4 00 00 00       	mov    $0xc4,%edi
  8004217f6f:	48 b8 f9 7b 21 04 80 	movabs $0x8004217bf9,%rax
  8004217f76:	00 00 00 
  8004217f79:	ff d0                	callq  *%rax
  8004217f7b:	be 00 c5 00 00       	mov    $0xc500,%esi
  8004217f80:	bf c0 00 00 00       	mov    $0xc0,%edi
  8004217f85:	48 b8 f9 7b 21 04 80 	movabs $0x8004217bf9,%rax
  8004217f8c:	00 00 00 
  8004217f8f:	ff d0                	callq  *%rax
  8004217f91:	bf c8 00 00 00       	mov    $0xc8,%edi
  8004217f96:	48 b8 95 7e 21 04 80 	movabs $0x8004217e95,%rax
  8004217f9d:	00 00 00 
  8004217fa0:	ff d0                	callq  *%rax
  8004217fa2:	be 00 85 00 00       	mov    $0x8500,%esi
  8004217fa7:	bf c0 00 00 00       	mov    $0xc0,%edi
  8004217fac:	48 b8 f9 7b 21 04 80 	movabs $0x8004217bf9,%rax
  8004217fb3:	00 00 00 
  8004217fb6:	ff d0                	callq  *%rax
  8004217fb8:	bf 64 00 00 00       	mov    $0x64,%edi
  8004217fbd:	48 b8 95 7e 21 04 80 	movabs $0x8004217e95,%rax
  8004217fc4:	00 00 00 
  8004217fc7:	ff d0                	callq  *%rax
  8004217fc9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004217fd0:	eb 4b                	jmp    800421801d <lapic_startap+0x17b>
  8004217fd2:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  8004217fd6:	c1 e0 18             	shl    $0x18,%eax
  8004217fd9:	89 c6                	mov    %eax,%esi
  8004217fdb:	bf c4 00 00 00       	mov    $0xc4,%edi
  8004217fe0:	48 b8 f9 7b 21 04 80 	movabs $0x8004217bf9,%rax
  8004217fe7:	00 00 00 
  8004217fea:	ff d0                	callq  *%rax
  8004217fec:	8b 45 c8             	mov    -0x38(%rbp),%eax
  8004217fef:	c1 e8 0c             	shr    $0xc,%eax
  8004217ff2:	80 cc 06             	or     $0x6,%ah
  8004217ff5:	89 c6                	mov    %eax,%esi
  8004217ff7:	bf c0 00 00 00       	mov    $0xc0,%edi
  8004217ffc:	48 b8 f9 7b 21 04 80 	movabs $0x8004217bf9,%rax
  8004218003:	00 00 00 
  8004218006:	ff d0                	callq  *%rax
  8004218008:	bf c8 00 00 00       	mov    $0xc8,%edi
  800421800d:	48 b8 95 7e 21 04 80 	movabs $0x8004217e95,%rax
  8004218014:	00 00 00 
  8004218017:	ff d0                	callq  *%rax
  8004218019:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421801d:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
  8004218021:	7e af                	jle    8004217fd2 <lapic_startap+0x130>
  8004218023:	c9                   	leaveq 
  8004218024:	c3                   	retq   

0000008004218025 <lapic_ipi>:
  8004218025:	55                   	push   %rbp
  8004218026:	48 89 e5             	mov    %rsp,%rbp
  8004218029:	48 83 ec 08          	sub    $0x8,%rsp
  800421802d:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004218030:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218033:	0d 00 00 0c 00       	or     $0xc0000,%eax
  8004218038:	89 c6                	mov    %eax,%esi
  800421803a:	bf c0 00 00 00       	mov    $0xc0,%edi
  800421803f:	48 b8 f9 7b 21 04 80 	movabs $0x8004217bf9,%rax
  8004218046:	00 00 00 
  8004218049:	ff d0                	callq  *%rax
  800421804b:	90                   	nop
  800421804c:	48 b8 08 10 72 04 80 	movabs $0x8004721008,%rax
  8004218053:	00 00 00 
  8004218056:	48 8b 00             	mov    (%rax),%rax
  8004218059:	48 05 00 03 00 00    	add    $0x300,%rax
  800421805f:	8b 00                	mov    (%rax),%eax
  8004218061:	25 00 10 00 00       	and    $0x1000,%eax
  8004218066:	85 c0                	test   %eax,%eax
  8004218068:	75 e2                	jne    800421804c <lapic_ipi+0x27>
  800421806a:	c9                   	leaveq 
  800421806b:	c3                   	retq   

000000800421806c <xchg>:
	if (edxp)
		*edxp = edx;
}

static inline uint32_t
xchg(volatile uint32_t *addr,uint32_t newval){
  800421806c:	55                   	push   %rbp
  800421806d:	48 89 e5             	mov    %rsp,%rbp
  8004218070:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004218074:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004218078:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint32_t result;
	__asm __volatile("lock; xchgl %0, %1":
  800421807b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421807f:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004218082:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004218086:	f0 87 02             	lock xchg %eax,(%rdx)
  8004218089:	89 45 fc             	mov    %eax,-0x4(%rbp)
			 "+m" (*addr), "=a" (result):
			 "1"(newval):
			 "cc");
	return result;
  800421808c:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  800421808f:	c9                   	leaveq 
  8004218090:	c3                   	retq   

0000008004218091 <get_caller_pcs>:
  8004218091:	55                   	push   %rbp
  8004218092:	48 89 e5             	mov    %rsp,%rbp
  8004218095:	48 83 ec 28          	sub    $0x28,%rsp
  8004218099:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)

static __inline uint64_t
read_rbp(void)
{
	uint64_t rbp;
	__asm __volatile("movq %%rbp,%0" : "=r" (rbp)::"cc","memory");
  800421809d:	48 89 e8             	mov    %rbp,%rax
  80042180a0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return rbp;
  80042180a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042180a8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042180ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  80042180b3:	eb 45                	jmp    80042180fa <get_caller_pcs+0x69>
  80042180b5:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042180ba:	74 44                	je     8004218100 <get_caller_pcs+0x6f>
  80042180bc:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  80042180c3:	00 00 00 
  80042180c6:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  80042180ca:	76 34                	jbe    8004218100 <get_caller_pcs+0x6f>
  80042180cc:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042180cf:	48 98                	cltq   
  80042180d1:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042180d8:	00 
  80042180d9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042180dd:	48 01 c2             	add    %rax,%rdx
  80042180e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042180e4:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042180e8:	48 89 02             	mov    %rax,(%rdx)
  80042180eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042180ef:	48 8b 00             	mov    (%rax),%rax
  80042180f2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042180f6:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  80042180fa:	83 7d f4 09          	cmpl   $0x9,-0xc(%rbp)
  80042180fe:	7e b5                	jle    80042180b5 <get_caller_pcs+0x24>
  8004218100:	eb 1f                	jmp    8004218121 <get_caller_pcs+0x90>
  8004218102:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004218105:	48 98                	cltq   
  8004218107:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421810e:	00 
  800421810f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218113:	48 01 d0             	add    %rdx,%rax
  8004218116:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800421811d:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004218121:	83 7d f4 09          	cmpl   $0x9,-0xc(%rbp)
  8004218125:	7e db                	jle    8004218102 <get_caller_pcs+0x71>
  8004218127:	c9                   	leaveq 
  8004218128:	c3                   	retq   

0000008004218129 <holding>:
  8004218129:	55                   	push   %rbp
  800421812a:	48 89 e5             	mov    %rsp,%rbp
  800421812d:	53                   	push   %rbx
  800421812e:	48 83 ec 18          	sub    $0x18,%rsp
  8004218132:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004218136:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421813a:	8b 00                	mov    (%rax),%eax
  800421813c:	85 c0                	test   %eax,%eax
  800421813e:	74 3d                	je     800421817d <holding+0x54>
  8004218140:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218144:	48 8b 58 10          	mov    0x10(%rax),%rbx
  8004218148:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800421814f:	00 00 00 
  8004218152:	ff d0                	callq  *%rax
  8004218154:	48 98                	cltq   
  8004218156:	48 c1 e0 03          	shl    $0x3,%rax
  800421815a:	48 89 c2             	mov    %rax,%rdx
  800421815d:	48 c1 e2 04          	shl    $0x4,%rdx
  8004218161:	48 01 d0             	add    %rdx,%rax
  8004218164:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800421816b:	00 00 00 
  800421816e:	48 01 d0             	add    %rdx,%rax
  8004218171:	48 39 c3             	cmp    %rax,%rbx
  8004218174:	75 07                	jne    800421817d <holding+0x54>
  8004218176:	b8 01 00 00 00       	mov    $0x1,%eax
  800421817b:	eb 05                	jmp    8004218182 <holding+0x59>
  800421817d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218182:	48 83 c4 18          	add    $0x18,%rsp
  8004218186:	5b                   	pop    %rbx
  8004218187:	5d                   	pop    %rbp
  8004218188:	c3                   	retq   

0000008004218189 <__spin_initlock>:
  8004218189:	55                   	push   %rbp
  800421818a:	48 89 e5             	mov    %rsp,%rbp
  800421818d:	48 83 ec 10          	sub    $0x10,%rsp
  8004218191:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004218195:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004218199:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421819d:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  80042181a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042181a7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042181ab:	48 89 50 08          	mov    %rdx,0x8(%rax)
  80042181af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042181b3:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  80042181ba:	00 
  80042181bb:	c9                   	leaveq 
  80042181bc:	c3                   	retq   

00000080042181bd <spin_lock>:
  80042181bd:	55                   	push   %rbp
  80042181be:	48 89 e5             	mov    %rsp,%rbp
  80042181c1:	53                   	push   %rbx
  80042181c2:	48 83 ec 18          	sub    $0x18,%rsp
  80042181c6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042181ca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042181ce:	48 89 c7             	mov    %rax,%rdi
  80042181d1:	48 b8 29 81 21 04 80 	movabs $0x8004218129,%rax
  80042181d8:	00 00 00 
  80042181db:	ff d0                	callq  *%rax
  80042181dd:	85 c0                	test   %eax,%eax
  80042181df:	74 44                	je     8004218225 <spin_lock+0x68>
  80042181e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042181e5:	48 8b 58 08          	mov    0x8(%rax),%rbx
  80042181e9:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  80042181f0:	00 00 00 
  80042181f3:	ff d0                	callq  *%rax
  80042181f5:	49 89 d8             	mov    %rbx,%r8
  80042181f8:	89 c1                	mov    %eax,%ecx
  80042181fa:	48 ba d8 0f 22 04 80 	movabs $0x8004220fd8,%rdx
  8004218201:	00 00 00 
  8004218204:	be 42 00 00 00       	mov    $0x42,%esi
  8004218209:	48 bf 02 10 22 04 80 	movabs $0x8004221002,%rdi
  8004218210:	00 00 00 
  8004218213:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218218:	49 b9 d5 04 20 04 80 	movabs $0x80042004d5,%r9
  800421821f:	00 00 00 
  8004218222:	41 ff d1             	callq  *%r9
  8004218225:	eb 02                	jmp    8004218229 <spin_lock+0x6c>
  8004218227:	f3 90                	pause  
  8004218229:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421822d:	be 01 00 00 00       	mov    $0x1,%esi
  8004218232:	48 89 c7             	mov    %rax,%rdi
  8004218235:	48 b8 6c 80 21 04 80 	movabs $0x800421806c,%rax
  800421823c:	00 00 00 
  800421823f:	ff d0                	callq  *%rax
  8004218241:	85 c0                	test   %eax,%eax
  8004218243:	75 e2                	jne    8004218227 <spin_lock+0x6a>
  8004218245:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800421824c:	00 00 00 
  800421824f:	ff d0                	callq  *%rax
  8004218251:	48 98                	cltq   
  8004218253:	48 c1 e0 03          	shl    $0x3,%rax
  8004218257:	48 89 c2             	mov    %rax,%rdx
  800421825a:	48 c1 e2 04          	shl    $0x4,%rdx
  800421825e:	48 01 d0             	add    %rdx,%rax
  8004218261:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  8004218268:	00 00 00 
  800421826b:	48 01 c2             	add    %rax,%rdx
  800421826e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218272:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004218276:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421827a:	48 83 c0 18          	add    $0x18,%rax
  800421827e:	48 89 c7             	mov    %rax,%rdi
  8004218281:	48 b8 91 80 21 04 80 	movabs $0x8004218091,%rax
  8004218288:	00 00 00 
  800421828b:	ff d0                	callq  *%rax
  800421828d:	48 83 c4 18          	add    $0x18,%rsp
  8004218291:	5b                   	pop    %rbx
  8004218292:	5d                   	pop    %rbp
  8004218293:	c3                   	retq   

0000008004218294 <spin_unlock>:
  8004218294:	55                   	push   %rbp
  8004218295:	48 89 e5             	mov    %rsp,%rbp
  8004218298:	41 54                	push   %r12
  800421829a:	53                   	push   %rbx
  800421829b:	48 81 ec 20 05 00 00 	sub    $0x520,%rsp
  80042182a2:	48 89 bd d8 fa ff ff 	mov    %rdi,-0x528(%rbp)
  80042182a9:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  80042182b0:	48 89 c7             	mov    %rax,%rdi
  80042182b3:	48 b8 29 81 21 04 80 	movabs $0x8004218129,%rax
  80042182ba:	00 00 00 
  80042182bd:	ff d0                	callq  *%rax
  80042182bf:	85 c0                	test   %eax,%eax
  80042182c1:	0f 85 d2 01 00 00    	jne    8004218499 <spin_unlock+0x205>
  80042182c7:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  80042182ce:	48 8d 48 18          	lea    0x18(%rax),%rcx
  80042182d2:	48 8d 85 e0 fa ff ff 	lea    -0x520(%rbp),%rax
  80042182d9:	ba 28 00 00 00       	mov    $0x28,%edx
  80042182de:	48 89 ce             	mov    %rcx,%rsi
  80042182e1:	48 89 c7             	mov    %rax,%rdi
  80042182e4:	48 b8 c2 0e 21 04 80 	movabs $0x8004210ec2,%rax
  80042182eb:	00 00 00 
  80042182ee:	ff d0                	callq  *%rax
  80042182f0:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  80042182f7:	48 8b 40 10          	mov    0x10(%rax),%rax
  80042182fb:	48 85 c0             	test   %rax,%rax
  80042182fe:	75 39                	jne    8004218339 <spin_unlock+0xa5>
  8004218300:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004218307:	48 8b 58 08          	mov    0x8(%rax),%rbx
  800421830b:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  8004218312:	00 00 00 
  8004218315:	ff d0                	callq  *%rax
  8004218317:	48 89 da             	mov    %rbx,%rdx
  800421831a:	89 c6                	mov    %eax,%esi
  800421831c:	48 bf 18 10 22 04 80 	movabs $0x8004221018,%rdi
  8004218323:	00 00 00 
  8004218326:	b8 00 00 00 00       	mov    $0x0,%eax
  800421832b:	48 b9 83 9c 20 04 80 	movabs $0x8004209c83,%rcx
  8004218332:	00 00 00 
  8004218335:	ff d1                	callq  *%rcx
  8004218337:	eb 4d                	jmp    8004218386 <spin_unlock+0xf2>
  8004218339:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004218340:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004218344:	0f b6 00             	movzbl (%rax),%eax
  8004218347:	44 0f b6 e0          	movzbl %al,%r12d
  800421834b:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004218352:	48 8b 58 08          	mov    0x8(%rax),%rbx
  8004218356:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800421835d:	00 00 00 
  8004218360:	ff d0                	callq  *%rax
  8004218362:	44 89 e1             	mov    %r12d,%ecx
  8004218365:	48 89 da             	mov    %rbx,%rdx
  8004218368:	89 c6                	mov    %eax,%esi
  800421836a:	48 bf 58 10 22 04 80 	movabs $0x8004221058,%rdi
  8004218371:	00 00 00 
  8004218374:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218379:	49 b8 83 9c 20 04 80 	movabs $0x8004209c83,%r8
  8004218380:	00 00 00 
  8004218383:	41 ff d0             	callq  *%r8
  8004218386:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  800421838d:	e9 c3 00 00 00       	jmpq   8004218455 <spin_unlock+0x1c1>
  8004218392:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004218395:	48 98                	cltq   
  8004218397:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  800421839e:	89 c0                	mov    %eax,%eax
  80042183a0:	48 8d 95 10 fb ff ff 	lea    -0x4f0(%rbp),%rdx
  80042183a7:	48 89 d6             	mov    %rdx,%rsi
  80042183aa:	48 89 c7             	mov    %rax,%rdi
  80042183ad:	48 b8 a3 fa 20 04 80 	movabs $0x800420faa3,%rax
  80042183b4:	00 00 00 
  80042183b7:	ff d0                	callq  *%rax
  80042183b9:	85 c0                	test   %eax,%eax
  80042183bb:	78 6b                	js     8004218428 <spin_unlock+0x194>
  80042183bd:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042183c0:	48 98                	cltq   
  80042183c2:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  80042183c9:	89 c2                	mov    %eax,%edx
  80042183cb:	48 8b 85 30 fb ff ff 	mov    -0x4d0(%rbp),%rax
  80042183d2:	48 29 c2             	sub    %rax,%rdx
  80042183d5:	49 89 d0             	mov    %rdx,%r8
  80042183d8:	48 8b bd 20 fb ff ff 	mov    -0x4e0(%rbp),%rdi
  80042183df:	8b b5 28 fb ff ff    	mov    -0x4d8(%rbp),%esi
  80042183e5:	8b 8d 18 fb ff ff    	mov    -0x4e8(%rbp),%ecx
  80042183eb:	48 8b 95 10 fb ff ff 	mov    -0x4f0(%rbp),%rdx
  80042183f2:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042183f5:	48 98                	cltq   
  80042183f7:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  80042183fe:	4c 89 04 24          	mov    %r8,(%rsp)
  8004218402:	49 89 f9             	mov    %rdi,%r9
  8004218405:	41 89 f0             	mov    %esi,%r8d
  8004218408:	89 c6                	mov    %eax,%esi
  800421840a:	48 bf 8e 10 22 04 80 	movabs $0x800422108e,%rdi
  8004218411:	00 00 00 
  8004218414:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218419:	49 ba 83 9c 20 04 80 	movabs $0x8004209c83,%r10
  8004218420:	00 00 00 
  8004218423:	41 ff d2             	callq  *%r10
  8004218426:	eb 29                	jmp    8004218451 <spin_unlock+0x1bd>
  8004218428:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421842b:	48 98                	cltq   
  800421842d:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  8004218434:	89 c6                	mov    %eax,%esi
  8004218436:	48 bf a5 10 22 04 80 	movabs $0x80042210a5,%rdi
  800421843d:	00 00 00 
  8004218440:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218445:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421844c:	00 00 00 
  800421844f:	ff d2                	callq  *%rdx
  8004218451:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  8004218455:	83 7d ec 09          	cmpl   $0x9,-0x14(%rbp)
  8004218459:	7f 14                	jg     800421846f <spin_unlock+0x1db>
  800421845b:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421845e:	48 98                	cltq   
  8004218460:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  8004218467:	85 c0                	test   %eax,%eax
  8004218469:	0f 85 23 ff ff ff    	jne    8004218392 <spin_unlock+0xfe>
  800421846f:	48 ba ad 10 22 04 80 	movabs $0x80042210ad,%rdx
  8004218476:	00 00 00 
  8004218479:	be 6c 00 00 00       	mov    $0x6c,%esi
  800421847e:	48 bf 02 10 22 04 80 	movabs $0x8004221002,%rdi
  8004218485:	00 00 00 
  8004218488:	b8 00 00 00 00       	mov    $0x0,%eax
  800421848d:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  8004218494:	00 00 00 
  8004218497:	ff d1                	callq  *%rcx
  8004218499:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  80042184a0:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
  80042184a7:	00 
  80042184a8:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  80042184af:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  80042184b6:	00 
  80042184b7:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  80042184be:	be 00 00 00 00       	mov    $0x0,%esi
  80042184c3:	48 89 c7             	mov    %rax,%rdi
  80042184c6:	48 b8 6c 80 21 04 80 	movabs $0x800421806c,%rax
  80042184cd:	00 00 00 
  80042184d0:	ff d0                	callq  *%rax
  80042184d2:	48 81 c4 20 05 00 00 	add    $0x520,%rsp
  80042184d9:	5b                   	pop    %rbx
  80042184da:	41 5c                	pop    %r12
  80042184dc:	5d                   	pop    %rbp
  80042184dd:	c3                   	retq   

00000080042184de <e1000_attach>:
  80042184de:	55                   	push   %rbp
  80042184df:	48 89 e5             	mov    %rsp,%rbp
  80042184e2:	48 83 ec 40          	sub    $0x40,%rsp
  80042184e6:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  80042184ea:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042184ee:	48 89 c7             	mov    %rax,%rdi
  80042184f1:	48 b8 9b 93 21 04 80 	movabs $0x800421939b,%rax
  80042184f8:	00 00 00 
  80042184fb:	ff d0                	callq  *%rax
  80042184fd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004218501:	8b 40 30             	mov    0x30(%rax),%eax
  8004218504:	89 c2                	mov    %eax,%edx
  8004218506:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421850a:	8b 40 18             	mov    0x18(%rax),%eax
  800421850d:	89 c0                	mov    %eax,%eax
  800421850f:	48 89 d6             	mov    %rdx,%rsi
  8004218512:	48 89 c7             	mov    %rax,%rdi
  8004218515:	48 b8 56 3f 20 04 80 	movabs $0x8004203f56,%rax
  800421851c:	00 00 00 
  800421851f:	ff d0                	callq  *%rax
  8004218521:	48 ba 20 07 4e 04 80 	movabs $0x80044e0720,%rdx
  8004218528:	00 00 00 
  800421852b:	48 89 02             	mov    %rax,(%rdx)
  800421852e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004218535:	e9 a9 00 00 00       	jmpq   80042185e3 <e1000_attach+0x105>
  800421853a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421853d:	48 98                	cltq   
  800421853f:	48 69 d0 ee 05 00 00 	imul   $0x5ee,%rax,%rdx
  8004218546:	48 b8 40 08 4e 04 80 	movabs $0x80044e0840,%rax
  800421854d:	00 00 00 
  8004218550:	48 01 d0             	add    %rdx,%rax
  8004218553:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004218557:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421855e:	00 00 00 
  8004218561:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  8004218565:	77 32                	ja     8004218599 <e1000_attach+0xbb>
  8004218567:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421856b:	48 89 c1             	mov    %rax,%rcx
  800421856e:	48 ba c0 10 22 04 80 	movabs $0x80042210c0,%rdx
  8004218575:	00 00 00 
  8004218578:	be 97 00 00 00       	mov    $0x97,%esi
  800421857d:	48 bf e4 10 22 04 80 	movabs $0x80042210e4,%rdi
  8004218584:	00 00 00 
  8004218587:	b8 00 00 00 00       	mov    $0x0,%eax
  800421858c:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004218593:	00 00 00 
  8004218596:	41 ff d0             	callq  *%r8
  8004218599:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042185a0:	ff ff ff 
  80042185a3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042185a7:	48 01 c2             	add    %rax,%rdx
  80042185aa:	48 b8 30 07 4e 04 80 	movabs $0x80044e0730,%rax
  80042185b1:	00 00 00 
  80042185b4:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  80042185b7:	48 63 c9             	movslq %ecx,%rcx
  80042185ba:	48 c1 e1 04          	shl    $0x4,%rcx
  80042185be:	48 01 c8             	add    %rcx,%rax
  80042185c1:	48 89 10             	mov    %rdx,(%rax)
  80042185c4:	48 b8 30 07 4e 04 80 	movabs $0x80044e0730,%rax
  80042185cb:	00 00 00 
  80042185ce:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042185d1:	48 63 d2             	movslq %edx,%rdx
  80042185d4:	48 c1 e2 04          	shl    $0x4,%rdx
  80042185d8:	48 01 d0             	add    %rdx,%rax
  80042185db:	c6 40 0c 01          	movb   $0x1,0xc(%rax)
  80042185df:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042185e3:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)
  80042185e7:	0f 8e 4d ff ff ff    	jle    800421853a <e1000_attach+0x5c>
  80042185ed:	48 b8 20 07 4e 04 80 	movabs $0x80044e0720,%rax
  80042185f4:	00 00 00 
  80042185f7:	48 8b 00             	mov    (%rax),%rax
  80042185fa:	48 8d 90 00 38 00 00 	lea    0x3800(%rax),%rdx
  8004218601:	48 b8 30 07 4e 04 80 	movabs $0x80044e0730,%rax
  8004218608:	00 00 00 
  800421860b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421860f:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004218616:	00 00 00 
  8004218619:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  800421861d:	77 32                	ja     8004218651 <e1000_attach+0x173>
  800421861f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218623:	48 89 c1             	mov    %rax,%rcx
  8004218626:	48 ba c0 10 22 04 80 	movabs $0x80042210c0,%rdx
  800421862d:	00 00 00 
  8004218630:	be 9a 00 00 00       	mov    $0x9a,%esi
  8004218635:	48 bf e4 10 22 04 80 	movabs $0x80042210e4,%rdi
  800421863c:	00 00 00 
  800421863f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218644:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421864b:	00 00 00 
  800421864e:	41 ff d0             	callq  *%r8
  8004218651:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  8004218658:	ff ff ff 
  800421865b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421865f:	48 01 c8             	add    %rcx,%rax
  8004218662:	89 02                	mov    %eax,(%rdx)
  8004218664:	48 b8 20 07 4e 04 80 	movabs $0x80044e0720,%rax
  800421866b:	00 00 00 
  800421866e:	48 8b 00             	mov    (%rax),%rax
  8004218671:	48 05 08 38 00 00    	add    $0x3808,%rax
  8004218677:	c7 00 00 01 00 00    	movl   $0x100,(%rax)
  800421867d:	48 b8 20 07 4e 04 80 	movabs $0x80044e0720,%rax
  8004218684:	00 00 00 
  8004218687:	48 8b 00             	mov    (%rax),%rax
  800421868a:	48 8d 90 10 38 00 00 	lea    0x3810(%rax),%rdx
  8004218691:	48 b8 20 07 4e 04 80 	movabs $0x80044e0720,%rax
  8004218698:	00 00 00 
  800421869b:	48 8b 00             	mov    (%rax),%rax
  800421869e:	48 8d 88 18 38 00 00 	lea    0x3818(%rax),%rcx
  80042186a5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042186aa:	89 01                	mov    %eax,(%rcx)
  80042186ac:	89 02                	mov    %eax,(%rdx)
  80042186ae:	48 b8 20 07 4e 04 80 	movabs $0x80044e0720,%rax
  80042186b5:	00 00 00 
  80042186b8:	48 8b 00             	mov    (%rax),%rax
  80042186bb:	48 05 00 04 00 00    	add    $0x400,%rax
  80042186c1:	c7 00 0a 01 04 00    	movl   $0x4010a,(%rax)
  80042186c7:	48 b8 20 07 4e 04 80 	movabs $0x80044e0720,%rax
  80042186ce:	00 00 00 
  80042186d1:	48 8b 00             	mov    (%rax),%rax
  80042186d4:	48 05 10 04 00 00    	add    $0x410,%rax
  80042186da:	c7 00 0a 20 60 00    	movl   $0x60200a,(%rax)
  80042186e0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042186e7:	e9 8e 00 00 00       	jmpq   800421877a <e1000_attach+0x29c>
  80042186ec:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042186ef:	48 98                	cltq   
  80042186f1:	48 c1 e0 0b          	shl    $0xb,%rax
  80042186f5:	48 89 c2             	mov    %rax,%rdx
  80042186f8:	48 b8 a0 a5 4e 04 80 	movabs $0x80044ea5a0,%rax
  80042186ff:	00 00 00 
  8004218702:	48 01 d0             	add    %rdx,%rax
  8004218705:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004218709:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004218710:	00 00 00 
  8004218713:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  8004218717:	77 32                	ja     800421874b <e1000_attach+0x26d>
  8004218719:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421871d:	48 89 c1             	mov    %rax,%rcx
  8004218720:	48 ba c0 10 22 04 80 	movabs $0x80042210c0,%rdx
  8004218727:	00 00 00 
  800421872a:	be b8 00 00 00       	mov    $0xb8,%esi
  800421872f:	48 bf e4 10 22 04 80 	movabs $0x80042210e4,%rdi
  8004218736:	00 00 00 
  8004218739:	b8 00 00 00 00       	mov    $0x0,%eax
  800421873e:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004218745:	00 00 00 
  8004218748:	41 ff d0             	callq  *%r8
  800421874b:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004218752:	ff ff ff 
  8004218755:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218759:	48 01 c2             	add    %rax,%rdx
  800421875c:	48 b8 20 67 4e 04 80 	movabs $0x80044e6720,%rax
  8004218763:	00 00 00 
  8004218766:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004218769:	48 63 c9             	movslq %ecx,%rcx
  800421876c:	48 c1 e1 04          	shl    $0x4,%rcx
  8004218770:	48 01 c8             	add    %rcx,%rax
  8004218773:	48 89 10             	mov    %rdx,(%rax)
  8004218776:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421877a:	81 7d fc e7 03 00 00 	cmpl   $0x3e7,-0x4(%rbp)
  8004218781:	0f 8e 65 ff ff ff    	jle    80042186ec <e1000_attach+0x20e>
  8004218787:	48 b8 20 07 4e 04 80 	movabs $0x80044e0720,%rax
  800421878e:	00 00 00 
  8004218791:	48 8b 00             	mov    (%rax),%rax
  8004218794:	48 8d 90 00 28 00 00 	lea    0x2800(%rax),%rdx
  800421879b:	48 b8 20 67 4e 04 80 	movabs $0x80044e6720,%rax
  80042187a2:	00 00 00 
  80042187a5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042187a9:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042187b0:	00 00 00 
  80042187b3:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  80042187b7:	77 32                	ja     80042187eb <e1000_attach+0x30d>
  80042187b9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042187bd:	48 89 c1             	mov    %rax,%rcx
  80042187c0:	48 ba c0 10 22 04 80 	movabs $0x80042210c0,%rdx
  80042187c7:	00 00 00 
  80042187ca:	be ba 00 00 00       	mov    $0xba,%esi
  80042187cf:	48 bf e4 10 22 04 80 	movabs $0x80042210e4,%rdi
  80042187d6:	00 00 00 
  80042187d9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042187de:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042187e5:	00 00 00 
  80042187e8:	41 ff d0             	callq  *%r8
  80042187eb:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  80042187f2:	ff ff ff 
  80042187f5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042187f9:	48 01 c8             	add    %rcx,%rax
  80042187fc:	89 02                	mov    %eax,(%rdx)
  80042187fe:	48 b8 20 07 4e 04 80 	movabs $0x80044e0720,%rax
  8004218805:	00 00 00 
  8004218808:	48 8b 00             	mov    (%rax),%rax
  800421880b:	48 05 08 28 00 00    	add    $0x2808,%rax
  8004218811:	c7 00 80 3e 00 00    	movl   $0x3e80,(%rax)
  8004218817:	48 b8 20 07 4e 04 80 	movabs $0x80044e0720,%rax
  800421881e:	00 00 00 
  8004218821:	48 8b 00             	mov    (%rax),%rax
  8004218824:	48 05 10 28 00 00    	add    $0x2810,%rax
  800421882a:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  8004218830:	48 b8 20 07 4e 04 80 	movabs $0x80044e0720,%rax
  8004218837:	00 00 00 
  800421883a:	48 8b 00             	mov    (%rax),%rax
  800421883d:	48 05 18 28 00 00    	add    $0x2818,%rax
  8004218843:	c7 00 e7 03 00 00    	movl   $0x3e7,(%rax)
  8004218849:	48 b8 20 07 4e 04 80 	movabs $0x80044e0720,%rax
  8004218850:	00 00 00 
  8004218853:	48 8b 00             	mov    (%rax),%rax
  8004218856:	48 05 00 01 00 00    	add    $0x100,%rax
  800421885c:	c7 00 02 80 00 04    	movl   $0x4008002,(%rax)
  8004218862:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218867:	c9                   	leaveq 
  8004218868:	c3                   	retq   

0000008004218869 <e1000_transmit>:
  8004218869:	55                   	push   %rbp
  800421886a:	48 89 e5             	mov    %rsp,%rbp
  800421886d:	48 83 ec 20          	sub    $0x20,%rsp
  8004218871:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004218875:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004218878:	48 b8 20 07 4e 04 80 	movabs $0x80044e0720,%rax
  800421887f:	00 00 00 
  8004218882:	48 8b 00             	mov    (%rax),%rax
  8004218885:	48 85 c0             	test   %rax,%rax
  8004218888:	74 09                	je     8004218893 <e1000_transmit+0x2a>
  800421888a:	81 7d e4 ee 05 00 00 	cmpl   $0x5ee,-0x1c(%rbp)
  8004218891:	76 0a                	jbe    800421889d <e1000_transmit+0x34>
  8004218893:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  8004218898:	e9 39 01 00 00       	jmpq   80042189d6 <e1000_transmit+0x16d>
  800421889d:	48 b8 20 07 4e 04 80 	movabs $0x80044e0720,%rax
  80042188a4:	00 00 00 
  80042188a7:	48 8b 00             	mov    (%rax),%rax
  80042188aa:	48 05 18 38 00 00    	add    $0x3818,%rax
  80042188b0:	8b 00                	mov    (%rax),%eax
  80042188b2:	89 45 fc             	mov    %eax,-0x4(%rbp)
  80042188b5:	48 b8 30 07 4e 04 80 	movabs $0x80044e0730,%rax
  80042188bc:	00 00 00 
  80042188bf:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042188c2:	48 63 d2             	movslq %edx,%rdx
  80042188c5:	48 c1 e2 04          	shl    $0x4,%rdx
  80042188c9:	48 01 d0             	add    %rdx,%rax
  80042188cc:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  80042188d0:	0f b6 c0             	movzbl %al,%eax
  80042188d3:	83 e0 01             	and    $0x1,%eax
  80042188d6:	85 c0                	test   %eax,%eax
  80042188d8:	75 25                	jne    80042188ff <e1000_transmit+0x96>
  80042188da:	48 bf f4 10 22 04 80 	movabs $0x80042210f4,%rdi
  80042188e1:	00 00 00 
  80042188e4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042188e9:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  80042188f0:	00 00 00 
  80042188f3:	ff d2                	callq  *%rdx
  80042188f5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042188fa:	e9 d7 00 00 00       	jmpq   80042189d6 <e1000_transmit+0x16d>
  80042188ff:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004218902:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218905:	48 98                	cltq   
  8004218907:	48 69 c8 ee 05 00 00 	imul   $0x5ee,%rax,%rcx
  800421890e:	48 b8 40 08 4e 04 80 	movabs $0x80044e0840,%rax
  8004218915:	00 00 00 
  8004218918:	48 01 c1             	add    %rax,%rcx
  800421891b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421891f:	48 89 c6             	mov    %rax,%rsi
  8004218922:	48 89 cf             	mov    %rcx,%rdi
  8004218925:	48 b8 c2 0e 21 04 80 	movabs $0x8004210ec2,%rax
  800421892c:	00 00 00 
  800421892f:	ff d0                	callq  *%rax
  8004218931:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004218934:	48 ba 30 07 4e 04 80 	movabs $0x80044e0730,%rdx
  800421893b:	00 00 00 
  800421893e:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004218941:	48 63 c9             	movslq %ecx,%rcx
  8004218944:	48 c1 e1 04          	shl    $0x4,%rcx
  8004218948:	48 01 ca             	add    %rcx,%rdx
  800421894b:	66 89 42 08          	mov    %ax,0x8(%rdx)
  800421894f:	48 b8 30 07 4e 04 80 	movabs $0x80044e0730,%rax
  8004218956:	00 00 00 
  8004218959:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800421895c:	48 63 d2             	movslq %edx,%rdx
  800421895f:	48 c1 e2 04          	shl    $0x4,%rdx
  8004218963:	48 01 d0             	add    %rdx,%rax
  8004218966:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  800421896a:	83 e0 fe             	and    $0xfffffffe,%eax
  800421896d:	89 c2                	mov    %eax,%edx
  800421896f:	48 b8 30 07 4e 04 80 	movabs $0x80044e0730,%rax
  8004218976:	00 00 00 
  8004218979:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  800421897c:	48 63 c9             	movslq %ecx,%rcx
  800421897f:	48 c1 e1 04          	shl    $0x4,%rcx
  8004218983:	48 01 c8             	add    %rcx,%rax
  8004218986:	88 50 0c             	mov    %dl,0xc(%rax)
  8004218989:	48 b8 30 07 4e 04 80 	movabs $0x80044e0730,%rax
  8004218990:	00 00 00 
  8004218993:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004218996:	48 63 d2             	movslq %edx,%rdx
  8004218999:	48 c1 e2 04          	shl    $0x4,%rdx
  800421899d:	48 01 d0             	add    %rdx,%rax
  80042189a0:	c6 40 0b 09          	movb   $0x9,0xb(%rax)
  80042189a4:	48 b8 20 07 4e 04 80 	movabs $0x80044e0720,%rax
  80042189ab:	00 00 00 
  80042189ae:	48 8b 00             	mov    (%rax),%rax
  80042189b1:	48 8d 88 18 38 00 00 	lea    0x3818(%rax),%rcx
  80042189b8:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042189bb:	8d 50 01             	lea    0x1(%rax),%edx
  80042189be:	89 d0                	mov    %edx,%eax
  80042189c0:	c1 f8 1f             	sar    $0x1f,%eax
  80042189c3:	c1 e8 1c             	shr    $0x1c,%eax
  80042189c6:	01 c2                	add    %eax,%edx
  80042189c8:	83 e2 0f             	and    $0xf,%edx
  80042189cb:	29 c2                	sub    %eax,%edx
  80042189cd:	89 d0                	mov    %edx,%eax
  80042189cf:	89 01                	mov    %eax,(%rcx)
  80042189d1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042189d6:	c9                   	leaveq 
  80042189d7:	c3                   	retq   

00000080042189d8 <e1000_receive>:
  80042189d8:	55                   	push   %rbp
  80042189d9:	48 89 e5             	mov    %rsp,%rbp
  80042189dc:	48 83 ec 20          	sub    $0x20,%rsp
  80042189e0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042189e4:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  80042189e7:	48 b8 20 07 4e 04 80 	movabs $0x80044e0720,%rax
  80042189ee:	00 00 00 
  80042189f1:	48 8b 00             	mov    (%rax),%rax
  80042189f4:	48 85 c0             	test   %rax,%rax
  80042189f7:	75 0a                	jne    8004218a03 <e1000_receive+0x2b>
  80042189f9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042189fe:	e9 59 01 00 00       	jmpq   8004218b5c <e1000_receive+0x184>
  8004218a03:	48 b8 20 07 4e 04 80 	movabs $0x80044e0720,%rax
  8004218a0a:	00 00 00 
  8004218a0d:	48 8b 00             	mov    (%rax),%rax
  8004218a10:	48 05 18 28 00 00    	add    $0x2818,%rax
  8004218a16:	8b 00                	mov    (%rax),%eax
  8004218a18:	8d 48 01             	lea    0x1(%rax),%ecx
  8004218a1b:	ba d3 4d 62 10       	mov    $0x10624dd3,%edx
  8004218a20:	89 c8                	mov    %ecx,%eax
  8004218a22:	f7 e2                	mul    %edx
  8004218a24:	89 d0                	mov    %edx,%eax
  8004218a26:	c1 e8 06             	shr    $0x6,%eax
  8004218a29:	69 c0 e8 03 00 00    	imul   $0x3e8,%eax,%eax
  8004218a2f:	29 c1                	sub    %eax,%ecx
  8004218a31:	89 c8                	mov    %ecx,%eax
  8004218a33:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004218a36:	48 b8 20 67 4e 04 80 	movabs $0x80044e6720,%rax
  8004218a3d:	00 00 00 
  8004218a40:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004218a43:	48 63 d2             	movslq %edx,%rdx
  8004218a46:	48 c1 e2 04          	shl    $0x4,%rdx
  8004218a4a:	48 01 d0             	add    %rdx,%rax
  8004218a4d:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  8004218a51:	0f b6 c0             	movzbl %al,%eax
  8004218a54:	83 e0 01             	and    $0x1,%eax
  8004218a57:	85 c0                	test   %eax,%eax
  8004218a59:	75 0a                	jne    8004218a65 <e1000_receive+0x8d>
  8004218a5b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218a60:	e9 f7 00 00 00       	jmpq   8004218b5c <e1000_receive+0x184>
  8004218a65:	48 b8 20 67 4e 04 80 	movabs $0x80044e6720,%rax
  8004218a6c:	00 00 00 
  8004218a6f:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004218a72:	48 63 d2             	movslq %edx,%rdx
  8004218a75:	48 c1 e2 04          	shl    $0x4,%rdx
  8004218a79:	48 01 d0             	add    %rdx,%rax
  8004218a7c:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  8004218a80:	0f b6 c0             	movzbl %al,%eax
  8004218a83:	83 e0 02             	and    $0x2,%eax
  8004218a86:	85 c0                	test   %eax,%eax
  8004218a88:	75 35                	jne    8004218abf <e1000_receive+0xe7>
  8004218a8a:	48 b9 08 11 22 04 80 	movabs $0x8004221108,%rcx
  8004218a91:	00 00 00 
  8004218a94:	48 ba 32 11 22 04 80 	movabs $0x8004221132,%rdx
  8004218a9b:	00 00 00 
  8004218a9e:	be ef 00 00 00       	mov    $0xef,%esi
  8004218aa3:	48 bf e4 10 22 04 80 	movabs $0x80042210e4,%rdi
  8004218aaa:	00 00 00 
  8004218aad:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218ab2:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004218ab9:	00 00 00 
  8004218abc:	41 ff d0             	callq  *%r8
  8004218abf:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004218ac2:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004218ac5:	48 b8 20 67 4e 04 80 	movabs $0x80044e6720,%rax
  8004218acc:	00 00 00 
  8004218acf:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004218ad2:	48 63 d2             	movslq %edx,%rdx
  8004218ad5:	48 c1 e2 04          	shl    $0x4,%rdx
  8004218ad9:	48 01 d0             	add    %rdx,%rax
  8004218adc:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004218ae0:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
  8004218ae4:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  8004218ae8:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218aeb:	39 c2                	cmp    %eax,%edx
  8004218aed:	0f 46 c2             	cmovbe %edx,%eax
  8004218af0:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004218af3:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004218af6:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218af9:	48 98                	cltq   
  8004218afb:	48 c1 e0 0b          	shl    $0xb,%rax
  8004218aff:	48 89 c1             	mov    %rax,%rcx
  8004218b02:	48 b8 a0 a5 4e 04 80 	movabs $0x80044ea5a0,%rax
  8004218b09:	00 00 00 
  8004218b0c:	48 01 c1             	add    %rax,%rcx
  8004218b0f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218b13:	48 89 ce             	mov    %rcx,%rsi
  8004218b16:	48 89 c7             	mov    %rax,%rdi
  8004218b19:	48 b8 c2 0e 21 04 80 	movabs $0x8004210ec2,%rax
  8004218b20:	00 00 00 
  8004218b23:	ff d0                	callq  *%rax
  8004218b25:	48 b8 20 67 4e 04 80 	movabs $0x80044e6720,%rax
  8004218b2c:	00 00 00 
  8004218b2f:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004218b32:	48 63 d2             	movslq %edx,%rdx
  8004218b35:	48 c1 e2 04          	shl    $0x4,%rdx
  8004218b39:	48 01 d0             	add    %rdx,%rax
  8004218b3c:	c6 40 0c 00          	movb   $0x0,0xc(%rax)
  8004218b40:	48 b8 20 07 4e 04 80 	movabs $0x80044e0720,%rax
  8004218b47:	00 00 00 
  8004218b4a:	48 8b 00             	mov    (%rax),%rax
  8004218b4d:	48 8d 90 18 28 00 00 	lea    0x2818(%rax),%rdx
  8004218b54:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218b57:	89 02                	mov    %eax,(%rdx)
  8004218b59:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004218b5c:	c9                   	leaveq 
  8004218b5d:	c3                   	retq   

0000008004218b5e <pci_conf1_set_addr>:
  8004218b5e:	55                   	push   %rbp
  8004218b5f:	48 89 e5             	mov    %rsp,%rbp
  8004218b62:	48 83 ec 20          	sub    $0x20,%rsp
  8004218b66:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004218b69:	89 75 e8             	mov    %esi,-0x18(%rbp)
  8004218b6c:	89 55 e4             	mov    %edx,-0x1c(%rbp)
  8004218b6f:	89 4d e0             	mov    %ecx,-0x20(%rbp)
  8004218b72:	81 7d ec ff 00 00 00 	cmpl   $0xff,-0x14(%rbp)
  8004218b79:	76 35                	jbe    8004218bb0 <pci_conf1_set_addr+0x52>
  8004218b7b:	48 b9 48 11 22 04 80 	movabs $0x8004221148,%rcx
  8004218b82:	00 00 00 
  8004218b85:	48 ba 52 11 22 04 80 	movabs $0x8004221152,%rdx
  8004218b8c:	00 00 00 
  8004218b8f:	be 31 00 00 00       	mov    $0x31,%esi
  8004218b94:	48 bf 67 11 22 04 80 	movabs $0x8004221167,%rdi
  8004218b9b:	00 00 00 
  8004218b9e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218ba3:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004218baa:	00 00 00 
  8004218bad:	41 ff d0             	callq  *%r8
  8004218bb0:	83 7d e8 1f          	cmpl   $0x1f,-0x18(%rbp)
  8004218bb4:	76 35                	jbe    8004218beb <pci_conf1_set_addr+0x8d>
  8004218bb6:	48 b9 75 11 22 04 80 	movabs $0x8004221175,%rcx
  8004218bbd:	00 00 00 
  8004218bc0:	48 ba 52 11 22 04 80 	movabs $0x8004221152,%rdx
  8004218bc7:	00 00 00 
  8004218bca:	be 32 00 00 00       	mov    $0x32,%esi
  8004218bcf:	48 bf 67 11 22 04 80 	movabs $0x8004221167,%rdi
  8004218bd6:	00 00 00 
  8004218bd9:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218bde:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004218be5:	00 00 00 
  8004218be8:	41 ff d0             	callq  *%r8
  8004218beb:	83 7d e4 07          	cmpl   $0x7,-0x1c(%rbp)
  8004218bef:	76 35                	jbe    8004218c26 <pci_conf1_set_addr+0xc8>
  8004218bf1:	48 b9 7e 11 22 04 80 	movabs $0x800422117e,%rcx
  8004218bf8:	00 00 00 
  8004218bfb:	48 ba 52 11 22 04 80 	movabs $0x8004221152,%rdx
  8004218c02:	00 00 00 
  8004218c05:	be 33 00 00 00       	mov    $0x33,%esi
  8004218c0a:	48 bf 67 11 22 04 80 	movabs $0x8004221167,%rdi
  8004218c11:	00 00 00 
  8004218c14:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218c19:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004218c20:	00 00 00 
  8004218c23:	41 ff d0             	callq  *%r8
  8004218c26:	81 7d e0 ff 00 00 00 	cmpl   $0xff,-0x20(%rbp)
  8004218c2d:	76 35                	jbe    8004218c64 <pci_conf1_set_addr+0x106>
  8004218c2f:	48 b9 87 11 22 04 80 	movabs $0x8004221187,%rcx
  8004218c36:	00 00 00 
  8004218c39:	48 ba 52 11 22 04 80 	movabs $0x8004221152,%rdx
  8004218c40:	00 00 00 
  8004218c43:	be 34 00 00 00       	mov    $0x34,%esi
  8004218c48:	48 bf 67 11 22 04 80 	movabs $0x8004221167,%rdi
  8004218c4f:	00 00 00 
  8004218c52:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218c57:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004218c5e:	00 00 00 
  8004218c61:	41 ff d0             	callq  *%r8
  8004218c64:	8b 45 e0             	mov    -0x20(%rbp),%eax
  8004218c67:	83 e0 03             	and    $0x3,%eax
  8004218c6a:	85 c0                	test   %eax,%eax
  8004218c6c:	74 35                	je     8004218ca3 <pci_conf1_set_addr+0x145>
  8004218c6e:	48 b9 94 11 22 04 80 	movabs $0x8004221194,%rcx
  8004218c75:	00 00 00 
  8004218c78:	48 ba 52 11 22 04 80 	movabs $0x8004221152,%rdx
  8004218c7f:	00 00 00 
  8004218c82:	be 35 00 00 00       	mov    $0x35,%esi
  8004218c87:	48 bf 67 11 22 04 80 	movabs $0x8004221167,%rdi
  8004218c8e:	00 00 00 
  8004218c91:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218c96:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004218c9d:	00 00 00 
  8004218ca0:	41 ff d0             	callq  *%r8
  8004218ca3:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004218ca6:	c1 e0 10             	shl    $0x10,%eax
  8004218ca9:	89 c2                	mov    %eax,%edx
  8004218cab:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004218cae:	c1 e0 0b             	shl    $0xb,%eax
  8004218cb1:	09 c2                	or     %eax,%edx
  8004218cb3:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004218cb6:	c1 e0 08             	shl    $0x8,%eax
  8004218cb9:	09 d0                	or     %edx,%eax
  8004218cbb:	0b 45 e0             	or     -0x20(%rbp),%eax
  8004218cbe:	0d 00 00 00 80       	or     $0x80000000,%eax
  8004218cc3:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004218cc6:	48 b8 e4 57 23 04 80 	movabs $0x80042357e4,%rax
  8004218ccd:	00 00 00 
  8004218cd0:	8b 00                	mov    (%rax),%eax
  8004218cd2:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004218cd5:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218cd8:	89 45 f4             	mov    %eax,-0xc(%rbp)
}

static __inline void
outl(int port, uint32_t data)
{
	__asm __volatile("outl %0,%w1" : : "a" (data), "d" (port));
  8004218cdb:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004218cde:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004218ce1:	ef                   	out    %eax,(%dx)
  8004218ce2:	c9                   	leaveq 
  8004218ce3:	c3                   	retq   

0000008004218ce4 <pci_conf_read>:
  8004218ce4:	55                   	push   %rbp
  8004218ce5:	48 89 e5             	mov    %rsp,%rbp
  8004218ce8:	48 83 ec 20          	sub    $0x20,%rsp
  8004218cec:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004218cf0:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004218cf3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218cf7:	8b 50 0c             	mov    0xc(%rax),%edx
  8004218cfa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218cfe:	8b 70 08             	mov    0x8(%rax),%esi
  8004218d01:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218d05:	48 8b 00             	mov    (%rax),%rax
  8004218d08:	8b 40 08             	mov    0x8(%rax),%eax
  8004218d0b:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  8004218d0e:	89 c7                	mov    %eax,%edi
  8004218d10:	48 b8 5e 8b 21 04 80 	movabs $0x8004218b5e,%rax
  8004218d17:	00 00 00 
  8004218d1a:	ff d0                	callq  *%rax
  8004218d1c:	48 b8 e8 57 23 04 80 	movabs $0x80042357e8,%rax
  8004218d23:	00 00 00 
  8004218d26:	8b 00                	mov    (%rax),%eax
  8004218d28:	89 45 fc             	mov    %eax,-0x4(%rbp)

static __inline uint32_t
inl(int port)
{
	uint32_t data;
	__asm __volatile("inl %w1,%0" : "=a" (data) : "d" (port));
  8004218d2b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218d2e:	89 c2                	mov    %eax,%edx
  8004218d30:	ed                   	in     (%dx),%eax
  8004218d31:	89 45 f8             	mov    %eax,-0x8(%rbp)
	return data;
  8004218d34:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218d37:	c9                   	leaveq 
  8004218d38:	c3                   	retq   

0000008004218d39 <pci_conf_write>:
  8004218d39:	55                   	push   %rbp
  8004218d3a:	48 89 e5             	mov    %rsp,%rbp
  8004218d3d:	48 83 ec 20          	sub    $0x20,%rsp
  8004218d41:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004218d45:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004218d48:	89 55 e0             	mov    %edx,-0x20(%rbp)
  8004218d4b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218d4f:	8b 50 0c             	mov    0xc(%rax),%edx
  8004218d52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218d56:	8b 70 08             	mov    0x8(%rax),%esi
  8004218d59:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218d5d:	48 8b 00             	mov    (%rax),%rax
  8004218d60:	8b 40 08             	mov    0x8(%rax),%eax
  8004218d63:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  8004218d66:	89 c7                	mov    %eax,%edi
  8004218d68:	48 b8 5e 8b 21 04 80 	movabs $0x8004218b5e,%rax
  8004218d6f:	00 00 00 
  8004218d72:	ff d0                	callq  *%rax
  8004218d74:	48 b8 e8 57 23 04 80 	movabs $0x80042357e8,%rax
  8004218d7b:	00 00 00 
  8004218d7e:	8b 00                	mov    (%rax),%eax
  8004218d80:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004218d83:	8b 45 e0             	mov    -0x20(%rbp),%eax
  8004218d86:	89 45 f8             	mov    %eax,-0x8(%rbp)
}

static __inline void
outl(int port, uint32_t data)
{
	__asm __volatile("outl %0,%w1" : : "a" (data), "d" (port));
  8004218d89:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218d8c:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004218d8f:	ef                   	out    %eax,(%dx)
  8004218d90:	c9                   	leaveq 
  8004218d91:	c3                   	retq   

0000008004218d92 <pci_attach_match>:
  8004218d92:	55                   	push   %rbp
  8004218d93:	48 89 e5             	mov    %rsp,%rbp
  8004218d96:	48 83 ec 30          	sub    $0x30,%rsp
  8004218d9a:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004218d9d:	89 75 e8             	mov    %esi,-0x18(%rbp)
  8004218da0:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  8004218da4:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
  8004218da8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004218daf:	e9 aa 00 00 00       	jmpq   8004218e5e <pci_attach_match+0xcc>
  8004218db4:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218db7:	48 c1 e0 04          	shl    $0x4,%rax
  8004218dbb:	48 89 c2             	mov    %rax,%rdx
  8004218dbe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218dc2:	48 01 d0             	add    %rdx,%rax
  8004218dc5:	8b 00                	mov    (%rax),%eax
  8004218dc7:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  8004218dca:	0f 85 8a 00 00 00    	jne    8004218e5a <pci_attach_match+0xc8>
  8004218dd0:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218dd3:	48 c1 e0 04          	shl    $0x4,%rax
  8004218dd7:	48 89 c2             	mov    %rax,%rdx
  8004218dda:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218dde:	48 01 d0             	add    %rdx,%rax
  8004218de1:	8b 40 04             	mov    0x4(%rax),%eax
  8004218de4:	3b 45 e8             	cmp    -0x18(%rbp),%eax
  8004218de7:	75 71                	jne    8004218e5a <pci_attach_match+0xc8>
  8004218de9:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218dec:	48 c1 e0 04          	shl    $0x4,%rax
  8004218df0:	48 89 c2             	mov    %rax,%rdx
  8004218df3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218df7:	48 01 d0             	add    %rdx,%rax
  8004218dfa:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004218dfe:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004218e02:	48 89 d7             	mov    %rdx,%rdi
  8004218e05:	ff d0                	callq  *%rax
  8004218e07:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004218e0a:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  8004218e0e:	7e 05                	jle    8004218e15 <pci_attach_match+0x83>
  8004218e10:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218e13:	eb 6c                	jmp    8004218e81 <pci_attach_match+0xef>
  8004218e15:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  8004218e19:	79 3f                	jns    8004218e5a <pci_attach_match+0xc8>
  8004218e1b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218e1e:	48 c1 e0 04          	shl    $0x4,%rax
  8004218e22:	48 89 c2             	mov    %rax,%rdx
  8004218e25:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218e29:	48 01 d0             	add    %rdx,%rax
  8004218e2c:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004218e30:	8b 75 f8             	mov    -0x8(%rbp),%esi
  8004218e33:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004218e36:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004218e39:	41 89 f0             	mov    %esi,%r8d
  8004218e3c:	89 c6                	mov    %eax,%esi
  8004218e3e:	48 bf a8 11 22 04 80 	movabs $0x80042211a8,%rdi
  8004218e45:	00 00 00 
  8004218e48:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218e4d:	49 b9 83 9c 20 04 80 	movabs $0x8004209c83,%r9
  8004218e54:	00 00 00 
  8004218e57:	41 ff d1             	callq  *%r9
  8004218e5a:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004218e5e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218e61:	48 c1 e0 04          	shl    $0x4,%rax
  8004218e65:	48 89 c2             	mov    %rax,%rdx
  8004218e68:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218e6c:	48 01 d0             	add    %rdx,%rax
  8004218e6f:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004218e73:	48 85 c0             	test   %rax,%rax
  8004218e76:	0f 85 38 ff ff ff    	jne    8004218db4 <pci_attach_match+0x22>
  8004218e7c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218e81:	c9                   	leaveq 
  8004218e82:	c3                   	retq   

0000008004218e83 <pci_attach>:
  8004218e83:	55                   	push   %rbp
  8004218e84:	48 89 e5             	mov    %rsp,%rbp
  8004218e87:	48 83 ec 10          	sub    $0x10,%rsp
  8004218e8b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004218e8f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004218e93:	8b 40 14             	mov    0x14(%rax),%eax
  8004218e96:	c1 e8 10             	shr    $0x10,%eax
  8004218e99:	0f b6 c0             	movzbl %al,%eax
  8004218e9c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004218ea0:	8b 52 14             	mov    0x14(%rdx),%edx
  8004218ea3:	89 d7                	mov    %edx,%edi
  8004218ea5:	c1 ef 18             	shr    $0x18,%edi
  8004218ea8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004218eac:	48 89 d1             	mov    %rdx,%rcx
  8004218eaf:	48 ba 00 58 23 04 80 	movabs $0x8004235800,%rdx
  8004218eb6:	00 00 00 
  8004218eb9:	89 c6                	mov    %eax,%esi
  8004218ebb:	48 b8 92 8d 21 04 80 	movabs $0x8004218d92,%rax
  8004218ec2:	00 00 00 
  8004218ec5:	ff d0                	callq  *%rax
  8004218ec7:	85 c0                	test   %eax,%eax
  8004218ec9:	75 39                	jne    8004218f04 <pci_attach+0x81>
  8004218ecb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004218ecf:	8b 40 10             	mov    0x10(%rax),%eax
  8004218ed2:	c1 e8 10             	shr    $0x10,%eax
  8004218ed5:	89 c6                	mov    %eax,%esi
  8004218ed7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004218edb:	8b 40 10             	mov    0x10(%rax),%eax
  8004218ede:	0f b7 c0             	movzwl %ax,%eax
  8004218ee1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004218ee5:	48 89 d1             	mov    %rdx,%rcx
  8004218ee8:	48 ba 20 58 23 04 80 	movabs $0x8004235820,%rdx
  8004218eef:	00 00 00 
  8004218ef2:	89 c7                	mov    %eax,%edi
  8004218ef4:	48 b8 92 8d 21 04 80 	movabs $0x8004218d92,%rax
  8004218efb:	00 00 00 
  8004218efe:	ff d0                	callq  *%rax
  8004218f00:	85 c0                	test   %eax,%eax
  8004218f02:	74 07                	je     8004218f0b <pci_attach+0x88>
  8004218f04:	b8 01 00 00 00       	mov    $0x1,%eax
  8004218f09:	eb 05                	jmp    8004218f10 <pci_attach+0x8d>
  8004218f0b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218f10:	c9                   	leaveq 
  8004218f11:	c3                   	retq   

0000008004218f12 <pci_print_func>:
  8004218f12:	55                   	push   %rbp
  8004218f13:	48 89 e5             	mov    %rsp,%rbp
  8004218f16:	48 83 ec 40          	sub    $0x40,%rsp
  8004218f1a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004218f1e:	48 b8 40 58 23 04 80 	movabs $0x8004235840,%rax
  8004218f25:	00 00 00 
  8004218f28:	48 8b 00             	mov    (%rax),%rax
  8004218f2b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004218f2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218f33:	8b 40 14             	mov    0x14(%rax),%eax
  8004218f36:	c1 e8 18             	shr    $0x18,%eax
  8004218f39:	83 f8 06             	cmp    $0x6,%eax
  8004218f3c:	77 20                	ja     8004218f5e <pci_print_func+0x4c>
  8004218f3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218f42:	8b 40 14             	mov    0x14(%rax),%eax
  8004218f45:	c1 e8 18             	shr    $0x18,%eax
  8004218f48:	89 c2                	mov    %eax,%edx
  8004218f4a:	48 b8 40 58 23 04 80 	movabs $0x8004235840,%rax
  8004218f51:	00 00 00 
  8004218f54:	89 d2                	mov    %edx,%edx
  8004218f56:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004218f5a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004218f5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218f62:	0f b6 40 48          	movzbl 0x48(%rax),%eax
  8004218f66:	0f b6 f8             	movzbl %al,%edi
  8004218f69:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218f6d:	8b 40 14             	mov    0x14(%rax),%eax
  8004218f70:	c1 e8 10             	shr    $0x10,%eax
  8004218f73:	0f b6 f0             	movzbl %al,%esi
  8004218f76:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218f7a:	8b 40 14             	mov    0x14(%rax),%eax
  8004218f7d:	c1 e8 18             	shr    $0x18,%eax
  8004218f80:	41 89 c1             	mov    %eax,%r9d
  8004218f83:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218f87:	8b 40 10             	mov    0x10(%rax),%eax
  8004218f8a:	c1 e8 10             	shr    $0x10,%eax
  8004218f8d:	41 89 c2             	mov    %eax,%r10d
  8004218f90:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218f94:	8b 40 10             	mov    0x10(%rax),%eax
  8004218f97:	44 0f b7 c0          	movzwl %ax,%r8d
  8004218f9b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218f9f:	8b 48 0c             	mov    0xc(%rax),%ecx
  8004218fa2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218fa6:	8b 50 08             	mov    0x8(%rax),%edx
  8004218fa9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218fad:	48 8b 00             	mov    (%rax),%rax
  8004218fb0:	8b 40 08             	mov    0x8(%rax),%eax
  8004218fb3:	89 7c 24 18          	mov    %edi,0x18(%rsp)
  8004218fb7:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  8004218fbb:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  8004218fc0:	89 74 24 08          	mov    %esi,0x8(%rsp)
  8004218fc4:	44 89 0c 24          	mov    %r9d,(%rsp)
  8004218fc8:	45 89 d1             	mov    %r10d,%r9d
  8004218fcb:	89 c6                	mov    %eax,%esi
  8004218fcd:	48 bf 48 12 22 04 80 	movabs $0x8004221248,%rdi
  8004218fd4:	00 00 00 
  8004218fd7:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218fdc:	49 ba 83 9c 20 04 80 	movabs $0x8004209c83,%r10
  8004218fe3:	00 00 00 
  8004218fe6:	41 ff d2             	callq  *%r10
  8004218fe9:	c9                   	leaveq 
  8004218fea:	c3                   	retq   

0000008004218feb <pci_scan_bus>:
  8004218feb:	55                   	push   %rbp
  8004218fec:	48 89 e5             	mov    %rsp,%rbp
  8004218fef:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  8004218ff6:	48 89 bd f8 fe ff ff 	mov    %rdi,-0x108(%rbp)
  8004218ffd:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004219004:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004219008:	ba 50 00 00 00       	mov    $0x50,%edx
  800421900d:	be 00 00 00 00       	mov    $0x0,%esi
  8004219012:	48 89 c7             	mov    %rax,%rdi
  8004219015:	48 b8 37 0e 21 04 80 	movabs $0x8004210e37,%rax
  800421901c:	00 00 00 
  800421901f:	ff d0                	callq  *%rax
  8004219021:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  8004219028:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  800421902c:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%rbp)
  8004219033:	e9 22 02 00 00       	jmpq   800421925a <pci_scan_bus+0x26f>
  8004219038:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421903c:	be 0c 00 00 00       	mov    $0xc,%esi
  8004219041:	48 89 c7             	mov    %rax,%rdi
  8004219044:	48 b8 e4 8c 21 04 80 	movabs $0x8004218ce4,%rax
  800421904b:	00 00 00 
  800421904e:	ff d0                	callq  *%rax
  8004219050:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004219053:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004219056:	c1 e8 10             	shr    $0x10,%eax
  8004219059:	83 e0 7f             	and    $0x7f,%eax
  800421905c:	83 f8 01             	cmp    $0x1,%eax
  800421905f:	0f 87 ec 01 00 00    	ja     8004219251 <pci_scan_bus+0x266>
  8004219065:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004219069:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421906d:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  8004219074:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004219078:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
  800421907f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004219083:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  800421908a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421908e:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
  8004219095:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004219099:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  80042190a0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042190a4:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  80042190ab:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042190af:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  80042190b6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042190ba:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  80042190c1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042190c5:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  80042190cc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042190d0:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  80042190d7:	c7 85 0c ff ff ff 00 	movl   $0x0,-0xf4(%rbp)
  80042190de:	00 00 00 
  80042190e1:	e9 45 01 00 00       	jmpq   800421922b <pci_scan_bus+0x240>
  80042190e6:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  80042190ed:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  80042190f4:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  80042190fb:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  8004219102:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  8004219109:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  8004219110:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  8004219117:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  800421911e:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  8004219125:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  800421912c:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004219133:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  800421913a:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  8004219141:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  8004219145:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  800421914c:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  8004219150:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  8004219157:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  800421915b:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004219162:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  8004219166:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
  800421916d:	be 00 00 00 00       	mov    $0x0,%esi
  8004219172:	48 89 c7             	mov    %rax,%rdi
  8004219175:	48 b8 e4 8c 21 04 80 	movabs $0x8004218ce4,%rax
  800421917c:	00 00 00 
  800421917f:	ff d0                	callq  *%rax
  8004219181:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%rbp)
  8004219187:	8b 85 60 ff ff ff    	mov    -0xa0(%rbp),%eax
  800421918d:	0f b7 c0             	movzwl %ax,%eax
  8004219190:	3d ff ff 00 00       	cmp    $0xffff,%eax
  8004219195:	0f 84 81 00 00 00    	je     800421921c <pci_scan_bus+0x231>
  800421919b:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  80042191a2:	be 3c 00 00 00       	mov    $0x3c,%esi
  80042191a7:	48 89 c7             	mov    %rax,%rdi
  80042191aa:	48 b8 e4 8c 21 04 80 	movabs $0x8004218ce4,%rax
  80042191b1:	00 00 00 
  80042191b4:	ff d0                	callq  *%rax
  80042191b6:	89 45 f4             	mov    %eax,-0xc(%rbp)
  80042191b9:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042191bc:	88 45 98             	mov    %al,-0x68(%rbp)
  80042191bf:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  80042191c6:	be 08 00 00 00       	mov    $0x8,%esi
  80042191cb:	48 89 c7             	mov    %rax,%rdi
  80042191ce:	48 b8 e4 8c 21 04 80 	movabs $0x8004218ce4,%rax
  80042191d5:	00 00 00 
  80042191d8:	ff d0                	callq  *%rax
  80042191da:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%rbp)
  80042191e0:	48 b8 e0 57 23 04 80 	movabs $0x80042357e0,%rax
  80042191e7:	00 00 00 
  80042191ea:	8b 00                	mov    (%rax),%eax
  80042191ec:	85 c0                	test   %eax,%eax
  80042191ee:	74 16                	je     8004219206 <pci_scan_bus+0x21b>
  80042191f0:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  80042191f7:	48 89 c7             	mov    %rax,%rdi
  80042191fa:	48 b8 12 8f 21 04 80 	movabs $0x8004218f12,%rax
  8004219201:	00 00 00 
  8004219204:	ff d0                	callq  *%rax
  8004219206:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800421920d:	48 89 c7             	mov    %rax,%rdi
  8004219210:	48 b8 83 8e 21 04 80 	movabs $0x8004218e83,%rax
  8004219217:	00 00 00 
  800421921a:	ff d0                	callq  *%rax
  800421921c:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  8004219222:	83 c0 01             	add    $0x1,%eax
  8004219225:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
  800421922b:	8b 95 0c ff ff ff    	mov    -0xf4(%rbp),%edx
  8004219231:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004219234:	25 00 00 80 00       	and    $0x800000,%eax
  8004219239:	85 c0                	test   %eax,%eax
  800421923b:	74 07                	je     8004219244 <pci_scan_bus+0x259>
  800421923d:	b8 08 00 00 00       	mov    $0x8,%eax
  8004219242:	eb 05                	jmp    8004219249 <pci_scan_bus+0x25e>
  8004219244:	b8 01 00 00 00       	mov    $0x1,%eax
  8004219249:	39 c2                	cmp    %eax,%edx
  800421924b:	0f 82 95 fe ff ff    	jb     80042190e6 <pci_scan_bus+0xfb>
  8004219251:	8b 45 a8             	mov    -0x58(%rbp),%eax
  8004219254:	83 c0 01             	add    $0x1,%eax
  8004219257:	89 45 a8             	mov    %eax,-0x58(%rbp)
  800421925a:	8b 45 a8             	mov    -0x58(%rbp),%eax
  800421925d:	83 f8 1f             	cmp    $0x1f,%eax
  8004219260:	0f 86 d2 fd ff ff    	jbe    8004219038 <pci_scan_bus+0x4d>
  8004219266:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004219269:	c9                   	leaveq 
  800421926a:	c3                   	retq   

000000800421926b <pci_bridge_attach>:
  800421926b:	55                   	push   %rbp
  800421926c:	48 89 e5             	mov    %rsp,%rbp
  800421926f:	48 83 ec 30          	sub    $0x30,%rsp
  8004219273:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004219277:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421927b:	be 1c 00 00 00       	mov    $0x1c,%esi
  8004219280:	48 89 c7             	mov    %rax,%rdi
  8004219283:	48 b8 e4 8c 21 04 80 	movabs $0x8004218ce4,%rax
  800421928a:	00 00 00 
  800421928d:	ff d0                	callq  *%rax
  800421928f:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004219292:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219296:	be 18 00 00 00       	mov    $0x18,%esi
  800421929b:	48 89 c7             	mov    %rax,%rdi
  800421929e:	48 b8 e4 8c 21 04 80 	movabs $0x8004218ce4,%rax
  80042192a5:	00 00 00 
  80042192a8:	ff d0                	callq  *%rax
  80042192aa:	89 45 f8             	mov    %eax,-0x8(%rbp)
  80042192ad:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042192b0:	83 e0 0f             	and    $0xf,%eax
  80042192b3:	83 f8 01             	cmp    $0x1,%eax
  80042192b6:	75 40                	jne    80042192f8 <pci_bridge_attach+0x8d>
  80042192b8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042192bc:	8b 48 0c             	mov    0xc(%rax),%ecx
  80042192bf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042192c3:	8b 50 08             	mov    0x8(%rax),%edx
  80042192c6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042192ca:	48 8b 00             	mov    (%rax),%rax
  80042192cd:	8b 40 08             	mov    0x8(%rax),%eax
  80042192d0:	89 c6                	mov    %eax,%esi
  80042192d2:	48 bf 88 12 22 04 80 	movabs $0x8004221288,%rdi
  80042192d9:	00 00 00 
  80042192dc:	b8 00 00 00 00       	mov    $0x0,%eax
  80042192e1:	49 b8 83 9c 20 04 80 	movabs $0x8004209c83,%r8
  80042192e8:	00 00 00 
  80042192eb:	41 ff d0             	callq  *%r8
  80042192ee:	b8 00 00 00 00       	mov    $0x0,%eax
  80042192f3:	e9 a1 00 00 00       	jmpq   8004219399 <pci_bridge_attach+0x12e>
  80042192f8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  80042192fc:	ba 10 00 00 00       	mov    $0x10,%edx
  8004219301:	be 00 00 00 00       	mov    $0x0,%esi
  8004219306:	48 89 c7             	mov    %rax,%rdi
  8004219309:	48 b8 37 0e 21 04 80 	movabs $0x8004210e37,%rax
  8004219310:	00 00 00 
  8004219313:	ff d0                	callq  *%rax
  8004219315:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219319:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421931d:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004219320:	c1 e8 08             	shr    $0x8,%eax
  8004219323:	0f b6 c0             	movzbl %al,%eax
  8004219326:	89 45 e8             	mov    %eax,-0x18(%rbp)
  8004219329:	48 b8 e0 57 23 04 80 	movabs $0x80042357e0,%rax
  8004219330:	00 00 00 
  8004219333:	8b 00                	mov    (%rax),%eax
  8004219335:	85 c0                	test   %eax,%eax
  8004219337:	74 48                	je     8004219381 <pci_bridge_attach+0x116>
  8004219339:	8b 45 f8             	mov    -0x8(%rbp),%eax
  800421933c:	c1 e8 10             	shr    $0x10,%eax
  800421933f:	0f b6 f8             	movzbl %al,%edi
  8004219342:	8b 75 e8             	mov    -0x18(%rbp),%esi
  8004219345:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219349:	8b 48 0c             	mov    0xc(%rax),%ecx
  800421934c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219350:	8b 50 08             	mov    0x8(%rax),%edx
  8004219353:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219357:	48 8b 00             	mov    (%rax),%rax
  800421935a:	8b 40 08             	mov    0x8(%rax),%eax
  800421935d:	41 89 f9             	mov    %edi,%r9d
  8004219360:	41 89 f0             	mov    %esi,%r8d
  8004219363:	89 c6                	mov    %eax,%esi
  8004219365:	48 bf c0 12 22 04 80 	movabs $0x80042212c0,%rdi
  800421936c:	00 00 00 
  800421936f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219374:	49 ba 83 9c 20 04 80 	movabs $0x8004209c83,%r10
  800421937b:	00 00 00 
  800421937e:	41 ff d2             	callq  *%r10
  8004219381:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004219385:	48 89 c7             	mov    %rax,%rdi
  8004219388:	48 b8 eb 8f 21 04 80 	movabs $0x8004218feb,%rax
  800421938f:	00 00 00 
  8004219392:	ff d0                	callq  *%rax
  8004219394:	b8 01 00 00 00       	mov    $0x1,%eax
  8004219399:	c9                   	leaveq 
  800421939a:	c3                   	retq   

000000800421939b <pci_func_enable>:
  800421939b:	55                   	push   %rbp
  800421939c:	48 89 e5             	mov    %rsp,%rbp
  800421939f:	48 83 ec 40          	sub    $0x40,%rsp
  80042193a3:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042193a7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042193ab:	ba 07 00 00 00       	mov    $0x7,%edx
  80042193b0:	be 04 00 00 00       	mov    $0x4,%esi
  80042193b5:	48 89 c7             	mov    %rax,%rdi
  80042193b8:	48 b8 39 8d 21 04 80 	movabs $0x8004218d39,%rax
  80042193bf:	00 00 00 
  80042193c2:	ff d0                	callq  *%rax
  80042193c4:	c7 45 f8 10 00 00 00 	movl   $0x10,-0x8(%rbp)
  80042193cb:	e9 ee 01 00 00       	jmpq   80042195be <pci_func_enable+0x223>
  80042193d0:	8b 55 f8             	mov    -0x8(%rbp),%edx
  80042193d3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042193d7:	89 d6                	mov    %edx,%esi
  80042193d9:	48 89 c7             	mov    %rax,%rdi
  80042193dc:	48 b8 e4 8c 21 04 80 	movabs $0x8004218ce4,%rax
  80042193e3:	00 00 00 
  80042193e6:	ff d0                	callq  *%rax
  80042193e8:	89 45 ec             	mov    %eax,-0x14(%rbp)
  80042193eb:	c7 45 fc 04 00 00 00 	movl   $0x4,-0x4(%rbp)
  80042193f2:	8b 4d f8             	mov    -0x8(%rbp),%ecx
  80042193f5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042193f9:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  80042193fe:	89 ce                	mov    %ecx,%esi
  8004219400:	48 89 c7             	mov    %rax,%rdi
  8004219403:	48 b8 39 8d 21 04 80 	movabs $0x8004218d39,%rax
  800421940a:	00 00 00 
  800421940d:	ff d0                	callq  *%rax
  800421940f:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004219412:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219416:	89 d6                	mov    %edx,%esi
  8004219418:	48 89 c7             	mov    %rax,%rdi
  800421941b:	48 b8 e4 8c 21 04 80 	movabs $0x8004218ce4,%rax
  8004219422:	00 00 00 
  8004219425:	ff d0                	callq  *%rax
  8004219427:	89 45 e8             	mov    %eax,-0x18(%rbp)
  800421942a:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)
  800421942e:	75 05                	jne    8004219435 <pci_func_enable+0x9a>
  8004219430:	e9 83 01 00 00       	jmpq   80042195b8 <pci_func_enable+0x21d>
  8004219435:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004219438:	83 e8 10             	sub    $0x10,%eax
  800421943b:	c1 e8 02             	shr    $0x2,%eax
  800421943e:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004219441:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004219444:	83 e0 01             	and    $0x1,%eax
  8004219447:	85 c0                	test   %eax,%eax
  8004219449:	75 65                	jne    80042194b0 <pci_func_enable+0x115>
  800421944b:	8b 45 e8             	mov    -0x18(%rbp),%eax
  800421944e:	83 e0 06             	and    $0x6,%eax
  8004219451:	83 f8 04             	cmp    $0x4,%eax
  8004219454:	75 07                	jne    800421945d <pci_func_enable+0xc2>
  8004219456:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%rbp)
  800421945d:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004219460:	83 e0 f0             	and    $0xfffffff0,%eax
  8004219463:	f7 d8                	neg    %eax
  8004219465:	23 45 e8             	and    -0x18(%rbp),%eax
  8004219468:	83 e0 f0             	and    $0xfffffff0,%eax
  800421946b:	89 45 f0             	mov    %eax,-0x10(%rbp)
  800421946e:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004219471:	83 e0 f0             	and    $0xfffffff0,%eax
  8004219474:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004219477:	48 b8 a0 e5 6d 04 80 	movabs $0x80046de5a0,%rax
  800421947e:	00 00 00 
  8004219481:	8b 00                	mov    (%rax),%eax
  8004219483:	85 c0                	test   %eax,%eax
  8004219485:	74 7a                	je     8004219501 <pci_func_enable+0x166>
  8004219487:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  800421948a:	8b 55 f0             	mov    -0x10(%rbp),%edx
  800421948d:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004219490:	89 c6                	mov    %eax,%esi
  8004219492:	48 bf f0 12 22 04 80 	movabs $0x80042212f0,%rdi
  8004219499:	00 00 00 
  800421949c:	b8 00 00 00 00       	mov    $0x0,%eax
  80042194a1:	49 b8 83 9c 20 04 80 	movabs $0x8004209c83,%r8
  80042194a8:	00 00 00 
  80042194ab:	41 ff d0             	callq  *%r8
  80042194ae:	eb 51                	jmp    8004219501 <pci_func_enable+0x166>
  80042194b0:	8b 45 e8             	mov    -0x18(%rbp),%eax
  80042194b3:	83 e0 fc             	and    $0xfffffffc,%eax
  80042194b6:	f7 d8                	neg    %eax
  80042194b8:	23 45 e8             	and    -0x18(%rbp),%eax
  80042194bb:	83 e0 fc             	and    $0xfffffffc,%eax
  80042194be:	89 45 f0             	mov    %eax,-0x10(%rbp)
  80042194c1:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042194c4:	83 e0 fc             	and    $0xfffffffc,%eax
  80042194c7:	89 45 f4             	mov    %eax,-0xc(%rbp)
  80042194ca:	48 b8 a0 e5 6d 04 80 	movabs $0x80046de5a0,%rax
  80042194d1:	00 00 00 
  80042194d4:	8b 00                	mov    (%rax),%eax
  80042194d6:	85 c0                	test   %eax,%eax
  80042194d8:	74 27                	je     8004219501 <pci_func_enable+0x166>
  80042194da:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  80042194dd:	8b 55 f0             	mov    -0x10(%rbp),%edx
  80042194e0:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042194e3:	89 c6                	mov    %eax,%esi
  80042194e5:	48 bf 18 13 22 04 80 	movabs $0x8004221318,%rdi
  80042194ec:	00 00 00 
  80042194ef:	b8 00 00 00 00       	mov    $0x0,%eax
  80042194f4:	49 b8 83 9c 20 04 80 	movabs $0x8004209c83,%r8
  80042194fb:	00 00 00 
  80042194fe:	41 ff d0             	callq  *%r8
  8004219501:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004219504:	8b 4d f8             	mov    -0x8(%rbp),%ecx
  8004219507:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421950b:	89 ce                	mov    %ecx,%esi
  800421950d:	48 89 c7             	mov    %rax,%rdi
  8004219510:	48 b8 39 8d 21 04 80 	movabs $0x8004218d39,%rax
  8004219517:	00 00 00 
  800421951a:	ff d0                	callq  *%rax
  800421951c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219520:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004219523:	48 63 d2             	movslq %edx,%rdx
  8004219526:	48 8d 4a 04          	lea    0x4(%rdx),%rcx
  800421952a:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421952d:	89 54 88 08          	mov    %edx,0x8(%rax,%rcx,4)
  8004219531:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219535:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004219538:	48 63 d2             	movslq %edx,%rdx
  800421953b:	48 8d 4a 0c          	lea    0xc(%rdx),%rcx
  800421953f:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004219542:	89 14 88             	mov    %edx,(%rax,%rcx,4)
  8004219545:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  8004219549:	74 6d                	je     80042195b8 <pci_func_enable+0x21d>
  800421954b:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  800421954f:	75 67                	jne    80042195b8 <pci_func_enable+0x21d>
  8004219551:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219555:	8b 40 10             	mov    0x10(%rax),%eax
  8004219558:	c1 e8 10             	shr    $0x10,%eax
  800421955b:	41 89 c0             	mov    %eax,%r8d
  800421955e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219562:	8b 40 10             	mov    0x10(%rax),%eax
  8004219565:	0f b7 f8             	movzwl %ax,%edi
  8004219568:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421956c:	8b 48 0c             	mov    0xc(%rax),%ecx
  800421956f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219573:	8b 50 08             	mov    0x8(%rax),%edx
  8004219576:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421957a:	48 8b 00             	mov    (%rax),%rax
  800421957d:	8b 40 08             	mov    0x8(%rax),%eax
  8004219580:	8b 75 f0             	mov    -0x10(%rbp),%esi
  8004219583:	89 74 24 10          	mov    %esi,0x10(%rsp)
  8004219587:	8b 75 f4             	mov    -0xc(%rbp),%esi
  800421958a:	89 74 24 08          	mov    %esi,0x8(%rsp)
  800421958e:	8b 75 e4             	mov    -0x1c(%rbp),%esi
  8004219591:	89 34 24             	mov    %esi,(%rsp)
  8004219594:	45 89 c1             	mov    %r8d,%r9d
  8004219597:	41 89 f8             	mov    %edi,%r8d
  800421959a:	89 c6                	mov    %eax,%esi
  800421959c:	48 bf 40 13 22 04 80 	movabs $0x8004221340,%rdi
  80042195a3:	00 00 00 
  80042195a6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042195ab:	49 ba 83 9c 20 04 80 	movabs $0x8004209c83,%r10
  80042195b2:	00 00 00 
  80042195b5:	41 ff d2             	callq  *%r10
  80042195b8:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042195bb:	01 45 f8             	add    %eax,-0x8(%rbp)
  80042195be:	83 7d f8 27          	cmpl   $0x27,-0x8(%rbp)
  80042195c2:	0f 86 08 fe ff ff    	jbe    80042193d0 <pci_func_enable+0x35>
  80042195c8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042195cc:	8b 40 10             	mov    0x10(%rax),%eax
  80042195cf:	c1 e8 10             	shr    $0x10,%eax
  80042195d2:	89 c7                	mov    %eax,%edi
  80042195d4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042195d8:	8b 40 10             	mov    0x10(%rax),%eax
  80042195db:	0f b7 f0             	movzwl %ax,%esi
  80042195de:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042195e2:	8b 48 0c             	mov    0xc(%rax),%ecx
  80042195e5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042195e9:	8b 50 08             	mov    0x8(%rax),%edx
  80042195ec:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042195f0:	48 8b 00             	mov    (%rax),%rax
  80042195f3:	8b 40 08             	mov    0x8(%rax),%eax
  80042195f6:	41 89 f9             	mov    %edi,%r9d
  80042195f9:	41 89 f0             	mov    %esi,%r8d
  80042195fc:	89 c6                	mov    %eax,%esi
  80042195fe:	48 bf a0 13 22 04 80 	movabs $0x80042213a0,%rdi
  8004219605:	00 00 00 
  8004219608:	b8 00 00 00 00       	mov    $0x0,%eax
  800421960d:	49 ba 83 9c 20 04 80 	movabs $0x8004209c83,%r10
  8004219614:	00 00 00 
  8004219617:	41 ff d2             	callq  *%r10
  800421961a:	c9                   	leaveq 
  800421961b:	c3                   	retq   

000000800421961c <pci_init>:
  800421961c:	55                   	push   %rbp
  800421961d:	48 89 e5             	mov    %rsp,%rbp
  8004219620:	ba 10 00 00 00       	mov    $0x10,%edx
  8004219625:	be 00 00 00 00       	mov    $0x0,%esi
  800421962a:	48 bf b0 e5 6d 04 80 	movabs $0x80046de5b0,%rdi
  8004219631:	00 00 00 
  8004219634:	48 b8 37 0e 21 04 80 	movabs $0x8004210e37,%rax
  800421963b:	00 00 00 
  800421963e:	ff d0                	callq  *%rax
  8004219640:	48 bf b0 e5 6d 04 80 	movabs $0x80046de5b0,%rdi
  8004219647:	00 00 00 
  800421964a:	48 b8 eb 8f 21 04 80 	movabs $0x8004218feb,%rax
  8004219651:	00 00 00 
  8004219654:	ff d0                	callq  *%rax
  8004219656:	5d                   	pop    %rbp
  8004219657:	c3                   	retq   

0000008004219658 <time_init>:
  8004219658:	55                   	push   %rbp
  8004219659:	48 89 e5             	mov    %rsp,%rbp
  800421965c:	48 b8 c0 e5 6d 04 80 	movabs $0x80046de5c0,%rax
  8004219663:	00 00 00 
  8004219666:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  800421966c:	5d                   	pop    %rbp
  800421966d:	c3                   	retq   

000000800421966e <time_tick>:
  800421966e:	55                   	push   %rbp
  800421966f:	48 89 e5             	mov    %rsp,%rbp
  8004219672:	48 b8 c0 e5 6d 04 80 	movabs $0x80046de5c0,%rax
  8004219679:	00 00 00 
  800421967c:	8b 00                	mov    (%rax),%eax
  800421967e:	8d 50 01             	lea    0x1(%rax),%edx
  8004219681:	48 b8 c0 e5 6d 04 80 	movabs $0x80046de5c0,%rax
  8004219688:	00 00 00 
  800421968b:	89 10                	mov    %edx,(%rax)
  800421968d:	48 b8 c0 e5 6d 04 80 	movabs $0x80046de5c0,%rax
  8004219694:	00 00 00 
  8004219697:	8b 10                	mov    (%rax),%edx
  8004219699:	89 d0                	mov    %edx,%eax
  800421969b:	c1 e0 02             	shl    $0x2,%eax
  800421969e:	01 d0                	add    %edx,%eax
  80042196a0:	01 c0                	add    %eax,%eax
  80042196a2:	89 c2                	mov    %eax,%edx
  80042196a4:	48 b8 c0 e5 6d 04 80 	movabs $0x80046de5c0,%rax
  80042196ab:	00 00 00 
  80042196ae:	8b 00                	mov    (%rax),%eax
  80042196b0:	39 c2                	cmp    %eax,%edx
  80042196b2:	73 2a                	jae    80042196de <time_tick+0x70>
  80042196b4:	48 ba cf 13 22 04 80 	movabs $0x80042213cf,%rdx
  80042196bb:	00 00 00 
  80042196be:	be 14 00 00 00       	mov    $0x14,%esi
  80042196c3:	48 bf ea 13 22 04 80 	movabs $0x80042213ea,%rdi
  80042196ca:	00 00 00 
  80042196cd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042196d2:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  80042196d9:	00 00 00 
  80042196dc:	ff d1                	callq  *%rcx
  80042196de:	5d                   	pop    %rbp
  80042196df:	c3                   	retq   

00000080042196e0 <time_msec>:
  80042196e0:	55                   	push   %rbp
  80042196e1:	48 89 e5             	mov    %rsp,%rbp
  80042196e4:	48 b8 c0 e5 6d 04 80 	movabs $0x80046de5c0,%rax
  80042196eb:	00 00 00 
  80042196ee:	8b 10                	mov    (%rax),%edx
  80042196f0:	89 d0                	mov    %edx,%eax
  80042196f2:	c1 e0 02             	shl    $0x2,%eax
  80042196f5:	01 d0                	add    %edx,%eax
  80042196f7:	01 c0                	add    %eax,%eax
  80042196f9:	5d                   	pop    %rbp
  80042196fa:	c3                   	retq   

00000080042196fb <page2ppn>:
  80042196fb:	55                   	push   %rbp
  80042196fc:	48 89 e5             	mov    %rsp,%rbp
  80042196ff:	48 83 ec 08          	sub    $0x8,%rsp
  8004219703:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004219707:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421970b:	48 b8 00 e6 6d 04 80 	movabs $0x80046de600,%rax
  8004219712:	00 00 00 
  8004219715:	48 8b 00             	mov    (%rax),%rax
  8004219718:	48 29 c2             	sub    %rax,%rdx
  800421971b:	48 89 d0             	mov    %rdx,%rax
  800421971e:	48 c1 f8 04          	sar    $0x4,%rax
  8004219722:	c9                   	leaveq 
  8004219723:	c3                   	retq   

0000008004219724 <page2pa>:
  8004219724:	55                   	push   %rbp
  8004219725:	48 89 e5             	mov    %rsp,%rbp
  8004219728:	48 83 ec 08          	sub    $0x8,%rsp
  800421972c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004219730:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219734:	48 89 c7             	mov    %rax,%rdi
  8004219737:	48 b8 fb 96 21 04 80 	movabs $0x80042196fb,%rax
  800421973e:	00 00 00 
  8004219741:	ff d0                	callq  *%rax
  8004219743:	48 c1 e0 0c          	shl    $0xc,%rax
  8004219747:	c9                   	leaveq 
  8004219748:	c3                   	retq   

0000008004219749 <pa2page>:
  8004219749:	55                   	push   %rbp
  800421974a:	48 89 e5             	mov    %rsp,%rbp
  800421974d:	48 83 ec 10          	sub    $0x10,%rsp
  8004219751:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004219755:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219759:	48 c1 e8 0c          	shr    $0xc,%rax
  800421975d:	48 89 c2             	mov    %rax,%rdx
  8004219760:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  8004219767:	00 00 00 
  800421976a:	48 8b 00             	mov    (%rax),%rax
  800421976d:	48 39 c2             	cmp    %rax,%rdx
  8004219770:	72 2a                	jb     800421979c <pa2page+0x53>
  8004219772:	48 ba 00 14 22 04 80 	movabs $0x8004221400,%rdx
  8004219779:	00 00 00 
  800421977c:	be 5b 00 00 00       	mov    $0x5b,%esi
  8004219781:	48 bf 1f 14 22 04 80 	movabs $0x800422141f,%rdi
  8004219788:	00 00 00 
  800421978b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219790:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  8004219797:	00 00 00 
  800421979a:	ff d1                	callq  *%rcx
  800421979c:	48 b8 00 e6 6d 04 80 	movabs $0x80046de600,%rax
  80042197a3:	00 00 00 
  80042197a6:	48 8b 00             	mov    (%rax),%rax
  80042197a9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042197ad:	48 c1 ea 0c          	shr    $0xc,%rdx
  80042197b1:	48 c1 e2 04          	shl    $0x4,%rdx
  80042197b5:	48 01 d0             	add    %rdx,%rax
  80042197b8:	c9                   	leaveq 
  80042197b9:	c3                   	retq   

00000080042197ba <page2kva>:
  80042197ba:	55                   	push   %rbp
  80042197bb:	48 89 e5             	mov    %rsp,%rbp
  80042197be:	48 83 ec 20          	sub    $0x20,%rsp
  80042197c2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042197c6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042197ca:	48 89 c7             	mov    %rax,%rdi
  80042197cd:	48 b8 24 97 21 04 80 	movabs $0x8004219724,%rax
  80042197d4:	00 00 00 
  80042197d7:	ff d0                	callq  *%rax
  80042197d9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042197dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042197e1:	48 c1 e8 0c          	shr    $0xc,%rax
  80042197e5:	89 45 f4             	mov    %eax,-0xc(%rbp)
  80042197e8:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042197eb:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  80042197f2:	00 00 00 
  80042197f5:	48 8b 00             	mov    (%rax),%rax
  80042197f8:	48 39 c2             	cmp    %rax,%rdx
  80042197fb:	72 32                	jb     800421982f <page2kva+0x75>
  80042197fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219801:	48 89 c1             	mov    %rax,%rcx
  8004219804:	48 ba 30 14 22 04 80 	movabs $0x8004221430,%rdx
  800421980b:	00 00 00 
  800421980e:	be 62 00 00 00       	mov    $0x62,%esi
  8004219813:	48 bf 1f 14 22 04 80 	movabs $0x800422141f,%rdi
  800421981a:	00 00 00 
  800421981d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219822:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004219829:	00 00 00 
  800421982c:	41 ff d0             	callq  *%r8
  800421982f:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004219836:	00 00 00 
  8004219839:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421983d:	48 01 d0             	add    %rdx,%rax
  8004219840:	c9                   	leaveq 
  8004219841:	c3                   	retq   

0000008004219842 <epte_addr>:
  8004219842:	55                   	push   %rbp
  8004219843:	48 89 e5             	mov    %rsp,%rbp
  8004219846:	48 83 ec 08          	sub    $0x8,%rsp
  800421984a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421984e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219852:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004219858:	c9                   	leaveq 
  8004219859:	c3                   	retq   

000000800421985a <epte_page_vaddr>:
  800421985a:	55                   	push   %rbp
  800421985b:	48 89 e5             	mov    %rsp,%rbp
  800421985e:	48 83 ec 20          	sub    $0x20,%rsp
  8004219862:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004219866:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421986a:	48 89 c7             	mov    %rax,%rdi
  800421986d:	48 b8 42 98 21 04 80 	movabs $0x8004219842,%rax
  8004219874:	00 00 00 
  8004219877:	ff d0                	callq  *%rax
  8004219879:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421987d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219881:	48 c1 e8 0c          	shr    $0xc,%rax
  8004219885:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004219888:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421988b:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  8004219892:	00 00 00 
  8004219895:	48 8b 00             	mov    (%rax),%rax
  8004219898:	48 39 c2             	cmp    %rax,%rdx
  800421989b:	72 32                	jb     80042198cf <epte_page_vaddr+0x75>
  800421989d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042198a1:	48 89 c1             	mov    %rax,%rcx
  80042198a4:	48 ba 30 14 22 04 80 	movabs $0x8004221430,%rdx
  80042198ab:	00 00 00 
  80042198ae:	be 13 00 00 00       	mov    $0x13,%esi
  80042198b3:	48 bf 53 14 22 04 80 	movabs $0x8004221453,%rdi
  80042198ba:	00 00 00 
  80042198bd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042198c2:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042198c9:	00 00 00 
  80042198cc:	41 ff d0             	callq  *%r8
  80042198cf:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042198d6:	00 00 00 
  80042198d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042198dd:	48 01 d0             	add    %rdx,%rax
  80042198e0:	c9                   	leaveq 
  80042198e1:	c3                   	retq   

00000080042198e2 <epte_present>:
  80042198e2:	55                   	push   %rbp
  80042198e3:	48 89 e5             	mov    %rsp,%rbp
  80042198e6:	48 83 ec 08          	sub    $0x8,%rsp
  80042198ea:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  80042198ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042198f2:	83 e0 07             	and    $0x7,%eax
  80042198f5:	48 85 c0             	test   %rax,%rax
  80042198f8:	0f 95 c0             	setne  %al
  80042198fb:	0f b6 c0             	movzbl %al,%eax
  80042198fe:	c9                   	leaveq 
  80042198ff:	c3                   	retq   

0000008004219900 <ept_lookup_gpa>:
  8004219900:	55                   	push   %rbp
  8004219901:	48 89 e5             	mov    %rsp,%rbp
  8004219904:	48 83 ec 60          	sub    $0x60,%rsp
  8004219908:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  800421990c:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  8004219910:	89 55 ac             	mov    %edx,-0x54(%rbp)
  8004219913:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
  8004219917:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800421991e:	00 
  800421991f:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004219924:	75 0a                	jne    8004219930 <ept_lookup_gpa+0x30>
  8004219926:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800421992b:	e9 d2 01 00 00       	jmpq   8004219b02 <ept_lookup_gpa+0x202>
  8004219930:	8b 55 ac             	mov    -0x54(%rbp),%edx
  8004219933:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  8004219937:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421993b:	48 89 ce             	mov    %rcx,%rsi
  800421993e:	48 89 c7             	mov    %rax,%rdi
  8004219941:	48 b8 1c 30 20 04 80 	movabs $0x800420301c,%rax
  8004219948:	00 00 00 
  800421994b:	ff d0                	callq  *%rax
  800421994d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004219951:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004219956:	75 1a                	jne    8004219972 <ept_lookup_gpa+0x72>
  8004219958:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  800421995c:	75 0a                	jne    8004219968 <ept_lookup_gpa+0x68>
  800421995e:	b8 eb ff ff ff       	mov    $0xffffffeb,%eax
  8004219963:	e9 9a 01 00 00       	jmpq   8004219b02 <ept_lookup_gpa+0x202>
  8004219968:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  800421996d:	e9 90 01 00 00       	jmpq   8004219b02 <ept_lookup_gpa+0x202>
  8004219972:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004219976:	48 c1 e8 27          	shr    $0x27,%rax
  800421997a:	25 ff 01 00 00       	and    $0x1ff,%eax
  800421997f:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004219986:	00 
  8004219987:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421998b:	48 01 d0             	add    %rdx,%rax
  800421998e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004219992:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004219996:	48 8b 00             	mov    (%rax),%rax
  8004219999:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800421999f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042199a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042199a7:	48 c1 e8 0c          	shr    $0xc,%rax
  80042199ab:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  80042199ae:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  80042199b1:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  80042199b8:	00 00 00 
  80042199bb:	48 8b 00             	mov    (%rax),%rax
  80042199be:	48 39 c2             	cmp    %rax,%rdx
  80042199c1:	72 32                	jb     80042199f5 <ept_lookup_gpa+0xf5>
  80042199c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042199c7:	48 89 c1             	mov    %rax,%rcx
  80042199ca:	48 ba 30 14 22 04 80 	movabs $0x8004221430,%rdx
  80042199d1:	00 00 00 
  80042199d4:	be 4d 00 00 00       	mov    $0x4d,%esi
  80042199d9:	48 bf 53 14 22 04 80 	movabs $0x8004221453,%rdi
  80042199e0:	00 00 00 
  80042199e3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042199e8:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042199ef:	00 00 00 
  80042199f2:	41 ff d0             	callq  *%r8
  80042199f5:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042199fc:	00 00 00 
  80042199ff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219a03:	48 01 d0             	add    %rdx,%rax
  8004219a06:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004219a0a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004219a0e:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004219a12:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004219a17:	48 c1 e0 03          	shl    $0x3,%rax
  8004219a1b:	48 01 45 d8          	add    %rax,-0x28(%rbp)
  8004219a1f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219a23:	48 8b 00             	mov    (%rax),%rax
  8004219a26:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004219a2c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004219a30:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004219a34:	48 c1 e8 0c          	shr    $0xc,%rax
  8004219a38:	89 45 cc             	mov    %eax,-0x34(%rbp)
  8004219a3b:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004219a3e:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  8004219a45:	00 00 00 
  8004219a48:	48 8b 00             	mov    (%rax),%rax
  8004219a4b:	48 39 c2             	cmp    %rax,%rdx
  8004219a4e:	72 32                	jb     8004219a82 <ept_lookup_gpa+0x182>
  8004219a50:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004219a54:	48 89 c1             	mov    %rax,%rcx
  8004219a57:	48 ba 30 14 22 04 80 	movabs $0x8004221430,%rdx
  8004219a5e:	00 00 00 
  8004219a61:	be 50 00 00 00       	mov    $0x50,%esi
  8004219a66:	48 bf 53 14 22 04 80 	movabs $0x8004221453,%rdi
  8004219a6d:	00 00 00 
  8004219a70:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219a75:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004219a7c:	00 00 00 
  8004219a7f:	41 ff d0             	callq  *%r8
  8004219a82:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004219a89:	00 00 00 
  8004219a8c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004219a90:	48 01 d0             	add    %rdx,%rax
  8004219a93:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004219a97:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004219a9b:	48 c1 e8 15          	shr    $0x15,%rax
  8004219a9f:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004219aa4:	48 c1 e0 03          	shl    $0x3,%rax
  8004219aa8:	48 01 45 c0          	add    %rax,-0x40(%rbp)
  8004219aac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004219ab0:	48 8b 00             	mov    (%rax),%rax
  8004219ab3:	48 83 c8 07          	or     $0x7,%rax
  8004219ab7:	48 89 c2             	mov    %rax,%rdx
  8004219aba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004219abe:	48 89 10             	mov    %rdx,(%rax)
  8004219ac1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219ac5:	48 8b 00             	mov    (%rax),%rax
  8004219ac8:	48 83 c8 07          	or     $0x7,%rax
  8004219acc:	48 89 c2             	mov    %rax,%rdx
  8004219acf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219ad3:	48 89 10             	mov    %rdx,(%rax)
  8004219ad6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004219ada:	48 8b 00             	mov    (%rax),%rax
  8004219add:	48 83 c8 07          	or     $0x7,%rax
  8004219ae1:	48 89 c2             	mov    %rax,%rdx
  8004219ae4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004219ae8:	48 89 10             	mov    %rdx,(%rax)
  8004219aeb:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
  8004219af0:	74 0b                	je     8004219afd <ept_lookup_gpa+0x1fd>
  8004219af2:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004219af6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004219afa:	48 89 10             	mov    %rdx,(%rax)
  8004219afd:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219b02:	c9                   	leaveq 
  8004219b03:	c3                   	retq   

0000008004219b04 <ept_gpa2hva>:
  8004219b04:	55                   	push   %rbp
  8004219b05:	48 89 e5             	mov    %rsp,%rbp
  8004219b08:	48 83 ec 40          	sub    $0x40,%rsp
  8004219b0c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004219b10:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004219b14:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  8004219b18:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  8004219b1c:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004219b20:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219b24:	48 89 d1             	mov    %rdx,%rcx
  8004219b27:	ba 00 00 00 00       	mov    $0x0,%edx
  8004219b2c:	48 89 c7             	mov    %rax,%rdi
  8004219b2f:	48 b8 00 99 21 04 80 	movabs $0x8004219900,%rax
  8004219b36:	00 00 00 
  8004219b39:	ff d0                	callq  *%rax
  8004219b3b:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004219b3e:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004219b42:	79 10                	jns    8004219b54 <ept_gpa2hva+0x50>
  8004219b44:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004219b48:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004219b4f:	e9 b1 00 00 00       	jmpq   8004219c05 <ept_gpa2hva+0x101>
  8004219b54:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219b58:	48 8b 00             	mov    (%rax),%rax
  8004219b5b:	48 89 c7             	mov    %rax,%rdi
  8004219b5e:	48 b8 e2 98 21 04 80 	movabs $0x80042198e2,%rax
  8004219b65:	00 00 00 
  8004219b68:	ff d0                	callq  *%rax
  8004219b6a:	85 c0                	test   %eax,%eax
  8004219b6c:	75 10                	jne    8004219b7e <ept_gpa2hva+0x7a>
  8004219b6e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004219b72:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004219b79:	e9 87 00 00 00       	jmpq   8004219c05 <ept_gpa2hva+0x101>
  8004219b7e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219b82:	48 8b 00             	mov    (%rax),%rax
  8004219b85:	48 89 c7             	mov    %rax,%rdi
  8004219b88:	48 b8 42 98 21 04 80 	movabs $0x8004219842,%rax
  8004219b8f:	00 00 00 
  8004219b92:	ff d0                	callq  *%rax
  8004219b94:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004219b98:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004219b9c:	48 c1 e8 0c          	shr    $0xc,%rax
  8004219ba0:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004219ba3:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004219ba6:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  8004219bad:	00 00 00 
  8004219bb0:	48 8b 00             	mov    (%rax),%rax
  8004219bb3:	48 39 c2             	cmp    %rax,%rdx
  8004219bb6:	72 32                	jb     8004219bea <ept_gpa2hva+0xe6>
  8004219bb8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004219bbc:	48 89 c1             	mov    %rax,%rcx
  8004219bbf:	48 ba 30 14 22 04 80 	movabs $0x8004221430,%rdx
  8004219bc6:	00 00 00 
  8004219bc9:	be 70 00 00 00       	mov    $0x70,%esi
  8004219bce:	48 bf 53 14 22 04 80 	movabs $0x8004221453,%rdi
  8004219bd5:	00 00 00 
  8004219bd8:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219bdd:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004219be4:	00 00 00 
  8004219be7:	41 ff d0             	callq  *%r8
  8004219bea:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004219bf1:	00 00 00 
  8004219bf4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004219bf8:	48 01 d0             	add    %rdx,%rax
  8004219bfb:	48 89 c2             	mov    %rax,%rdx
  8004219bfe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004219c02:	48 89 10             	mov    %rdx,(%rax)
  8004219c05:	c9                   	leaveq 
  8004219c06:	c3                   	retq   

0000008004219c07 <free_ept_level>:
  8004219c07:	55                   	push   %rbp
  8004219c08:	48 89 e5             	mov    %rsp,%rbp
  8004219c0b:	48 83 ec 40          	sub    $0x40,%rsp
  8004219c0f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004219c13:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  8004219c16:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004219c1a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004219c1e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004219c25:	e9 82 01 00 00       	jmpq   8004219dac <free_ept_level+0x1a5>
  8004219c2a:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  8004219c2e:	0f 84 fe 00 00 00    	je     8004219d32 <free_ept_level+0x12b>
  8004219c34:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004219c37:	48 98                	cltq   
  8004219c39:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004219c40:	00 
  8004219c41:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004219c45:	48 01 d0             	add    %rdx,%rax
  8004219c48:	48 8b 00             	mov    (%rax),%rax
  8004219c4b:	48 89 c7             	mov    %rax,%rdi
  8004219c4e:	48 b8 e2 98 21 04 80 	movabs $0x80042198e2,%rax
  8004219c55:	00 00 00 
  8004219c58:	ff d0                	callq  *%rax
  8004219c5a:	85 c0                	test   %eax,%eax
  8004219c5c:	0f 84 46 01 00 00    	je     8004219da8 <free_ept_level+0x1a1>
  8004219c62:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004219c65:	48 98                	cltq   
  8004219c67:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004219c6e:	00 
  8004219c6f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004219c73:	48 01 d0             	add    %rdx,%rax
  8004219c76:	48 8b 00             	mov    (%rax),%rax
  8004219c79:	48 89 c7             	mov    %rax,%rdi
  8004219c7c:	48 b8 42 98 21 04 80 	movabs $0x8004219842,%rax
  8004219c83:	00 00 00 
  8004219c86:	ff d0                	callq  *%rax
  8004219c88:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004219c8c:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  8004219c8f:	8d 50 ff             	lea    -0x1(%rax),%edx
  8004219c92:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219c96:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004219c9a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219c9e:	48 c1 e8 0c          	shr    $0xc,%rax
  8004219ca2:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004219ca5:	8b 4d dc             	mov    -0x24(%rbp),%ecx
  8004219ca8:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  8004219caf:	00 00 00 
  8004219cb2:	48 8b 00             	mov    (%rax),%rax
  8004219cb5:	48 39 c1             	cmp    %rax,%rcx
  8004219cb8:	72 32                	jb     8004219cec <free_ept_level+0xe5>
  8004219cba:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219cbe:	48 89 c1             	mov    %rax,%rcx
  8004219cc1:	48 ba 30 14 22 04 80 	movabs $0x8004221430,%rdx
  8004219cc8:	00 00 00 
  8004219ccb:	be 81 00 00 00       	mov    $0x81,%esi
  8004219cd0:	48 bf 53 14 22 04 80 	movabs $0x8004221453,%rdi
  8004219cd7:	00 00 00 
  8004219cda:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219cdf:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004219ce6:	00 00 00 
  8004219ce9:	41 ff d0             	callq  *%r8
  8004219cec:	48 b9 00 00 00 04 80 	movabs $0x8004000000,%rcx
  8004219cf3:	00 00 00 
  8004219cf6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219cfa:	48 01 c8             	add    %rcx,%rax
  8004219cfd:	89 d6                	mov    %edx,%esi
  8004219cff:	48 89 c7             	mov    %rax,%rdi
  8004219d02:	48 b8 07 9c 21 04 80 	movabs $0x8004219c07,%rax
  8004219d09:	00 00 00 
  8004219d0c:	ff d0                	callq  *%rax
  8004219d0e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219d12:	48 89 c7             	mov    %rax,%rdi
  8004219d15:	48 b8 49 97 21 04 80 	movabs $0x8004219749,%rax
  8004219d1c:	00 00 00 
  8004219d1f:	ff d0                	callq  *%rax
  8004219d21:	48 89 c7             	mov    %rax,%rdi
  8004219d24:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  8004219d2b:	00 00 00 
  8004219d2e:	ff d0                	callq  *%rax
  8004219d30:	eb 76                	jmp    8004219da8 <free_ept_level+0x1a1>
  8004219d32:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004219d35:	48 98                	cltq   
  8004219d37:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004219d3e:	00 
  8004219d3f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004219d43:	48 01 d0             	add    %rdx,%rax
  8004219d46:	48 8b 00             	mov    (%rax),%rax
  8004219d49:	48 89 c7             	mov    %rax,%rdi
  8004219d4c:	48 b8 e2 98 21 04 80 	movabs $0x80042198e2,%rax
  8004219d53:	00 00 00 
  8004219d56:	ff d0                	callq  *%rax
  8004219d58:	85 c0                	test   %eax,%eax
  8004219d5a:	74 4c                	je     8004219da8 <free_ept_level+0x1a1>
  8004219d5c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004219d5f:	48 98                	cltq   
  8004219d61:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004219d68:	00 
  8004219d69:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004219d6d:	48 01 d0             	add    %rdx,%rax
  8004219d70:	48 8b 00             	mov    (%rax),%rax
  8004219d73:	48 89 c7             	mov    %rax,%rdi
  8004219d76:	48 b8 42 98 21 04 80 	movabs $0x8004219842,%rax
  8004219d7d:	00 00 00 
  8004219d80:	ff d0                	callq  *%rax
  8004219d82:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004219d86:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004219d8a:	48 89 c7             	mov    %rax,%rdi
  8004219d8d:	48 b8 49 97 21 04 80 	movabs $0x8004219749,%rax
  8004219d94:	00 00 00 
  8004219d97:	ff d0                	callq  *%rax
  8004219d99:	48 89 c7             	mov    %rax,%rdi
  8004219d9c:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  8004219da3:	00 00 00 
  8004219da6:	ff d0                	callq  *%rax
  8004219da8:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004219dac:	81 7d fc ff 01 00 00 	cmpl   $0x1ff,-0x4(%rbp)
  8004219db3:	0f 8e 71 fe ff ff    	jle    8004219c2a <free_ept_level+0x23>
  8004219db9:	90                   	nop
  8004219dba:	c9                   	leaveq 
  8004219dbb:	c3                   	retq   

0000008004219dbc <free_guest_mem>:
  8004219dbc:	55                   	push   %rbp
  8004219dbd:	48 89 e5             	mov    %rsp,%rbp
  8004219dc0:	48 83 ec 20          	sub    $0x20,%rsp
  8004219dc4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004219dc8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219dcc:	be 03 00 00 00       	mov    $0x3,%esi
  8004219dd1:	48 89 c7             	mov    %rax,%rdi
  8004219dd4:	48 b8 07 9c 21 04 80 	movabs $0x8004219c07,%rax
  8004219ddb:	00 00 00 
  8004219dde:	ff d0                	callq  *%rax

static __inline void
tlbflush(void)
{
	uint64_t cr3;
	__asm __volatile("movq %%cr3,%0" : "=r" (cr3));
  8004219de0:	0f 20 d8             	mov    %cr3,%rax
  8004219de3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	__asm __volatile("movq %0,%%cr3" : : "r" (cr3));
  8004219de7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219deb:	0f 22 d8             	mov    %rax,%cr3
  8004219dee:	c9                   	leaveq 
  8004219def:	c3                   	retq   

0000008004219df0 <ept_page_insert>:
  8004219df0:	55                   	push   %rbp
  8004219df1:	48 89 e5             	mov    %rsp,%rbp
  8004219df4:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004219df8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004219dfc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004219e00:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004219e04:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
  8004219e07:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219e0c:	c9                   	leaveq 
  8004219e0d:	c3                   	retq   

0000008004219e0e <ept_map_hva2gpa>:
  8004219e0e:	55                   	push   %rbp
  8004219e0f:	48 89 e5             	mov    %rsp,%rbp
  8004219e12:	48 83 ec 40          	sub    $0x40,%rsp
  8004219e16:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004219e1a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004219e1e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  8004219e22:	89 4d c4             	mov    %ecx,-0x3c(%rbp)
  8004219e25:	44 89 45 c0          	mov    %r8d,-0x40(%rbp)
  8004219e29:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004219e30:	00 
  8004219e31:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%rbp)
  8004219e38:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004219e3c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004219e40:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004219e47:	00 00 00 
  8004219e4a:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  8004219e4e:	77 32                	ja     8004219e82 <ept_map_hva2gpa+0x74>
  8004219e50:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219e54:	48 89 c1             	mov    %rax,%rcx
  8004219e57:	48 ba 60 14 22 04 80 	movabs $0x8004221460,%rdx
  8004219e5e:	00 00 00 
  8004219e61:	be c0 00 00 00       	mov    $0xc0,%esi
  8004219e66:	48 bf 53 14 22 04 80 	movabs $0x8004221453,%rdi
  8004219e6d:	00 00 00 
  8004219e70:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219e75:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004219e7c:	00 00 00 
  8004219e7f:	41 ff d0             	callq  *%r8
  8004219e82:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004219e89:	ff ff ff 
  8004219e8c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219e90:	48 01 d0             	add    %rdx,%rax
  8004219e93:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004219e97:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  8004219e9b:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  8004219e9f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219ea3:	48 89 d1             	mov    %rdx,%rcx
  8004219ea6:	ba 01 00 00 00       	mov    $0x1,%edx
  8004219eab:	48 89 c7             	mov    %rax,%rdi
  8004219eae:	48 b8 00 99 21 04 80 	movabs $0x8004219900,%rax
  8004219eb5:	00 00 00 
  8004219eb8:	ff d0                	callq  *%rax
  8004219eba:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004219ebd:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  8004219ec1:	75 35                	jne    8004219ef8 <ept_map_hva2gpa+0xea>
  8004219ec3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219ec7:	48 8b 00             	mov    (%rax),%rax
  8004219eca:	48 85 c0             	test   %rax,%rax
  8004219ecd:	74 0d                	je     8004219edc <ept_map_hva2gpa+0xce>
  8004219ecf:	83 7d c0 00          	cmpl   $0x0,-0x40(%rbp)
  8004219ed3:	75 07                	jne    8004219edc <ept_map_hva2gpa+0xce>
  8004219ed5:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  8004219eda:	eb 21                	jmp    8004219efd <ept_map_hva2gpa+0xef>
  8004219edc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219ee0:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004219ee3:	48 63 d2             	movslq %edx,%rdx
  8004219ee6:	48 0b 55 f8          	or     -0x8(%rbp),%rdx
  8004219eea:	48 83 ca 70          	or     $0x70,%rdx
  8004219eee:	48 89 10             	mov    %rdx,(%rax)
  8004219ef1:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219ef6:	eb 05                	jmp    8004219efd <ept_map_hva2gpa+0xef>
  8004219ef8:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  8004219efd:	c9                   	leaveq 
  8004219efe:	c3                   	retq   

0000008004219eff <ept_alloc_static>:
  8004219eff:	55                   	push   %rbp
  8004219f00:	48 89 e5             	mov    %rsp,%rbp
  8004219f03:	53                   	push   %rbx
  8004219f04:	48 83 ec 48          	sub    $0x48,%rsp
  8004219f08:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  8004219f0c:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  8004219f10:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004219f17:	00 
  8004219f18:	eb 6e                	jmp    8004219f88 <ept_alloc_static+0x89>
  8004219f1a:	bf 00 00 00 00       	mov    $0x0,%edi
  8004219f1f:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  8004219f26:	00 00 00 
  8004219f29:	ff d0                	callq  *%rax
  8004219f2b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004219f2f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219f33:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004219f37:	8d 50 01             	lea    0x1(%rax),%edx
  8004219f3a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219f3e:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004219f42:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  8004219f46:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219f4a:	48 89 c7             	mov    %rax,%rdi
  8004219f4d:	48 b8 ba 97 21 04 80 	movabs $0x80042197ba,%rax
  8004219f54:	00 00 00 
  8004219f57:	ff d0                	callq  *%rax
  8004219f59:	48 89 c6             	mov    %rax,%rsi
  8004219f5c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004219f60:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  8004219f66:	b9 07 00 00 00       	mov    $0x7,%ecx
  8004219f6b:	48 89 da             	mov    %rbx,%rdx
  8004219f6e:	48 89 c7             	mov    %rax,%rdi
  8004219f71:	48 b8 0e 9e 21 04 80 	movabs $0x8004219e0e,%rax
  8004219f78:	00 00 00 
  8004219f7b:	ff d0                	callq  *%rax
  8004219f7d:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004219f80:	48 81 45 e8 00 10 00 	addq   $0x1000,-0x18(%rbp)
  8004219f87:	00 
  8004219f88:	48 81 7d e8 ff ff 09 	cmpq   $0x9ffff,-0x18(%rbp)
  8004219f8f:	00 
  8004219f90:	76 88                	jbe    8004219f1a <ept_alloc_static+0x1b>
  8004219f92:	48 c7 45 e8 00 00 10 	movq   $0x100000,-0x18(%rbp)
  8004219f99:	00 
  8004219f9a:	eb 6e                	jmp    800421a00a <ept_alloc_static+0x10b>
  8004219f9c:	bf 00 00 00 00       	mov    $0x0,%edi
  8004219fa1:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  8004219fa8:	00 00 00 
  8004219fab:	ff d0                	callq  *%rax
  8004219fad:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004219fb1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004219fb5:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004219fb9:	8d 50 01             	lea    0x1(%rax),%edx
  8004219fbc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004219fc0:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004219fc4:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  8004219fc8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004219fcc:	48 89 c7             	mov    %rax,%rdi
  8004219fcf:	48 b8 ba 97 21 04 80 	movabs $0x80042197ba,%rax
  8004219fd6:	00 00 00 
  8004219fd9:	ff d0                	callq  *%rax
  8004219fdb:	48 89 c6             	mov    %rax,%rsi
  8004219fde:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004219fe2:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  8004219fe8:	b9 07 00 00 00       	mov    $0x7,%ecx
  8004219fed:	48 89 da             	mov    %rbx,%rdx
  8004219ff0:	48 89 c7             	mov    %rax,%rdi
  8004219ff3:	48 b8 0e 9e 21 04 80 	movabs $0x8004219e0e,%rax
  8004219ffa:	00 00 00 
  8004219ffd:	ff d0                	callq  *%rax
  8004219fff:	89 45 cc             	mov    %eax,-0x34(%rbp)
  800421a002:	48 81 45 e8 00 10 00 	addq   $0x1000,-0x18(%rbp)
  800421a009:	00 
  800421a00a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421a00e:	48 8b 00             	mov    (%rax),%rax
  800421a011:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  800421a015:	77 85                	ja     8004219f9c <ept_alloc_static+0x9d>
  800421a017:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a01c:	48 83 c4 48          	add    $0x48,%rsp
  800421a020:	5b                   	pop    %rbx
  800421a021:	5d                   	pop    %rbp
  800421a022:	c3                   	retq   

000000800421a023 <test_ept_map>:
  800421a023:	55                   	push   %rbp
  800421a024:	48 89 e5             	mov    %rsp,%rbp
  800421a027:	53                   	push   %rbx
  800421a028:	48 83 ec 48          	sub    $0x48,%rsp
  800421a02c:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  800421a030:	be 00 00 00 00       	mov    $0x0,%esi
  800421a035:	48 89 c7             	mov    %rax,%rdi
  800421a038:	48 b8 5d 89 20 04 80 	movabs $0x800420895d,%rax
  800421a03f:	00 00 00 
  800421a042:	ff d0                	callq  *%rax
  800421a044:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a047:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a04b:	79 30                	jns    800421a07d <test_ept_map+0x5a>
  800421a04d:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421a050:	89 c1                	mov    %eax,%ecx
  800421a052:	48 ba 84 14 22 04 80 	movabs $0x8004221484,%rdx
  800421a059:	00 00 00 
  800421a05c:	be fa 00 00 00       	mov    $0xfa,%esi
  800421a061:	48 bf 53 14 22 04 80 	movabs $0x8004221453,%rdi
  800421a068:	00 00 00 
  800421a06b:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a070:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421a077:	00 00 00 
  800421a07a:	41 ff d0             	callq  *%r8
  800421a07d:	bf 01 00 00 00       	mov    $0x1,%edi
  800421a082:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  800421a089:	00 00 00 
  800421a08c:	ff d0                	callq  *%rax
  800421a08e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421a092:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800421a097:	75 30                	jne    800421a0c9 <test_ept_map+0xa6>
  800421a099:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421a09c:	89 c1                	mov    %eax,%ecx
  800421a09e:	48 ba a1 14 22 04 80 	movabs $0x80042214a1,%rdx
  800421a0a5:	00 00 00 
  800421a0a8:	be fc 00 00 00       	mov    $0xfc,%esi
  800421a0ad:	48 bf 53 14 22 04 80 	movabs $0x8004221453,%rdi
  800421a0b4:	00 00 00 
  800421a0b7:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a0bc:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421a0c3:	00 00 00 
  800421a0c6:	41 ff d0             	callq  *%r8
  800421a0c9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421a0cd:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800421a0d4:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  800421a0d8:	b9 00 00 00 00       	mov    $0x0,%ecx
  800421a0dd:	ba 00 00 40 00       	mov    $0x400000,%edx
  800421a0e2:	48 89 c7             	mov    %rax,%rdi
  800421a0e5:	48 b8 19 3a 20 04 80 	movabs $0x8004203a19,%rax
  800421a0ec:	00 00 00 
  800421a0ef:	ff d0                	callq  *%rax
  800421a0f1:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a0f4:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a0f8:	79 30                	jns    800421a12a <test_ept_map+0x107>
  800421a0fa:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421a0fd:	89 c1                	mov    %eax,%ecx
  800421a0ff:	48 ba bf 14 22 04 80 	movabs $0x80042214bf,%rdx
  800421a106:	00 00 00 
  800421a109:	be fe 00 00 00       	mov    $0xfe,%esi
  800421a10e:	48 bf 53 14 22 04 80 	movabs $0x8004221453,%rdi
  800421a115:	00 00 00 
  800421a118:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a11d:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421a124:	00 00 00 
  800421a127:	41 ff d0             	callq  *%r8
  800421a12a:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800421a131:	00 00 00 
  800421a134:	ff d0                	callq  *%rax
  800421a136:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421a13a:	48 b9 20 00 6e 04 80 	movabs $0x80046e0020,%rcx
  800421a141:	00 00 00 
  800421a144:	48 98                	cltq   
  800421a146:	48 c1 e0 03          	shl    $0x3,%rax
  800421a14a:	48 89 c6             	mov    %rax,%rsi
  800421a14d:	48 c1 e6 04          	shl    $0x4,%rsi
  800421a151:	48 01 f0             	add    %rsi,%rax
  800421a154:	48 01 c8             	add    %rcx,%rax
  800421a157:	48 83 c0 08          	add    $0x8,%rax
  800421a15b:	48 89 10             	mov    %rdx,(%rax)
  800421a15e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421a162:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800421a168:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  800421a16c:	89 d6                	mov    %edx,%esi
  800421a16e:	48 89 c7             	mov    %rax,%rdi
  800421a171:	48 b8 5d 89 20 04 80 	movabs $0x800420895d,%rax
  800421a178:	00 00 00 
  800421a17b:	ff d0                	callq  *%rax
  800421a17d:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a180:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a184:	79 30                	jns    800421a1b6 <test_ept_map+0x193>
  800421a186:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421a189:	89 c1                	mov    %eax,%ecx
  800421a18b:	48 ba 84 14 22 04 80 	movabs $0x8004221484,%rdx
  800421a192:	00 00 00 
  800421a195:	be 03 01 00 00       	mov    $0x103,%esi
  800421a19a:	48 bf 53 14 22 04 80 	movabs $0x8004221453,%rdi
  800421a1a1:	00 00 00 
  800421a1a4:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a1a9:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421a1b0:	00 00 00 
  800421a1b3:	41 ff d0             	callq  *%r8
  800421a1b6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a1ba:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800421a1c0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421a1c4:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800421a1ca:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  800421a1d0:	b9 00 00 40 00       	mov    $0x400000,%ecx
  800421a1d5:	be 00 00 40 00       	mov    $0x400000,%esi
  800421a1da:	89 c7                	mov    %eax,%edi
  800421a1dc:	48 b8 ff f2 20 04 80 	movabs $0x800420f2ff,%rax
  800421a1e3:	00 00 00 
  800421a1e6:	ff d0                	callq  *%rax
  800421a1e8:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a1eb:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a1ef:	79 4a                	jns    800421a23b <test_ept_map+0x218>
  800421a1f1:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421a1f4:	89 c6                	mov    %eax,%esi
  800421a1f6:	48 bf e0 14 22 04 80 	movabs $0x80042214e0,%rdi
  800421a1fd:	00 00 00 
  800421a200:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a205:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421a20c:	00 00 00 
  800421a20f:	ff d2                	callq  *%rdx
  800421a211:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421a215:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800421a21b:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  800421a21f:	89 d6                	mov    %edx,%esi
  800421a221:	48 89 c7             	mov    %rax,%rdi
  800421a224:	48 b8 9c 81 20 04 80 	movabs $0x800420819c,%rax
  800421a22b:	00 00 00 
  800421a22e:	ff d0                	callq  *%rax
  800421a230:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a233:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a237:	79 5c                	jns    800421a295 <test_ept_map+0x272>
  800421a239:	eb 2a                	jmp    800421a265 <test_ept_map+0x242>
  800421a23b:	48 ba 18 15 22 04 80 	movabs $0x8004221518,%rdx
  800421a242:	00 00 00 
  800421a245:	be 07 01 00 00       	mov    $0x107,%esi
  800421a24a:	48 bf 53 14 22 04 80 	movabs $0x8004221453,%rdi
  800421a251:	00 00 00 
  800421a254:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a259:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  800421a260:	00 00 00 
  800421a263:	ff d1                	callq  *%rcx
  800421a265:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421a268:	89 c1                	mov    %eax,%ecx
  800421a26a:	48 ba 40 15 22 04 80 	movabs $0x8004221540,%rdx
  800421a271:	00 00 00 
  800421a274:	be 0c 01 00 00       	mov    $0x10c,%esi
  800421a279:	48 bf 53 14 22 04 80 	movabs $0x8004221453,%rdi
  800421a280:	00 00 00 
  800421a283:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a288:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421a28f:	00 00 00 
  800421a292:	41 ff d0             	callq  *%r8
  800421a295:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a299:	48 c7 80 20 01 00 00 	movq   $0x401000,0x120(%rax)
  800421a2a0:	00 10 40 00 
  800421a2a4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a2a8:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800421a2ae:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421a2b2:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800421a2b8:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  800421a2be:	b9 00 00 40 00       	mov    $0x400000,%ecx
  800421a2c3:	48 be 00 00 80 00 80 	movabs $0x8000800000,%rsi
  800421a2ca:	00 00 00 
  800421a2cd:	89 c7                	mov    %eax,%edi
  800421a2cf:	48 b8 ff f2 20 04 80 	movabs $0x800420f2ff,%rax
  800421a2d6:	00 00 00 
  800421a2d9:	ff d0                	callq  *%rax
  800421a2db:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a2de:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a2e2:	79 61                	jns    800421a345 <test_ept_map+0x322>
  800421a2e4:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421a2e7:	89 c6                	mov    %eax,%esi
  800421a2e9:	48 bf 68 15 22 04 80 	movabs $0x8004221568,%rdi
  800421a2f0:	00 00 00 
  800421a2f3:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a2f8:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421a2ff:	00 00 00 
  800421a302:	ff d2                	callq  *%rdx
  800421a304:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a308:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800421a30e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421a312:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800421a318:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  800421a31e:	b9 00 00 40 00       	mov    $0x400000,%ecx
  800421a323:	be 01 00 40 00       	mov    $0x400001,%esi
  800421a328:	89 c7                	mov    %eax,%edi
  800421a32a:	48 b8 ff f2 20 04 80 	movabs $0x800420f2ff,%rax
  800421a331:	00 00 00 
  800421a334:	ff d0                	callq  *%rax
  800421a336:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a339:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a33d:	0f 89 8d 00 00 00    	jns    800421a3d0 <test_ept_map+0x3ad>
  800421a343:	eb 2a                	jmp    800421a36f <test_ept_map+0x34c>
  800421a345:	48 ba a0 15 22 04 80 	movabs $0x80042215a0,%rdx
  800421a34c:	00 00 00 
  800421a34f:	be 13 01 00 00       	mov    $0x113,%esi
  800421a354:	48 bf 53 14 22 04 80 	movabs $0x8004221453,%rdi
  800421a35b:	00 00 00 
  800421a35e:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a363:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  800421a36a:	00 00 00 
  800421a36d:	ff d1                	callq  *%rcx
  800421a36f:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421a372:	89 c6                	mov    %eax,%esi
  800421a374:	48 bf d0 15 22 04 80 	movabs $0x80042215d0,%rdi
  800421a37b:	00 00 00 
  800421a37e:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a383:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421a38a:	00 00 00 
  800421a38d:	ff d2                	callq  *%rdx
  800421a38f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a393:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800421a399:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421a39d:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800421a3a3:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  800421a3a9:	b9 00 10 40 00       	mov    $0x401000,%ecx
  800421a3ae:	be 00 00 40 00       	mov    $0x400000,%esi
  800421a3b3:	89 c7                	mov    %eax,%edi
  800421a3b5:	48 b8 ff f2 20 04 80 	movabs $0x800420f2ff,%rax
  800421a3bc:	00 00 00 
  800421a3bf:	ff d0                	callq  *%rax
  800421a3c1:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a3c4:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a3c8:	0f 89 8d 00 00 00    	jns    800421a45b <test_ept_map+0x438>
  800421a3ce:	eb 2a                	jmp    800421a3fa <test_ept_map+0x3d7>
  800421a3d0:	48 ba 08 16 22 04 80 	movabs $0x8004221608,%rdx
  800421a3d7:	00 00 00 
  800421a3da:	be 17 01 00 00       	mov    $0x117,%esi
  800421a3df:	48 bf 53 14 22 04 80 	movabs $0x8004221453,%rdi
  800421a3e6:	00 00 00 
  800421a3e9:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a3ee:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  800421a3f5:	00 00 00 
  800421a3f8:	ff d1                	callq  *%rcx
  800421a3fa:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421a3fd:	89 c6                	mov    %eax,%esi
  800421a3ff:	48 bf 38 16 22 04 80 	movabs $0x8004221638,%rdi
  800421a406:	00 00 00 
  800421a409:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a40e:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421a415:	00 00 00 
  800421a418:	ff d2                	callq  *%rdx
  800421a41a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a41e:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800421a424:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421a428:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800421a42e:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  800421a434:	b9 ff ff 3f 00       	mov    $0x3fffff,%ecx
  800421a439:	be 00 00 40 00       	mov    $0x400000,%esi
  800421a43e:	89 c7                	mov    %eax,%edi
  800421a440:	48 b8 ff f2 20 04 80 	movabs $0x800420f2ff,%rax
  800421a447:	00 00 00 
  800421a44a:	ff d0                	callq  *%rax
  800421a44c:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a44f:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a453:	0f 89 8d 00 00 00    	jns    800421a4e6 <test_ept_map+0x4c3>
  800421a459:	eb 2a                	jmp    800421a485 <test_ept_map+0x462>
  800421a45b:	48 ba 78 16 22 04 80 	movabs $0x8004221678,%rdx
  800421a462:	00 00 00 
  800421a465:	be 1d 01 00 00       	mov    $0x11d,%esi
  800421a46a:	48 bf 53 14 22 04 80 	movabs $0x8004221453,%rdi
  800421a471:	00 00 00 
  800421a474:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a479:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  800421a480:	00 00 00 
  800421a483:	ff d1                	callq  *%rcx
  800421a485:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421a488:	89 c6                	mov    %eax,%esi
  800421a48a:	48 bf a8 16 22 04 80 	movabs $0x80042216a8,%rdi
  800421a491:	00 00 00 
  800421a494:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a499:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421a4a0:	00 00 00 
  800421a4a3:	ff d2                	callq  *%rdx
  800421a4a5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a4a9:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800421a4af:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421a4b3:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800421a4b9:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800421a4bf:	b9 00 00 40 00       	mov    $0x400000,%ecx
  800421a4c4:	be 00 00 40 00       	mov    $0x400000,%esi
  800421a4c9:	89 c7                	mov    %eax,%edi
  800421a4cb:	48 b8 ff f2 20 04 80 	movabs $0x800420f2ff,%rax
  800421a4d2:	00 00 00 
  800421a4d5:	ff d0                	callq  *%rax
  800421a4d7:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a4da:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a4de:	0f 89 8d 00 00 00    	jns    800421a571 <test_ept_map+0x54e>
  800421a4e4:	eb 2a                	jmp    800421a510 <test_ept_map+0x4ed>
  800421a4e6:	48 ba e0 16 22 04 80 	movabs $0x80042216e0,%rdx
  800421a4ed:	00 00 00 
  800421a4f0:	be 21 01 00 00       	mov    $0x121,%esi
  800421a4f5:	48 bf 53 14 22 04 80 	movabs $0x8004221453,%rdi
  800421a4fc:	00 00 00 
  800421a4ff:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a504:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  800421a50b:	00 00 00 
  800421a50e:	ff d1                	callq  *%rcx
  800421a510:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421a513:	89 c6                	mov    %eax,%esi
  800421a515:	48 bf 10 17 22 04 80 	movabs $0x8004221710,%rdi
  800421a51c:	00 00 00 
  800421a51f:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a524:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421a52b:	00 00 00 
  800421a52e:	ff d2                	callq  *%rdx
  800421a530:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a534:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800421a53a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421a53e:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800421a544:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  800421a54a:	b9 00 00 40 00       	mov    $0x400000,%ecx
  800421a54f:	be 00 00 40 00       	mov    $0x400000,%esi
  800421a554:	89 c7                	mov    %eax,%edi
  800421a556:	48 b8 ff f2 20 04 80 	movabs $0x800420f2ff,%rax
  800421a55d:	00 00 00 
  800421a560:	ff d0                	callq  *%rax
  800421a562:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a565:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a569:	0f 89 97 00 00 00    	jns    800421a606 <test_ept_map+0x5e3>
  800421a56f:	eb 2a                	jmp    800421a59b <test_ept_map+0x578>
  800421a571:	48 ba 50 17 22 04 80 	movabs $0x8004221750,%rdx
  800421a578:	00 00 00 
  800421a57b:	be 27 01 00 00       	mov    $0x127,%esi
  800421a580:	48 bf 53 14 22 04 80 	movabs $0x8004221453,%rdi
  800421a587:	00 00 00 
  800421a58a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a58f:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  800421a596:	00 00 00 
  800421a599:	ff d1                	callq  *%rcx
  800421a59b:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421a59e:	89 c6                	mov    %eax,%esi
  800421a5a0:	48 bf 78 17 22 04 80 	movabs $0x8004221778,%rdi
  800421a5a7:	00 00 00 
  800421a5aa:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a5af:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421a5b6:	00 00 00 
  800421a5b9:	ff d2                	callq  *%rdx
  800421a5bb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a5bf:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421a5c3:	0f b7 c0             	movzwl %ax,%eax
  800421a5c6:	89 45 cc             	mov    %eax,-0x34(%rbp)
  800421a5c9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a5cd:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800421a5d3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421a5d7:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800421a5dd:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  800421a5e3:	b9 00 00 40 00       	mov    $0x400000,%ecx
  800421a5e8:	be 00 00 40 00       	mov    $0x400000,%esi
  800421a5ed:	89 c7                	mov    %eax,%edi
  800421a5ef:	48 b8 ff f2 20 04 80 	movabs $0x800420f2ff,%rax
  800421a5f6:	00 00 00 
  800421a5f9:	ff d0                	callq  *%rax
  800421a5fb:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a5fe:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a602:	79 5c                	jns    800421a660 <test_ept_map+0x63d>
  800421a604:	eb 2a                	jmp    800421a630 <test_ept_map+0x60d>
  800421a606:	48 ba b8 17 22 04 80 	movabs $0x80042217b8,%rdx
  800421a60d:	00 00 00 
  800421a610:	be 2b 01 00 00       	mov    $0x12b,%esi
  800421a615:	48 bf 53 14 22 04 80 	movabs $0x8004221453,%rdi
  800421a61c:	00 00 00 
  800421a61f:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a624:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  800421a62b:	00 00 00 
  800421a62e:	ff d1                	callq  *%rcx
  800421a630:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421a633:	89 c1                	mov    %eax,%ecx
  800421a635:	48 ba e0 17 22 04 80 	movabs $0x80042217e0,%rdx
  800421a63c:	00 00 00 
  800421a63f:	be 30 01 00 00       	mov    $0x130,%esi
  800421a644:	48 bf 53 14 22 04 80 	movabs $0x8004221453,%rdi
  800421a64b:	00 00 00 
  800421a64e:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a653:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421a65a:	00 00 00 
  800421a65d:	41 ff d0             	callq  *%r8
  800421a660:	48 bf 00 18 22 04 80 	movabs $0x8004221800,%rdi
  800421a667:	00 00 00 
  800421a66a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a66f:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421a676:	00 00 00 
  800421a679:	ff d2                	callq  *%rdx
  800421a67b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a67f:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421a683:	0f b7 c0             	movzwl %ax,%eax
  800421a686:	8b 55 cc             	mov    -0x34(%rbp),%edx
  800421a689:	83 c2 01             	add    $0x1,%edx
  800421a68c:	39 d0                	cmp    %edx,%eax
  800421a68e:	74 2a                	je     800421a6ba <test_ept_map+0x697>
  800421a690:	48 ba 20 18 22 04 80 	movabs $0x8004221820,%rdx
  800421a697:	00 00 00 
  800421a69a:	be 35 01 00 00       	mov    $0x135,%esi
  800421a69f:	48 bf 53 14 22 04 80 	movabs $0x8004221453,%rdi
  800421a6a6:	00 00 00 
  800421a6a9:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a6ae:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  800421a6b5:	00 00 00 
  800421a6b8:	ff d1                	callq  *%rcx
  800421a6ba:	48 bf 3b 18 22 04 80 	movabs $0x800422183b,%rdi
  800421a6c1:	00 00 00 
  800421a6c4:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a6c9:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421a6d0:	00 00 00 
  800421a6d3:	ff d2                	callq  *%rdx
  800421a6d5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a6d9:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421a6dd:	0f b7 c0             	movzwl %ax,%eax
  800421a6e0:	89 45 cc             	mov    %eax,-0x34(%rbp)
  800421a6e3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a6e7:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800421a6ed:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421a6f1:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800421a6f7:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  800421a6fd:	b9 00 00 40 00       	mov    $0x400000,%ecx
  800421a702:	be 00 00 40 00       	mov    $0x400000,%esi
  800421a707:	89 c7                	mov    %eax,%edi
  800421a709:	48 b8 ff f2 20 04 80 	movabs $0x800420f2ff,%rax
  800421a710:	00 00 00 
  800421a713:	ff d0                	callq  *%rax
  800421a715:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a718:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a71c:	79 2d                	jns    800421a74b <test_ept_map+0x728>
  800421a71e:	48 bf 00 18 22 04 80 	movabs $0x8004221800,%rdi
  800421a725:	00 00 00 
  800421a728:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a72d:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421a734:	00 00 00 
  800421a737:	ff d2                	callq  *%rdx
  800421a739:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a73d:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421a741:	0f b7 c0             	movzwl %ax,%eax
  800421a744:	3b 45 cc             	cmp    -0x34(%rbp),%eax
  800421a747:	75 74                	jne    800421a7bd <test_ept_map+0x79a>
  800421a749:	eb 2a                	jmp    800421a775 <test_ept_map+0x752>
  800421a74b:	48 ba 60 18 22 04 80 	movabs $0x8004221860,%rdx
  800421a752:	00 00 00 
  800421a755:	be 3e 01 00 00       	mov    $0x13e,%esi
  800421a75a:	48 bf 53 14 22 04 80 	movabs $0x8004221453,%rdi
  800421a761:	00 00 00 
  800421a764:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a769:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  800421a770:	00 00 00 
  800421a773:	ff d1                	callq  *%rcx
  800421a775:	48 bf 90 18 22 04 80 	movabs $0x8004221890,%rdi
  800421a77c:	00 00 00 
  800421a77f:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a784:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421a78b:	00 00 00 
  800421a78e:	ff d2                	callq  *%rdx
  800421a790:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  800421a794:	48 89 c1             	mov    %rax,%rcx
  800421a797:	ba 00 00 00 00       	mov    $0x0,%edx
  800421a79c:	be 00 00 40 00       	mov    $0x400000,%esi
  800421a7a1:	bf 00 00 00 00       	mov    $0x0,%edi
  800421a7a6:	48 b8 00 99 21 04 80 	movabs $0x8004219900,%rax
  800421a7ad:	00 00 00 
  800421a7b0:	ff d0                	callq  *%rax
  800421a7b2:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a7b5:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a7b9:	79 7d                	jns    800421a838 <test_ept_map+0x815>
  800421a7bb:	eb 2a                	jmp    800421a7e7 <test_ept_map+0x7c4>
  800421a7bd:	48 ba b8 18 22 04 80 	movabs $0x80042218b8,%rdx
  800421a7c4:	00 00 00 
  800421a7c7:	be 43 01 00 00       	mov    $0x143,%esi
  800421a7cc:	48 bf 53 14 22 04 80 	movabs $0x8004221453,%rdi
  800421a7d3:	00 00 00 
  800421a7d6:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a7db:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  800421a7e2:	00 00 00 
  800421a7e5:	ff d1                	callq  *%rcx
  800421a7e7:	48 bf e0 18 22 04 80 	movabs $0x80042218e0,%rdi
  800421a7ee:	00 00 00 
  800421a7f1:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a7f6:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421a7fd:	00 00 00 
  800421a800:	ff d2                	callq  *%rdx
  800421a802:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a806:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800421a80d:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
  800421a811:	48 89 d1             	mov    %rdx,%rcx
  800421a814:	ba 00 00 00 00       	mov    $0x0,%edx
  800421a819:	be 00 00 40 00       	mov    $0x400000,%esi
  800421a81e:	48 89 c7             	mov    %rax,%rdi
  800421a821:	48 b8 00 99 21 04 80 	movabs $0x8004219900,%rax
  800421a828:	00 00 00 
  800421a82b:	ff d0                	callq  *%rax
  800421a82d:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a830:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a834:	79 5c                	jns    800421a892 <test_ept_map+0x86f>
  800421a836:	eb 2a                	jmp    800421a862 <test_ept_map+0x83f>
  800421a838:	48 ba 18 19 22 04 80 	movabs $0x8004221918,%rdx
  800421a83f:	00 00 00 
  800421a842:	be 49 01 00 00       	mov    $0x149,%esi
  800421a847:	48 bf 53 14 22 04 80 	movabs $0x8004221453,%rdi
  800421a84e:	00 00 00 
  800421a851:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a856:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  800421a85d:	00 00 00 
  800421a860:	ff d1                	callq  *%rcx
  800421a862:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421a865:	89 c1                	mov    %eax,%ecx
  800421a867:	48 ba 40 19 22 04 80 	movabs $0x8004221940,%rdx
  800421a86e:	00 00 00 
  800421a871:	be 4d 01 00 00       	mov    $0x14d,%esi
  800421a876:	48 bf 53 14 22 04 80 	movabs $0x8004221453,%rdi
  800421a87d:	00 00 00 
  800421a880:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a885:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421a88c:	00 00 00 
  800421a88f:	41 ff d0             	callq  *%r8
  800421a892:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a896:	48 89 c7             	mov    %rax,%rdi
  800421a899:	48 b8 24 97 21 04 80 	movabs $0x8004219724,%rax
  800421a8a0:	00 00 00 
  800421a8a3:	ff d0                	callq  *%rax
  800421a8a5:	48 89 c3             	mov    %rax,%rbx
  800421a8a8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421a8ac:	48 8b 00             	mov    (%rax),%rax
  800421a8af:	48 89 c7             	mov    %rax,%rdi
  800421a8b2:	48 b8 42 98 21 04 80 	movabs $0x8004219842,%rax
  800421a8b9:	00 00 00 
  800421a8bc:	ff d0                	callq  *%rax
  800421a8be:	48 39 c3             	cmp    %rax,%rbx
  800421a8c1:	74 5d                	je     800421a920 <test_ept_map+0x8fd>
  800421a8c3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421a8c7:	48 8b 00             	mov    (%rax),%rax
  800421a8ca:	48 89 c7             	mov    %rax,%rdi
  800421a8cd:	48 b8 42 98 21 04 80 	movabs $0x8004219842,%rax
  800421a8d4:	00 00 00 
  800421a8d7:	ff d0                	callq  *%rax
  800421a8d9:	48 89 c3             	mov    %rax,%rbx
  800421a8dc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a8e0:	48 89 c7             	mov    %rax,%rdi
  800421a8e3:	48 b8 24 97 21 04 80 	movabs $0x8004219724,%rax
  800421a8ea:	00 00 00 
  800421a8ed:	ff d0                	callq  *%rax
  800421a8ef:	49 89 d8             	mov    %rbx,%r8
  800421a8f2:	48 89 c1             	mov    %rax,%rcx
  800421a8f5:	48 ba 60 19 22 04 80 	movabs $0x8004221960,%rdx
  800421a8fc:	00 00 00 
  800421a8ff:	be 50 01 00 00       	mov    $0x150,%esi
  800421a904:	48 bf 53 14 22 04 80 	movabs $0x8004221453,%rdi
  800421a90b:	00 00 00 
  800421a90e:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a913:	49 b9 d5 04 20 04 80 	movabs $0x80042004d5,%r9
  800421a91a:	00 00 00 
  800421a91d:	41 ff d1             	callq  *%r9
  800421a920:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421a924:	48 8b 00             	mov    (%rax),%rax
  800421a927:	48 89 c7             	mov    %rax,%rdi
  800421a92a:	48 b8 42 98 21 04 80 	movabs $0x8004219842,%rax
  800421a931:	00 00 00 
  800421a934:	ff d0                	callq  *%rax
  800421a936:	48 89 c3             	mov    %rax,%rbx
  800421a939:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a93d:	48 89 c7             	mov    %rax,%rdi
  800421a940:	48 b8 24 97 21 04 80 	movabs $0x8004219724,%rax
  800421a947:	00 00 00 
  800421a94a:	ff d0                	callq  *%rax
  800421a94c:	48 89 da             	mov    %rbx,%rdx
  800421a94f:	48 89 c6             	mov    %rax,%rsi
  800421a952:	48 bf 90 19 22 04 80 	movabs $0x8004221990,%rdi
  800421a959:	00 00 00 
  800421a95c:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a961:	48 b9 83 9c 20 04 80 	movabs $0x8004209c83,%rcx
  800421a968:	00 00 00 
  800421a96b:	ff d1                	callq  *%rcx
  800421a96d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a971:	48 89 c7             	mov    %rax,%rdi
  800421a974:	48 b8 ba 97 21 04 80 	movabs $0x80042197ba,%rax
  800421a97b:	00 00 00 
  800421a97e:	ff d0                	callq  *%rax
  800421a980:	48 89 c6             	mov    %rax,%rsi
  800421a983:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a987:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800421a98e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800421a994:	b9 01 00 00 00       	mov    $0x1,%ecx
  800421a999:	ba 00 00 40 00       	mov    $0x400000,%edx
  800421a99e:	48 89 c7             	mov    %rax,%rdi
  800421a9a1:	48 b8 0e 9e 21 04 80 	movabs $0x8004219e0e,%rax
  800421a9a8:	00 00 00 
  800421a9ab:	ff d0                	callq  *%rax
  800421a9ad:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a9b0:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a9b4:	79 66                	jns    800421aa1c <test_ept_map+0x9f9>
  800421a9b6:	48 bf c0 19 22 04 80 	movabs $0x80042219c0,%rdi
  800421a9bd:	00 00 00 
  800421a9c0:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a9c5:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421a9cc:	00 00 00 
  800421a9cf:	ff d2                	callq  *%rdx
  800421a9d1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a9d5:	48 89 c7             	mov    %rax,%rdi
  800421a9d8:	48 b8 ba 97 21 04 80 	movabs $0x80042197ba,%rax
  800421a9df:	00 00 00 
  800421a9e2:	ff d0                	callq  *%rax
  800421a9e4:	48 89 c6             	mov    %rax,%rsi
  800421a9e7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a9eb:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800421a9f2:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  800421a9f8:	b9 01 00 00 00       	mov    $0x1,%ecx
  800421a9fd:	ba 00 00 40 00       	mov    $0x400000,%edx
  800421aa02:	48 89 c7             	mov    %rax,%rdi
  800421aa05:	48 b8 0e 9e 21 04 80 	movabs $0x8004219e0e,%rax
  800421aa0c:	00 00 00 
  800421aa0f:	ff d0                	callq  *%rax
  800421aa11:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421aa14:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421aa18:	79 56                	jns    800421aa70 <test_ept_map+0xa4d>
  800421aa1a:	eb 2a                	jmp    800421aa46 <test_ept_map+0xa23>
  800421aa1c:	48 ba f0 19 22 04 80 	movabs $0x80042219f0,%rdx
  800421aa23:	00 00 00 
  800421aa26:	be 59 01 00 00       	mov    $0x159,%esi
  800421aa2b:	48 bf 53 14 22 04 80 	movabs $0x8004221453,%rdi
  800421aa32:	00 00 00 
  800421aa35:	b8 00 00 00 00       	mov    $0x0,%eax
  800421aa3a:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  800421aa41:	00 00 00 
  800421aa44:	ff d1                	callq  *%rcx
  800421aa46:	48 ba 38 1a 22 04 80 	movabs $0x8004221a38,%rdx
  800421aa4d:	00 00 00 
  800421aa50:	be 5d 01 00 00       	mov    $0x15d,%esi
  800421aa55:	48 bf 53 14 22 04 80 	movabs $0x8004221453,%rdi
  800421aa5c:	00 00 00 
  800421aa5f:	b8 00 00 00 00       	mov    $0x0,%eax
  800421aa64:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  800421aa6b:	00 00 00 
  800421aa6e:	ff d1                	callq  *%rcx
  800421aa70:	48 bf 68 1a 22 04 80 	movabs $0x8004221a68,%rdi
  800421aa77:	00 00 00 
  800421aa7a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421aa7f:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421aa86:	00 00 00 
  800421aa89:	ff d2                	callq  *%rdx
  800421aa8b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421aa8f:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800421aa96:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
  800421aa9a:	48 89 d1             	mov    %rdx,%rcx
  800421aa9d:	ba 00 00 00 00       	mov    $0x0,%edx
  800421aaa2:	be 00 00 40 00       	mov    $0x400000,%esi
  800421aaa7:	48 89 c7             	mov    %rax,%rdi
  800421aaaa:	48 b8 00 99 21 04 80 	movabs $0x8004219900,%rax
  800421aab1:	00 00 00 
  800421aab4:	ff d0                	callq  *%rax
  800421aab6:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421aab9:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421aabd:	79 30                	jns    800421aaef <test_ept_map+0xacc>
  800421aabf:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421aac2:	89 c1                	mov    %eax,%ecx
  800421aac4:	48 ba 40 19 22 04 80 	movabs $0x8004221940,%rdx
  800421aacb:	00 00 00 
  800421aace:	be 63 01 00 00       	mov    $0x163,%esi
  800421aad3:	48 bf 53 14 22 04 80 	movabs $0x8004221453,%rdi
  800421aada:	00 00 00 
  800421aadd:	b8 00 00 00 00       	mov    $0x0,%eax
  800421aae2:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421aae9:	00 00 00 
  800421aaec:	41 ff d0             	callq  *%r8
  800421aaef:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421aaf3:	48 8b 00             	mov    (%rax),%rax
  800421aaf6:	25 ff 0f 00 00       	and    $0xfff,%eax
  800421aafb:	48 83 f8 71          	cmp    $0x71,%rax
  800421aaff:	75 36                	jne    800421ab37 <test_ept_map+0xb14>
  800421ab01:	48 bf 90 1a 22 04 80 	movabs $0x8004221a90,%rdi
  800421ab08:	00 00 00 
  800421ab0b:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ab10:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421ab17:	00 00 00 
  800421ab1a:	ff d2                	callq  *%rdx
  800421ab1c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421ab20:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800421ab27:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421ab2b:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%rbp)
  800421ab32:	e9 23 01 00 00       	jmpq   800421ac5a <test_ept_map+0xc37>
  800421ab37:	48 ba b8 1a 22 04 80 	movabs $0x8004221ab8,%rdx
  800421ab3e:	00 00 00 
  800421ab41:	be 67 01 00 00       	mov    $0x167,%esi
  800421ab46:	48 bf 53 14 22 04 80 	movabs $0x8004221453,%rdi
  800421ab4d:	00 00 00 
  800421ab50:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ab55:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  800421ab5c:	00 00 00 
  800421ab5f:	ff d1                	callq  *%rcx
  800421ab61:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421ab64:	89 d0                	mov    %edx,%eax
  800421ab66:	c1 e0 03             	shl    $0x3,%eax
  800421ab69:	01 d0                	add    %edx,%eax
  800421ab6b:	83 c0 0c             	add    $0xc,%eax
  800421ab6e:	ba 00 00 40 00       	mov    $0x400000,%edx
  800421ab73:	89 c1                	mov    %eax,%ecx
  800421ab75:	48 d3 ea             	shr    %cl,%rdx
  800421ab78:	48 89 d0             	mov    %rdx,%rax
  800421ab7b:	25 ff 01 00 00       	and    $0x1ff,%eax
  800421ab80:	89 45 c8             	mov    %eax,-0x38(%rbp)
  800421ab83:	8b 45 c8             	mov    -0x38(%rbp),%eax
  800421ab86:	48 98                	cltq   
  800421ab88:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421ab8f:	00 
  800421ab90:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421ab94:	48 01 d0             	add    %rdx,%rax
  800421ab97:	48 8b 00             	mov    (%rax),%rax
  800421ab9a:	48 89 c7             	mov    %rax,%rdi
  800421ab9d:	48 b8 e2 98 21 04 80 	movabs $0x80042198e2,%rax
  800421aba4:	00 00 00 
  800421aba7:	ff d0                	callq  *%rax
  800421aba9:	85 c0                	test   %eax,%eax
  800421abab:	75 30                	jne    800421abdd <test_ept_map+0xbba>
  800421abad:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421abb0:	89 c1                	mov    %eax,%ecx
  800421abb2:	48 ba e8 1a 22 04 80 	movabs $0x8004221ae8,%rdx
  800421abb9:	00 00 00 
  800421abbc:	be 6f 01 00 00       	mov    $0x16f,%esi
  800421abc1:	48 bf 53 14 22 04 80 	movabs $0x8004221453,%rdi
  800421abc8:	00 00 00 
  800421abcb:	b8 00 00 00 00       	mov    $0x0,%eax
  800421abd0:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421abd7:	00 00 00 
  800421abda:	41 ff d0             	callq  *%r8
  800421abdd:	8b 45 c8             	mov    -0x38(%rbp),%eax
  800421abe0:	48 98                	cltq   
  800421abe2:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421abe9:	00 
  800421abea:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421abee:	48 01 d0             	add    %rdx,%rax
  800421abf1:	48 8b 00             	mov    (%rax),%rax
  800421abf4:	83 e0 07             	and    $0x7,%eax
  800421abf7:	48 85 c0             	test   %rax,%rax
  800421abfa:	75 30                	jne    800421ac2c <test_ept_map+0xc09>
  800421abfc:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421abff:	89 c1                	mov    %eax,%ecx
  800421ac01:	48 ba 28 1b 22 04 80 	movabs $0x8004221b28,%rdx
  800421ac08:	00 00 00 
  800421ac0b:	be 73 01 00 00       	mov    $0x173,%esi
  800421ac10:	48 bf 53 14 22 04 80 	movabs $0x8004221453,%rdi
  800421ac17:	00 00 00 
  800421ac1a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ac1f:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421ac26:	00 00 00 
  800421ac29:	41 ff d0             	callq  *%r8
  800421ac2c:	8b 45 c8             	mov    -0x38(%rbp),%eax
  800421ac2f:	48 98                	cltq   
  800421ac31:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421ac38:	00 
  800421ac39:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421ac3d:	48 01 d0             	add    %rdx,%rax
  800421ac40:	48 8b 00             	mov    (%rax),%rax
  800421ac43:	48 89 c7             	mov    %rax,%rdi
  800421ac46:	48 b8 5a 98 21 04 80 	movabs $0x800421985a,%rax
  800421ac4d:	00 00 00 
  800421ac50:	ff d0                	callq  *%rax
  800421ac52:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421ac56:	83 6d ec 01          	subl   $0x1,-0x14(%rbp)
  800421ac5a:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800421ac5e:	0f 8f fd fe ff ff    	jg     800421ab61 <test_ept_map+0xb3e>
  800421ac64:	48 bf 58 1b 22 04 80 	movabs $0x8004221b58,%rdi
  800421ac6b:	00 00 00 
  800421ac6e:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ac73:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421ac7a:	00 00 00 
  800421ac7d:	ff d2                	callq  *%rdx
  800421ac7f:	48 bf 80 1b 22 04 80 	movabs $0x8004221b80,%rdi
  800421ac86:	00 00 00 
  800421ac89:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ac8e:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421ac95:	00 00 00 
  800421ac98:	ff d2                	callq  *%rdx
  800421ac9a:	48 ba ae 1b 22 04 80 	movabs $0x8004221bae,%rdx
  800421aca1:	00 00 00 
  800421aca4:	be 7b 01 00 00       	mov    $0x17b,%esi
  800421aca9:	48 bf 53 14 22 04 80 	movabs $0x8004221453,%rdi
  800421acb0:	00 00 00 
  800421acb3:	b8 00 00 00 00       	mov    $0x0,%eax
  800421acb8:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  800421acbf:	00 00 00 
  800421acc2:	ff d1                	callq  *%rcx

000000800421acc4 <vmcs_writel>:
  800421acc4:	55                   	push   %rbp
  800421acc5:	48 89 e5             	mov    %rsp,%rbp
  800421acc8:	48 83 ec 20          	sub    $0x20,%rsp
  800421accc:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800421accf:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421acd3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421acd7:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421acda:	f8                   	clc    
  800421acdb:	0f 79 d0             	vmwrite %rax,%rdx
  800421acde:	0f 96 c0             	setbe  %al
  800421ace1:	88 45 ff             	mov    %al,-0x1(%rbp)
  800421ace4:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  800421ace8:	c9                   	leaveq 
  800421ace9:	c3                   	retq   

000000800421acea <vmcs_readl>:
  800421acea:	55                   	push   %rbp
  800421aceb:	48 89 e5             	mov    %rsp,%rbp
  800421acee:	48 83 ec 14          	sub    $0x14,%rsp
  800421acf2:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800421acf5:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421acf8:	89 c2                	mov    %eax,%edx
  800421acfa:	0f 78 d0             	vmread %rdx,%rax
  800421acfd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421ad01:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421ad05:	c9                   	leaveq 
  800421ad06:	c3                   	retq   

000000800421ad07 <cpuid>:

#define read_rip(var) __asm __volatile("leaq (%%rip), %0" : "=r" (var)::"cc","memory")

static __inline void
cpuid(uint32_t info, uint32_t *eaxp, uint32_t *ebxp, uint32_t *ecxp, uint32_t *edxp)
{
  800421ad07:	55                   	push   %rbp
  800421ad08:	48 89 e5             	mov    %rsp,%rbp
  800421ad0b:	53                   	push   %rbx
  800421ad0c:	48 83 ec 38          	sub    $0x38,%rsp
  800421ad10:	89 7d e4             	mov    %edi,-0x1c(%rbp)
  800421ad13:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  800421ad17:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  800421ad1b:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  800421ad1f:	4c 89 45 c0          	mov    %r8,-0x40(%rbp)
	uint32_t eax, ebx, ecx, edx;
	asm volatile("cpuid" 
  800421ad23:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421ad26:	0f a2                	cpuid  
  800421ad28:	89 de                	mov    %ebx,%esi
  800421ad2a:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421ad2d:	89 75 f0             	mov    %esi,-0x10(%rbp)
  800421ad30:	89 4d ec             	mov    %ecx,-0x14(%rbp)
  800421ad33:	89 55 e8             	mov    %edx,-0x18(%rbp)
			 : "=a" (eax), "=b" (ebx), "=c" (ecx), "=d" (edx)
			 : "a" (info));
	if (eaxp)
  800421ad36:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800421ad3b:	74 09                	je     800421ad46 <cpuid+0x3f>
		*eaxp = eax;
  800421ad3d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421ad41:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421ad44:	89 10                	mov    %edx,(%rax)
	if (ebxp)
  800421ad46:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800421ad4b:	74 09                	je     800421ad56 <cpuid+0x4f>
		*ebxp = ebx;
  800421ad4d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421ad51:	8b 55 f0             	mov    -0x10(%rbp),%edx
  800421ad54:	89 10                	mov    %edx,(%rax)
	if (ecxp)
  800421ad56:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800421ad5b:	74 09                	je     800421ad66 <cpuid+0x5f>
		*ecxp = ecx;
  800421ad5d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421ad61:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421ad64:	89 10                	mov    %edx,(%rax)
	if (edxp)
  800421ad66:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  800421ad6b:	74 09                	je     800421ad76 <cpuid+0x6f>
		*edxp = edx;
  800421ad6d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421ad71:	8b 55 e8             	mov    -0x18(%rbp),%edx
  800421ad74:	89 10                	mov    %edx,(%rax)
}
  800421ad76:	48 83 c4 38          	add    $0x38,%rsp
  800421ad7a:	5b                   	pop    %rbx
  800421ad7b:	5d                   	pop    %rbp
  800421ad7c:	c3                   	retq   

000000800421ad7d <page2ppn>:
  800421ad7d:	55                   	push   %rbp
  800421ad7e:	48 89 e5             	mov    %rsp,%rbp
  800421ad81:	48 83 ec 08          	sub    $0x8,%rsp
  800421ad85:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421ad89:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421ad8d:	48 b8 00 e6 6d 04 80 	movabs $0x80046de600,%rax
  800421ad94:	00 00 00 
  800421ad97:	48 8b 00             	mov    (%rax),%rax
  800421ad9a:	48 29 c2             	sub    %rax,%rdx
  800421ad9d:	48 89 d0             	mov    %rdx,%rax
  800421ada0:	48 c1 f8 04          	sar    $0x4,%rax
  800421ada4:	c9                   	leaveq 
  800421ada5:	c3                   	retq   

000000800421ada6 <page2pa>:
  800421ada6:	55                   	push   %rbp
  800421ada7:	48 89 e5             	mov    %rsp,%rbp
  800421adaa:	48 83 ec 08          	sub    $0x8,%rsp
  800421adae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421adb2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421adb6:	48 89 c7             	mov    %rax,%rdi
  800421adb9:	48 b8 7d ad 21 04 80 	movabs $0x800421ad7d,%rax
  800421adc0:	00 00 00 
  800421adc3:	ff d0                	callq  *%rax
  800421adc5:	48 c1 e0 0c          	shl    $0xc,%rax
  800421adc9:	c9                   	leaveq 
  800421adca:	c3                   	retq   

000000800421adcb <page2kva>:
  800421adcb:	55                   	push   %rbp
  800421adcc:	48 89 e5             	mov    %rsp,%rbp
  800421adcf:	48 83 ec 20          	sub    $0x20,%rsp
  800421add3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421add7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421addb:	48 89 c7             	mov    %rax,%rdi
  800421adde:	48 b8 a6 ad 21 04 80 	movabs $0x800421ada6,%rax
  800421ade5:	00 00 00 
  800421ade8:	ff d0                	callq  *%rax
  800421adea:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421adee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421adf2:	48 c1 e8 0c          	shr    $0xc,%rax
  800421adf6:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421adf9:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421adfc:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  800421ae03:	00 00 00 
  800421ae06:	48 8b 00             	mov    (%rax),%rax
  800421ae09:	48 39 c2             	cmp    %rax,%rdx
  800421ae0c:	72 32                	jb     800421ae40 <page2kva+0x75>
  800421ae0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421ae12:	48 89 c1             	mov    %rax,%rcx
  800421ae15:	48 ba c8 1b 22 04 80 	movabs $0x8004221bc8,%rdx
  800421ae1c:	00 00 00 
  800421ae1f:	be 62 00 00 00       	mov    $0x62,%esi
  800421ae24:	48 bf eb 1b 22 04 80 	movabs $0x8004221beb,%rdi
  800421ae2b:	00 00 00 
  800421ae2e:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ae33:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421ae3a:	00 00 00 
  800421ae3d:	41 ff d0             	callq  *%r8
  800421ae40:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800421ae47:	00 00 00 
  800421ae4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421ae4e:	48 01 d0             	add    %rdx,%rax
  800421ae51:	c9                   	leaveq 
  800421ae52:	c3                   	retq   

000000800421ae53 <lock_kernel>:
  800421ae53:	55                   	push   %rbp
  800421ae54:	48 89 e5             	mov    %rsp,%rbp
  800421ae57:	48 bf 60 57 23 04 80 	movabs $0x8004235760,%rdi
  800421ae5e:	00 00 00 
  800421ae61:	48 b8 bd 81 21 04 80 	movabs $0x80042181bd,%rax
  800421ae68:	00 00 00 
  800421ae6b:	ff d0                	callq  *%rax
  800421ae6d:	5d                   	pop    %rbp
  800421ae6e:	c3                   	retq   

000000800421ae6f <unlock_kernel>:
  800421ae6f:	55                   	push   %rbp
  800421ae70:	48 89 e5             	mov    %rsp,%rbp
  800421ae73:	48 bf 60 57 23 04 80 	movabs $0x8004235760,%rdi
  800421ae7a:	00 00 00 
  800421ae7d:	48 b8 94 82 21 04 80 	movabs $0x8004218294,%rax
  800421ae84:	00 00 00 
  800421ae87:	ff d0                	callq  *%rax
  800421ae89:	f3 90                	pause  
  800421ae8b:	5d                   	pop    %rbp
  800421ae8c:	c3                   	retq   

000000800421ae8d <vmx_list_vms>:
  800421ae8d:	55                   	push   %rbp
  800421ae8e:	48 89 e5             	mov    %rsp,%rbp
  800421ae91:	48 83 ec 10          	sub    $0x10,%rsp
  800421ae95:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  800421ae9c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421aea3:	e9 96 00 00 00       	jmpq   800421af3e <vmx_list_vms+0xb1>
  800421aea8:	48 b8 58 f2 4d 04 80 	movabs $0x80044df258,%rax
  800421aeaf:	00 00 00 
  800421aeb2:	48 8b 10             	mov    (%rax),%rdx
  800421aeb5:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421aeb8:	48 98                	cltq   
  800421aeba:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800421aec1:	48 01 d0             	add    %rdx,%rax
  800421aec4:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800421aeca:	83 f8 03             	cmp    $0x3,%eax
  800421aecd:	75 6b                	jne    800421af3a <vmx_list_vms+0xad>
  800421aecf:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  800421aed3:	75 1b                	jne    800421aef0 <vmx_list_vms+0x63>
  800421aed5:	48 bf fa 1b 22 04 80 	movabs $0x8004221bfa,%rdi
  800421aedc:	00 00 00 
  800421aedf:	b8 00 00 00 00       	mov    $0x0,%eax
  800421aee4:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421aeeb:	00 00 00 
  800421aeee:	ff d2                	callq  *%rdx
  800421aef0:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  800421aef4:	48 b8 58 f2 4d 04 80 	movabs $0x80044df258,%rax
  800421aefb:	00 00 00 
  800421aefe:	48 8b 10             	mov    (%rax),%rdx
  800421af01:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421af04:	48 98                	cltq   
  800421af06:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800421af0d:	48 01 d0             	add    %rdx,%rax
  800421af10:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800421af16:	8b 4d f8             	mov    -0x8(%rbp),%ecx
  800421af19:	8b 45 f8             	mov    -0x8(%rbp),%eax
  800421af1c:	89 c6                	mov    %eax,%esi
  800421af1e:	48 bf 08 1c 22 04 80 	movabs $0x8004221c08,%rdi
  800421af25:	00 00 00 
  800421af28:	b8 00 00 00 00       	mov    $0x0,%eax
  800421af2d:	49 b8 83 9c 20 04 80 	movabs $0x8004209c83,%r8
  800421af34:	00 00 00 
  800421af37:	41 ff d0             	callq  *%r8
  800421af3a:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421af3e:	81 7d fc ff 03 00 00 	cmpl   $0x3ff,-0x4(%rbp)
  800421af45:	0f 8e 5d ff ff ff    	jle    800421aea8 <vmx_list_vms+0x1b>
  800421af4b:	c9                   	leaveq 
  800421af4c:	c3                   	retq   

000000800421af4d <vmx_sel_resume>:
  800421af4d:	55                   	push   %rbp
  800421af4e:	48 89 e5             	mov    %rsp,%rbp
  800421af51:	48 83 ec 20          	sub    $0x20,%rsp
  800421af55:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800421af58:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  800421af5f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421af66:	e9 84 00 00 00       	jmpq   800421afef <vmx_sel_resume+0xa2>
  800421af6b:	48 b8 58 f2 4d 04 80 	movabs $0x80044df258,%rax
  800421af72:	00 00 00 
  800421af75:	48 8b 10             	mov    (%rax),%rdx
  800421af78:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421af7b:	48 98                	cltq   
  800421af7d:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800421af84:	48 01 d0             	add    %rdx,%rax
  800421af87:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800421af8d:	83 f8 03             	cmp    $0x3,%eax
  800421af90:	75 59                	jne    800421afeb <vmx_sel_resume+0x9e>
  800421af92:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  800421af96:	8b 45 f8             	mov    -0x8(%rbp),%eax
  800421af99:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  800421af9c:	75 4d                	jne    800421afeb <vmx_sel_resume+0x9e>
  800421af9e:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421afa1:	89 c6                	mov    %eax,%esi
  800421afa3:	48 bf 15 1c 22 04 80 	movabs $0x8004221c15,%rdi
  800421afaa:	00 00 00 
  800421afad:	b8 00 00 00 00       	mov    $0x0,%eax
  800421afb2:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421afb9:	00 00 00 
  800421afbc:	ff d2                	callq  *%rdx
  800421afbe:	48 b8 58 f2 4d 04 80 	movabs $0x80044df258,%rax
  800421afc5:	00 00 00 
  800421afc8:	48 8b 10             	mov    (%rax),%rdx
  800421afcb:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421afce:	48 98                	cltq   
  800421afd0:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800421afd7:	48 01 d0             	add    %rdx,%rax
  800421afda:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  800421afe1:	00 00 00 
  800421afe4:	b8 01 00 00 00       	mov    $0x1,%eax
  800421afe9:	eb 36                	jmp    800421b021 <vmx_sel_resume+0xd4>
  800421afeb:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421afef:	81 7d fc ff 03 00 00 	cmpl   $0x3ff,-0x4(%rbp)
  800421aff6:	0f 8e 6f ff ff ff    	jle    800421af6b <vmx_sel_resume+0x1e>
  800421affc:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421afff:	89 c6                	mov    %eax,%esi
  800421b001:	48 bf 28 1c 22 04 80 	movabs $0x8004221c28,%rdi
  800421b008:	00 00 00 
  800421b00b:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b010:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421b017:	00 00 00 
  800421b01a:	ff d2                	callq  *%rdx
  800421b01c:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b021:	c9                   	leaveq 
  800421b022:	c3                   	retq   

000000800421b023 <vmx_check_support>:
  800421b023:	55                   	push   %rbp
  800421b024:	48 89 e5             	mov    %rsp,%rbp
  800421b027:	48 83 ec 20          	sub    $0x20,%rsp
  800421b02b:	48 8d 75 ec          	lea    -0x14(%rbp),%rsi
  800421b02f:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800421b033:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx
  800421b037:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
  800421b03b:	49 89 f0             	mov    %rsi,%r8
  800421b03e:	48 89 c6             	mov    %rax,%rsi
  800421b041:	bf 01 00 00 00       	mov    $0x1,%edi
  800421b046:	48 b8 07 ad 21 04 80 	movabs $0x800421ad07,%rax
  800421b04d:	00 00 00 
  800421b050:	ff d0                	callq  *%rax
  800421b052:	8b 45 f0             	mov    -0x10(%rbp),%eax
  800421b055:	83 e0 20             	and    $0x20,%eax
  800421b058:	85 c0                	test   %eax,%eax
  800421b05a:	0f 95 c0             	setne  %al
  800421b05d:	88 45 ff             	mov    %al,-0x1(%rbp)
  800421b060:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
  800421b064:	74 1d                	je     800421b083 <vmx_check_support+0x60>
  800421b066:	48 bf 4a 1c 22 04 80 	movabs $0x8004221c4a,%rdi
  800421b06d:	00 00 00 
  800421b070:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b075:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421b07c:	00 00 00 
  800421b07f:	ff d2                	callq  *%rdx
  800421b081:	eb 1b                	jmp    800421b09e <vmx_check_support+0x7b>
  800421b083:	48 bf 68 1c 22 04 80 	movabs $0x8004221c68,%rdi
  800421b08a:	00 00 00 
  800421b08d:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b092:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421b099:	00 00 00 
  800421b09c:	ff d2                	callq  *%rdx
  800421b09e:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  800421b0a2:	c9                   	leaveq 
  800421b0a3:	c3                   	retq   

000000800421b0a4 <vmx_check_ept>:
  800421b0a4:	55                   	push   %rbp
  800421b0a5:	48 89 e5             	mov    %rsp,%rbp
  800421b0a8:	48 83 ec 50          	sub    $0x50,%rsp
  800421b0ac:	c7 45 e0 82 04 00 00 	movl   $0x482,-0x20(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421b0b3:	8b 45 e0             	mov    -0x20(%rbp),%eax
  800421b0b6:	89 c1                	mov    %eax,%ecx
  800421b0b8:	0f 32                	rdmsr  
  800421b0ba:	89 55 dc             	mov    %edx,-0x24(%rbp)
  800421b0bd:	89 45 d8             	mov    %eax,-0x28(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421b0c0:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  800421b0c7:	00 
	ret = edx;
  800421b0c8:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421b0cb:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	ret = ret << 32;
  800421b0cf:	48 c1 65 d0 20       	shlq   $0x20,-0x30(%rbp)
	ret |= eax;
  800421b0d4:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800421b0d7:	48 09 45 d0          	or     %rax,-0x30(%rbp)

	return ret;
  800421b0db:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421b0df:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421b0e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421b0e7:	48 c1 e8 3f          	shr    $0x3f,%rax
  800421b0eb:	88 45 f7             	mov    %al,-0x9(%rbp)
  800421b0ee:	80 7d f7 00          	cmpb   $0x0,-0x9(%rbp)
  800421b0f2:	74 76                	je     800421b16a <vmx_check_ept+0xc6>
  800421b0f4:	c7 45 cc 8b 04 00 00 	movl   $0x48b,-0x34(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421b0fb:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421b0fe:	89 c1                	mov    %eax,%ecx
  800421b100:	0f 32                	rdmsr  
  800421b102:	89 55 c8             	mov    %edx,-0x38(%rbp)
  800421b105:	89 45 c4             	mov    %eax,-0x3c(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421b108:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
  800421b10f:	00 
	ret = edx;
  800421b110:	8b 45 c8             	mov    -0x38(%rbp),%eax
  800421b113:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	ret = ret << 32;
  800421b117:	48 c1 65 b8 20       	shlq   $0x20,-0x48(%rbp)
	ret |= eax;
  800421b11c:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800421b11f:	48 09 45 b8          	or     %rax,-0x48(%rbp)

	return ret;
  800421b123:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421b127:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421b12b:	48 b8 00 00 00 00 02 	movabs $0x200000000,%rax
  800421b132:	00 00 00 
  800421b135:	48 23 45 e8          	and    -0x18(%rbp),%rax
  800421b139:	48 85 c0             	test   %rax,%rax
  800421b13c:	0f 95 c0             	setne  %al
  800421b13f:	88 45 e7             	mov    %al,-0x19(%rbp)
  800421b142:	80 7d e7 00          	cmpb   $0x0,-0x19(%rbp)
  800421b146:	74 22                	je     800421b16a <vmx_check_ept+0xc6>
  800421b148:	48 bf 88 1c 22 04 80 	movabs $0x8004221c88,%rdi
  800421b14f:	00 00 00 
  800421b152:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b157:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421b15e:	00 00 00 
  800421b161:	ff d2                	callq  *%rdx
  800421b163:	b8 01 00 00 00       	mov    $0x1,%eax
  800421b168:	eb 05                	jmp    800421b16f <vmx_check_ept+0xcb>
  800421b16a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b16f:	c9                   	leaveq 
  800421b170:	c3                   	retq   

000000800421b171 <check_fixed_bits>:
  800421b171:	55                   	push   %rbp
  800421b172:	48 89 e5             	mov    %rsp,%rbp
  800421b175:	48 83 ec 30          	sub    $0x30,%rsp
  800421b179:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421b17d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421b181:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800421b185:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421b18c:	e9 96 00 00 00       	jmpq   800421b227 <check_fixed_bits+0xb6>
  800421b191:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421b194:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421b198:	89 c1                	mov    %eax,%ecx
  800421b19a:	48 d3 ea             	shr    %cl,%rdx
  800421b19d:	48 89 d0             	mov    %rdx,%rax
  800421b1a0:	83 e0 01             	and    $0x1,%eax
  800421b1a3:	89 45 f8             	mov    %eax,-0x8(%rbp)
  800421b1a6:	83 7d f8 01          	cmpl   $0x1,-0x8(%rbp)
  800421b1aa:	75 1e                	jne    800421b1ca <check_fixed_bits+0x59>
  800421b1ac:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421b1af:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  800421b1b3:	89 c1                	mov    %eax,%ecx
  800421b1b5:	48 d3 ea             	shr    %cl,%rdx
  800421b1b8:	48 89 d0             	mov    %rdx,%rax
  800421b1bb:	83 e0 01             	and    $0x1,%eax
  800421b1be:	48 85 c0             	test   %rax,%rax
  800421b1c1:	75 60                	jne    800421b223 <check_fixed_bits+0xb2>
  800421b1c3:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b1c8:	eb 6e                	jmp    800421b238 <check_fixed_bits+0xc7>
  800421b1ca:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  800421b1ce:	75 1e                	jne    800421b1ee <check_fixed_bits+0x7d>
  800421b1d0:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421b1d3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800421b1d7:	89 c1                	mov    %eax,%ecx
  800421b1d9:	48 d3 ea             	shr    %cl,%rdx
  800421b1dc:	48 89 d0             	mov    %rdx,%rax
  800421b1df:	83 e0 01             	and    $0x1,%eax
  800421b1e2:	48 85 c0             	test   %rax,%rax
  800421b1e5:	74 3c                	je     800421b223 <check_fixed_bits+0xb2>
  800421b1e7:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b1ec:	eb 4a                	jmp    800421b238 <check_fixed_bits+0xc7>
  800421b1ee:	48 b9 a0 1c 22 04 80 	movabs $0x8004221ca0,%rcx
  800421b1f5:	00 00 00 
  800421b1f8:	48 ba a6 1c 22 04 80 	movabs $0x8004221ca6,%rdx
  800421b1ff:	00 00 00 
  800421b202:	be 9c 00 00 00       	mov    $0x9c,%esi
  800421b207:	48 bf bb 1c 22 04 80 	movabs $0x8004221cbb,%rdi
  800421b20e:	00 00 00 
  800421b211:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b216:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421b21d:	00 00 00 
  800421b220:	41 ff d0             	callq  *%r8
  800421b223:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421b227:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421b22a:	83 f8 3f             	cmp    $0x3f,%eax
  800421b22d:	0f 86 5e ff ff ff    	jbe    800421b191 <check_fixed_bits+0x20>
  800421b233:	b8 01 00 00 00       	mov    $0x1,%eax
  800421b238:	c9                   	leaveq 
  800421b239:	c3                   	retq   

000000800421b23a <vmx_init_vmcs>:
  800421b23a:	55                   	push   %rbp
  800421b23b:	48 89 e5             	mov    %rsp,%rbp
  800421b23e:	48 83 ec 40          	sub    $0x40,%rsp
  800421b242:	c7 45 dc 80 04 00 00 	movl   $0x480,-0x24(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421b249:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421b24c:	89 c1                	mov    %eax,%ecx
  800421b24e:	0f 32                	rdmsr  
  800421b250:	89 55 d8             	mov    %edx,-0x28(%rbp)
  800421b253:	89 45 d4             	mov    %eax,-0x2c(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421b256:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  800421b25d:	00 
	ret = edx;
  800421b25e:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800421b261:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	ret = ret << 32;
  800421b265:	48 c1 65 c8 20       	shlq   $0x20,-0x38(%rbp)
	ret |= eax;
  800421b26a:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800421b26d:	48 09 45 c8          	or     %rax,-0x38(%rbp)

	return ret;
  800421b271:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421b275:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421b279:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421b27d:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  800421b280:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421b284:	48 c1 e8 20          	shr    $0x20,%rax
  800421b288:	25 ff 0f 00 00       	and    $0xfff,%eax
  800421b28d:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421b290:	81 7d f4 00 10 00 00 	cmpl   $0x1000,-0xc(%rbp)
  800421b297:	76 35                	jbe    800421b2ce <vmx_init_vmcs+0x94>
  800421b299:	48 b9 c8 1c 22 04 80 	movabs $0x8004221cc8,%rcx
  800421b2a0:	00 00 00 
  800421b2a3:	48 ba a6 1c 22 04 80 	movabs $0x8004221ca6,%rdx
  800421b2aa:	00 00 00 
  800421b2ad:	be ad 00 00 00       	mov    $0xad,%esi
  800421b2b2:	48 bf bb 1c 22 04 80 	movabs $0x8004221cbb,%rdi
  800421b2b9:	00 00 00 
  800421b2bc:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b2c1:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421b2c8:	00 00 00 
  800421b2cb:	41 ff d0             	callq  *%r8
  800421b2ce:	bf 01 00 00 00       	mov    $0x1,%edi
  800421b2d3:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  800421b2da:	00 00 00 
  800421b2dd:	ff d0                	callq  *%rax
  800421b2df:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421b2e3:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800421b2e8:	75 07                	jne    800421b2f1 <vmx_init_vmcs+0xb7>
  800421b2ea:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b2ef:	eb 4d                	jmp    800421b33e <vmx_init_vmcs+0x104>
  800421b2f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421b2f5:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421b2f9:	8d 50 01             	lea    0x1(%rax),%edx
  800421b2fc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421b300:	66 89 50 08          	mov    %dx,0x8(%rax)
  800421b304:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421b308:	48 89 c7             	mov    %rax,%rdi
  800421b30b:	48 b8 cb ad 21 04 80 	movabs $0x800421adcb,%rax
  800421b312:	00 00 00 
  800421b315:	ff d0                	callq  *%rax
  800421b317:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421b31b:	48 8d 4d c4          	lea    -0x3c(%rbp),%rcx
  800421b31f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421b323:	ba 04 00 00 00       	mov    $0x4,%edx
  800421b328:	48 89 ce             	mov    %rcx,%rsi
  800421b32b:	48 89 c7             	mov    %rax,%rdi
  800421b32e:	48 b8 d9 0f 21 04 80 	movabs $0x8004210fd9,%rax
  800421b335:	00 00 00 
  800421b338:	ff d0                	callq  *%rax
  800421b33a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421b33e:	c9                   	leaveq 
  800421b33f:	c3                   	retq   

000000800421b340 <vmx_init_vmxon>:
  800421b340:	55                   	push   %rbp
  800421b341:	48 89 e5             	mov    %rsp,%rbp
  800421b344:	53                   	push   %rbx
  800421b345:	48 81 ec 28 01 00 00 	sub    $0x128,%rsp
  800421b34c:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b351:	48 ba 3a b2 21 04 80 	movabs $0x800421b23a,%rdx
  800421b358:	00 00 00 
  800421b35b:	ff d2                	callq  *%rdx
  800421b35d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421b361:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800421b366:	75 0a                	jne    800421b372 <vmx_init_vmxon+0x32>
  800421b368:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  800421b36d:	e9 75 04 00 00       	jmpq   800421b7e7 <vmx_init_vmxon+0x4a7>

static __inline uint64_t
rcr0(void)
{
	uint64_t val;
	__asm __volatile("movq %%cr0,%0" : "=r" (val));
  800421b372:	0f 20 c0             	mov    %cr0,%rax
  800421b375:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	return val;
  800421b379:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421b37d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

static __inline uint64_t
rcr4(void)
{
	uint64_t cr4;
	__asm __volatile("movq %%cr4,%0" : "=r" (cr4));
  800421b381:	0f 20 e0             	mov    %cr4,%rax
  800421b384:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	return cr4;
  800421b388:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421b38c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421b390:	48 83 4d d8 20       	orq    $0x20,-0x28(%rbp)
  800421b395:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421b399:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
}

static __inline void
lcr0(uint64_t val)
{
	__asm __volatile("movq %0,%%cr0" : : "r" (val));
  800421b39d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421b3a1:	0f 22 c0             	mov    %rax,%cr0
  800421b3a4:	c7 45 ac 87 04 00 00 	movl   $0x487,-0x54(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421b3ab:	8b 45 ac             	mov    -0x54(%rbp),%eax
  800421b3ae:	89 c1                	mov    %eax,%ecx
  800421b3b0:	0f 32                	rdmsr  
  800421b3b2:	89 55 a8             	mov    %edx,-0x58(%rbp)
  800421b3b5:	89 45 a4             	mov    %eax,-0x5c(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421b3b8:	48 c7 45 98 00 00 00 	movq   $0x0,-0x68(%rbp)
  800421b3bf:	00 
	ret = edx;
  800421b3c0:	8b 45 a8             	mov    -0x58(%rbp),%eax
  800421b3c3:	48 89 45 98          	mov    %rax,-0x68(%rbp)
	ret = ret << 32;
  800421b3c7:	48 c1 65 98 20       	shlq   $0x20,-0x68(%rbp)
	ret |= eax;
  800421b3cc:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800421b3cf:	48 09 45 98          	or     %rax,-0x68(%rbp)

	return ret;
  800421b3d3:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421b3d7:	48 89 c6             	mov    %rax,%rsi
  800421b3da:	c7 45 94 86 04 00 00 	movl   $0x486,-0x6c(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421b3e1:	8b 45 94             	mov    -0x6c(%rbp),%eax
  800421b3e4:	89 c1                	mov    %eax,%ecx
  800421b3e6:	0f 32                	rdmsr  
  800421b3e8:	89 55 90             	mov    %edx,-0x70(%rbp)
  800421b3eb:	89 45 8c             	mov    %eax,-0x74(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421b3ee:	48 c7 45 80 00 00 00 	movq   $0x0,-0x80(%rbp)
  800421b3f5:	00 
	ret = edx;
  800421b3f6:	8b 45 90             	mov    -0x70(%rbp),%eax
  800421b3f9:	48 89 45 80          	mov    %rax,-0x80(%rbp)
	ret = ret << 32;
  800421b3fd:	48 c1 65 80 20       	shlq   $0x20,-0x80(%rbp)
	ret |= eax;
  800421b402:	8b 45 8c             	mov    -0x74(%rbp),%eax
  800421b405:	48 09 45 80          	or     %rax,-0x80(%rbp)

	return ret;
  800421b409:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  800421b40d:	48 89 c1             	mov    %rax,%rcx
  800421b410:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421b414:	48 89 f2             	mov    %rsi,%rdx
  800421b417:	48 89 ce             	mov    %rcx,%rsi
  800421b41a:	48 89 c7             	mov    %rax,%rdi
  800421b41d:	48 b8 71 b1 21 04 80 	movabs $0x800421b171,%rax
  800421b424:	00 00 00 
  800421b427:	ff d0                	callq  *%rax
  800421b429:	88 45 cf             	mov    %al,-0x31(%rbp)
  800421b42c:	0f b6 45 cf          	movzbl -0x31(%rbp),%eax
  800421b430:	83 f0 01             	xor    $0x1,%eax
  800421b433:	84 c0                	test   %al,%al
  800421b435:	74 1d                	je     800421b454 <vmx_init_vmxon+0x114>
  800421b437:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421b43b:	48 89 c7             	mov    %rax,%rdi
  800421b43e:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  800421b445:	00 00 00 
  800421b448:	ff d0                	callq  *%rax
  800421b44a:	b8 ed ff ff ff       	mov    $0xffffffed,%eax
  800421b44f:	e9 93 03 00 00       	jmpq   800421b7e7 <vmx_init_vmxon+0x4a7>
  800421b454:	48 81 4d d0 00 20 00 	orq    $0x2000,-0x30(%rbp)
  800421b45b:	00 
  800421b45c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421b460:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
}

static __inline void
lcr4(uint64_t val)
{
	__asm __volatile("movq %0,%%cr4" : : "r" (val));
  800421b467:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800421b46e:	0f 22 e0             	mov    %rax,%cr4
  800421b471:	c7 85 74 ff ff ff 89 	movl   $0x489,-0x8c(%rbp)
  800421b478:	04 00 00 
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421b47b:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
  800421b481:	89 c1                	mov    %eax,%ecx
  800421b483:	0f 32                	rdmsr  
  800421b485:	89 95 70 ff ff ff    	mov    %edx,-0x90(%rbp)
  800421b48b:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421b491:	48 c7 85 60 ff ff ff 	movq   $0x0,-0xa0(%rbp)
  800421b498:	00 00 00 00 
	ret = edx;
  800421b49c:	8b 85 70 ff ff ff    	mov    -0x90(%rbp),%eax
  800421b4a2:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
	ret = ret << 32;
  800421b4a9:	48 c1 a5 60 ff ff ff 	shlq   $0x20,-0xa0(%rbp)
  800421b4b0:	20 
	ret |= eax;
  800421b4b1:	8b 85 6c ff ff ff    	mov    -0x94(%rbp),%eax
  800421b4b7:	48 09 85 60 ff ff ff 	or     %rax,-0xa0(%rbp)

	return ret;
  800421b4be:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  800421b4c5:	48 89 c6             	mov    %rax,%rsi
  800421b4c8:	c7 85 5c ff ff ff 88 	movl   $0x488,-0xa4(%rbp)
  800421b4cf:	04 00 00 
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421b4d2:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
  800421b4d8:	89 c1                	mov    %eax,%ecx
  800421b4da:	0f 32                	rdmsr  
  800421b4dc:	89 95 58 ff ff ff    	mov    %edx,-0xa8(%rbp)
  800421b4e2:	89 85 54 ff ff ff    	mov    %eax,-0xac(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421b4e8:	48 c7 85 48 ff ff ff 	movq   $0x0,-0xb8(%rbp)
  800421b4ef:	00 00 00 00 
	ret = edx;
  800421b4f3:	8b 85 58 ff ff ff    	mov    -0xa8(%rbp),%eax
  800421b4f9:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
	ret = ret << 32;
  800421b500:	48 c1 a5 48 ff ff ff 	shlq   $0x20,-0xb8(%rbp)
  800421b507:	20 
	ret |= eax;
  800421b508:	8b 85 54 ff ff ff    	mov    -0xac(%rbp),%eax
  800421b50e:	48 09 85 48 ff ff ff 	or     %rax,-0xb8(%rbp)

	return ret;
  800421b515:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  800421b51c:	48 89 c1             	mov    %rax,%rcx
  800421b51f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421b523:	48 89 f2             	mov    %rsi,%rdx
  800421b526:	48 89 ce             	mov    %rcx,%rsi
  800421b529:	48 89 c7             	mov    %rax,%rdi
  800421b52c:	48 b8 71 b1 21 04 80 	movabs $0x800421b171,%rax
  800421b533:	00 00 00 
  800421b536:	ff d0                	callq  *%rax
  800421b538:	88 45 cf             	mov    %al,-0x31(%rbp)
  800421b53b:	0f b6 45 cf          	movzbl -0x31(%rbp),%eax
  800421b53f:	83 f0 01             	xor    $0x1,%eax
  800421b542:	84 c0                	test   %al,%al
  800421b544:	74 1d                	je     800421b563 <vmx_init_vmxon+0x223>
  800421b546:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421b54a:	48 89 c7             	mov    %rax,%rdi
  800421b54d:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  800421b554:	00 00 00 
  800421b557:	ff d0                	callq  *%rax
  800421b559:	b8 ed ff ff ff       	mov    $0xffffffed,%eax
  800421b55e:	e9 84 02 00 00       	jmpq   800421b7e7 <vmx_init_vmxon+0x4a7>
  800421b563:	c7 85 44 ff ff ff 3a 	movl   $0x3a,-0xbc(%rbp)
  800421b56a:	00 00 00 
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421b56d:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax
  800421b573:	89 c1                	mov    %eax,%ecx
  800421b575:	0f 32                	rdmsr  
  800421b577:	89 95 40 ff ff ff    	mov    %edx,-0xc0(%rbp)
  800421b57d:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421b583:	48 c7 85 30 ff ff ff 	movq   $0x0,-0xd0(%rbp)
  800421b58a:	00 00 00 00 
	ret = edx;
  800421b58e:	8b 85 40 ff ff ff    	mov    -0xc0(%rbp),%eax
  800421b594:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
	ret = ret << 32;
  800421b59b:	48 c1 a5 30 ff ff ff 	shlq   $0x20,-0xd0(%rbp)
  800421b5a2:	20 
	ret |= eax;
  800421b5a3:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax
  800421b5a9:	48 09 85 30 ff ff ff 	or     %rax,-0xd0(%rbp)

	return ret;
  800421b5b0:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  800421b5b7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421b5bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421b5bf:	83 e0 04             	and    $0x4,%eax
  800421b5c2:	48 85 c0             	test   %rax,%rax
  800421b5c5:	0f 85 e8 00 00 00    	jne    800421b6b3 <vmx_init_vmxon+0x373>
  800421b5cb:	48 83 4d e8 04       	orq    $0x4,-0x18(%rbp)
  800421b5d0:	c7 85 2c ff ff ff 3a 	movl   $0x3a,-0xd4(%rbp)
  800421b5d7:	00 00 00 
  800421b5da:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421b5de:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
}

static __inline void
write_msr( uint32_t ecx, uint64_t val ) {
	uint32_t edx, eax;
	eax = (uint32_t) val;
  800421b5e5:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  800421b5ec:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
	edx = (uint32_t) ( val >> 32 );
  800421b5f2:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  800421b5f9:	48 c1 e8 20          	shr    $0x20,%rax
  800421b5fd:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%rbp)
	__asm __volatile("wrmsr"
  800421b603:	8b 8d 2c ff ff ff    	mov    -0xd4(%rbp),%ecx
  800421b609:	8b 95 18 ff ff ff    	mov    -0xe8(%rbp),%edx
  800421b60f:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421b615:	0f 30                	wrmsr  
  800421b617:	c7 85 14 ff ff ff 3a 	movl   $0x3a,-0xec(%rbp)
  800421b61e:	00 00 00 
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421b621:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
  800421b627:	89 c1                	mov    %eax,%ecx
  800421b629:	0f 32                	rdmsr  
  800421b62b:	89 95 10 ff ff ff    	mov    %edx,-0xf0(%rbp)
  800421b631:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421b637:	48 c7 85 00 ff ff ff 	movq   $0x0,-0x100(%rbp)
  800421b63e:	00 00 00 00 
	ret = edx;
  800421b642:	8b 85 10 ff ff ff    	mov    -0xf0(%rbp),%eax
  800421b648:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
	ret = ret << 32;
  800421b64f:	48 c1 a5 00 ff ff ff 	shlq   $0x20,-0x100(%rbp)
  800421b656:	20 
	ret |= eax;
  800421b657:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  800421b65d:	48 09 85 00 ff ff ff 	or     %rax,-0x100(%rbp)

	return ret;
  800421b664:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  800421b66b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421b66f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421b673:	83 e0 04             	and    $0x4,%eax
  800421b676:	48 85 c0             	test   %rax,%rax
  800421b679:	75 38                	jne    800421b6b3 <vmx_init_vmxon+0x373>
  800421b67b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421b67f:	48 89 c7             	mov    %rax,%rdi
  800421b682:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  800421b689:	00 00 00 
  800421b68c:	ff d0                	callq  *%rax
  800421b68e:	48 bf e0 1c 22 04 80 	movabs $0x8004221ce0,%rdi
  800421b695:	00 00 00 
  800421b698:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b69d:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421b6a4:	00 00 00 
  800421b6a7:	ff d2                	callq  *%rdx
  800421b6a9:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
  800421b6ae:	e9 34 01 00 00       	jmpq   800421b7e7 <vmx_init_vmxon+0x4a7>
  800421b6b3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421b6b7:	83 e0 01             	and    $0x1,%eax
  800421b6ba:	48 85 c0             	test   %rax,%rax
  800421b6bd:	75 4c                	jne    800421b70b <vmx_init_vmxon+0x3cb>
  800421b6bf:	48 83 4d e8 01       	orq    $0x1,-0x18(%rbp)
  800421b6c4:	c7 85 fc fe ff ff 3a 	movl   $0x3a,-0x104(%rbp)
  800421b6cb:	00 00 00 
  800421b6ce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421b6d2:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
}

static __inline void
write_msr( uint32_t ecx, uint64_t val ) {
	uint32_t edx, eax;
	eax = (uint32_t) val;
  800421b6d9:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  800421b6e0:	89 85 ec fe ff ff    	mov    %eax,-0x114(%rbp)
	edx = (uint32_t) ( val >> 32 );
  800421b6e6:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  800421b6ed:	48 c1 e8 20          	shr    $0x20,%rax
  800421b6f1:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%rbp)
	__asm __volatile("wrmsr"
  800421b6f7:	8b 8d fc fe ff ff    	mov    -0x104(%rbp),%ecx
  800421b6fd:	8b 95 e8 fe ff ff    	mov    -0x118(%rbp),%edx
  800421b703:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
  800421b709:	0f 30                	wrmsr  
  800421b70b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421b70f:	48 89 c7             	mov    %rax,%rdi
  800421b712:	48 b8 a6 ad 21 04 80 	movabs $0x800421ada6,%rax
  800421b719:	00 00 00 
  800421b71c:	ff d0                	callq  *%rax
  800421b71e:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
  800421b725:	c6 85 e7 fe ff ff 00 	movb   $0x0,-0x119(%rbp)
  800421b72c:	f8                   	clc    
  800421b72d:	f3 0f c7 b5 d8 fe ff 	vmxon  -0x128(%rbp)
  800421b734:	ff 
  800421b735:	0f 96 c0             	setbe  %al
  800421b738:	88 85 e7 fe ff ff    	mov    %al,-0x119(%rbp)
  800421b73e:	0f b6 85 e7 fe ff ff 	movzbl -0x119(%rbp),%eax
  800421b745:	88 45 ce             	mov    %al,-0x32(%rbp)
  800421b748:	80 7d ce 00          	cmpb   $0x0,-0x32(%rbp)
  800421b74c:	74 1a                	je     800421b768 <vmx_init_vmxon+0x428>
  800421b74e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421b752:	48 89 c7             	mov    %rax,%rdi
  800421b755:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  800421b75c:	00 00 00 
  800421b75f:	ff d0                	callq  *%rax
  800421b761:	b8 ed ff ff ff       	mov    $0xffffffed,%eax
  800421b766:	eb 7f                	jmp    800421b7e7 <vmx_init_vmxon+0x4a7>
  800421b768:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800421b76f:	00 00 00 
  800421b772:	ff d0                	callq  *%rax
  800421b774:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800421b77b:	00 00 00 
  800421b77e:	48 98                	cltq   
  800421b780:	48 c1 e0 03          	shl    $0x3,%rax
  800421b784:	48 89 c1             	mov    %rax,%rcx
  800421b787:	48 c1 e1 04          	shl    $0x4,%rcx
  800421b78b:	48 01 c8             	add    %rcx,%rax
  800421b78e:	48 01 d0             	add    %rdx,%rax
  800421b791:	48 83 c0 70          	add    $0x70,%rax
  800421b795:	c6 40 08 01          	movb   $0x1,0x8(%rax)
  800421b799:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800421b7a0:	00 00 00 
  800421b7a3:	ff d0                	callq  *%rax
  800421b7a5:	89 c3                	mov    %eax,%ebx
  800421b7a7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421b7ab:	48 89 c7             	mov    %rax,%rdi
  800421b7ae:	48 b8 cb ad 21 04 80 	movabs $0x800421adcb,%rax
  800421b7b5:	00 00 00 
  800421b7b8:	ff d0                	callq  *%rax
  800421b7ba:	48 89 c2             	mov    %rax,%rdx
  800421b7bd:	48 b9 20 00 6e 04 80 	movabs $0x80046e0020,%rcx
  800421b7c4:	00 00 00 
  800421b7c7:	48 63 c3             	movslq %ebx,%rax
  800421b7ca:	48 c1 e0 03          	shl    $0x3,%rax
  800421b7ce:	48 89 c6             	mov    %rax,%rsi
  800421b7d1:	48 c1 e6 04          	shl    $0x4,%rsi
  800421b7d5:	48 01 f0             	add    %rsi,%rax
  800421b7d8:	48 01 c8             	add    %rcx,%rax
  800421b7db:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  800421b7df:	48 89 10             	mov    %rdx,(%rax)
  800421b7e2:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b7e7:	48 81 c4 28 01 00 00 	add    $0x128,%rsp
  800421b7ee:	5b                   	pop    %rbx
  800421b7ef:	5d                   	pop    %rbp
  800421b7f0:	c3                   	retq   

000000800421b7f1 <vmcs_host_init>:
  800421b7f1:	55                   	push   %rbp
  800421b7f2:	48 89 e5             	mov    %rsp,%rbp
  800421b7f5:	48 81 ec 30 01 00 00 	sub    $0x130,%rsp

static __inline uint64_t
rcr0(void)
{
	uint64_t val;
	__asm __volatile("movq %%cr0,%0" : "=r" (val));
  800421b7fc:	0f 20 c0             	mov    %cr0,%rax
  800421b7ff:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return val;
  800421b803:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421b807:	c7 45 e4 00 6c 00 00 	movl   $0x6c00,-0x1c(%rbp)
  800421b80e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800421b812:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  800421b816:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421b819:	48 89 d6             	mov    %rdx,%rsi
  800421b81c:	89 c7                	mov    %eax,%edi
  800421b81e:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421b825:	00 00 00 
  800421b828:	ff d0                	callq  *%rax

static __inline uint64_t
rcr3(void)
{
	uint64_t val;
	__asm __volatile("movq %%cr3,%0" : "=r" (val));
  800421b82a:	0f 20 d8             	mov    %cr3,%rax
  800421b82d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	return val;
  800421b831:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421b835:	c7 45 cc 02 6c 00 00 	movl   $0x6c02,-0x34(%rbp)
  800421b83c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800421b840:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421b844:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421b847:	48 89 d6             	mov    %rdx,%rsi
  800421b84a:	89 c7                	mov    %eax,%edi
  800421b84c:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421b853:	00 00 00 
  800421b856:	ff d0                	callq  *%rax

static __inline uint64_t
rcr4(void)
{
	uint64_t cr4;
	__asm __volatile("movq %%cr4,%0" : "=r" (cr4));
  800421b858:	0f 20 e0             	mov    %cr4,%rax
  800421b85b:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	return cr4;
  800421b85f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421b863:	c7 45 b4 04 6c 00 00 	movl   $0x6c04,-0x4c(%rbp)
  800421b86a:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  800421b86e:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  800421b872:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  800421b875:	48 89 d6             	mov    %rdx,%rsi
  800421b878:	89 c7                	mov    %eax,%edi
  800421b87a:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421b881:	00 00 00 
  800421b884:	ff d0                	callq  *%rax
  800421b886:	c7 45 a4 00 0c 00 00 	movl   $0xc00,-0x5c(%rbp)
  800421b88d:	66 c7 45 a2 10 00    	movw   $0x10,-0x5e(%rbp)
  800421b893:	0f b7 55 a2          	movzwl -0x5e(%rbp),%edx
  800421b897:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800421b89a:	48 89 d6             	mov    %rdx,%rsi
  800421b89d:	89 c7                	mov    %eax,%edi
  800421b89f:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421b8a6:	00 00 00 
  800421b8a9:	ff d0                	callq  *%rax
  800421b8ab:	c7 45 9c 04 0c 00 00 	movl   $0xc04,-0x64(%rbp)
  800421b8b2:	66 c7 45 9a 10 00    	movw   $0x10,-0x66(%rbp)
  800421b8b8:	0f b7 55 9a          	movzwl -0x66(%rbp),%edx
  800421b8bc:	8b 45 9c             	mov    -0x64(%rbp),%eax
  800421b8bf:	48 89 d6             	mov    %rdx,%rsi
  800421b8c2:	89 c7                	mov    %eax,%edi
  800421b8c4:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421b8cb:	00 00 00 
  800421b8ce:	ff d0                	callq  *%rax
  800421b8d0:	c7 45 94 06 0c 00 00 	movl   $0xc06,-0x6c(%rbp)
  800421b8d7:	66 c7 45 92 10 00    	movw   $0x10,-0x6e(%rbp)
  800421b8dd:	0f b7 55 92          	movzwl -0x6e(%rbp),%edx
  800421b8e1:	8b 45 94             	mov    -0x6c(%rbp),%eax
  800421b8e4:	48 89 d6             	mov    %rdx,%rsi
  800421b8e7:	89 c7                	mov    %eax,%edi
  800421b8e9:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421b8f0:	00 00 00 
  800421b8f3:	ff d0                	callq  *%rax
  800421b8f5:	c7 45 8c 08 0c 00 00 	movl   $0xc08,-0x74(%rbp)
  800421b8fc:	66 c7 45 8a 10 00    	movw   $0x10,-0x76(%rbp)
  800421b902:	0f b7 55 8a          	movzwl -0x76(%rbp),%edx
  800421b906:	8b 45 8c             	mov    -0x74(%rbp),%eax
  800421b909:	48 89 d6             	mov    %rdx,%rsi
  800421b90c:	89 c7                	mov    %eax,%edi
  800421b90e:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421b915:	00 00 00 
  800421b918:	ff d0                	callq  *%rax
  800421b91a:	c7 45 84 0a 0c 00 00 	movl   $0xc0a,-0x7c(%rbp)
  800421b921:	66 c7 45 82 10 00    	movw   $0x10,-0x7e(%rbp)
  800421b927:	0f b7 55 82          	movzwl -0x7e(%rbp),%edx
  800421b92b:	8b 45 84             	mov    -0x7c(%rbp),%eax
  800421b92e:	48 89 d6             	mov    %rdx,%rsi
  800421b931:	89 c7                	mov    %eax,%edi
  800421b933:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421b93a:	00 00 00 
  800421b93d:	ff d0                	callq  *%rax
  800421b93f:	c7 85 7c ff ff ff 02 	movl   $0xc02,-0x84(%rbp)
  800421b946:	0c 00 00 
  800421b949:	66 c7 85 7a ff ff ff 	movw   $0x8,-0x86(%rbp)
  800421b950:	08 00 
  800421b952:	0f b7 95 7a ff ff ff 	movzwl -0x86(%rbp),%edx
  800421b959:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
  800421b95f:	48 89 d6             	mov    %rdx,%rsi
  800421b962:	89 c7                	mov    %eax,%edi
  800421b964:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421b96b:	00 00 00 
  800421b96e:	ff d0                	callq  *%rax
  800421b970:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800421b977:	00 00 00 
  800421b97a:	ff d0                	callq  *%rax
  800421b97c:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800421b983:	00 00 00 
  800421b986:	48 98                	cltq   
  800421b988:	48 c1 e0 03          	shl    $0x3,%rax
  800421b98c:	48 89 c1             	mov    %rax,%rcx
  800421b98f:	48 c1 e1 04          	shl    $0x4,%rcx
  800421b993:	48 01 c8             	add    %rcx,%rax
  800421b996:	48 01 d0             	add    %rdx,%rax
  800421b999:	0f b6 00             	movzbl (%rax),%eax
  800421b99c:	0f b6 c0             	movzbl %al,%eax
  800421b99f:	01 c0                	add    %eax,%eax
  800421b9a1:	83 c0 05             	add    $0x5,%eax
  800421b9a4:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800421b9a7:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421b9aa:	c1 e0 03             	shl    $0x3,%eax
  800421b9ad:	0f b7 c0             	movzwl %ax,%eax
  800421b9b0:	c7 85 74 ff ff ff 0c 	movl   $0xc0c,-0x8c(%rbp)
  800421b9b7:	0c 00 00 
  800421b9ba:	66 89 85 72 ff ff ff 	mov    %ax,-0x8e(%rbp)
  800421b9c1:	0f b7 95 72 ff ff ff 	movzwl -0x8e(%rbp),%edx
  800421b9c8:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
  800421b9ce:	48 89 d6             	mov    %rdx,%rsi
  800421b9d1:	89 c7                	mov    %eax,%edi
  800421b9d3:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421b9da:	00 00 00 
  800421b9dd:	ff d0                	callq  *%rax
  800421b9df:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  800421b9e6:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  800421b9ed:	48 8d 85 fe fe ff ff 	lea    -0x102(%rbp),%rax
  800421b9f4:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
static __inline void
read_idtr (uint64_t *idtbase, uint16_t *idtlimit)
{
	struct Pseudodesc idtr;

	asm volatile ("sidt %0"
  800421b9fb:	0f 01 8d d0 fe ff ff 	sidt   -0x130(%rbp)
			: "=m" (idtr));
	*idtbase = idtr.pd_base;
  800421ba02:	48 8b 95 d2 fe ff ff 	mov    -0x12e(%rbp),%rdx
  800421ba09:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800421ba10:	48 89 10             	mov    %rdx,(%rax)
	*idtlimit = idtr.pd_lim;
  800421ba13:	0f b7 95 d0 fe ff ff 	movzwl -0x130(%rbp),%edx
  800421ba1a:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  800421ba21:	66 89 10             	mov    %dx,(%rax)
  800421ba24:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  800421ba2b:	c7 85 5c ff ff ff 0e 	movl   $0x6c0e,-0xa4(%rbp)
  800421ba32:	6c 00 00 
  800421ba35:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  800421ba3c:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
  800421ba43:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
  800421ba49:	48 89 d6             	mov    %rdx,%rsi
  800421ba4c:	89 c7                	mov    %eax,%edi
  800421ba4e:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421ba55:	00 00 00 
  800421ba58:	ff d0                	callq  *%rax
  800421ba5a:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  800421ba61:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  800421ba68:	48 8d 85 fe fe ff ff 	lea    -0x102(%rbp),%rax
  800421ba6f:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
static __inline void
read_gdtr (uint64_t *gdtbase, uint16_t *gdtlimit)
{
	struct Pseudodesc gdtr;

	asm volatile ("sgdt %0"
  800421ba76:	0f 01 85 e0 fe ff ff 	sgdt   -0x120(%rbp)
			: "=m" (gdtr));
	*gdtbase = gdtr.pd_base;
  800421ba7d:	48 8b 95 e2 fe ff ff 	mov    -0x11e(%rbp),%rdx
  800421ba84:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  800421ba8b:	48 89 10             	mov    %rdx,(%rax)
	*gdtlimit = gdtr.pd_lim;
  800421ba8e:	0f b7 95 e0 fe ff ff 	movzwl -0x120(%rbp),%edx
  800421ba95:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  800421ba9c:	66 89 10             	mov    %dx,(%rax)
  800421ba9f:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  800421baa6:	c7 85 3c ff ff ff 0c 	movl   $0x6c0c,-0xc4(%rbp)
  800421baad:	6c 00 00 
  800421bab0:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  800421bab7:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
  800421babe:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax
  800421bac4:	48 89 d6             	mov    %rdx,%rsi
  800421bac7:	89 c7                	mov    %eax,%edi
  800421bac9:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421bad0:	00 00 00 
  800421bad3:	ff d0                	callq  *%rax
  800421bad5:	c7 85 2c ff ff ff 06 	movl   $0x6c06,-0xd4(%rbp)
  800421badc:	6c 00 00 
  800421badf:	48 c7 85 20 ff ff ff 	movq   $0x0,-0xe0(%rbp)
  800421bae6:	00 00 00 00 
  800421baea:	48 8b 95 20 ff ff ff 	mov    -0xe0(%rbp),%rdx
  800421baf1:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
  800421baf7:	48 89 d6             	mov    %rdx,%rsi
  800421bafa:	89 c7                	mov    %eax,%edi
  800421bafc:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421bb03:	00 00 00 
  800421bb06:	ff d0                	callq  *%rax
  800421bb08:	c7 85 1c ff ff ff 08 	movl   $0x6c08,-0xe4(%rbp)
  800421bb0f:	6c 00 00 
  800421bb12:	48 c7 85 10 ff ff ff 	movq   $0x0,-0xf0(%rbp)
  800421bb19:	00 00 00 00 
  800421bb1d:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
  800421bb24:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421bb2a:	48 89 d6             	mov    %rdx,%rsi
  800421bb2d:	89 c7                	mov    %eax,%edi
  800421bb2f:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421bb36:	00 00 00 
  800421bb39:	ff d0                	callq  *%rax
  800421bb3b:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800421bb42:	00 00 00 
  800421bb45:	ff d0                	callq  *%rax
  800421bb47:	48 98                	cltq   
  800421bb49:	48 c1 e0 03          	shl    $0x3,%rax
  800421bb4d:	48 89 c2             	mov    %rax,%rdx
  800421bb50:	48 c1 e2 04          	shl    $0x4,%rdx
  800421bb54:	48 01 d0             	add    %rdx,%rax
  800421bb57:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800421bb5b:	48 b8 20 00 6e 04 80 	movabs $0x80046e0020,%rax
  800421bb62:	00 00 00 
  800421bb65:	48 01 d0             	add    %rdx,%rax
  800421bb68:	c7 85 0c ff ff ff 0a 	movl   $0x6c0a,-0xf4(%rbp)
  800421bb6f:	6c 00 00 
  800421bb72:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  800421bb79:	48 8b 95 00 ff ff ff 	mov    -0x100(%rbp),%rdx
  800421bb80:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  800421bb86:	48 89 d6             	mov    %rdx,%rsi
  800421bb89:	89 c7                	mov    %eax,%edi
  800421bb8b:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421bb92:	00 00 00 
  800421bb95:	ff d0                	callq  *%rax
  800421bb97:	48 b8 93 d2 21 04 80 	movabs $0x800421d293,%rax
  800421bb9e:	00 00 00 
  800421bba1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421bba5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421bba9:	48 89 c6             	mov    %rax,%rsi
  800421bbac:	bf 16 6c 00 00       	mov    $0x6c16,%edi
  800421bbb1:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421bbb8:	00 00 00 
  800421bbbb:	ff d0                	callq  *%rax
  800421bbbd:	c9                   	leaveq 
  800421bbbe:	c3                   	retq   

000000800421bbbf <vmcs_guest_init>:
  800421bbbf:	55                   	push   %rbp
  800421bbc0:	48 89 e5             	mov    %rsp,%rbp
  800421bbc3:	48 81 ec f0 01 00 00 	sub    $0x1f0,%rsp
  800421bbca:	c7 45 fc 02 08 00 00 	movl   $0x802,-0x4(%rbp)
  800421bbd1:	66 c7 45 fa 00 00    	movw   $0x0,-0x6(%rbp)
  800421bbd7:	0f b7 55 fa          	movzwl -0x6(%rbp),%edx
  800421bbdb:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421bbde:	48 89 d6             	mov    %rdx,%rsi
  800421bbe1:	89 c7                	mov    %eax,%edi
  800421bbe3:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421bbea:	00 00 00 
  800421bbed:	ff d0                	callq  *%rax
  800421bbef:	c7 45 f4 00 08 00 00 	movl   $0x800,-0xc(%rbp)
  800421bbf6:	66 c7 45 f2 00 00    	movw   $0x0,-0xe(%rbp)
  800421bbfc:	0f b7 55 f2          	movzwl -0xe(%rbp),%edx
  800421bc00:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421bc03:	48 89 d6             	mov    %rdx,%rsi
  800421bc06:	89 c7                	mov    %eax,%edi
  800421bc08:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421bc0f:	00 00 00 
  800421bc12:	ff d0                	callq  *%rax
  800421bc14:	c7 45 ec 04 08 00 00 	movl   $0x804,-0x14(%rbp)
  800421bc1b:	66 c7 45 ea 00 00    	movw   $0x0,-0x16(%rbp)
  800421bc21:	0f b7 55 ea          	movzwl -0x16(%rbp),%edx
  800421bc25:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421bc28:	48 89 d6             	mov    %rdx,%rsi
  800421bc2b:	89 c7                	mov    %eax,%edi
  800421bc2d:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421bc34:	00 00 00 
  800421bc37:	ff d0                	callq  *%rax
  800421bc39:	c7 45 e4 06 08 00 00 	movl   $0x806,-0x1c(%rbp)
  800421bc40:	66 c7 45 e2 00 00    	movw   $0x0,-0x1e(%rbp)
  800421bc46:	0f b7 55 e2          	movzwl -0x1e(%rbp),%edx
  800421bc4a:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421bc4d:	48 89 d6             	mov    %rdx,%rsi
  800421bc50:	89 c7                	mov    %eax,%edi
  800421bc52:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421bc59:	00 00 00 
  800421bc5c:	ff d0                	callq  *%rax
  800421bc5e:	c7 45 dc 08 08 00 00 	movl   $0x808,-0x24(%rbp)
  800421bc65:	66 c7 45 da 00 00    	movw   $0x0,-0x26(%rbp)
  800421bc6b:	0f b7 55 da          	movzwl -0x26(%rbp),%edx
  800421bc6f:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421bc72:	48 89 d6             	mov    %rdx,%rsi
  800421bc75:	89 c7                	mov    %eax,%edi
  800421bc77:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421bc7e:	00 00 00 
  800421bc81:	ff d0                	callq  *%rax
  800421bc83:	c7 45 d4 0a 08 00 00 	movl   $0x80a,-0x2c(%rbp)
  800421bc8a:	66 c7 45 d2 00 00    	movw   $0x0,-0x2e(%rbp)
  800421bc90:	0f b7 55 d2          	movzwl -0x2e(%rbp),%edx
  800421bc94:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800421bc97:	48 89 d6             	mov    %rdx,%rsi
  800421bc9a:	89 c7                	mov    %eax,%edi
  800421bc9c:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421bca3:	00 00 00 
  800421bca6:	ff d0                	callq  *%rax
  800421bca8:	c7 45 cc 0e 08 00 00 	movl   $0x80e,-0x34(%rbp)
  800421bcaf:	66 c7 45 ca 00 00    	movw   $0x0,-0x36(%rbp)
  800421bcb5:	0f b7 55 ca          	movzwl -0x36(%rbp),%edx
  800421bcb9:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421bcbc:	48 89 d6             	mov    %rdx,%rsi
  800421bcbf:	89 c7                	mov    %eax,%edi
  800421bcc1:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421bcc8:	00 00 00 
  800421bccb:	ff d0                	callq  *%rax
  800421bccd:	c7 45 c4 0c 08 00 00 	movl   $0x80c,-0x3c(%rbp)
  800421bcd4:	66 c7 45 c2 00 00    	movw   $0x0,-0x3e(%rbp)
  800421bcda:	0f b7 55 c2          	movzwl -0x3e(%rbp),%edx
  800421bcde:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800421bce1:	48 89 d6             	mov    %rdx,%rsi
  800421bce4:	89 c7                	mov    %eax,%edi
  800421bce6:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421bced:	00 00 00 
  800421bcf0:	ff d0                	callq  *%rax
  800421bcf2:	c7 45 bc 08 68 00 00 	movl   $0x6808,-0x44(%rbp)
  800421bcf9:	48 c7 45 b0 00 00 00 	movq   $0x0,-0x50(%rbp)
  800421bd00:	00 
  800421bd01:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800421bd05:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800421bd08:	48 89 d6             	mov    %rdx,%rsi
  800421bd0b:	89 c7                	mov    %eax,%edi
  800421bd0d:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421bd14:	00 00 00 
  800421bd17:	ff d0                	callq  *%rax
  800421bd19:	c7 45 ac 06 68 00 00 	movl   $0x6806,-0x54(%rbp)
  800421bd20:	48 c7 45 a0 00 00 00 	movq   $0x0,-0x60(%rbp)
  800421bd27:	00 
  800421bd28:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800421bd2c:	8b 45 ac             	mov    -0x54(%rbp),%eax
  800421bd2f:	48 89 d6             	mov    %rdx,%rsi
  800421bd32:	89 c7                	mov    %eax,%edi
  800421bd34:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421bd3b:	00 00 00 
  800421bd3e:	ff d0                	callq  *%rax
  800421bd40:	c7 45 9c 0a 68 00 00 	movl   $0x680a,-0x64(%rbp)
  800421bd47:	48 c7 45 90 00 00 00 	movq   $0x0,-0x70(%rbp)
  800421bd4e:	00 
  800421bd4f:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  800421bd53:	8b 45 9c             	mov    -0x64(%rbp),%eax
  800421bd56:	48 89 d6             	mov    %rdx,%rsi
  800421bd59:	89 c7                	mov    %eax,%edi
  800421bd5b:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421bd62:	00 00 00 
  800421bd65:	ff d0                	callq  *%rax
  800421bd67:	c7 45 8c 0c 68 00 00 	movl   $0x680c,-0x74(%rbp)
  800421bd6e:	48 c7 45 80 00 00 00 	movq   $0x0,-0x80(%rbp)
  800421bd75:	00 
  800421bd76:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  800421bd7a:	8b 45 8c             	mov    -0x74(%rbp),%eax
  800421bd7d:	48 89 d6             	mov    %rdx,%rsi
  800421bd80:	89 c7                	mov    %eax,%edi
  800421bd82:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421bd89:	00 00 00 
  800421bd8c:	ff d0                	callq  *%rax
  800421bd8e:	c7 85 7c ff ff ff 0e 	movl   $0x680e,-0x84(%rbp)
  800421bd95:	68 00 00 
  800421bd98:	48 c7 85 70 ff ff ff 	movq   $0x0,-0x90(%rbp)
  800421bd9f:	00 00 00 00 
  800421bda3:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  800421bdaa:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
  800421bdb0:	48 89 d6             	mov    %rdx,%rsi
  800421bdb3:	89 c7                	mov    %eax,%edi
  800421bdb5:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421bdbc:	00 00 00 
  800421bdbf:	ff d0                	callq  *%rax
  800421bdc1:	c7 85 6c ff ff ff 10 	movl   $0x6810,-0x94(%rbp)
  800421bdc8:	68 00 00 
  800421bdcb:	48 c7 85 60 ff ff ff 	movq   $0x0,-0xa0(%rbp)
  800421bdd2:	00 00 00 00 
  800421bdd6:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  800421bddd:	8b 85 6c ff ff ff    	mov    -0x94(%rbp),%eax
  800421bde3:	48 89 d6             	mov    %rdx,%rsi
  800421bde6:	89 c7                	mov    %eax,%edi
  800421bde8:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421bdef:	00 00 00 
  800421bdf2:	ff d0                	callq  *%rax
  800421bdf4:	c7 85 5c ff ff ff 12 	movl   $0x6812,-0xa4(%rbp)
  800421bdfb:	68 00 00 
  800421bdfe:	48 c7 85 50 ff ff ff 	movq   $0x0,-0xb0(%rbp)
  800421be05:	00 00 00 00 
  800421be09:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
  800421be10:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
  800421be16:	48 89 d6             	mov    %rdx,%rsi
  800421be19:	89 c7                	mov    %eax,%edi
  800421be1b:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421be22:	00 00 00 
  800421be25:	ff d0                	callq  *%rax
  800421be27:	c7 85 4c ff ff ff 16 	movl   $0x6816,-0xb4(%rbp)
  800421be2e:	68 00 00 
  800421be31:	48 c7 85 40 ff ff ff 	movq   $0x0,-0xc0(%rbp)
  800421be38:	00 00 00 00 
  800421be3c:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
  800421be43:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
  800421be49:	48 89 d6             	mov    %rdx,%rsi
  800421be4c:	89 c7                	mov    %eax,%edi
  800421be4e:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421be55:	00 00 00 
  800421be58:	ff d0                	callq  *%rax
  800421be5a:	c7 85 3c ff ff ff 18 	movl   $0x6818,-0xc4(%rbp)
  800421be61:	68 00 00 
  800421be64:	48 c7 85 30 ff ff ff 	movq   $0x0,-0xd0(%rbp)
  800421be6b:	00 00 00 00 
  800421be6f:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
  800421be76:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax
  800421be7c:	48 89 d6             	mov    %rdx,%rsi
  800421be7f:	89 c7                	mov    %eax,%edi
  800421be81:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421be88:	00 00 00 
  800421be8b:	ff d0                	callq  *%rax
  800421be8d:	c7 85 2c ff ff ff 14 	movl   $0x6814,-0xd4(%rbp)
  800421be94:	68 00 00 
  800421be97:	48 c7 85 20 ff ff ff 	movq   $0x0,-0xe0(%rbp)
  800421be9e:	00 00 00 00 
  800421bea2:	48 8b 95 20 ff ff ff 	mov    -0xe0(%rbp),%rdx
  800421bea9:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
  800421beaf:	48 89 d6             	mov    %rdx,%rsi
  800421beb2:	89 c7                	mov    %eax,%edi
  800421beb4:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421bebb:	00 00 00 
  800421bebe:	ff d0                	callq  *%rax
  800421bec0:	c7 85 1c ff ff ff 02 	movl   $0x4802,-0xe4(%rbp)
  800421bec7:	48 00 00 
  800421beca:	c7 85 18 ff ff ff ff 	movl   $0xffff,-0xe8(%rbp)
  800421bed1:	ff 00 00 
  800421bed4:	8b 95 18 ff ff ff    	mov    -0xe8(%rbp),%edx
  800421beda:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421bee0:	48 89 d6             	mov    %rdx,%rsi
  800421bee3:	89 c7                	mov    %eax,%edi
  800421bee5:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421beec:	00 00 00 
  800421beef:	ff d0                	callq  *%rax
  800421bef1:	c7 85 14 ff ff ff 00 	movl   $0x4800,-0xec(%rbp)
  800421bef8:	48 00 00 
  800421befb:	c7 85 10 ff ff ff ff 	movl   $0xffff,-0xf0(%rbp)
  800421bf02:	ff 00 00 
  800421bf05:	8b 95 10 ff ff ff    	mov    -0xf0(%rbp),%edx
  800421bf0b:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
  800421bf11:	48 89 d6             	mov    %rdx,%rsi
  800421bf14:	89 c7                	mov    %eax,%edi
  800421bf16:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421bf1d:	00 00 00 
  800421bf20:	ff d0                	callq  *%rax
  800421bf22:	c7 85 0c ff ff ff 04 	movl   $0x4804,-0xf4(%rbp)
  800421bf29:	48 00 00 
  800421bf2c:	c7 85 08 ff ff ff ff 	movl   $0xffff,-0xf8(%rbp)
  800421bf33:	ff 00 00 
  800421bf36:	8b 95 08 ff ff ff    	mov    -0xf8(%rbp),%edx
  800421bf3c:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  800421bf42:	48 89 d6             	mov    %rdx,%rsi
  800421bf45:	89 c7                	mov    %eax,%edi
  800421bf47:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421bf4e:	00 00 00 
  800421bf51:	ff d0                	callq  *%rax
  800421bf53:	c7 85 04 ff ff ff 06 	movl   $0x4806,-0xfc(%rbp)
  800421bf5a:	48 00 00 
  800421bf5d:	c7 85 00 ff ff ff ff 	movl   $0xffff,-0x100(%rbp)
  800421bf64:	ff 00 00 
  800421bf67:	8b 95 00 ff ff ff    	mov    -0x100(%rbp),%edx
  800421bf6d:	8b 85 04 ff ff ff    	mov    -0xfc(%rbp),%eax
  800421bf73:	48 89 d6             	mov    %rdx,%rsi
  800421bf76:	89 c7                	mov    %eax,%edi
  800421bf78:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421bf7f:	00 00 00 
  800421bf82:	ff d0                	callq  *%rax
  800421bf84:	c7 85 fc fe ff ff 08 	movl   $0x4808,-0x104(%rbp)
  800421bf8b:	48 00 00 
  800421bf8e:	c7 85 f8 fe ff ff ff 	movl   $0xffff,-0x108(%rbp)
  800421bf95:	ff 00 00 
  800421bf98:	8b 95 f8 fe ff ff    	mov    -0x108(%rbp),%edx
  800421bf9e:	8b 85 fc fe ff ff    	mov    -0x104(%rbp),%eax
  800421bfa4:	48 89 d6             	mov    %rdx,%rsi
  800421bfa7:	89 c7                	mov    %eax,%edi
  800421bfa9:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421bfb0:	00 00 00 
  800421bfb3:	ff d0                	callq  *%rax
  800421bfb5:	c7 85 f4 fe ff ff 0a 	movl   $0x480a,-0x10c(%rbp)
  800421bfbc:	48 00 00 
  800421bfbf:	c7 85 f0 fe ff ff ff 	movl   $0xffff,-0x110(%rbp)
  800421bfc6:	ff 00 00 
  800421bfc9:	8b 95 f0 fe ff ff    	mov    -0x110(%rbp),%edx
  800421bfcf:	8b 85 f4 fe ff ff    	mov    -0x10c(%rbp),%eax
  800421bfd5:	48 89 d6             	mov    %rdx,%rsi
  800421bfd8:	89 c7                	mov    %eax,%edi
  800421bfda:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421bfe1:	00 00 00 
  800421bfe4:	ff d0                	callq  *%rax
  800421bfe6:	c7 85 ec fe ff ff 0c 	movl   $0x480c,-0x114(%rbp)
  800421bfed:	48 00 00 
  800421bff0:	c7 85 e8 fe ff ff ff 	movl   $0xffff,-0x118(%rbp)
  800421bff7:	ff 00 00 
  800421bffa:	8b 95 e8 fe ff ff    	mov    -0x118(%rbp),%edx
  800421c000:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
  800421c006:	48 89 d6             	mov    %rdx,%rsi
  800421c009:	89 c7                	mov    %eax,%edi
  800421c00b:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421c012:	00 00 00 
  800421c015:	ff d0                	callq  *%rax
  800421c017:	c7 85 e4 fe ff ff 0e 	movl   $0x480e,-0x11c(%rbp)
  800421c01e:	48 00 00 
  800421c021:	c7 85 e0 fe ff ff ff 	movl   $0xfffff,-0x120(%rbp)
  800421c028:	ff 0f 00 
  800421c02b:	8b 95 e0 fe ff ff    	mov    -0x120(%rbp),%edx
  800421c031:	8b 85 e4 fe ff ff    	mov    -0x11c(%rbp),%eax
  800421c037:	48 89 d6             	mov    %rdx,%rsi
  800421c03a:	89 c7                	mov    %eax,%edi
  800421c03c:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421c043:	00 00 00 
  800421c046:	ff d0                	callq  *%rax
  800421c048:	c7 85 dc fe ff ff 10 	movl   $0x4810,-0x124(%rbp)
  800421c04f:	48 00 00 
  800421c052:	c7 85 d8 fe ff ff 30 	movl   $0x30,-0x128(%rbp)
  800421c059:	00 00 00 
  800421c05c:	8b 95 d8 fe ff ff    	mov    -0x128(%rbp),%edx
  800421c062:	8b 85 dc fe ff ff    	mov    -0x124(%rbp),%eax
  800421c068:	48 89 d6             	mov    %rdx,%rsi
  800421c06b:	89 c7                	mov    %eax,%edi
  800421c06d:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421c074:	00 00 00 
  800421c077:	ff d0                	callq  *%rax
  800421c079:	c7 85 d4 fe ff ff 12 	movl   $0x4812,-0x12c(%rbp)
  800421c080:	48 00 00 
  800421c083:	c7 85 d0 fe ff ff ff 	movl   $0x3ff,-0x130(%rbp)
  800421c08a:	03 00 00 
  800421c08d:	8b 95 d0 fe ff ff    	mov    -0x130(%rbp),%edx
  800421c093:	8b 85 d4 fe ff ff    	mov    -0x12c(%rbp),%eax
  800421c099:	48 89 d6             	mov    %rdx,%rsi
  800421c09c:	89 c7                	mov    %eax,%edi
  800421c09e:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421c0a5:	00 00 00 
  800421c0a8:	ff d0                	callq  *%rax
  800421c0aa:	c7 85 cc fe ff ff 16 	movl   $0x4816,-0x134(%rbp)
  800421c0b1:	48 00 00 
  800421c0b4:	c7 85 c8 fe ff ff 93 	movl   $0x93,-0x138(%rbp)
  800421c0bb:	00 00 00 
  800421c0be:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  800421c0c4:	8b 85 cc fe ff ff    	mov    -0x134(%rbp),%eax
  800421c0ca:	48 89 d6             	mov    %rdx,%rsi
  800421c0cd:	89 c7                	mov    %eax,%edi
  800421c0cf:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421c0d6:	00 00 00 
  800421c0d9:	ff d0                	callq  *%rax
  800421c0db:	c7 85 c4 fe ff ff 14 	movl   $0x4814,-0x13c(%rbp)
  800421c0e2:	48 00 00 
  800421c0e5:	c7 85 c0 fe ff ff 93 	movl   $0x93,-0x140(%rbp)
  800421c0ec:	00 00 00 
  800421c0ef:	8b 95 c0 fe ff ff    	mov    -0x140(%rbp),%edx
  800421c0f5:	8b 85 c4 fe ff ff    	mov    -0x13c(%rbp),%eax
  800421c0fb:	48 89 d6             	mov    %rdx,%rsi
  800421c0fe:	89 c7                	mov    %eax,%edi
  800421c100:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421c107:	00 00 00 
  800421c10a:	ff d0                	callq  *%rax
  800421c10c:	c7 85 bc fe ff ff 18 	movl   $0x4818,-0x144(%rbp)
  800421c113:	48 00 00 
  800421c116:	c7 85 b8 fe ff ff 93 	movl   $0x93,-0x148(%rbp)
  800421c11d:	00 00 00 
  800421c120:	8b 95 b8 fe ff ff    	mov    -0x148(%rbp),%edx
  800421c126:	8b 85 bc fe ff ff    	mov    -0x144(%rbp),%eax
  800421c12c:	48 89 d6             	mov    %rdx,%rsi
  800421c12f:	89 c7                	mov    %eax,%edi
  800421c131:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421c138:	00 00 00 
  800421c13b:	ff d0                	callq  *%rax
  800421c13d:	c7 85 b4 fe ff ff 1a 	movl   $0x481a,-0x14c(%rbp)
  800421c144:	48 00 00 
  800421c147:	c7 85 b0 fe ff ff 93 	movl   $0x93,-0x150(%rbp)
  800421c14e:	00 00 00 
  800421c151:	8b 95 b0 fe ff ff    	mov    -0x150(%rbp),%edx
  800421c157:	8b 85 b4 fe ff ff    	mov    -0x14c(%rbp),%eax
  800421c15d:	48 89 d6             	mov    %rdx,%rsi
  800421c160:	89 c7                	mov    %eax,%edi
  800421c162:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421c169:	00 00 00 
  800421c16c:	ff d0                	callq  *%rax
  800421c16e:	c7 85 ac fe ff ff 1c 	movl   $0x481c,-0x154(%rbp)
  800421c175:	48 00 00 
  800421c178:	c7 85 a8 fe ff ff 93 	movl   $0x93,-0x158(%rbp)
  800421c17f:	00 00 00 
  800421c182:	8b 95 a8 fe ff ff    	mov    -0x158(%rbp),%edx
  800421c188:	8b 85 ac fe ff ff    	mov    -0x154(%rbp),%eax
  800421c18e:	48 89 d6             	mov    %rdx,%rsi
  800421c191:	89 c7                	mov    %eax,%edi
  800421c193:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421c19a:	00 00 00 
  800421c19d:	ff d0                	callq  *%rax
  800421c19f:	c7 85 a4 fe ff ff 1e 	movl   $0x481e,-0x15c(%rbp)
  800421c1a6:	48 00 00 
  800421c1a9:	c7 85 a0 fe ff ff 93 	movl   $0x93,-0x160(%rbp)
  800421c1b0:	00 00 00 
  800421c1b3:	8b 95 a0 fe ff ff    	mov    -0x160(%rbp),%edx
  800421c1b9:	8b 85 a4 fe ff ff    	mov    -0x15c(%rbp),%eax
  800421c1bf:	48 89 d6             	mov    %rdx,%rsi
  800421c1c2:	89 c7                	mov    %eax,%edi
  800421c1c4:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421c1cb:	00 00 00 
  800421c1ce:	ff d0                	callq  *%rax
  800421c1d0:	c7 85 9c fe ff ff 20 	movl   $0x4820,-0x164(%rbp)
  800421c1d7:	48 00 00 
  800421c1da:	c7 85 98 fe ff ff 82 	movl   $0x82,-0x168(%rbp)
  800421c1e1:	00 00 00 
  800421c1e4:	8b 95 98 fe ff ff    	mov    -0x168(%rbp),%edx
  800421c1ea:	8b 85 9c fe ff ff    	mov    -0x164(%rbp),%eax
  800421c1f0:	48 89 d6             	mov    %rdx,%rsi
  800421c1f3:	89 c7                	mov    %eax,%edi
  800421c1f5:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421c1fc:	00 00 00 
  800421c1ff:	ff d0                	callq  *%rax
  800421c201:	c7 85 94 fe ff ff 22 	movl   $0x4822,-0x16c(%rbp)
  800421c208:	48 00 00 
  800421c20b:	c7 85 90 fe ff ff 8b 	movl   $0x8b,-0x170(%rbp)
  800421c212:	00 00 00 
  800421c215:	8b 95 90 fe ff ff    	mov    -0x170(%rbp),%edx
  800421c21b:	8b 85 94 fe ff ff    	mov    -0x16c(%rbp),%eax
  800421c221:	48 89 d6             	mov    %rdx,%rsi
  800421c224:	89 c7                	mov    %eax,%edi
  800421c226:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421c22d:	00 00 00 
  800421c230:	ff d0                	callq  *%rax
  800421c232:	c7 85 8c fe ff ff 26 	movl   $0x4826,-0x174(%rbp)
  800421c239:	48 00 00 
  800421c23c:	c7 85 88 fe ff ff 00 	movl   $0x0,-0x178(%rbp)
  800421c243:	00 00 00 
  800421c246:	8b 95 88 fe ff ff    	mov    -0x178(%rbp),%edx
  800421c24c:	8b 85 8c fe ff ff    	mov    -0x174(%rbp),%eax
  800421c252:	48 89 d6             	mov    %rdx,%rsi
  800421c255:	89 c7                	mov    %eax,%edi
  800421c257:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421c25e:	00 00 00 
  800421c261:	ff d0                	callq  *%rax
  800421c263:	c7 85 84 fe ff ff 24 	movl   $0x4824,-0x17c(%rbp)
  800421c26a:	48 00 00 
  800421c26d:	c7 85 80 fe ff ff 00 	movl   $0x0,-0x180(%rbp)
  800421c274:	00 00 00 
  800421c277:	8b 95 80 fe ff ff    	mov    -0x180(%rbp),%edx
  800421c27d:	8b 85 84 fe ff ff    	mov    -0x17c(%rbp),%eax
  800421c283:	48 89 d6             	mov    %rdx,%rsi
  800421c286:	89 c7                	mov    %eax,%edi
  800421c288:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421c28f:	00 00 00 
  800421c292:	ff d0                	callq  *%rax
  800421c294:	c7 85 7c fe ff ff 02 	movl   $0x6802,-0x184(%rbp)
  800421c29b:	68 00 00 
  800421c29e:	48 c7 85 70 fe ff ff 	movq   $0x0,-0x190(%rbp)
  800421c2a5:	00 00 00 00 
  800421c2a9:	48 8b 95 70 fe ff ff 	mov    -0x190(%rbp),%rdx
  800421c2b0:	8b 85 7c fe ff ff    	mov    -0x184(%rbp),%eax
  800421c2b6:	48 89 d6             	mov    %rdx,%rsi
  800421c2b9:	89 c7                	mov    %eax,%edi
  800421c2bb:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421c2c2:	00 00 00 
  800421c2c5:	ff d0                	callq  *%rax
  800421c2c7:	c7 85 6c fe ff ff 00 	movl   $0x6800,-0x194(%rbp)
  800421c2ce:	68 00 00 
  800421c2d1:	48 c7 85 60 fe ff ff 	movq   $0x20,-0x1a0(%rbp)
  800421c2d8:	20 00 00 00 
  800421c2dc:	48 8b 95 60 fe ff ff 	mov    -0x1a0(%rbp),%rdx
  800421c2e3:	8b 85 6c fe ff ff    	mov    -0x194(%rbp),%eax
  800421c2e9:	48 89 d6             	mov    %rdx,%rsi
  800421c2ec:	89 c7                	mov    %eax,%edi
  800421c2ee:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421c2f5:	00 00 00 
  800421c2f8:	ff d0                	callq  *%rax
  800421c2fa:	c7 85 5c fe ff ff 04 	movl   $0x6804,-0x1a4(%rbp)
  800421c301:	68 00 00 
  800421c304:	48 c7 85 50 fe ff ff 	movq   $0x2000,-0x1b0(%rbp)
  800421c30b:	00 20 00 00 
  800421c30f:	48 8b 95 50 fe ff ff 	mov    -0x1b0(%rbp),%rdx
  800421c316:	8b 85 5c fe ff ff    	mov    -0x1a4(%rbp),%eax
  800421c31c:	48 89 d6             	mov    %rdx,%rsi
  800421c31f:	89 c7                	mov    %eax,%edi
  800421c321:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421c328:	00 00 00 
  800421c32b:	ff d0                	callq  *%rax
  800421c32d:	c7 85 4c fe ff ff 00 	movl   $0x2800,-0x1b4(%rbp)
  800421c334:	28 00 00 
  800421c337:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800421c33c:	48 89 85 40 fe ff ff 	mov    %rax,-0x1c0(%rbp)
  800421c343:	48 8b 95 40 fe ff ff 	mov    -0x1c0(%rbp),%rdx
  800421c34a:	8b 85 4c fe ff ff    	mov    -0x1b4(%rbp),%eax
  800421c350:	48 89 d6             	mov    %rdx,%rsi
  800421c353:	89 c7                	mov    %eax,%edi
  800421c355:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421c35c:	00 00 00 
  800421c35f:	ff d0                	callq  *%rax
  800421c361:	c7 85 3c fe ff ff 01 	movl   $0x2801,-0x1c4(%rbp)
  800421c368:	28 00 00 
  800421c36b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800421c370:	48 89 85 30 fe ff ff 	mov    %rax,-0x1d0(%rbp)
  800421c377:	48 8b 95 30 fe ff ff 	mov    -0x1d0(%rbp),%rdx
  800421c37e:	8b 85 3c fe ff ff    	mov    -0x1c4(%rbp),%eax
  800421c384:	48 89 d6             	mov    %rdx,%rsi
  800421c387:	89 c7                	mov    %eax,%edi
  800421c389:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421c390:	00 00 00 
  800421c393:	ff d0                	callq  *%rax
  800421c395:	c7 85 2c fe ff ff 1a 	movl   $0x681a,-0x1d4(%rbp)
  800421c39c:	68 00 00 
  800421c39f:	48 c7 85 20 fe ff ff 	movq   $0x0,-0x1e0(%rbp)
  800421c3a6:	00 00 00 00 
  800421c3aa:	48 8b 95 20 fe ff ff 	mov    -0x1e0(%rbp),%rdx
  800421c3b1:	8b 85 2c fe ff ff    	mov    -0x1d4(%rbp),%eax
  800421c3b7:	48 89 d6             	mov    %rdx,%rsi
  800421c3ba:	89 c7                	mov    %eax,%edi
  800421c3bc:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421c3c3:	00 00 00 
  800421c3c6:	ff d0                	callq  *%rax
  800421c3c8:	c7 85 1c fe ff ff 20 	movl   $0x6820,-0x1e4(%rbp)
  800421c3cf:	68 00 00 
  800421c3d2:	48 c7 85 10 fe ff ff 	movq   $0x2,-0x1f0(%rbp)
  800421c3d9:	02 00 00 00 
  800421c3dd:	48 8b 95 10 fe ff ff 	mov    -0x1f0(%rbp),%rdx
  800421c3e4:	8b 85 1c fe ff ff    	mov    -0x1e4(%rbp),%eax
  800421c3ea:	48 89 d6             	mov    %rdx,%rsi
  800421c3ed:	89 c7                	mov    %eax,%edi
  800421c3ef:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421c3f6:	00 00 00 
  800421c3f9:	ff d0                	callq  *%rax
  800421c3fb:	c9                   	leaveq 
  800421c3fc:	c3                   	retq   

000000800421c3fd <vmx_read_capability_msr>:
  800421c3fd:	55                   	push   %rbp
  800421c3fe:	48 89 e5             	mov    %rsp,%rbp
  800421c401:	48 83 ec 38          	sub    $0x38,%rsp
  800421c405:	89 7d dc             	mov    %edi,-0x24(%rbp)
  800421c408:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800421c40c:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  800421c410:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421c413:	89 45 f4             	mov    %eax,-0xc(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421c416:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421c419:	89 c1                	mov    %eax,%ecx
  800421c41b:	0f 32                	rdmsr  
  800421c41d:	89 55 f0             	mov    %edx,-0x10(%rbp)
  800421c420:	89 45 ec             	mov    %eax,-0x14(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421c423:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  800421c42a:	00 
	ret = edx;
  800421c42b:	8b 45 f0             	mov    -0x10(%rbp),%eax
  800421c42e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	ret = ret << 32;
  800421c432:	48 c1 65 e0 20       	shlq   $0x20,-0x20(%rbp)
	ret |= eax;
  800421c437:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421c43a:	48 09 45 e0          	or     %rax,-0x20(%rbp)

	return ret;
  800421c43e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421c442:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421c446:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421c44a:	48 c1 e8 20          	shr    $0x20,%rax
  800421c44e:	89 c2                	mov    %eax,%edx
  800421c450:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421c454:	89 10                	mov    %edx,(%rax)
  800421c456:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421c45a:	89 c2                	mov    %eax,%edx
  800421c45c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421c460:	89 10                	mov    %edx,(%rax)
  800421c462:	c9                   	leaveq 
  800421c463:	c3                   	retq   

000000800421c464 <vmcs_ctls_init>:
  800421c464:	55                   	push   %rbp
  800421c465:	48 89 e5             	mov    %rsp,%rbp
  800421c468:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  800421c46f:	48 89 bd f8 fe ff ff 	mov    %rdi,-0x108(%rbp)
  800421c476:	48 8d 95 24 ff ff ff 	lea    -0xdc(%rbp),%rdx
  800421c47d:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
  800421c484:	48 89 c6             	mov    %rax,%rsi
  800421c487:	bf 81 04 00 00       	mov    $0x481,%edi
  800421c48c:	48 b8 fd c3 21 04 80 	movabs $0x800421c3fd,%rax
  800421c493:	00 00 00 
  800421c496:	ff d0                	callq  *%rax
  800421c498:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
  800421c49e:	83 c8 01             	or     $0x1,%eax
  800421c4a1:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%rbp)
  800421c4a7:	8b 95 24 ff ff ff    	mov    -0xdc(%rbp),%edx
  800421c4ad:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax
  800421c4b3:	21 d0                	and    %edx,%eax
  800421c4b5:	c7 45 cc 00 40 00 00 	movl   $0x4000,-0x34(%rbp)
  800421c4bc:	89 45 c8             	mov    %eax,-0x38(%rbp)
  800421c4bf:	8b 55 c8             	mov    -0x38(%rbp),%edx
  800421c4c2:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421c4c5:	48 89 d6             	mov    %rdx,%rsi
  800421c4c8:	89 c7                	mov    %eax,%edi
  800421c4ca:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421c4d1:	00 00 00 
  800421c4d4:	ff d0                	callq  *%rax
  800421c4d6:	48 8d 95 1c ff ff ff 	lea    -0xe4(%rbp),%rdx
  800421c4dd:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
  800421c4e4:	48 89 c6             	mov    %rax,%rsi
  800421c4e7:	bf 82 04 00 00       	mov    $0x482,%edi
  800421c4ec:	48 b8 fd c3 21 04 80 	movabs $0x800421c3fd,%rax
  800421c4f3:	00 00 00 
  800421c4f6:	ff d0                	callq  *%rax
  800421c4f8:	8b 85 18 ff ff ff    	mov    -0xe8(%rbp),%eax
  800421c4fe:	c1 e8 1f             	shr    $0x1f,%eax
  800421c501:	83 f8 01             	cmp    $0x1,%eax
  800421c504:	74 35                	je     800421c53b <vmcs_ctls_init+0xd7>
  800421c506:	48 b9 10 1d 22 04 80 	movabs $0x8004221d10,%rcx
  800421c50d:	00 00 00 
  800421c510:	48 ba a6 1c 22 04 80 	movabs $0x8004221ca6,%rdx
  800421c517:	00 00 00 
  800421c51a:	be 5f 01 00 00       	mov    $0x15f,%esi
  800421c51f:	48 bf bb 1c 22 04 80 	movabs $0x8004221cbb,%rdi
  800421c526:	00 00 00 
  800421c529:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c52e:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421c535:	00 00 00 
  800421c538:	41 ff d0             	callq  *%r8
  800421c53b:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421c541:	0d 00 00 00 80       	or     $0x80000000,%eax
  800421c546:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
  800421c54c:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421c552:	0c 80                	or     $0x80,%al
  800421c554:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
  800421c55a:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421c560:	0d 00 00 00 02       	or     $0x2000000,%eax
  800421c565:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
  800421c56b:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421c571:	25 ff 7d fe ff       	and    $0xfffe7dff,%eax
  800421c576:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
  800421c57c:	8b 95 1c ff ff ff    	mov    -0xe4(%rbp),%edx
  800421c582:	8b 85 18 ff ff ff    	mov    -0xe8(%rbp),%eax
  800421c588:	21 d0                	and    %edx,%eax
  800421c58a:	c7 45 c4 02 40 00 00 	movl   $0x4002,-0x3c(%rbp)
  800421c591:	89 45 c0             	mov    %eax,-0x40(%rbp)
  800421c594:	8b 55 c0             	mov    -0x40(%rbp),%edx
  800421c597:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800421c59a:	48 89 d6             	mov    %rdx,%rsi
  800421c59d:	89 c7                	mov    %eax,%edi
  800421c59f:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421c5a6:	00 00 00 
  800421c5a9:	ff d0                	callq  *%rax
  800421c5ab:	48 8d 95 14 ff ff ff 	lea    -0xec(%rbp),%rdx
  800421c5b2:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
  800421c5b9:	48 89 c6             	mov    %rax,%rsi
  800421c5bc:	bf 8b 04 00 00       	mov    $0x48b,%edi
  800421c5c1:	48 b8 fd c3 21 04 80 	movabs $0x800421c3fd,%rax
  800421c5c8:	00 00 00 
  800421c5cb:	ff d0                	callq  *%rax
  800421c5cd:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
  800421c5d3:	83 c8 02             	or     $0x2,%eax
  800421c5d6:	89 85 14 ff ff ff    	mov    %eax,-0xec(%rbp)
  800421c5dc:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
  800421c5e2:	0c 80                	or     $0x80,%al
  800421c5e4:	89 85 14 ff ff ff    	mov    %eax,-0xec(%rbp)
  800421c5ea:	8b 95 14 ff ff ff    	mov    -0xec(%rbp),%edx
  800421c5f0:	8b 85 10 ff ff ff    	mov    -0xf0(%rbp),%eax
  800421c5f6:	21 d0                	and    %edx,%eax
  800421c5f8:	c7 45 bc 1e 40 00 00 	movl   $0x401e,-0x44(%rbp)
  800421c5ff:	89 45 b8             	mov    %eax,-0x48(%rbp)
  800421c602:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800421c605:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800421c608:	48 89 d6             	mov    %rdx,%rsi
  800421c60b:	89 c7                	mov    %eax,%edi
  800421c60d:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421c614:	00 00 00 
  800421c617:	ff d0                	callq  *%rax
  800421c619:	48 8d 95 0c ff ff ff 	lea    -0xf4(%rbp),%rdx
  800421c620:	48 8d 85 08 ff ff ff 	lea    -0xf8(%rbp),%rax
  800421c627:	48 89 c6             	mov    %rax,%rsi
  800421c62a:	bf 83 04 00 00       	mov    $0x483,%edi
  800421c62f:	48 b8 fd c3 21 04 80 	movabs $0x800421c3fd,%rax
  800421c636:	00 00 00 
  800421c639:	ff d0                	callq  *%rax
  800421c63b:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  800421c641:	80 cc 02             	or     $0x2,%ah
  800421c644:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
  800421c64a:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  800421c650:	80 cc 80             	or     $0x80,%ah
  800421c653:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
  800421c659:	8b 95 0c ff ff ff    	mov    -0xf4(%rbp),%edx
  800421c65f:	8b 85 08 ff ff ff    	mov    -0xf8(%rbp),%eax
  800421c665:	21 d0                	and    %edx,%eax
  800421c667:	c7 45 b4 0c 40 00 00 	movl   $0x400c,-0x4c(%rbp)
  800421c66e:	89 45 b0             	mov    %eax,-0x50(%rbp)
  800421c671:	8b 55 b0             	mov    -0x50(%rbp),%edx
  800421c674:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  800421c677:	48 89 d6             	mov    %rdx,%rsi
  800421c67a:	89 c7                	mov    %eax,%edi
  800421c67c:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421c683:	00 00 00 
  800421c686:	ff d0                	callq  *%rax
  800421c688:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421c68f:	48 8b 80 58 01 00 00 	mov    0x158(%rax),%rax
  800421c696:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421c69a:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421c6a1:	00 00 00 
  800421c6a4:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  800421c6a8:	77 32                	ja     800421c6dc <vmcs_ctls_init+0x278>
  800421c6aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421c6ae:	48 89 c1             	mov    %rax,%rcx
  800421c6b1:	48 ba 38 1d 22 04 80 	movabs $0x8004221d38,%rdx
  800421c6b8:	00 00 00 
  800421c6bb:	be 83 01 00 00       	mov    $0x183,%esi
  800421c6c0:	48 bf bb 1c 22 04 80 	movabs $0x8004221cbb,%rdi
  800421c6c7:	00 00 00 
  800421c6ca:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c6cf:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421c6d6:	00 00 00 
  800421c6d9:	41 ff d0             	callq  *%r8
  800421c6dc:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421c6e3:	ff ff ff 
  800421c6e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421c6ea:	48 01 d0             	add    %rdx,%rax
  800421c6ed:	c7 45 ac 06 20 00 00 	movl   $0x2006,-0x54(%rbp)
  800421c6f4:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  800421c6f8:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800421c6fc:	8b 45 ac             	mov    -0x54(%rbp),%eax
  800421c6ff:	48 89 d6             	mov    %rdx,%rsi
  800421c702:	89 c7                	mov    %eax,%edi
  800421c704:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421c70b:	00 00 00 
  800421c70e:	ff d0                	callq  *%rax
  800421c710:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421c717:	8b 80 48 01 00 00    	mov    0x148(%rax),%eax
  800421c71d:	c7 45 9c 0e 40 00 00 	movl   $0x400e,-0x64(%rbp)
  800421c724:	89 45 98             	mov    %eax,-0x68(%rbp)
  800421c727:	8b 55 98             	mov    -0x68(%rbp),%edx
  800421c72a:	8b 45 9c             	mov    -0x64(%rbp),%eax
  800421c72d:	48 89 d6             	mov    %rdx,%rsi
  800421c730:	89 c7                	mov    %eax,%edi
  800421c732:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421c739:	00 00 00 
  800421c73c:	ff d0                	callq  *%rax
  800421c73e:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421c745:	48 8b 80 50 01 00 00 	mov    0x150(%rax),%rax
  800421c74c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421c750:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421c757:	00 00 00 
  800421c75a:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  800421c75e:	77 32                	ja     800421c792 <vmcs_ctls_init+0x32e>
  800421c760:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421c764:	48 89 c1             	mov    %rax,%rcx
  800421c767:	48 ba 38 1d 22 04 80 	movabs $0x8004221d38,%rdx
  800421c76e:	00 00 00 
  800421c771:	be 87 01 00 00       	mov    $0x187,%esi
  800421c776:	48 bf bb 1c 22 04 80 	movabs $0x8004221cbb,%rdi
  800421c77d:	00 00 00 
  800421c780:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c785:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421c78c:	00 00 00 
  800421c78f:	41 ff d0             	callq  *%r8
  800421c792:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421c799:	ff ff ff 
  800421c79c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421c7a0:	48 01 d0             	add    %rdx,%rax
  800421c7a3:	c7 45 94 08 20 00 00 	movl   $0x2008,-0x6c(%rbp)
  800421c7aa:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  800421c7ae:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  800421c7b2:	8b 45 94             	mov    -0x6c(%rbp),%eax
  800421c7b5:	48 89 d6             	mov    %rdx,%rsi
  800421c7b8:	89 c7                	mov    %eax,%edi
  800421c7ba:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421c7c1:	00 00 00 
  800421c7c4:	ff d0                	callq  *%rax
  800421c7c6:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421c7cd:	8b 80 48 01 00 00    	mov    0x148(%rax),%eax
  800421c7d3:	c7 45 84 10 40 00 00 	movl   $0x4010,-0x7c(%rbp)
  800421c7da:	89 45 80             	mov    %eax,-0x80(%rbp)
  800421c7dd:	8b 55 80             	mov    -0x80(%rbp),%edx
  800421c7e0:	8b 45 84             	mov    -0x7c(%rbp),%eax
  800421c7e3:	48 89 d6             	mov    %rdx,%rsi
  800421c7e6:	89 c7                	mov    %eax,%edi
  800421c7e8:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421c7ef:	00 00 00 
  800421c7f2:	ff d0                	callq  *%rax
  800421c7f4:	48 8d 95 04 ff ff ff 	lea    -0xfc(%rbp),%rdx
  800421c7fb:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
  800421c802:	48 89 c6             	mov    %rax,%rsi
  800421c805:	bf 84 04 00 00       	mov    $0x484,%edi
  800421c80a:	48 b8 fd c3 21 04 80 	movabs $0x800421c3fd,%rax
  800421c811:	00 00 00 
  800421c814:	ff d0                	callq  *%rax
  800421c816:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421c81d:	48 8b 80 58 01 00 00 	mov    0x158(%rax),%rax
  800421c824:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421c828:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421c82f:	00 00 00 
  800421c832:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  800421c836:	77 32                	ja     800421c86a <vmcs_ctls_init+0x406>
  800421c838:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421c83c:	48 89 c1             	mov    %rax,%rcx
  800421c83f:	48 ba 38 1d 22 04 80 	movabs $0x8004221d38,%rdx
  800421c846:	00 00 00 
  800421c849:	be 91 01 00 00       	mov    $0x191,%esi
  800421c84e:	48 bf bb 1c 22 04 80 	movabs $0x8004221cbb,%rdi
  800421c855:	00 00 00 
  800421c858:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c85d:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421c864:	00 00 00 
  800421c867:	41 ff d0             	callq  *%r8
  800421c86a:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421c871:	ff ff ff 
  800421c874:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421c878:	48 01 d0             	add    %rdx,%rax
  800421c87b:	c7 85 7c ff ff ff 0a 	movl   $0x200a,-0x84(%rbp)
  800421c882:	20 00 00 
  800421c885:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  800421c88c:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  800421c893:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
  800421c899:	48 89 d6             	mov    %rdx,%rsi
  800421c89c:	89 c7                	mov    %eax,%edi
  800421c89e:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421c8a5:	00 00 00 
  800421c8a8:	ff d0                	callq  *%rax
  800421c8aa:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421c8b1:	8b 80 48 01 00 00    	mov    0x148(%rax),%eax
  800421c8b7:	c7 85 6c ff ff ff 14 	movl   $0x4014,-0x94(%rbp)
  800421c8be:	40 00 00 
  800421c8c1:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)
  800421c8c7:	8b 95 68 ff ff ff    	mov    -0x98(%rbp),%edx
  800421c8cd:	8b 85 6c ff ff ff    	mov    -0x94(%rbp),%eax
  800421c8d3:	48 89 d6             	mov    %rdx,%rsi
  800421c8d6:	89 c7                	mov    %eax,%edi
  800421c8d8:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421c8df:	00 00 00 
  800421c8e2:	ff d0                	callq  *%rax
  800421c8e4:	8b 95 04 ff ff ff    	mov    -0xfc(%rbp),%edx
  800421c8ea:	8b 85 00 ff ff ff    	mov    -0x100(%rbp),%eax
  800421c8f0:	21 d0                	and    %edx,%eax
  800421c8f2:	c7 85 64 ff ff ff 12 	movl   $0x4012,-0x9c(%rbp)
  800421c8f9:	40 00 00 
  800421c8fc:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%rbp)
  800421c902:	8b 95 60 ff ff ff    	mov    -0xa0(%rbp),%edx
  800421c908:	8b 85 64 ff ff ff    	mov    -0x9c(%rbp),%eax
  800421c90e:	48 89 d6             	mov    %rdx,%rsi
  800421c911:	89 c7                	mov    %eax,%edi
  800421c913:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421c91a:	00 00 00 
  800421c91d:	ff d0                	callq  *%rax
  800421c91f:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421c926:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  800421c92d:	48 83 c8 18          	or     $0x18,%rax
  800421c931:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421c935:	c7 85 5c ff ff ff 1a 	movl   $0x201a,-0xa4(%rbp)
  800421c93c:	20 00 00 
  800421c93f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421c943:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  800421c94a:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
  800421c951:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
  800421c957:	48 89 d6             	mov    %rdx,%rsi
  800421c95a:	89 c7                	mov    %eax,%edi
  800421c95c:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421c963:	00 00 00 
  800421c966:	ff d0                	callq  *%rax
  800421c968:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421c96f:	8b 80 30 01 00 00    	mov    0x130(%rax),%eax
  800421c975:	c7 85 4c ff ff ff 04 	movl   $0x4004,-0xb4(%rbp)
  800421c97c:	40 00 00 
  800421c97f:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
  800421c985:	8b 95 48 ff ff ff    	mov    -0xb8(%rbp),%edx
  800421c98b:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
  800421c991:	48 89 d6             	mov    %rdx,%rsi
  800421c994:	89 c7                	mov    %eax,%edi
  800421c996:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421c99d:	00 00 00 
  800421c9a0:	ff d0                	callq  *%rax
  800421c9a2:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421c9a9:	48 8b 80 38 01 00 00 	mov    0x138(%rax),%rax
  800421c9b0:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800421c9b4:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421c9bb:	00 00 00 
  800421c9be:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  800421c9c2:	77 32                	ja     800421c9f6 <vmcs_ctls_init+0x592>
  800421c9c4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421c9c8:	48 89 c1             	mov    %rax,%rcx
  800421c9cb:	48 ba 38 1d 22 04 80 	movabs $0x8004221d38,%rdx
  800421c9d2:	00 00 00 
  800421c9d5:	be 9e 01 00 00       	mov    $0x19e,%esi
  800421c9da:	48 bf bb 1c 22 04 80 	movabs $0x8004221cbb,%rdi
  800421c9e1:	00 00 00 
  800421c9e4:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c9e9:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421c9f0:	00 00 00 
  800421c9f3:	41 ff d0             	callq  *%r8
  800421c9f6:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421c9fd:	ff ff ff 
  800421ca00:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421ca04:	48 01 d0             	add    %rdx,%rax
  800421ca07:	c7 85 44 ff ff ff 00 	movl   $0x2000,-0xbc(%rbp)
  800421ca0e:	20 00 00 
  800421ca11:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  800421ca18:	48 8b 95 38 ff ff ff 	mov    -0xc8(%rbp),%rdx
  800421ca1f:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax
  800421ca25:	48 89 d6             	mov    %rdx,%rsi
  800421ca28:	89 c7                	mov    %eax,%edi
  800421ca2a:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421ca31:	00 00 00 
  800421ca34:	ff d0                	callq  *%rax
  800421ca36:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421ca3d:	48 8b 80 40 01 00 00 	mov    0x140(%rax),%rax
  800421ca44:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421ca48:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421ca4f:	00 00 00 
  800421ca52:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  800421ca56:	77 32                	ja     800421ca8a <vmcs_ctls_init+0x626>
  800421ca58:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421ca5c:	48 89 c1             	mov    %rax,%rcx
  800421ca5f:	48 ba 38 1d 22 04 80 	movabs $0x8004221d38,%rdx
  800421ca66:	00 00 00 
  800421ca69:	be a0 01 00 00       	mov    $0x1a0,%esi
  800421ca6e:	48 bf bb 1c 22 04 80 	movabs $0x8004221cbb,%rdi
  800421ca75:	00 00 00 
  800421ca78:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ca7d:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421ca84:	00 00 00 
  800421ca87:	41 ff d0             	callq  *%r8
  800421ca8a:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421ca91:	ff ff ff 
  800421ca94:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421ca98:	48 01 d0             	add    %rdx,%rax
  800421ca9b:	c7 85 34 ff ff ff 02 	movl   $0x2002,-0xcc(%rbp)
  800421caa2:	20 00 00 
  800421caa5:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  800421caac:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
  800421cab3:	8b 85 34 ff ff ff    	mov    -0xcc(%rbp),%eax
  800421cab9:	48 89 d6             	mov    %rdx,%rsi
  800421cabc:	89 c7                	mov    %eax,%edi
  800421cabe:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421cac5:	00 00 00 
  800421cac8:	ff d0                	callq  *%rax
  800421caca:	c9                   	leaveq 
  800421cacb:	c3                   	retq   

000000800421cacc <vmcs_dump_cpu>:
  800421cacc:	55                   	push   %rbp
  800421cacd:	48 89 e5             	mov    %rsp,%rbp
  800421cad0:	53                   	push   %rbx
  800421cad1:	48 83 ec 28          	sub    $0x28,%rsp
  800421cad5:	bf 20 68 00 00       	mov    $0x6820,%edi
  800421cada:	48 b8 ea ac 21 04 80 	movabs $0x800421acea,%rax
  800421cae1:	00 00 00 
  800421cae4:	ff d0                	callq  *%rax
  800421cae6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421caea:	48 bf 5c 1d 22 04 80 	movabs $0x8004221d5c,%rdi
  800421caf1:	00 00 00 
  800421caf4:	b8 00 00 00 00       	mov    $0x0,%eax
  800421caf9:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421cb00:	00 00 00 
  800421cb03:	ff d2                	callq  *%rdx
  800421cb05:	c7 45 e4 1c 68 00 00 	movl   $0x681c,-0x1c(%rbp)
  800421cb0c:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421cb0f:	89 c7                	mov    %eax,%edi
  800421cb11:	48 b8 ea ac 21 04 80 	movabs $0x800421acea,%rax
  800421cb18:	00 00 00 
  800421cb1b:	ff d0                	callq  *%rax
  800421cb1d:	48 89 c3             	mov    %rax,%rbx
  800421cb20:	c7 45 e0 1e 68 00 00 	movl   $0x681e,-0x20(%rbp)
  800421cb27:	8b 45 e0             	mov    -0x20(%rbp),%eax
  800421cb2a:	89 c7                	mov    %eax,%edi
  800421cb2c:	48 b8 ea ac 21 04 80 	movabs $0x800421acea,%rax
  800421cb33:	00 00 00 
  800421cb36:	ff d0                	callq  *%rax
  800421cb38:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421cb3c:	48 89 d1             	mov    %rdx,%rcx
  800421cb3f:	48 89 da             	mov    %rbx,%rdx
  800421cb42:	48 89 c6             	mov    %rax,%rsi
  800421cb45:	48 bf 80 1d 22 04 80 	movabs $0x8004221d80,%rdi
  800421cb4c:	00 00 00 
  800421cb4f:	b8 00 00 00 00       	mov    $0x0,%eax
  800421cb54:	49 b8 83 9c 20 04 80 	movabs $0x8004209c83,%r8
  800421cb5b:	00 00 00 
  800421cb5e:	41 ff d0             	callq  *%r8
  800421cb61:	c7 45 dc 02 68 00 00 	movl   $0x6802,-0x24(%rbp)
  800421cb68:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421cb6b:	89 c7                	mov    %eax,%edi
  800421cb6d:	48 b8 ea ac 21 04 80 	movabs $0x800421acea,%rax
  800421cb74:	00 00 00 
  800421cb77:	ff d0                	callq  *%rax
  800421cb79:	48 89 c3             	mov    %rax,%rbx
  800421cb7c:	c7 45 d8 00 68 00 00 	movl   $0x6800,-0x28(%rbp)
  800421cb83:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800421cb86:	89 c7                	mov    %eax,%edi
  800421cb88:	48 b8 ea ac 21 04 80 	movabs $0x800421acea,%rax
  800421cb8f:	00 00 00 
  800421cb92:	ff d0                	callq  *%rax
  800421cb94:	48 89 da             	mov    %rbx,%rdx
  800421cb97:	48 89 c6             	mov    %rax,%rsi
  800421cb9a:	48 bf b8 1d 22 04 80 	movabs $0x8004221db8,%rdi
  800421cba1:	00 00 00 
  800421cba4:	b8 00 00 00 00       	mov    $0x0,%eax
  800421cba9:	48 b9 83 9c 20 04 80 	movabs $0x8004209c83,%rcx
  800421cbb0:	00 00 00 
  800421cbb3:	ff d1                	callq  *%rcx
  800421cbb5:	c7 45 d4 04 68 00 00 	movl   $0x6804,-0x2c(%rbp)
  800421cbbc:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800421cbbf:	89 c7                	mov    %eax,%edi
  800421cbc1:	48 b8 ea ac 21 04 80 	movabs $0x800421acea,%rax
  800421cbc8:	00 00 00 
  800421cbcb:	ff d0                	callq  *%rax
  800421cbcd:	48 89 c6             	mov    %rax,%rsi
  800421cbd0:	48 bf da 1d 22 04 80 	movabs $0x8004221dda,%rdi
  800421cbd7:	00 00 00 
  800421cbda:	b8 00 00 00 00       	mov    $0x0,%eax
  800421cbdf:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421cbe6:	00 00 00 
  800421cbe9:	ff d2                	callq  *%rdx
  800421cbeb:	48 bf ef 1d 22 04 80 	movabs $0x8004221def,%rdi
  800421cbf2:	00 00 00 
  800421cbf5:	b8 00 00 00 00       	mov    $0x0,%eax
  800421cbfa:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421cc01:	00 00 00 
  800421cc04:	ff d2                	callq  *%rdx
  800421cc06:	48 83 c4 28          	add    $0x28,%rsp
  800421cc0a:	5b                   	pop    %rbx
  800421cc0b:	5d                   	pop    %rbp
  800421cc0c:	c3                   	retq   

000000800421cc0d <vmexit>:
  800421cc0d:	55                   	push   %rbp
  800421cc0e:	48 89 e5             	mov    %rsp,%rbp
  800421cc11:	41 54                	push   %r12
  800421cc13:	53                   	push   %rbx
  800421cc14:	48 83 ec 10          	sub    $0x10,%rsp
  800421cc18:	c7 45 e8 ff ff ff ff 	movl   $0xffffffff,-0x18(%rbp)
  800421cc1f:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
  800421cc23:	8b 45 e8             	mov    -0x18(%rbp),%eax
  800421cc26:	0f b7 c0             	movzwl %ax,%eax
  800421cc29:	83 f8 30             	cmp    $0x30,%eax
  800421cc2c:	0f 87 03 05 00 00    	ja     800421d135 <vmexit+0x528>
  800421cc32:	89 c0                	mov    %eax,%eax
  800421cc34:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421cc3b:	00 
  800421cc3c:	48 b8 58 1e 22 04 80 	movabs $0x8004221e58,%rax
  800421cc43:	00 00 00 
  800421cc46:	48 01 d0             	add    %rdx,%rax
  800421cc49:	48 8b 00             	mov    (%rax),%rax
  800421cc4c:	ff e0                	jmpq   *%rax
  800421cc4e:	c7 45 e4 04 44 00 00 	movl   $0x4404,-0x1c(%rbp)
  800421cc55:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421cc58:	89 c7                	mov    %eax,%edi
  800421cc5a:	48 b8 ea ac 21 04 80 	movabs $0x800421acea,%rax
  800421cc61:	00 00 00 
  800421cc64:	ff d0                	callq  *%rax
  800421cc66:	89 c2                	mov    %eax,%edx
  800421cc68:	48 b8 c4 e5 6d 04 80 	movabs $0x80046de5c4,%rax
  800421cc6f:	00 00 00 
  800421cc72:	89 10                	mov    %edx,(%rax)
  800421cc74:	48 b8 c4 e5 6d 04 80 	movabs $0x80046de5c4,%rax
  800421cc7b:	00 00 00 
  800421cc7e:	8b 18                	mov    (%rax),%ebx
  800421cc80:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800421cc87:	00 00 00 
  800421cc8a:	ff d0                	callq  *%rax
  800421cc8c:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800421cc93:	00 00 00 
  800421cc96:	48 98                	cltq   
  800421cc98:	48 c1 e0 03          	shl    $0x3,%rax
  800421cc9c:	48 89 c1             	mov    %rax,%rcx
  800421cc9f:	48 c1 e1 04          	shl    $0x4,%rcx
  800421cca3:	48 01 c8             	add    %rcx,%rax
  800421cca6:	48 01 d0             	add    %rdx,%rax
  800421cca9:	48 83 c0 08          	add    $0x8,%rax
  800421ccad:	48 8b 00             	mov    (%rax),%rax
  800421ccb0:	4c 8d a0 20 01 00 00 	lea    0x120(%rax),%r12
  800421ccb7:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800421ccbe:	00 00 00 
  800421ccc1:	ff d0                	callq  *%rax
  800421ccc3:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800421ccca:	00 00 00 
  800421cccd:	48 98                	cltq   
  800421cccf:	48 c1 e0 03          	shl    $0x3,%rax
  800421ccd3:	48 89 c1             	mov    %rax,%rcx
  800421ccd6:	48 c1 e1 04          	shl    $0x4,%rcx
  800421ccda:	48 01 c8             	add    %rcx,%rax
  800421ccdd:	48 01 d0             	add    %rdx,%rax
  800421cce0:	48 83 c0 08          	add    $0x8,%rax
  800421cce4:	48 8b 00             	mov    (%rax),%rax
  800421cce7:	89 da                	mov    %ebx,%edx
  800421cce9:	4c 89 e6             	mov    %r12,%rsi
  800421ccec:	48 89 c7             	mov    %rax,%rdi
  800421ccef:	48 b8 1a db 21 04 80 	movabs $0x800421db1a,%rax
  800421ccf6:	00 00 00 
  800421ccf9:	ff d0                	callq  *%rax
  800421ccfb:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421ccfe:	e9 32 04 00 00       	jmpq   800421d135 <vmexit+0x528>
  800421cd03:	48 b8 c4 e5 6d 04 80 	movabs $0x80046de5c4,%rax
  800421cd0a:	00 00 00 
  800421cd0d:	8b 18                	mov    (%rax),%ebx
  800421cd0f:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800421cd16:	00 00 00 
  800421cd19:	ff d0                	callq  *%rax
  800421cd1b:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800421cd22:	00 00 00 
  800421cd25:	48 98                	cltq   
  800421cd27:	48 c1 e0 03          	shl    $0x3,%rax
  800421cd2b:	48 89 c1             	mov    %rax,%rcx
  800421cd2e:	48 c1 e1 04          	shl    $0x4,%rcx
  800421cd32:	48 01 c8             	add    %rcx,%rax
  800421cd35:	48 01 d0             	add    %rdx,%rax
  800421cd38:	48 83 c0 08          	add    $0x8,%rax
  800421cd3c:	48 8b 00             	mov    (%rax),%rax
  800421cd3f:	4c 8d a0 20 01 00 00 	lea    0x120(%rax),%r12
  800421cd46:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800421cd4d:	00 00 00 
  800421cd50:	ff d0                	callq  *%rax
  800421cd52:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800421cd59:	00 00 00 
  800421cd5c:	48 98                	cltq   
  800421cd5e:	48 c1 e0 03          	shl    $0x3,%rax
  800421cd62:	48 89 c1             	mov    %rax,%rcx
  800421cd65:	48 c1 e1 04          	shl    $0x4,%rcx
  800421cd69:	48 01 c8             	add    %rcx,%rax
  800421cd6c:	48 01 d0             	add    %rdx,%rax
  800421cd6f:	48 83 c0 08          	add    $0x8,%rax
  800421cd73:	48 8b 00             	mov    (%rax),%rax
  800421cd76:	89 da                	mov    %ebx,%edx
  800421cd78:	4c 89 e6             	mov    %r12,%rsi
  800421cd7b:	48 89 c7             	mov    %rax,%rdi
  800421cd7e:	48 b8 99 da 21 04 80 	movabs $0x800421da99,%rax
  800421cd85:	00 00 00 
  800421cd88:	ff d0                	callq  *%rax
  800421cd8a:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421cd8d:	e9 a3 03 00 00       	jmpq   800421d135 <vmexit+0x528>
  800421cd92:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800421cd99:	00 00 00 
  800421cd9c:	ff d0                	callq  *%rax
  800421cd9e:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800421cda5:	00 00 00 
  800421cda8:	48 98                	cltq   
  800421cdaa:	48 c1 e0 03          	shl    $0x3,%rax
  800421cdae:	48 89 c1             	mov    %rax,%rcx
  800421cdb1:	48 c1 e1 04          	shl    $0x4,%rcx
  800421cdb5:	48 01 c8             	add    %rcx,%rax
  800421cdb8:	48 01 d0             	add    %rdx,%rax
  800421cdbb:	48 83 c0 08          	add    $0x8,%rax
  800421cdbf:	48 8b 00             	mov    (%rax),%rax
  800421cdc2:	48 8d 98 20 01 00 00 	lea    0x120(%rax),%rbx
  800421cdc9:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800421cdd0:	00 00 00 
  800421cdd3:	ff d0                	callq  *%rax
  800421cdd5:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800421cddc:	00 00 00 
  800421cddf:	48 98                	cltq   
  800421cde1:	48 c1 e0 03          	shl    $0x3,%rax
  800421cde5:	48 89 c1             	mov    %rax,%rcx
  800421cde8:	48 c1 e1 04          	shl    $0x4,%rcx
  800421cdec:	48 01 c8             	add    %rcx,%rax
  800421cdef:	48 01 d0             	add    %rdx,%rax
  800421cdf2:	48 83 c0 08          	add    $0x8,%rax
  800421cdf6:	48 8b 00             	mov    (%rax),%rax
  800421cdf9:	48 89 de             	mov    %rbx,%rsi
  800421cdfc:	48 89 c7             	mov    %rax,%rdi
  800421cdff:	48 b8 c7 db 21 04 80 	movabs $0x800421dbc7,%rax
  800421ce06:	00 00 00 
  800421ce09:	ff d0                	callq  *%rax
  800421ce0b:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421ce0e:	e9 22 03 00 00       	jmpq   800421d135 <vmexit+0x528>
  800421ce13:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800421ce1a:	00 00 00 
  800421ce1d:	ff d0                	callq  *%rax
  800421ce1f:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800421ce26:	00 00 00 
  800421ce29:	48 98                	cltq   
  800421ce2b:	48 c1 e0 03          	shl    $0x3,%rax
  800421ce2f:	48 89 c1             	mov    %rax,%rcx
  800421ce32:	48 c1 e1 04          	shl    $0x4,%rcx
  800421ce36:	48 01 c8             	add    %rcx,%rax
  800421ce39:	48 01 d0             	add    %rdx,%rax
  800421ce3c:	48 83 c0 08          	add    $0x8,%rax
  800421ce40:	48 8b 00             	mov    (%rax),%rax
  800421ce43:	48 8d 98 20 01 00 00 	lea    0x120(%rax),%rbx
  800421ce4a:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800421ce51:	00 00 00 
  800421ce54:	ff d0                	callq  *%rax
  800421ce56:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800421ce5d:	00 00 00 
  800421ce60:	48 98                	cltq   
  800421ce62:	48 c1 e0 03          	shl    $0x3,%rax
  800421ce66:	48 89 c1             	mov    %rax,%rcx
  800421ce69:	48 c1 e1 04          	shl    $0x4,%rcx
  800421ce6d:	48 01 c8             	add    %rcx,%rax
  800421ce70:	48 01 d0             	add    %rdx,%rax
  800421ce73:	48 83 c0 08          	add    $0x8,%rax
  800421ce77:	48 8b 00             	mov    (%rax),%rax
  800421ce7a:	48 89 de             	mov    %rbx,%rsi
  800421ce7d:	48 89 c7             	mov    %rax,%rdi
  800421ce80:	48 b8 cf dc 21 04 80 	movabs $0x800421dccf,%rax
  800421ce87:	00 00 00 
  800421ce8a:	ff d0                	callq  *%rax
  800421ce8c:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421ce8f:	e9 a1 02 00 00       	jmpq   800421d135 <vmexit+0x528>
  800421ce94:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800421ce9b:	00 00 00 
  800421ce9e:	ff d0                	callq  *%rax
  800421cea0:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800421cea7:	00 00 00 
  800421ceaa:	48 98                	cltq   
  800421ceac:	48 c1 e0 03          	shl    $0x3,%rax
  800421ceb0:	48 89 c1             	mov    %rax,%rcx
  800421ceb3:	48 c1 e1 04          	shl    $0x4,%rcx
  800421ceb7:	48 01 c8             	add    %rcx,%rax
  800421ceba:	48 01 d0             	add    %rdx,%rax
  800421cebd:	48 83 c0 08          	add    $0x8,%rax
  800421cec1:	48 8b 00             	mov    (%rax),%rax
  800421cec4:	48 8d 98 20 01 00 00 	lea    0x120(%rax),%rbx
  800421cecb:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800421ced2:	00 00 00 
  800421ced5:	ff d0                	callq  *%rax
  800421ced7:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800421cede:	00 00 00 
  800421cee1:	48 98                	cltq   
  800421cee3:	48 c1 e0 03          	shl    $0x3,%rax
  800421cee7:	48 89 c1             	mov    %rax,%rcx
  800421ceea:	48 c1 e1 04          	shl    $0x4,%rcx
  800421ceee:	48 01 c8             	add    %rcx,%rax
  800421cef1:	48 01 d0             	add    %rdx,%rax
  800421cef4:	48 83 c0 08          	add    $0x8,%rax
  800421cef8:	48 8b 00             	mov    (%rax),%rax
  800421cefb:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800421cf02:	48 89 de             	mov    %rbx,%rsi
  800421cf05:	48 89 c7             	mov    %rax,%rdi
  800421cf08:	48 b8 3b de 21 04 80 	movabs $0x800421de3b,%rax
  800421cf0f:	00 00 00 
  800421cf12:	ff d0                	callq  *%rax
  800421cf14:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421cf17:	e9 19 02 00 00       	jmpq   800421d135 <vmexit+0x528>
  800421cf1c:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800421cf23:	00 00 00 
  800421cf26:	ff d0                	callq  *%rax
  800421cf28:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800421cf2f:	00 00 00 
  800421cf32:	48 98                	cltq   
  800421cf34:	48 c1 e0 03          	shl    $0x3,%rax
  800421cf38:	48 89 c1             	mov    %rax,%rcx
  800421cf3b:	48 c1 e1 04          	shl    $0x4,%rcx
  800421cf3f:	48 01 c8             	add    %rcx,%rax
  800421cf42:	48 01 d0             	add    %rdx,%rax
  800421cf45:	48 83 c0 08          	add    $0x8,%rax
  800421cf49:	48 8b 00             	mov    (%rax),%rax
  800421cf4c:	48 8d 98 20 01 00 00 	lea    0x120(%rax),%rbx
  800421cf53:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800421cf5a:	00 00 00 
  800421cf5d:	ff d0                	callq  *%rax
  800421cf5f:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800421cf66:	00 00 00 
  800421cf69:	48 98                	cltq   
  800421cf6b:	48 c1 e0 03          	shl    $0x3,%rax
  800421cf6f:	48 89 c1             	mov    %rax,%rcx
  800421cf72:	48 c1 e1 04          	shl    $0x4,%rcx
  800421cf76:	48 01 c8             	add    %rcx,%rax
  800421cf79:	48 01 d0             	add    %rdx,%rax
  800421cf7c:	48 83 c0 08          	add    $0x8,%rax
  800421cf80:	48 8b 00             	mov    (%rax),%rax
  800421cf83:	48 89 de             	mov    %rbx,%rsi
  800421cf86:	48 89 c7             	mov    %rax,%rdi
  800421cf89:	48 b8 2d e0 21 04 80 	movabs $0x800421e02d,%rax
  800421cf90:	00 00 00 
  800421cf93:	ff d0                	callq  *%rax
  800421cf95:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421cf98:	e9 98 01 00 00       	jmpq   800421d135 <vmexit+0x528>
  800421cf9d:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800421cfa4:	00 00 00 
  800421cfa7:	ff d0                	callq  *%rax
  800421cfa9:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800421cfb0:	00 00 00 
  800421cfb3:	48 98                	cltq   
  800421cfb5:	48 c1 e0 03          	shl    $0x3,%rax
  800421cfb9:	48 89 c1             	mov    %rax,%rcx
  800421cfbc:	48 c1 e1 04          	shl    $0x4,%rcx
  800421cfc0:	48 01 c8             	add    %rcx,%rax
  800421cfc3:	48 01 d0             	add    %rdx,%rax
  800421cfc6:	48 83 c0 08          	add    $0x8,%rax
  800421cfca:	48 8b 00             	mov    (%rax),%rax
  800421cfcd:	48 8d 98 20 01 00 00 	lea    0x120(%rax),%rbx
  800421cfd4:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800421cfdb:	00 00 00 
  800421cfde:	ff d0                	callq  *%rax
  800421cfe0:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800421cfe7:	00 00 00 
  800421cfea:	48 98                	cltq   
  800421cfec:	48 c1 e0 03          	shl    $0x3,%rax
  800421cff0:	48 89 c1             	mov    %rax,%rcx
  800421cff3:	48 c1 e1 04          	shl    $0x4,%rcx
  800421cff7:	48 01 c8             	add    %rcx,%rax
  800421cffa:	48 01 d0             	add    %rdx,%rax
  800421cffd:	48 83 c0 08          	add    $0x8,%rax
  800421d001:	48 8b 00             	mov    (%rax),%rax
  800421d004:	48 89 de             	mov    %rbx,%rsi
  800421d007:	48 89 c7             	mov    %rax,%rdi
  800421d00a:	48 b8 0c e2 21 04 80 	movabs $0x800421e20c,%rax
  800421d011:	00 00 00 
  800421d014:	ff d0                	callq  *%rax
  800421d016:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421d019:	e9 17 01 00 00       	jmpq   800421d135 <vmexit+0x528>
  800421d01e:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800421d025:	00 00 00 
  800421d028:	ff d0                	callq  *%rax
  800421d02a:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800421d031:	00 00 00 
  800421d034:	48 98                	cltq   
  800421d036:	48 c1 e0 03          	shl    $0x3,%rax
  800421d03a:	48 89 c1             	mov    %rax,%rcx
  800421d03d:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d041:	48 01 c8             	add    %rcx,%rax
  800421d044:	48 01 d0             	add    %rdx,%rax
  800421d047:	48 83 c0 08          	add    $0x8,%rax
  800421d04b:	48 8b 00             	mov    (%rax),%rax
  800421d04e:	48 8b 98 e0 00 00 00 	mov    0xe0(%rax),%rbx
  800421d055:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800421d05c:	00 00 00 
  800421d05f:	ff d0                	callq  *%rax
  800421d061:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800421d068:	00 00 00 
  800421d06b:	48 98                	cltq   
  800421d06d:	48 c1 e0 03          	shl    $0x3,%rax
  800421d071:	48 89 c1             	mov    %rax,%rcx
  800421d074:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d078:	48 01 c8             	add    %rcx,%rax
  800421d07b:	48 01 d0             	add    %rdx,%rax
  800421d07e:	48 83 c0 08          	add    $0x8,%rax
  800421d082:	48 8b 00             	mov    (%rax),%rax
  800421d085:	4c 8d a0 20 01 00 00 	lea    0x120(%rax),%r12
  800421d08c:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800421d093:	00 00 00 
  800421d096:	ff d0                	callq  *%rax
  800421d098:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800421d09f:	00 00 00 
  800421d0a2:	48 98                	cltq   
  800421d0a4:	48 c1 e0 03          	shl    $0x3,%rax
  800421d0a8:	48 89 c1             	mov    %rax,%rcx
  800421d0ab:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d0af:	48 01 c8             	add    %rcx,%rax
  800421d0b2:	48 01 d0             	add    %rdx,%rax
  800421d0b5:	48 83 c0 08          	add    $0x8,%rax
  800421d0b9:	48 8b 00             	mov    (%rax),%rax
  800421d0bc:	48 89 da             	mov    %rbx,%rdx
  800421d0bf:	4c 89 e6             	mov    %r12,%rsi
  800421d0c2:	48 89 c7             	mov    %rax,%rdi
  800421d0c5:	48 b8 46 e2 21 04 80 	movabs $0x800421e246,%rax
  800421d0cc:	00 00 00 
  800421d0cf:	ff d0                	callq  *%rax
  800421d0d1:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421d0d4:	eb 5f                	jmp    800421d135 <vmexit+0x528>
  800421d0d6:	48 bf 10 1e 22 04 80 	movabs $0x8004221e10,%rdi
  800421d0dd:	00 00 00 
  800421d0e0:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d0e5:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421d0ec:	00 00 00 
  800421d0ef:	ff d2                	callq  *%rdx
  800421d0f1:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800421d0f8:	00 00 00 
  800421d0fb:	ff d0                	callq  *%rax
  800421d0fd:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800421d104:	00 00 00 
  800421d107:	48 98                	cltq   
  800421d109:	48 c1 e0 03          	shl    $0x3,%rax
  800421d10d:	48 89 c1             	mov    %rax,%rcx
  800421d110:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d114:	48 01 c8             	add    %rcx,%rax
  800421d117:	48 01 d0             	add    %rdx,%rax
  800421d11a:	48 83 c0 08          	add    $0x8,%rax
  800421d11e:	48 8b 00             	mov    (%rax),%rax
  800421d121:	48 89 c7             	mov    %rax,%rdi
  800421d124:	48 b8 1f 95 20 04 80 	movabs $0x800420951f,%rax
  800421d12b:	00 00 00 
  800421d12e:	ff d0                	callq  *%rax
  800421d130:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  800421d134:	90                   	nop
  800421d135:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  800421d139:	83 f0 01             	xor    $0x1,%eax
  800421d13c:	84 c0                	test   %al,%al
  800421d13e:	74 6b                	je     800421d1ab <vmexit+0x59e>
  800421d140:	48 bf 30 1e 22 04 80 	movabs $0x8004221e30,%rdi
  800421d147:	00 00 00 
  800421d14a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d14f:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421d156:	00 00 00 
  800421d159:	ff d2                	callq  *%rdx
  800421d15b:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d160:	48 ba cc ca 21 04 80 	movabs $0x800421cacc,%rdx
  800421d167:	00 00 00 
  800421d16a:	ff d2                	callq  *%rdx
  800421d16c:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800421d173:	00 00 00 
  800421d176:	ff d0                	callq  *%rax
  800421d178:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800421d17f:	00 00 00 
  800421d182:	48 98                	cltq   
  800421d184:	48 c1 e0 03          	shl    $0x3,%rax
  800421d188:	48 89 c1             	mov    %rax,%rcx
  800421d18b:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d18f:	48 01 c8             	add    %rcx,%rax
  800421d192:	48 01 d0             	add    %rdx,%rax
  800421d195:	48 83 c0 08          	add    $0x8,%rax
  800421d199:	48 8b 00             	mov    (%rax),%rax
  800421d19c:	48 89 c7             	mov    %rax,%rdi
  800421d19f:	48 b8 1f 95 20 04 80 	movabs $0x800420951f,%rax
  800421d1a6:	00 00 00 
  800421d1a9:	ff d0                	callq  *%rax
  800421d1ab:	48 b8 76 da 20 04 80 	movabs $0x800420da76,%rax
  800421d1b2:	00 00 00 
  800421d1b5:	ff d0                	callq  *%rax

000000800421d1b7 <asm_vmrun>:
  800421d1b7:	55                   	push   %rbp
  800421d1b8:	48 89 e5             	mov    %rsp,%rbp
  800421d1bb:	41 57                	push   %r15
  800421d1bd:	41 56                	push   %r14
  800421d1bf:	41 55                	push   %r13
  800421d1c1:	41 54                	push   %r12
  800421d1c3:	53                   	push   %rbx
  800421d1c4:	48 83 ec 28          	sub    $0x28,%rsp
  800421d1c8:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  800421d1cc:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800421d1d3:	00 00 00 
  800421d1d6:	ff d0                	callq  *%rax
  800421d1d8:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800421d1df:	00 00 00 
  800421d1e2:	48 98                	cltq   
  800421d1e4:	48 c1 e0 03          	shl    $0x3,%rax
  800421d1e8:	48 89 c1             	mov    %rax,%rcx
  800421d1eb:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d1ef:	48 01 c8             	add    %rcx,%rax
  800421d1f2:	48 01 d0             	add    %rdx,%rax
  800421d1f5:	48 83 c0 08          	add    $0x8,%rax
  800421d1f9:	48 8b 00             	mov    (%rax),%rax
  800421d1fc:	8b 80 d8 00 00 00    	mov    0xd8(%rax),%eax
  800421d202:	89 c2                	mov    %eax,%edx
  800421d204:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421d208:	66 89 90 80 00 00 00 	mov    %dx,0x80(%rax)
  800421d20f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421d213:	66 c7 40 78 00 00    	movw   $0x0,0x78(%rax)
  800421d219:	48 b8 6f ae 21 04 80 	movabs $0x800421ae6f,%rax
  800421d220:	00 00 00 
  800421d223:	ff d0                	callq  *%rax
  800421d225:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  800421d229:	ba 14 6c 00 00       	mov    $0x6c14,%edx
  800421d22e:	52                   	push   %rdx
  800421d22f:	55                   	push   %rbp
  800421d230:	51                   	push   %rcx
  800421d231:	51                   	push   %rcx
  800421d232:	0f 79 d4             	vmwrite %rsp,%rdx
  800421d235:	48 8b 81 90 00 00 00 	mov    0x90(%rcx),%rax
  800421d23c:	0f 20 d2             	mov    %cr2,%rdx
  800421d23f:	48 39 c2             	cmp    %rax,%rdx
  800421d242:	74 03                	je     800421d247 <asm_vmrun+0x90>
  800421d244:	0f 22 d0             	mov    %rax,%cr2
  800421d247:	83 b9 80 00 00 00 01 	cmpl   $0x1,0x80(%rcx)
  800421d24e:	48 8b 41 70          	mov    0x70(%rcx),%rax
  800421d252:	48 8b 59 68          	mov    0x68(%rcx),%rbx
  800421d256:	48 8b 51 58          	mov    0x58(%rcx),%rdx
  800421d25a:	48 8b 71 40          	mov    0x40(%rcx),%rsi
  800421d25e:	48 8b 79 48          	mov    0x48(%rcx),%rdi
  800421d262:	48 8b 69 50          	mov    0x50(%rcx),%rbp
  800421d266:	4c 8b 41 38          	mov    0x38(%rcx),%r8
  800421d26a:	4c 8b 49 30          	mov    0x30(%rcx),%r9
  800421d26e:	4c 8b 51 28          	mov    0x28(%rcx),%r10
  800421d272:	4c 8b 59 20          	mov    0x20(%rcx),%r11
  800421d276:	4c 8b 61 18          	mov    0x18(%rcx),%r12
  800421d27a:	4c 8b 69 10          	mov    0x10(%rcx),%r13
  800421d27e:	4c 8b 71 08          	mov    0x8(%rcx),%r14
  800421d282:	4c 8b 39             	mov    (%rcx),%r15
  800421d285:	48 8b 49 60          	mov    0x60(%rcx),%rcx
  800421d289:	75 05                	jne    800421d290 <asm_vmrun+0xd9>
  800421d28b:	0f 01 c2             	vmlaunch 
  800421d28e:	eb 03                	jmp    800421d293 <asm_vmrun+0xdc>
  800421d290:	0f 01 c3             	vmresume 
  800421d293:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  800421d298:	59                   	pop    %rcx
  800421d299:	48 89 41 70          	mov    %rax,0x70(%rcx)
  800421d29d:	48 89 59 68          	mov    %rbx,0x68(%rcx)
  800421d2a1:	8f 41 60             	popq   0x60(%rcx)
  800421d2a4:	48 89 51 58          	mov    %rdx,0x58(%rcx)
  800421d2a8:	48 89 71 40          	mov    %rsi,0x40(%rcx)
  800421d2ac:	48 89 79 48          	mov    %rdi,0x48(%rcx)
  800421d2b0:	48 89 69 50          	mov    %rbp,0x50(%rcx)
  800421d2b4:	4c 89 41 38          	mov    %r8,0x38(%rcx)
  800421d2b8:	4c 89 49 30          	mov    %r9,0x30(%rcx)
  800421d2bc:	4c 89 51 28          	mov    %r10,0x28(%rcx)
  800421d2c0:	4c 89 59 20          	mov    %r11,0x20(%rcx)
  800421d2c4:	4c 89 61 18          	mov    %r12,0x18(%rcx)
  800421d2c8:	4c 89 69 10          	mov    %r13,0x10(%rcx)
  800421d2cc:	4c 89 71 08          	mov    %r14,0x8(%rcx)
  800421d2d0:	4c 89 39             	mov    %r15,(%rcx)
  800421d2d3:	49 89 c2             	mov    %rax,%r10
  800421d2d6:	49 89 d3             	mov    %rdx,%r11
  800421d2d9:	0f 20 d0             	mov    %cr2,%rax
  800421d2dc:	48 89 81 90 00 00 00 	mov    %rax,0x90(%rcx)
  800421d2e3:	5d                   	pop    %rbp
  800421d2e4:	5a                   	pop    %rdx
  800421d2e5:	0f 96 41 78          	setbe  0x78(%rcx)
  800421d2e9:	48 b8 53 ae 21 04 80 	movabs $0x800421ae53,%rax
  800421d2f0:	00 00 00 
  800421d2f3:	ff d0                	callq  *%rax
  800421d2f5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421d2f9:	0f b7 40 78          	movzwl 0x78(%rax),%eax
  800421d2fd:	66 85 c0             	test   %ax,%ax
  800421d300:	74 20                	je     800421d322 <asm_vmrun+0x16b>
  800421d302:	48 bf e0 1f 22 04 80 	movabs $0x8004221fe0,%rdi
  800421d309:	00 00 00 
  800421d30c:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d311:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421d318:	00 00 00 
  800421d31b:	ff d2                	callq  *%rdx
  800421d31d:	e9 af 00 00 00       	jmpq   800421d3d1 <asm_vmrun+0x21a>
  800421d322:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800421d329:	00 00 00 
  800421d32c:	ff d0                	callq  *%rax
  800421d32e:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800421d335:	00 00 00 
  800421d338:	48 98                	cltq   
  800421d33a:	48 c1 e0 03          	shl    $0x3,%rax
  800421d33e:	48 89 c1             	mov    %rax,%rcx
  800421d341:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d345:	48 01 c8             	add    %rcx,%rax
  800421d348:	48 01 d0             	add    %rdx,%rax
  800421d34b:	48 83 c0 08          	add    $0x8,%rax
  800421d34f:	48 8b 18             	mov    (%rax),%rbx
  800421d352:	c7 45 cc 1c 68 00 00 	movl   $0x681c,-0x34(%rbp)
  800421d359:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421d35c:	89 c7                	mov    %eax,%edi
  800421d35e:	48 b8 ea ac 21 04 80 	movabs $0x800421acea,%rax
  800421d365:	00 00 00 
  800421d368:	ff d0                	callq  *%rax
  800421d36a:	48 89 83 b0 00 00 00 	mov    %rax,0xb0(%rbx)
  800421d371:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800421d378:	00 00 00 
  800421d37b:	ff d0                	callq  *%rax
  800421d37d:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800421d384:	00 00 00 
  800421d387:	48 98                	cltq   
  800421d389:	48 c1 e0 03          	shl    $0x3,%rax
  800421d38d:	48 89 c1             	mov    %rax,%rcx
  800421d390:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d394:	48 01 c8             	add    %rcx,%rax
  800421d397:	48 01 d0             	add    %rdx,%rax
  800421d39a:	48 83 c0 08          	add    $0x8,%rax
  800421d39e:	48 8b 18             	mov    (%rax),%rbx
  800421d3a1:	c7 45 c8 1e 68 00 00 	movl   $0x681e,-0x38(%rbp)
  800421d3a8:	8b 45 c8             	mov    -0x38(%rbp),%eax
  800421d3ab:	89 c7                	mov    %eax,%edi
  800421d3ad:	48 b8 ea ac 21 04 80 	movabs $0x800421acea,%rax
  800421d3b4:	00 00 00 
  800421d3b7:	ff d0                	callq  *%rax
  800421d3b9:	48 89 83 98 00 00 00 	mov    %rax,0x98(%rbx)
  800421d3c0:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d3c5:	48 ba 0d cc 21 04 80 	movabs $0x800421cc0d,%rdx
  800421d3cc:	00 00 00 
  800421d3cf:	ff d2                	callq  *%rdx
  800421d3d1:	48 83 c4 28          	add    $0x28,%rsp
  800421d3d5:	5b                   	pop    %rbx
  800421d3d6:	41 5c                	pop    %r12
  800421d3d8:	41 5d                	pop    %r13
  800421d3da:	41 5e                	pop    %r14
  800421d3dc:	41 5f                	pop    %r15
  800421d3de:	5d                   	pop    %rbp
  800421d3df:	c3                   	retq   

000000800421d3e0 <msr_setup>:
  800421d3e0:	55                   	push   %rbp
  800421d3e1:	48 89 e5             	mov    %rsp,%rbp
  800421d3e4:	48 83 ec 40          	sub    $0x40,%rsp
  800421d3e8:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421d3ec:	c7 45 d0 80 00 00 c0 	movl   $0xc0000080,-0x30(%rbp)
  800421d3f3:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%rbp)
  800421d3fa:	81 7d f8 80 00 00 00 	cmpl   $0x80,-0x8(%rbp)
  800421d401:	7e 35                	jle    800421d438 <msr_setup+0x58>
  800421d403:	48 b9 00 20 22 04 80 	movabs $0x8004222000,%rcx
  800421d40a:	00 00 00 
  800421d40d:	48 ba a6 1c 22 04 80 	movabs $0x8004221ca6,%rdx
  800421d414:	00 00 00 
  800421d417:	be 82 02 00 00       	mov    $0x282,%esi
  800421d41c:	48 bf bb 1c 22 04 80 	movabs $0x8004221cbb,%rdi
  800421d423:	00 00 00 
  800421d426:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d42b:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421d432:	00 00 00 
  800421d435:	41 ff d0             	callq  *%r8
  800421d438:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421d43c:	8b 55 f8             	mov    -0x8(%rbp),%edx
  800421d43f:	89 50 28             	mov    %edx,0x28(%rax)
  800421d442:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421d449:	e9 97 00 00 00       	jmpq   800421d4e5 <msr_setup+0x105>
  800421d44e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421d452:	48 8b 40 30          	mov    0x30(%rax),%rax
  800421d456:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800421d459:	48 63 d2             	movslq %edx,%rdx
  800421d45c:	48 c1 e2 04          	shl    $0x4,%rdx
  800421d460:	48 01 d0             	add    %rdx,%rax
  800421d463:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421d467:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421d46a:	48 98                	cltq   
  800421d46c:	8b 54 85 d0          	mov    -0x30(%rbp,%rax,4),%edx
  800421d470:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421d474:	89 10                	mov    %edx,(%rax)
  800421d476:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421d479:	48 98                	cltq   
  800421d47b:	8b 44 85 d0          	mov    -0x30(%rbp,%rax,4),%eax
  800421d47f:	89 45 ec             	mov    %eax,-0x14(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421d482:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421d485:	89 c1                	mov    %eax,%ecx
  800421d487:	0f 32                	rdmsr  
  800421d489:	89 55 e8             	mov    %edx,-0x18(%rbp)
  800421d48c:	89 45 e4             	mov    %eax,-0x1c(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421d48f:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  800421d496:	00 
	ret = edx;
  800421d497:	8b 45 e8             	mov    -0x18(%rbp),%eax
  800421d49a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	ret = ret << 32;
  800421d49e:	48 c1 65 d8 20       	shlq   $0x20,-0x28(%rbp)
	ret |= eax;
  800421d4a3:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421d4a6:	48 09 45 d8          	or     %rax,-0x28(%rbp)

	return ret;
  800421d4aa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421d4ae:	48 89 c2             	mov    %rax,%rdx
  800421d4b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421d4b5:	48 89 50 08          	mov    %rdx,0x8(%rax)
  800421d4b9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421d4bd:	48 8b 40 38          	mov    0x38(%rax),%rax
  800421d4c1:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800421d4c4:	48 63 d2             	movslq %edx,%rdx
  800421d4c7:	48 c1 e2 04          	shl    $0x4,%rdx
  800421d4cb:	48 01 d0             	add    %rdx,%rax
  800421d4ce:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421d4d2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421d4d5:	48 98                	cltq   
  800421d4d7:	8b 54 85 d0          	mov    -0x30(%rbp,%rax,4),%edx
  800421d4db:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421d4df:	89 10                	mov    %edx,(%rax)
  800421d4e1:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421d4e5:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421d4e8:	3b 45 f8             	cmp    -0x8(%rbp),%eax
  800421d4eb:	0f 8c 5d ff ff ff    	jl     800421d44e <msr_setup+0x6e>
  800421d4f1:	c9                   	leaveq 
  800421d4f2:	c3                   	retq   

000000800421d4f3 <bitmap_setup>:
  800421d4f3:	55                   	push   %rbp
  800421d4f4:	48 89 e5             	mov    %rsp,%rbp
  800421d4f7:	48 83 ec 30          	sub    $0x30,%rsp
  800421d4fb:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800421d4ff:	c7 45 e0 70 00 00 00 	movl   $0x70,-0x20(%rbp)
  800421d506:	c7 45 e4 71 00 00 00 	movl   $0x71,-0x1c(%rbp)
  800421d50d:	c7 45 f8 02 00 00 00 	movl   $0x2,-0x8(%rbp)
  800421d514:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421d51b:	e9 07 01 00 00       	jmpq   800421d627 <bitmap_setup+0x134>
  800421d520:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421d523:	48 98                	cltq   
  800421d525:	8b 44 85 e0          	mov    -0x20(%rbp,%rax,4),%eax
  800421d529:	c1 e8 06             	shr    $0x6,%eax
  800421d52c:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421d52f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421d532:	48 98                	cltq   
  800421d534:	8b 44 85 e0          	mov    -0x20(%rbp,%rax,4),%eax
  800421d538:	3d fe 7f 00 00       	cmp    $0x7ffe,%eax
  800421d53d:	77 51                	ja     800421d590 <bitmap_setup+0x9d>
  800421d53f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421d543:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421d547:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421d54a:	48 63 d2             	movslq %edx,%rdx
  800421d54d:	48 c1 e2 03          	shl    $0x3,%rdx
  800421d551:	48 01 c2             	add    %rax,%rdx
  800421d554:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421d558:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421d55c:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  800421d55f:	48 63 c9             	movslq %ecx,%rcx
  800421d562:	48 c1 e1 03          	shl    $0x3,%rcx
  800421d566:	48 01 c8             	add    %rcx,%rax
  800421d569:	48 8b 30             	mov    (%rax),%rsi
  800421d56c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421d56f:	48 98                	cltq   
  800421d571:	8b 44 85 e0          	mov    -0x20(%rbp,%rax,4),%eax
  800421d575:	83 e0 3f             	and    $0x3f,%eax
  800421d578:	bf 01 00 00 00       	mov    $0x1,%edi
  800421d57d:	89 c1                	mov    %eax,%ecx
  800421d57f:	48 d3 e7             	shl    %cl,%rdi
  800421d582:	48 89 f8             	mov    %rdi,%rax
  800421d585:	48 09 f0             	or     %rsi,%rax
  800421d588:	48 89 02             	mov    %rax,(%rdx)
  800421d58b:	e9 93 00 00 00       	jmpq   800421d623 <bitmap_setup+0x130>
  800421d590:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421d593:	48 98                	cltq   
  800421d595:	8b 44 85 e0          	mov    -0x20(%rbp,%rax,4),%eax
  800421d599:	3d fe ff 00 00       	cmp    $0xfffe,%eax
  800421d59e:	77 4e                	ja     800421d5ee <bitmap_setup+0xfb>
  800421d5a0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421d5a4:	48 8b 40 20          	mov    0x20(%rax),%rax
  800421d5a8:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421d5ab:	48 63 d2             	movslq %edx,%rdx
  800421d5ae:	48 c1 e2 03          	shl    $0x3,%rdx
  800421d5b2:	48 01 c2             	add    %rax,%rdx
  800421d5b5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421d5b9:	48 8b 40 20          	mov    0x20(%rax),%rax
  800421d5bd:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  800421d5c0:	48 63 c9             	movslq %ecx,%rcx
  800421d5c3:	48 c1 e1 03          	shl    $0x3,%rcx
  800421d5c7:	48 01 c8             	add    %rcx,%rax
  800421d5ca:	48 8b 30             	mov    (%rax),%rsi
  800421d5cd:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421d5d0:	48 98                	cltq   
  800421d5d2:	8b 44 85 e0          	mov    -0x20(%rbp,%rax,4),%eax
  800421d5d6:	83 e0 3f             	and    $0x3f,%eax
  800421d5d9:	bf 01 00 00 00       	mov    $0x1,%edi
  800421d5de:	89 c1                	mov    %eax,%ecx
  800421d5e0:	48 d3 e7             	shl    %cl,%rdi
  800421d5e3:	48 89 f8             	mov    %rdi,%rax
  800421d5e6:	48 09 f0             	or     %rsi,%rax
  800421d5e9:	48 89 02             	mov    %rax,(%rdx)
  800421d5ec:	eb 35                	jmp    800421d623 <bitmap_setup+0x130>
  800421d5ee:	48 b9 a0 1c 22 04 80 	movabs $0x8004221ca0,%rcx
  800421d5f5:	00 00 00 
  800421d5f8:	48 ba a6 1c 22 04 80 	movabs $0x8004221ca6,%rdx
  800421d5ff:	00 00 00 
  800421d602:	be a2 02 00 00       	mov    $0x2a2,%esi
  800421d607:	48 bf bb 1c 22 04 80 	movabs $0x8004221cbb,%rdi
  800421d60e:	00 00 00 
  800421d611:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d616:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421d61d:	00 00 00 
  800421d620:	41 ff d0             	callq  *%r8
  800421d623:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421d627:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421d62a:	3b 45 f8             	cmp    -0x8(%rbp),%eax
  800421d62d:	0f 8c ed fe ff ff    	jl     800421d520 <bitmap_setup+0x2d>
  800421d633:	c9                   	leaveq 
  800421d634:	c3                   	retq   

000000800421d635 <vmx_vmrun>:
  800421d635:	55                   	push   %rbp
  800421d636:	48 89 e5             	mov    %rsp,%rbp
  800421d639:	48 83 ec 70          	sub    $0x70,%rsp
  800421d63d:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  800421d641:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421d645:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800421d64b:	83 f8 03             	cmp    $0x3,%eax
  800421d64e:	74 0a                	je     800421d65a <vmx_vmrun+0x25>
  800421d650:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800421d655:	e9 9a 02 00 00       	jmpq   800421d8f4 <vmx_vmrun+0x2bf>
  800421d65a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421d65e:	8b 80 d8 00 00 00    	mov    0xd8(%rax),%eax
  800421d664:	83 f8 01             	cmp    $0x1,%eax
  800421d667:	0f 85 2f 01 00 00    	jne    800421d79c <vmx_vmrun+0x167>
  800421d66d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421d671:	48 8b 80 28 01 00 00 	mov    0x128(%rax),%rax
  800421d678:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421d67c:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421d683:	00 00 00 
  800421d686:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  800421d68a:	77 32                	ja     800421d6be <vmx_vmrun+0x89>
  800421d68c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421d690:	48 89 c1             	mov    %rax,%rcx
  800421d693:	48 ba 38 1d 22 04 80 	movabs $0x8004221d38,%rdx
  800421d69a:	00 00 00 
  800421d69d:	be b8 02 00 00       	mov    $0x2b8,%esi
  800421d6a2:	48 bf bb 1c 22 04 80 	movabs $0x8004221cbb,%rdi
  800421d6a9:	00 00 00 
  800421d6ac:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d6b1:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421d6b8:	00 00 00 
  800421d6bb:	41 ff d0             	callq  *%r8
  800421d6be:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421d6c5:	ff ff ff 
  800421d6c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421d6cc:	48 01 d0             	add    %rdx,%rax
  800421d6cf:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421d6d3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421d6d7:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  800421d6db:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  800421d6df:	f8                   	clc    
  800421d6e0:	66 0f c7 75 a8       	vmclear -0x58(%rbp)
  800421d6e5:	0f 96 c0             	setbe  %al
  800421d6e8:	88 45 df             	mov    %al,-0x21(%rbp)
  800421d6eb:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  800421d6ef:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421d6f2:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  800421d6f6:	74 0a                	je     800421d702 <vmx_vmrun+0xcd>
  800421d6f8:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
  800421d6fd:	e9 f2 01 00 00       	jmpq   800421d8f4 <vmx_vmrun+0x2bf>
  800421d702:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421d706:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  800421d70a:	c6 45 de 00          	movb   $0x0,-0x22(%rbp)
  800421d70e:	f8                   	clc    
  800421d70f:	0f c7 75 b0          	vmptrld -0x50(%rbp)
  800421d713:	0f 96 c0             	setbe  %al
  800421d716:	88 45 de             	mov    %al,-0x22(%rbp)
  800421d719:	0f b6 45 de          	movzbl -0x22(%rbp),%eax
  800421d71d:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421d720:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  800421d724:	74 0a                	je     800421d730 <vmx_vmrun+0xfb>
  800421d726:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
  800421d72b:	e9 c4 01 00 00       	jmpq   800421d8f4 <vmx_vmrun+0x2bf>
  800421d730:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d735:	48 ba f1 b7 21 04 80 	movabs $0x800421b7f1,%rdx
  800421d73c:	00 00 00 
  800421d73f:	ff d2                	callq  *%rdx
  800421d741:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d746:	48 ba bf bb 21 04 80 	movabs $0x800421bbbf,%rdx
  800421d74d:	00 00 00 
  800421d750:	ff d2                	callq  *%rdx
  800421d752:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421d756:	48 05 20 01 00 00    	add    $0x120,%rax
  800421d75c:	48 89 c7             	mov    %rax,%rdi
  800421d75f:	48 b8 f3 d4 21 04 80 	movabs $0x800421d4f3,%rax
  800421d766:	00 00 00 
  800421d769:	ff d0                	callq  *%rax
  800421d76b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421d76f:	48 05 20 01 00 00    	add    $0x120,%rax
  800421d775:	48 89 c7             	mov    %rax,%rdi
  800421d778:	48 b8 e0 d3 21 04 80 	movabs $0x800421d3e0,%rax
  800421d77f:	00 00 00 
  800421d782:	ff d0                	callq  *%rax
  800421d784:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421d788:	48 89 c7             	mov    %rax,%rdi
  800421d78b:	48 b8 64 c4 21 04 80 	movabs $0x800421c464,%rax
  800421d792:	00 00 00 
  800421d795:	ff d0                	callq  *%rax
  800421d797:	e9 8c 00 00 00       	jmpq   800421d828 <vmx_vmrun+0x1f3>
  800421d79c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421d7a0:	48 8b 80 28 01 00 00 	mov    0x128(%rax),%rax
  800421d7a7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421d7ab:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421d7b2:	00 00 00 
  800421d7b5:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  800421d7b9:	77 32                	ja     800421d7ed <vmx_vmrun+0x1b8>
  800421d7bb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421d7bf:	48 89 c1             	mov    %rax,%rcx
  800421d7c2:	48 ba 38 1d 22 04 80 	movabs $0x8004221d38,%rdx
  800421d7c9:	00 00 00 
  800421d7cc:	be d2 02 00 00       	mov    $0x2d2,%esi
  800421d7d1:	48 bf bb 1c 22 04 80 	movabs $0x8004221cbb,%rdi
  800421d7d8:	00 00 00 
  800421d7db:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d7e0:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421d7e7:	00 00 00 
  800421d7ea:	41 ff d0             	callq  *%r8
  800421d7ed:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421d7f4:	ff ff ff 
  800421d7f7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421d7fb:	48 01 d0             	add    %rdx,%rax
  800421d7fe:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  800421d802:	c6 45 dd 00          	movb   $0x0,-0x23(%rbp)
  800421d806:	f8                   	clc    
  800421d807:	0f c7 75 b8          	vmptrld -0x48(%rbp)
  800421d80b:	0f 96 c0             	setbe  %al
  800421d80e:	88 45 dd             	mov    %al,-0x23(%rbp)
  800421d811:	0f b6 45 dd          	movzbl -0x23(%rbp),%eax
  800421d815:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421d818:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  800421d81c:	74 0a                	je     800421d828 <vmx_vmrun+0x1f3>
  800421d81e:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
  800421d823:	e9 cc 00 00 00       	jmpq   800421d8f4 <vmx_vmrun+0x2bf>
  800421d828:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800421d82f:	00 00 00 
  800421d832:	ff d0                	callq  *%rax
  800421d834:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800421d83b:	00 00 00 
  800421d83e:	48 98                	cltq   
  800421d840:	48 c1 e0 03          	shl    $0x3,%rax
  800421d844:	48 89 c1             	mov    %rax,%rcx
  800421d847:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d84b:	48 01 c8             	add    %rcx,%rax
  800421d84e:	48 01 d0             	add    %rdx,%rax
  800421d851:	48 83 c0 08          	add    $0x8,%rax
  800421d855:	48 8b 00             	mov    (%rax),%rax
  800421d858:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  800421d85f:	c7 45 d8 1c 68 00 00 	movl   $0x681c,-0x28(%rbp)
  800421d866:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421d86a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421d86e:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800421d871:	48 89 d6             	mov    %rdx,%rsi
  800421d874:	89 c7                	mov    %eax,%edi
  800421d876:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421d87d:	00 00 00 
  800421d880:	ff d0                	callq  *%rax
  800421d882:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800421d889:	00 00 00 
  800421d88c:	ff d0                	callq  *%rax
  800421d88e:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800421d895:	00 00 00 
  800421d898:	48 98                	cltq   
  800421d89a:	48 c1 e0 03          	shl    $0x3,%rax
  800421d89e:	48 89 c1             	mov    %rax,%rcx
  800421d8a1:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d8a5:	48 01 c8             	add    %rcx,%rax
  800421d8a8:	48 01 d0             	add    %rdx,%rax
  800421d8ab:	48 83 c0 08          	add    $0x8,%rax
  800421d8af:	48 8b 00             	mov    (%rax),%rax
  800421d8b2:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
  800421d8b9:	c7 45 cc 1e 68 00 00 	movl   $0x681e,-0x34(%rbp)
  800421d8c0:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800421d8c4:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421d8c8:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421d8cb:	48 89 d6             	mov    %rdx,%rsi
  800421d8ce:	89 c7                	mov    %eax,%edi
  800421d8d0:	48 b8 c4 ac 21 04 80 	movabs $0x800421acc4,%rax
  800421d8d7:	00 00 00 
  800421d8da:	ff d0                	callq  *%rax
  800421d8dc:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421d8e0:	48 89 c7             	mov    %rax,%rdi
  800421d8e3:	48 b8 b7 d1 21 04 80 	movabs $0x800421d1b7,%rax
  800421d8ea:	00 00 00 
  800421d8ed:	ff d0                	callq  *%rax
  800421d8ef:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d8f4:	c9                   	leaveq 
  800421d8f5:	c3                   	retq   

000000800421d8f6 <vmcs_writel>:
  800421d8f6:	55                   	push   %rbp
  800421d8f7:	48 89 e5             	mov    %rsp,%rbp
  800421d8fa:	48 83 ec 20          	sub    $0x20,%rsp
  800421d8fe:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800421d901:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421d905:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421d909:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421d90c:	f8                   	clc    
  800421d90d:	0f 79 d0             	vmwrite %rax,%rdx
  800421d910:	0f 96 c0             	setbe  %al
  800421d913:	88 45 ff             	mov    %al,-0x1(%rbp)
  800421d916:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  800421d91a:	c9                   	leaveq 
  800421d91b:	c3                   	retq   

000000800421d91c <vmcs_readl>:
  800421d91c:	55                   	push   %rbp
  800421d91d:	48 89 e5             	mov    %rsp,%rbp
  800421d920:	48 83 ec 14          	sub    $0x14,%rsp
  800421d924:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800421d927:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421d92a:	89 c2                	mov    %eax,%edx
  800421d92c:	0f 78 d0             	vmread %rdx,%rax
  800421d92f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421d933:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421d937:	c9                   	leaveq 
  800421d938:	c3                   	retq   

000000800421d939 <page2ppn>:
  800421d939:	55                   	push   %rbp
  800421d93a:	48 89 e5             	mov    %rsp,%rbp
  800421d93d:	48 83 ec 08          	sub    $0x8,%rsp
  800421d941:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421d945:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421d949:	48 b8 00 e6 6d 04 80 	movabs $0x80046de600,%rax
  800421d950:	00 00 00 
  800421d953:	48 8b 00             	mov    (%rax),%rax
  800421d956:	48 29 c2             	sub    %rax,%rdx
  800421d959:	48 89 d0             	mov    %rdx,%rax
  800421d95c:	48 c1 f8 04          	sar    $0x4,%rax
  800421d960:	c9                   	leaveq 
  800421d961:	c3                   	retq   

000000800421d962 <page2pa>:
  800421d962:	55                   	push   %rbp
  800421d963:	48 89 e5             	mov    %rsp,%rbp
  800421d966:	48 83 ec 08          	sub    $0x8,%rsp
  800421d96a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421d96e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421d972:	48 89 c7             	mov    %rax,%rdi
  800421d975:	48 b8 39 d9 21 04 80 	movabs $0x800421d939,%rax
  800421d97c:	00 00 00 
  800421d97f:	ff d0                	callq  *%rax
  800421d981:	48 c1 e0 0c          	shl    $0xc,%rax
  800421d985:	c9                   	leaveq 
  800421d986:	c3                   	retq   

000000800421d987 <page2kva>:
  800421d987:	55                   	push   %rbp
  800421d988:	48 89 e5             	mov    %rsp,%rbp
  800421d98b:	48 83 ec 20          	sub    $0x20,%rsp
  800421d98f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421d993:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421d997:	48 89 c7             	mov    %rax,%rdi
  800421d99a:	48 b8 62 d9 21 04 80 	movabs $0x800421d962,%rax
  800421d9a1:	00 00 00 
  800421d9a4:	ff d0                	callq  *%rax
  800421d9a6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421d9aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421d9ae:	48 c1 e8 0c          	shr    $0xc,%rax
  800421d9b2:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421d9b5:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421d9b8:	48 b8 f8 e5 6d 04 80 	movabs $0x80046de5f8,%rax
  800421d9bf:	00 00 00 
  800421d9c2:	48 8b 00             	mov    (%rax),%rax
  800421d9c5:	48 39 c2             	cmp    %rax,%rdx
  800421d9c8:	72 32                	jb     800421d9fc <page2kva+0x75>
  800421d9ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421d9ce:	48 89 c1             	mov    %rax,%rcx
  800421d9d1:	48 ba 18 20 22 04 80 	movabs $0x8004222018,%rdx
  800421d9d8:	00 00 00 
  800421d9db:	be 62 00 00 00       	mov    $0x62,%esi
  800421d9e0:	48 bf 3b 20 22 04 80 	movabs $0x800422203b,%rdi
  800421d9e7:	00 00 00 
  800421d9ea:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d9ef:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421d9f6:	00 00 00 
  800421d9f9:	41 ff d0             	callq  *%r8
  800421d9fc:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800421da03:	00 00 00 
  800421da06:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421da0a:	48 01 d0             	add    %rdx,%rax
  800421da0d:	c9                   	leaveq 
  800421da0e:	c3                   	retq   

000000800421da0f <vmx_get_vmdisk_number>:
#include <kern/env.h>
#include <kern/cpu.h>

static int vmdisk_number = 0;	//this number assign to the vm
int 
vmx_get_vmdisk_number() {
  800421da0f:	55                   	push   %rbp
  800421da10:	48 89 e5             	mov    %rsp,%rbp
	return vmdisk_number;
  800421da13:	48 b8 c8 e5 6d 04 80 	movabs $0x80046de5c8,%rax
  800421da1a:	00 00 00 
  800421da1d:	8b 00                	mov    (%rax),%eax
}
  800421da1f:	5d                   	pop    %rbp
  800421da20:	c3                   	retq   

000000800421da21 <vmx_incr_vmdisk_number>:

void
vmx_incr_vmdisk_number() {
  800421da21:	55                   	push   %rbp
  800421da22:	48 89 e5             	mov    %rsp,%rbp
	vmdisk_number++;
  800421da25:	48 b8 c8 e5 6d 04 80 	movabs $0x80046de5c8,%rax
  800421da2c:	00 00 00 
  800421da2f:	8b 00                	mov    (%rax),%eax
  800421da31:	8d 50 01             	lea    0x1(%rax),%edx
  800421da34:	48 b8 c8 e5 6d 04 80 	movabs $0x80046de5c8,%rax
  800421da3b:	00 00 00 
  800421da3e:	89 10                	mov    %edx,(%rax)
}
  800421da40:	5d                   	pop    %rbp
  800421da41:	c3                   	retq   

000000800421da42 <find_msr_in_region>:
bool
find_msr_in_region(uint32_t msr_idx, uintptr_t *area, int area_sz, struct vmx_msr_entry **msr_entry) {
  800421da42:	55                   	push   %rbp
  800421da43:	48 89 e5             	mov    %rsp,%rbp
  800421da46:	48 83 ec 28          	sub    $0x28,%rsp
  800421da4a:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800421da4d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421da51:	89 55 e8             	mov    %edx,-0x18(%rbp)
  800421da54:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
	struct vmx_msr_entry *entry = (struct vmx_msr_entry *)area;
  800421da58:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421da5c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	int i;
	for(i=0; i<area_sz; ++i) {
  800421da60:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421da67:	eb 21                	jmp    800421da8a <find_msr_in_region+0x48>
		if(entry->msr_index == msr_idx) {
  800421da69:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421da6d:	8b 00                	mov    (%rax),%eax
  800421da6f:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  800421da72:	75 12                	jne    800421da86 <find_msr_in_region+0x44>
			*msr_entry = entry;
  800421da74:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421da78:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800421da7c:	48 89 10             	mov    %rdx,(%rax)
			return true;
  800421da7f:	b8 01 00 00 00       	mov    $0x1,%eax
  800421da84:	eb 11                	jmp    800421da97 <find_msr_in_region+0x55>
}
bool
find_msr_in_region(uint32_t msr_idx, uintptr_t *area, int area_sz, struct vmx_msr_entry **msr_entry) {
	struct vmx_msr_entry *entry = (struct vmx_msr_entry *)area;
	int i;
	for(i=0; i<area_sz; ++i) {
  800421da86:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421da8a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421da8d:	3b 45 e8             	cmp    -0x18(%rbp),%eax
  800421da90:	7c d7                	jl     800421da69 <find_msr_in_region+0x27>
		if(entry->msr_index == msr_idx) {
			*msr_entry = entry;
			return true;
		}
	}
	return false;
  800421da92:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421da97:	c9                   	leaveq 
  800421da98:	c3                   	retq   

000000800421da99 <handle_interrupt_window>:

bool
handle_interrupt_window(struct Trapframe *tf, struct VmxGuestInfo *ginfo, uint32_t host_vector) {
  800421da99:	55                   	push   %rbp
  800421da9a:	48 89 e5             	mov    %rsp,%rbp
  800421da9d:	48 83 ec 38          	sub    $0x38,%rsp
  800421daa1:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800421daa5:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800421daa9:	89 55 cc             	mov    %edx,-0x34(%rbp)
  800421daac:	c7 45 f8 02 40 00 00 	movl   $0x4002,-0x8(%rbp)
  800421dab3:	8b 45 f8             	mov    -0x8(%rbp),%eax
  800421dab6:	89 c7                	mov    %eax,%edi
  800421dab8:	48 b8 1c d9 21 04 80 	movabs $0x800421d91c,%rax
  800421dabf:	00 00 00 
  800421dac2:	ff d0                	callq  *%rax
	uint64_t rflags;
	uint32_t procbased_ctls_or;

	procbased_ctls_or = vmcs_read32( VMCS_32BIT_CONTROL_PROCESSOR_BASED_VMEXEC_CONTROLS );
  800421dac4:	89 45 fc             	mov    %eax,-0x4(%rbp)

        //disable the interrupt window exiting
        procbased_ctls_or &= ~(VMCS_PROC_BASED_VMEXEC_CTL_INTRWINEXIT); 
  800421dac7:	83 65 fc fb          	andl   $0xfffffffb,-0x4(%rbp)
  800421dacb:	c7 45 f4 02 40 00 00 	movl   $0x4002,-0xc(%rbp)
  800421dad2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421dad5:	89 45 f0             	mov    %eax,-0x10(%rbp)
  800421dad8:	8b 55 f0             	mov    -0x10(%rbp),%edx
  800421dadb:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421dade:	48 89 d6             	mov    %rdx,%rsi
  800421dae1:	89 c7                	mov    %eax,%edi
  800421dae3:	48 b8 f6 d8 21 04 80 	movabs $0x800421d8f6,%rax
  800421daea:	00 00 00 
  800421daed:	ff d0                	callq  *%rax
  800421daef:	c7 45 ec 16 40 00 00 	movl   $0x4016,-0x14(%rbp)
  800421daf6:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421daf9:	89 45 e8             	mov    %eax,-0x18(%rbp)
  800421dafc:	8b 55 e8             	mov    -0x18(%rbp),%edx
  800421daff:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421db02:	48 89 d6             	mov    %rdx,%rsi
  800421db05:	89 c7                	mov    %eax,%edi
  800421db07:	48 b8 f6 d8 21 04 80 	movabs $0x800421d8f6,%rax
  800421db0e:	00 00 00 
  800421db11:	ff d0                	callq  *%rax

        vmcs_write32( VMCS_32BIT_CONTROL_PROCESSOR_BASED_VMEXEC_CONTROLS, 
		      procbased_ctls_or);
        //write back the host_vector, which can insert a virtual interrupt
	vmcs_write32( VMCS_32BIT_CONTROL_VMENTRY_INTERRUPTION_INFO , host_vector);
	return true;
  800421db13:	b8 01 00 00 00       	mov    $0x1,%eax
}
  800421db18:	c9                   	leaveq 
  800421db19:	c3                   	retq   

000000800421db1a <handle_interrupts>:
bool
handle_interrupts(struct Trapframe *tf, struct VmxGuestInfo *ginfo, uint32_t host_vector) {
  800421db1a:	55                   	push   %rbp
  800421db1b:	48 89 e5             	mov    %rsp,%rbp
  800421db1e:	48 83 ec 48          	sub    $0x48,%rsp
  800421db22:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421db26:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  800421db2a:	89 55 bc             	mov    %edx,-0x44(%rbp)
  800421db2d:	c7 45 f0 20 68 00 00 	movl   $0x6820,-0x10(%rbp)
  800421db34:	8b 45 f0             	mov    -0x10(%rbp),%eax
  800421db37:	89 c7                	mov    %eax,%edi
  800421db39:	48 b8 1c d9 21 04 80 	movabs $0x800421d91c,%rax
  800421db40:	00 00 00 
  800421db43:	ff d0                	callq  *%rax
	uint64_t rflags;
	uint32_t procbased_ctls_or;
	rflags = vmcs_read64(VMCS_GUEST_RFLAGS);
  800421db45:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	if ( !(rflags & (0x1 << 9)) ) {	//we have to wait the interrupt window open
  800421db49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421db4d:	25 00 02 00 00       	and    $0x200,%eax
  800421db52:	48 85 c0             	test   %rax,%rax
  800421db55:	75 45                	jne    800421db9c <handle_interrupts+0x82>
  800421db57:	c7 45 ec 02 40 00 00 	movl   $0x4002,-0x14(%rbp)
  800421db5e:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421db61:	89 c7                	mov    %eax,%edi
  800421db63:	48 b8 1c d9 21 04 80 	movabs $0x800421d91c,%rax
  800421db6a:	00 00 00 
  800421db6d:	ff d0                	callq  *%rax
		//get the interrupt info

		procbased_ctls_or = vmcs_read32( VMCS_32BIT_CONTROL_PROCESSOR_BASED_VMEXEC_CONTROLS);
  800421db6f:	89 45 f4             	mov    %eax,-0xc(%rbp)

		//disable the interrupt window exiting
		procbased_ctls_or |= VMCS_PROC_BASED_VMEXEC_CTL_INTRWINEXIT; 
  800421db72:	83 4d f4 04          	orl    $0x4,-0xc(%rbp)
  800421db76:	c7 45 e8 02 40 00 00 	movl   $0x4002,-0x18(%rbp)
  800421db7d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421db80:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  800421db83:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  800421db86:	8b 45 e8             	mov    -0x18(%rbp),%eax
  800421db89:	48 89 d6             	mov    %rdx,%rsi
  800421db8c:	89 c7                	mov    %eax,%edi
  800421db8e:	48 b8 f6 d8 21 04 80 	movabs $0x800421d8f6,%rax
  800421db95:	00 00 00 
  800421db98:	ff d0                	callq  *%rax
  800421db9a:	eb 24                	jmp    800421dbc0 <handle_interrupts+0xa6>
  800421db9c:	c7 45 e0 16 40 00 00 	movl   $0x4016,-0x20(%rbp)
  800421dba3:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800421dba6:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421dba9:	8b 55 dc             	mov    -0x24(%rbp),%edx
  800421dbac:	8b 45 e0             	mov    -0x20(%rbp),%eax
  800421dbaf:	48 89 d6             	mov    %rdx,%rsi
  800421dbb2:	89 c7                	mov    %eax,%edi
  800421dbb4:	48 b8 f6 d8 21 04 80 	movabs $0x800421d8f6,%rax
  800421dbbb:	00 00 00 
  800421dbbe:	ff d0                	callq  *%rax
	}
	else {	//revector the host vector to the guest vector

		vmcs_write32( VMCS_32BIT_CONTROL_VMENTRY_INTERRUPTION_INFO , host_vector);
	}
	return true;
  800421dbc0:	b8 01 00 00 00       	mov    $0x1,%eax
}
  800421dbc5:	c9                   	leaveq 
  800421dbc6:	c3                   	retq   

000000800421dbc7 <handle_rdmsr>:

bool
handle_rdmsr(struct Trapframe *tf, struct VmxGuestInfo *ginfo) {
  800421dbc7:	55                   	push   %rbp
  800421dbc8:	48 89 e5             	mov    %rsp,%rbp
  800421dbcb:	53                   	push   %rbx
  800421dbcc:	48 83 ec 48          	sub    $0x48,%rsp
  800421dbd0:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  800421dbd4:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
	uint64_t msr = tf->tf_regs.reg_rcx;
  800421dbd8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421dbdc:	48 8b 40 60          	mov    0x60(%rax),%rax
  800421dbe0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if(msr == EFER_MSR) {
  800421dbe4:	b8 80 00 00 c0       	mov    $0xc0000080,%eax
  800421dbe9:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  800421dbed:	0f 85 d0 00 00 00    	jne    800421dcc3 <handle_rdmsr+0xfc>
		// TODO: setup msr_bitmap to ignore EFER_MSR
		uint64_t val;
		struct vmx_msr_entry *entry;
		bool r = find_msr_in_region(msr, ginfo->msr_guest_area, ginfo->msr_count, &entry);
  800421dbf3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421dbf7:	8b 50 28             	mov    0x28(%rax),%edx
  800421dbfa:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421dbfe:	48 8b 70 38          	mov    0x38(%rax),%rsi
  800421dc02:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421dc06:	48 8d 4d c8          	lea    -0x38(%rbp),%rcx
  800421dc0a:	89 c7                	mov    %eax,%edi
  800421dc0c:	48 b8 42 da 21 04 80 	movabs $0x800421da42,%rax
  800421dc13:	00 00 00 
  800421dc16:	ff d0                	callq  *%rax
  800421dc18:	88 45 e7             	mov    %al,-0x19(%rbp)
		assert(r);
  800421dc1b:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  800421dc1f:	83 f0 01             	xor    $0x1,%eax
  800421dc22:	84 c0                	test   %al,%al
  800421dc24:	74 35                	je     800421dc5b <handle_rdmsr+0x94>
  800421dc26:	48 b9 4a 20 22 04 80 	movabs $0x800422204a,%rcx
  800421dc2d:	00 00 00 
  800421dc30:	48 ba 4c 20 22 04 80 	movabs $0x800422204c,%rdx
  800421dc37:	00 00 00 
  800421dc3a:	be 59 00 00 00       	mov    $0x59,%esi
  800421dc3f:	48 bf 61 20 22 04 80 	movabs $0x8004222061,%rdi
  800421dc46:	00 00 00 
  800421dc49:	b8 00 00 00 00       	mov    $0x0,%eax
  800421dc4e:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421dc55:	00 00 00 
  800421dc58:	41 ff d0             	callq  *%r8
		val = entry->msr_value;
  800421dc5b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421dc5f:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421dc63:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

		tf->tf_regs.reg_rdx = val << 32;
  800421dc67:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421dc6b:	48 c1 e0 20          	shl    $0x20,%rax
  800421dc6f:	48 89 c2             	mov    %rax,%rdx
  800421dc72:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421dc76:	48 89 50 58          	mov    %rdx,0x58(%rax)
		tf->tf_regs.reg_rax = val & 0xFFFFFFFF;
  800421dc7a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421dc7e:	89 c2                	mov    %eax,%edx
  800421dc80:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421dc84:	48 89 50 70          	mov    %rdx,0x70(%rax)

		tf->tf_rip += vmcs_read32(VMCS_32BIT_VMEXIT_INSTRUCTION_LENGTH);
  800421dc88:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421dc8c:	48 8b 98 98 00 00 00 	mov    0x98(%rax),%rbx
  800421dc93:	c7 45 d4 0c 44 00 00 	movl   $0x440c,-0x2c(%rbp)
  800421dc9a:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800421dc9d:	89 c7                	mov    %eax,%edi
  800421dc9f:	48 b8 1c d9 21 04 80 	movabs $0x800421d91c,%rax
  800421dca6:	00 00 00 
  800421dca9:	ff d0                	callq  *%rax
  800421dcab:	89 c0                	mov    %eax,%eax
  800421dcad:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  800421dcb1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421dcb5:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
		return true;
  800421dcbc:	b8 01 00 00 00       	mov    $0x1,%eax
  800421dcc1:	eb 05                	jmp    800421dcc8 <handle_rdmsr+0x101>
	}

	return false;
  800421dcc3:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421dcc8:	48 83 c4 48          	add    $0x48,%rsp
  800421dccc:	5b                   	pop    %rbx
  800421dccd:	5d                   	pop    %rbp
  800421dcce:	c3                   	retq   

000000800421dccf <handle_wrmsr>:

bool 
handle_wrmsr(struct Trapframe *tf, struct VmxGuestInfo *ginfo) {
  800421dccf:	55                   	push   %rbp
  800421dcd0:	48 89 e5             	mov    %rsp,%rbp
  800421dcd3:	53                   	push   %rbx
  800421dcd4:	48 83 ec 58          	sub    $0x58,%rsp
  800421dcd8:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  800421dcdc:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
	uint64_t msr = tf->tf_regs.reg_rcx;
  800421dce0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421dce4:	48 8b 40 60          	mov    0x60(%rax),%rax
  800421dce8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if(msr == EFER_MSR) {
  800421dcec:	b8 80 00 00 c0       	mov    $0xc0000080,%eax
  800421dcf1:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  800421dcf5:	0f 85 34 01 00 00    	jne    800421de2f <handle_wrmsr+0x160>

		uint64_t cur_val, new_val;
		struct vmx_msr_entry *entry;
		bool r = 
			find_msr_in_region(msr, ginfo->msr_guest_area, ginfo->msr_count, &entry);
  800421dcfb:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421dcff:	8b 50 28             	mov    0x28(%rax),%edx
  800421dd02:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421dd06:	48 8b 70 38          	mov    0x38(%rax),%rsi
  800421dd0a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	uint64_t msr = tf->tf_regs.reg_rcx;
	if(msr == EFER_MSR) {

		uint64_t cur_val, new_val;
		struct vmx_msr_entry *entry;
		bool r = 
  800421dd0e:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
  800421dd12:	89 c7                	mov    %eax,%edi
  800421dd14:	48 b8 42 da 21 04 80 	movabs $0x800421da42,%rax
  800421dd1b:	00 00 00 
  800421dd1e:	ff d0                	callq  *%rax
  800421dd20:	88 45 e7             	mov    %al,-0x19(%rbp)
			find_msr_in_region(msr, ginfo->msr_guest_area, ginfo->msr_count, &entry);
		assert(r);
  800421dd23:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  800421dd27:	83 f0 01             	xor    $0x1,%eax
  800421dd2a:	84 c0                	test   %al,%al
  800421dd2c:	74 35                	je     800421dd63 <handle_wrmsr+0x94>
  800421dd2e:	48 b9 4a 20 22 04 80 	movabs $0x800422204a,%rcx
  800421dd35:	00 00 00 
  800421dd38:	48 ba 4c 20 22 04 80 	movabs $0x800422204c,%rdx
  800421dd3f:	00 00 00 
  800421dd42:	be 6f 00 00 00       	mov    $0x6f,%esi
  800421dd47:	48 bf 61 20 22 04 80 	movabs $0x8004222061,%rdi
  800421dd4e:	00 00 00 
  800421dd51:	b8 00 00 00 00       	mov    $0x0,%eax
  800421dd56:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421dd5d:	00 00 00 
  800421dd60:	41 ff d0             	callq  *%r8
		cur_val = entry->msr_value;
  800421dd63:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421dd67:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421dd6b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

		new_val = (tf->tf_regs.reg_rdx << 32)|tf->tf_regs.reg_rax;
  800421dd6f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421dd73:	48 8b 40 58          	mov    0x58(%rax),%rax
  800421dd77:	48 c1 e0 20          	shl    $0x20,%rax
  800421dd7b:	48 89 c2             	mov    %rax,%rdx
  800421dd7e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421dd82:	48 8b 40 70          	mov    0x70(%rax),%rax
  800421dd86:	48 09 d0             	or     %rdx,%rax
  800421dd89:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		if(BIT(cur_val, EFER_LME) == 0 && BIT(new_val, EFER_LME) == 1) {
  800421dd8d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421dd91:	25 00 01 00 00       	and    $0x100,%eax
  800421dd96:	48 85 c0             	test   %rax,%rax
  800421dd99:	75 4d                	jne    800421dde8 <handle_wrmsr+0x119>
  800421dd9b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421dd9f:	25 00 01 00 00       	and    $0x100,%eax
  800421dda4:	48 85 c0             	test   %rax,%rax
  800421dda7:	74 3f                	je     800421dde8 <handle_wrmsr+0x119>
  800421dda9:	c7 45 c8 12 40 00 00 	movl   $0x4012,-0x38(%rbp)
  800421ddb0:	8b 45 c8             	mov    -0x38(%rbp),%eax
  800421ddb3:	89 c7                	mov    %eax,%edi
  800421ddb5:	48 b8 1c d9 21 04 80 	movabs $0x800421d91c,%rax
  800421ddbc:	00 00 00 
  800421ddbf:	ff d0                	callq  *%rax
			// Long mode enable.
			uint32_t entry_ctls = vmcs_read32( VMCS_32BIT_CONTROL_VMENTRY_CONTROLS );
  800421ddc1:	89 45 cc             	mov    %eax,-0x34(%rbp)
  800421ddc4:	c7 45 c4 12 40 00 00 	movl   $0x4012,-0x3c(%rbp)
  800421ddcb:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421ddce:	89 45 c0             	mov    %eax,-0x40(%rbp)
  800421ddd1:	8b 55 c0             	mov    -0x40(%rbp),%edx
  800421ddd4:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800421ddd7:	48 89 d6             	mov    %rdx,%rsi
  800421ddda:	89 c7                	mov    %eax,%edi
  800421dddc:	48 b8 f6 d8 21 04 80 	movabs $0x800421d8f6,%rax
  800421dde3:	00 00 00 
  800421dde6:	ff d0                	callq  *%rax
			vmcs_write32( VMCS_32BIT_CONTROL_VMENTRY_CONTROLS, 
				      entry_ctls );

		}

		entry->msr_value = new_val;
  800421dde8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421ddec:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421ddf0:	48 89 50 08          	mov    %rdx,0x8(%rax)
		tf->tf_rip += vmcs_read32(VMCS_32BIT_VMEXIT_INSTRUCTION_LENGTH);
  800421ddf4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421ddf8:	48 8b 98 98 00 00 00 	mov    0x98(%rax),%rbx
  800421ddff:	c7 45 bc 0c 44 00 00 	movl   $0x440c,-0x44(%rbp)
  800421de06:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800421de09:	89 c7                	mov    %eax,%edi
  800421de0b:	48 b8 1c d9 21 04 80 	movabs $0x800421d91c,%rax
  800421de12:	00 00 00 
  800421de15:	ff d0                	callq  *%rax
  800421de17:	89 c0                	mov    %eax,%eax
  800421de19:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  800421de1d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421de21:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
		return true;
  800421de28:	b8 01 00 00 00       	mov    $0x1,%eax
  800421de2d:	eb 05                	jmp    800421de34 <handle_wrmsr+0x165>
	}

	return false;
  800421de2f:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421de34:	48 83 c4 58          	add    $0x58,%rsp
  800421de38:	5b                   	pop    %rbx
  800421de39:	5d                   	pop    %rbp
  800421de3a:	c3                   	retq   

000000800421de3b <handle_eptviolation>:

bool
handle_eptviolation(uint64_t *eptrt, struct VmxGuestInfo *ginfo) {
  800421de3b:	55                   	push   %rbp
  800421de3c:	48 89 e5             	mov    %rsp,%rbp
  800421de3f:	53                   	push   %rbx
  800421de40:	48 83 ec 48          	sub    $0x48,%rsp
  800421de44:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  800421de48:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  800421de4c:	c7 45 cc 00 24 00 00 	movl   $0x2400,-0x34(%rbp)
  800421de53:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421de56:	89 c7                	mov    %eax,%edi
  800421de58:	48 b8 1c d9 21 04 80 	movabs $0x800421d91c,%rax
  800421de5f:	00 00 00 
  800421de62:	ff d0                	callq  *%rax
	uint64_t gpa = vmcs_read64(VMCS_64BIT_GUEST_PHYSICAL_ADDR);
  800421de64:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	int r;
	if(gpa < 0xA0000 || (gpa >= 0x100000 && gpa < ginfo->phys_sz)) 
  800421de68:	48 81 7d e8 ff ff 09 	cmpq   $0x9ffff,-0x18(%rbp)
  800421de6f:	00 
  800421de70:	76 1f                	jbe    800421de91 <handle_eptviolation+0x56>
  800421de72:	48 81 7d e8 ff ff 0f 	cmpq   $0xfffff,-0x18(%rbp)
  800421de79:	00 
  800421de7a:	0f 86 f9 00 00 00    	jbe    800421df79 <handle_eptviolation+0x13e>
  800421de80:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421de84:	48 8b 00             	mov    (%rax),%rax
  800421de87:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  800421de8b:	0f 86 e8 00 00 00    	jbe    800421df79 <handle_eptviolation+0x13e>
	{
		// Allocate a new page to the guest.
		struct PageInfo *p = page_alloc(0);
  800421de91:	bf 00 00 00 00       	mov    $0x0,%edi
  800421de96:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  800421de9d:	00 00 00 
  800421dea0:	ff d0                	callq  *%rax
  800421dea2:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		if(!p) {
  800421dea6:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800421deab:	75 25                	jne    800421ded2 <handle_eptviolation+0x97>
			cprintf("vmm: handle_eptviolation: Failed to allocate a page for guest---out of memory.\n");
  800421dead:	48 bf 70 20 22 04 80 	movabs $0x8004222070,%rdi
  800421deb4:	00 00 00 
  800421deb7:	b8 00 00 00 00       	mov    $0x0,%eax
  800421debc:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421dec3:	00 00 00 
  800421dec6:	ff d2                	callq  *%rdx
			return false;
  800421dec8:	b8 00 00 00 00       	mov    $0x0,%eax
  800421decd:	e9 54 01 00 00       	jmpq   800421e026 <handle_eptviolation+0x1eb>
		}
		p->pp_ref += 1;
  800421ded2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421ded6:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421deda:	8d 50 01             	lea    0x1(%rax),%edx
  800421dedd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421dee1:	66 89 50 08          	mov    %dx,0x8(%rax)
		r = ept_map_hva2gpa(eptrt, 
				    page2kva(p), (void *)ROUNDDOWN(gpa, PGSIZE), __EPTE_FULL, 0);
  800421dee5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421dee9:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421deed:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421def1:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
		if(!p) {
			cprintf("vmm: handle_eptviolation: Failed to allocate a page for guest---out of memory.\n");
			return false;
		}
		p->pp_ref += 1;
		r = ept_map_hva2gpa(eptrt, 
  800421def7:	48 89 c3             	mov    %rax,%rbx
  800421defa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421defe:	48 89 c7             	mov    %rax,%rdi
  800421df01:	48 b8 87 d9 21 04 80 	movabs $0x800421d987,%rax
  800421df08:	00 00 00 
  800421df0b:	ff d0                	callq  *%rax
  800421df0d:	48 89 c6             	mov    %rax,%rsi
  800421df10:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421df14:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800421df1a:	b9 07 00 00 00       	mov    $0x7,%ecx
  800421df1f:	48 89 da             	mov    %rbx,%rdx
  800421df22:	48 89 c7             	mov    %rax,%rdi
  800421df25:	48 b8 0e 9e 21 04 80 	movabs $0x8004219e0e,%rax
  800421df2c:	00 00 00 
  800421df2f:	ff d0                	callq  *%rax
  800421df31:	89 45 e4             	mov    %eax,-0x1c(%rbp)
				    page2kva(p), (void *)ROUNDDOWN(gpa, PGSIZE), __EPTE_FULL, 0);
		assert(r >= 0);
  800421df34:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800421df38:	79 35                	jns    800421df6f <handle_eptviolation+0x134>
  800421df3a:	48 b9 c0 20 22 04 80 	movabs $0x80042220c0,%rcx
  800421df41:	00 00 00 
  800421df44:	48 ba 4c 20 22 04 80 	movabs $0x800422204c,%rdx
  800421df4b:	00 00 00 
  800421df4e:	be 93 00 00 00       	mov    $0x93,%esi
  800421df53:	48 bf 61 20 22 04 80 	movabs $0x8004222061,%rdi
  800421df5a:	00 00 00 
  800421df5d:	b8 00 00 00 00       	mov    $0x0,%eax
  800421df62:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421df69:	00 00 00 
  800421df6c:	41 ff d0             	callq  *%r8
		/* cprintf("EPT violation for gpa:%x mapped KVA:%x\n", gpa, page2kva(p)); */
		return true;
  800421df6f:	b8 01 00 00 00       	mov    $0x1,%eax
  800421df74:	e9 ad 00 00 00       	jmpq   800421e026 <handle_eptviolation+0x1eb>
	} else if (gpa >= CGA_BUF && gpa < CGA_BUF + PGSIZE) {
  800421df79:	48 81 7d e8 ff 7f 0b 	cmpq   $0xb7fff,-0x18(%rbp)
  800421df80:	00 
  800421df81:	76 7c                	jbe    800421dfff <handle_eptviolation+0x1c4>
  800421df83:	48 81 7d e8 ff 8f 0b 	cmpq   $0xb8fff,-0x18(%rbp)
  800421df8a:	00 
  800421df8b:	77 72                	ja     800421dfff <handle_eptviolation+0x1c4>
		// FIXME: This give direct access to VGA MMIO region.
		r = ept_map_hva2gpa(eptrt, 
  800421df8d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421df91:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800421df97:	b9 07 00 00 00       	mov    $0x7,%ecx
  800421df9c:	ba 00 80 0b 00       	mov    $0xb8000,%edx
  800421dfa1:	48 be 00 80 0b 04 80 	movabs $0x80040b8000,%rsi
  800421dfa8:	00 00 00 
  800421dfab:	48 89 c7             	mov    %rax,%rdi
  800421dfae:	48 b8 0e 9e 21 04 80 	movabs $0x8004219e0e,%rax
  800421dfb5:	00 00 00 
  800421dfb8:	ff d0                	callq  *%rax
  800421dfba:	89 45 e4             	mov    %eax,-0x1c(%rbp)
				    (void *)(KERNBASE + CGA_BUF), (void *)CGA_BUF, __EPTE_FULL, 0);
		assert(r >= 0);
  800421dfbd:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800421dfc1:	79 35                	jns    800421dff8 <handle_eptviolation+0x1bd>
  800421dfc3:	48 b9 c0 20 22 04 80 	movabs $0x80042220c0,%rcx
  800421dfca:	00 00 00 
  800421dfcd:	48 ba 4c 20 22 04 80 	movabs $0x800422204c,%rdx
  800421dfd4:	00 00 00 
  800421dfd7:	be 9a 00 00 00       	mov    $0x9a,%esi
  800421dfdc:	48 bf 61 20 22 04 80 	movabs $0x8004222061,%rdi
  800421dfe3:	00 00 00 
  800421dfe6:	b8 00 00 00 00       	mov    $0x0,%eax
  800421dfeb:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421dff2:	00 00 00 
  800421dff5:	41 ff d0             	callq  *%r8
		return true;
  800421dff8:	b8 01 00 00 00       	mov    $0x1,%eax
  800421dffd:	eb 27                	jmp    800421e026 <handle_eptviolation+0x1eb>
	}
	cprintf("vmm: handle_eptviolation: Case 2, gpa %x\n", gpa);
  800421dfff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421e003:	48 89 c6             	mov    %rax,%rsi
  800421e006:	48 bf c8 20 22 04 80 	movabs $0x80042220c8,%rdi
  800421e00d:	00 00 00 
  800421e010:	b8 00 00 00 00       	mov    $0x0,%eax
  800421e015:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421e01c:	00 00 00 
  800421e01f:	ff d2                	callq  *%rdx
	return false;
  800421e021:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421e026:	48 83 c4 48          	add    $0x48,%rsp
  800421e02a:	5b                   	pop    %rbx
  800421e02b:	5d                   	pop    %rbp
  800421e02c:	c3                   	retq   

000000800421e02d <handle_ioinstr>:

bool
handle_ioinstr(struct Trapframe *tf, struct VmxGuestInfo *ginfo) {
  800421e02d:	55                   	push   %rbp
  800421e02e:	48 89 e5             	mov    %rsp,%rbp
  800421e031:	53                   	push   %rbx
  800421e032:	48 83 ec 38          	sub    $0x38,%rsp
  800421e036:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421e03a:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  800421e03e:	c7 45 d4 00 64 00 00 	movl   $0x6400,-0x2c(%rbp)
  800421e045:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800421e048:	89 c7                	mov    %eax,%edi
  800421e04a:	48 b8 1c d9 21 04 80 	movabs $0x800421d91c,%rax
  800421e051:	00 00 00 
  800421e054:	ff d0                	callq  *%rax
	static int port_iortc;

	uint64_t qualification = vmcs_read64(VMCS_VMEXIT_QUALIFICATION);
  800421e056:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	int port_number = (qualification >> 16) & 0xFFFF;
  800421e05a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421e05e:	48 c1 e8 10          	shr    $0x10,%rax
  800421e062:	25 ff ff 00 00       	and    $0xffff,%eax
  800421e067:	89 45 dc             	mov    %eax,-0x24(%rbp)
	bool is_in = BIT(qualification, 3);
  800421e06a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421e06e:	48 c1 e8 03          	shr    $0x3,%rax
  800421e072:	83 e0 01             	and    $0x1,%eax
  800421e075:	48 85 c0             	test   %rax,%rax
  800421e078:	0f 95 c0             	setne  %al
  800421e07b:	88 45 db             	mov    %al,-0x25(%rbp)
	bool handled = false;
  800421e07e:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)

	// handle reading physical memory from the CMOS.
	if(port_number == IO_RTC) {
  800421e082:	83 7d dc 70          	cmpl   $0x70,-0x24(%rbp)
  800421e086:	75 2e                	jne    800421e0b6 <handle_ioinstr+0x89>
		if(!is_in) {
  800421e088:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  800421e08c:	83 f0 01             	xor    $0x1,%eax
  800421e08f:	84 c0                	test   %al,%al
  800421e091:	0f 84 fa 00 00 00    	je     800421e191 <handle_ioinstr+0x164>
			port_iortc = tf->tf_regs.reg_rax;
  800421e097:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421e09b:	48 8b 40 70          	mov    0x70(%rax),%rax
  800421e09f:	89 c2                	mov    %eax,%edx
  800421e0a1:	48 b8 cc e5 6d 04 80 	movabs $0x80046de5cc,%rax
  800421e0a8:	00 00 00 
  800421e0ab:	89 10                	mov    %edx,(%rax)
			handled = true;
  800421e0ad:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  800421e0b1:	e9 db 00 00 00       	jmpq   800421e191 <handle_ioinstr+0x164>
		}
	} else if (port_number == IO_RTC + 1) {
  800421e0b6:	83 7d dc 71          	cmpl   $0x71,-0x24(%rbp)
  800421e0ba:	0f 85 d1 00 00 00    	jne    800421e191 <handle_ioinstr+0x164>
		if(is_in) {
  800421e0c0:	80 7d db 00          	cmpb   $0x0,-0x25(%rbp)
  800421e0c4:	0f 84 c7 00 00 00    	je     800421e191 <handle_ioinstr+0x164>
			if(port_iortc == NVRAM_BASELO) {
  800421e0ca:	48 b8 cc e5 6d 04 80 	movabs $0x80046de5cc,%rax
  800421e0d1:	00 00 00 
  800421e0d4:	8b 00                	mov    (%rax),%eax
  800421e0d6:	83 f8 15             	cmp    $0x15,%eax
  800421e0d9:	75 15                	jne    800421e0f0 <handle_ioinstr+0xc3>
				tf->tf_regs.reg_rax = 640 & 0xFF;
  800421e0db:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421e0df:	48 c7 40 70 80 00 00 	movq   $0x80,0x70(%rax)
  800421e0e6:	00 
				handled = true;
  800421e0e7:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  800421e0eb:	e9 a1 00 00 00       	jmpq   800421e191 <handle_ioinstr+0x164>
			} else if (port_iortc == NVRAM_BASEHI) {
  800421e0f0:	48 b8 cc e5 6d 04 80 	movabs $0x80046de5cc,%rax
  800421e0f7:	00 00 00 
  800421e0fa:	8b 00                	mov    (%rax),%eax
  800421e0fc:	83 f8 16             	cmp    $0x16,%eax
  800421e0ff:	75 12                	jne    800421e113 <handle_ioinstr+0xe6>
				tf->tf_regs.reg_rax = (640 >> 8) & 0xFF;
  800421e101:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421e105:	48 c7 40 70 02 00 00 	movq   $0x2,0x70(%rax)
  800421e10c:	00 
				handled = true;
  800421e10d:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  800421e111:	eb 7e                	jmp    800421e191 <handle_ioinstr+0x164>
			} else if (port_iortc == NVRAM_EXTLO) {
  800421e113:	48 b8 cc e5 6d 04 80 	movabs $0x80046de5cc,%rax
  800421e11a:	00 00 00 
  800421e11d:	8b 00                	mov    (%rax),%eax
  800421e11f:	83 f8 17             	cmp    $0x17,%eax
  800421e122:	75 2a                	jne    800421e14e <handle_ioinstr+0x121>
				tf->tf_regs.reg_rax = ((ginfo->phys_sz / 1024) - 1024) & 0xFF;
  800421e124:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421e128:	48 8b 00             	mov    (%rax),%rax
  800421e12b:	48 8d 90 ff 03 00 00 	lea    0x3ff(%rax),%rdx
  800421e132:	48 85 c0             	test   %rax,%rax
  800421e135:	48 0f 48 c2          	cmovs  %rdx,%rax
  800421e139:	48 c1 f8 0a          	sar    $0xa,%rax
  800421e13d:	0f b6 d0             	movzbl %al,%edx
  800421e140:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421e144:	48 89 50 70          	mov    %rdx,0x70(%rax)
				handled = true;
  800421e148:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  800421e14c:	eb 43                	jmp    800421e191 <handle_ioinstr+0x164>
			} else if (port_iortc == NVRAM_EXTHI) {
  800421e14e:	48 b8 cc e5 6d 04 80 	movabs $0x80046de5cc,%rax
  800421e155:	00 00 00 
  800421e158:	8b 00                	mov    (%rax),%eax
  800421e15a:	83 f8 18             	cmp    $0x18,%eax
  800421e15d:	75 32                	jne    800421e191 <handle_ioinstr+0x164>
				tf->tf_regs.reg_rax = (((ginfo->phys_sz / 1024) - 1024) >> 8) & 0xFF;
  800421e15f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421e163:	48 8b 00             	mov    (%rax),%rax
  800421e166:	48 8d 90 ff 03 00 00 	lea    0x3ff(%rax),%rdx
  800421e16d:	48 85 c0             	test   %rax,%rax
  800421e170:	48 0f 48 c2          	cmovs  %rdx,%rax
  800421e174:	48 c1 f8 0a          	sar    $0xa,%rax
  800421e178:	48 2d 00 04 00 00    	sub    $0x400,%rax
  800421e17e:	48 c1 f8 08          	sar    $0x8,%rax
  800421e182:	0f b6 d0             	movzbl %al,%edx
  800421e185:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421e189:	48 89 50 70          	mov    %rdx,0x70(%rax)
				handled = true;
  800421e18d:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
			}
		}

	} 
	if(handled) {
  800421e191:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  800421e195:	74 3b                	je     800421e1d2 <handle_ioinstr+0x1a5>
		tf->tf_rip += vmcs_read32(VMCS_32BIT_VMEXIT_INSTRUCTION_LENGTH);
  800421e197:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421e19b:	48 8b 98 98 00 00 00 	mov    0x98(%rax),%rbx
  800421e1a2:	c7 45 d0 0c 44 00 00 	movl   $0x440c,-0x30(%rbp)
  800421e1a9:	8b 45 d0             	mov    -0x30(%rbp),%eax
  800421e1ac:	89 c7                	mov    %eax,%edi
  800421e1ae:	48 b8 1c d9 21 04 80 	movabs $0x800421d91c,%rax
  800421e1b5:	00 00 00 
  800421e1b8:	ff d0                	callq  *%rax
  800421e1ba:	89 c0                	mov    %eax,%eax
  800421e1bc:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  800421e1c0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421e1c4:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
		return true;
  800421e1cb:	b8 01 00 00 00       	mov    $0x1,%eax
  800421e1d0:	eb 33                	jmp    800421e205 <handle_ioinstr+0x1d8>
	} else {
		cprintf("%x %x\n", qualification, port_iortc);
  800421e1d2:	48 b8 cc e5 6d 04 80 	movabs $0x80046de5cc,%rax
  800421e1d9:	00 00 00 
  800421e1dc:	8b 10                	mov    (%rax),%edx
  800421e1de:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421e1e2:	48 89 c6             	mov    %rax,%rsi
  800421e1e5:	48 bf f2 20 22 04 80 	movabs $0x80042220f2,%rdi
  800421e1ec:	00 00 00 
  800421e1ef:	b8 00 00 00 00       	mov    $0x0,%eax
  800421e1f4:	48 b9 83 9c 20 04 80 	movabs $0x8004209c83,%rcx
  800421e1fb:	00 00 00 
  800421e1fe:	ff d1                	callq  *%rcx
		return false;
  800421e200:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
  800421e205:	48 83 c4 38          	add    $0x38,%rsp
  800421e209:	5b                   	pop    %rbx
  800421e20a:	5d                   	pop    %rbp
  800421e20b:	c3                   	retq   

000000800421e20c <handle_cpuid>:
// Finally, you need to increment the program counter in the trap frame.
// 
// Hint: The TA's solution does not hard-code the length of the cpuid instruction.
bool
handle_cpuid(struct Trapframe *tf, struct VmxGuestInfo *ginfo)
{
  800421e20c:	55                   	push   %rbp
  800421e20d:	48 89 e5             	mov    %rsp,%rbp
  800421e210:	48 83 ec 10          	sub    $0x10,%rsp
  800421e214:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421e218:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	/* Your code here  */
    panic("handle_cpuid is not impemented\n");
  800421e21c:	48 ba 00 21 22 04 80 	movabs $0x8004222100,%rdx
  800421e223:	00 00 00 
  800421e226:	be d9 00 00 00       	mov    $0xd9,%esi
  800421e22b:	48 bf 61 20 22 04 80 	movabs $0x8004222061,%rdi
  800421e232:	00 00 00 
  800421e235:	b8 00 00 00 00       	mov    $0x0,%eax
  800421e23a:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  800421e241:	00 00 00 
  800421e244:	ff d1                	callq  *%rcx

000000800421e246 <handle_vmcall>:
// 
// Hint: The TA's solution does not hard-code the length of the cpuid instruction.//

bool
handle_vmcall(struct Trapframe *tf, struct VmxGuestInfo *gInfo, uint64_t *eptrt)
{
  800421e246:	55                   	push   %rbp
  800421e247:	48 89 e5             	mov    %rsp,%rbp
  800421e24a:	48 83 ec 70          	sub    $0x70,%rsp
  800421e24e:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  800421e252:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800421e256:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
	bool handled = false;
  800421e25a:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
	int perm, r;
	void *gpa_pg, *hva_pg;
	envid_t to_env;
	uint32_t val;
	// phys address of the multiboot map in the guest.
	uint64_t multiboot_map_addr = 0x6000;
  800421e25e:	48 c7 45 f0 00 60 00 	movq   $0x6000,-0x10(%rbp)
  800421e265:	00 
	switch(tf->tf_regs.reg_rax) {
  800421e266:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421e26a:	48 8b 40 70          	mov    0x70(%rax),%rax
  800421e26e:	48 83 f8 06          	cmp    $0x6,%rax
  800421e272:	0f 87 c1 00 00 00    	ja     800421e339 <handle_vmcall+0xf3>
  800421e278:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421e27f:	00 
  800421e280:	48 b8 78 21 22 04 80 	movabs $0x8004222178,%rax
  800421e287:	00 00 00 
  800421e28a:	48 01 d0             	add    %rdx,%rax
  800421e28d:	48 8b 00             	mov    (%rax),%rax
  800421e290:	ff e0                	jmpq   *%rax
		// NB: because recv can call schedule, clobbering the VMCS, 
		// you should go ahead and increment rip before this call.
		/* Your code here */
		break;
	case VMX_VMCALL_LAPICEOI:
		lapic_eoi();
  800421e292:	48 b8 67 7e 21 04 80 	movabs $0x8004217e67,%rax
  800421e299:	00 00 00 
  800421e29c:	ff d0                	callq  *%rax
		handled = true;
  800421e29e:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
		break;
  800421e2a2:	e9 92 00 00 00       	jmpq   800421e339 <handle_vmcall+0xf3>
	case VMX_VMCALL_BACKTOHOST:
		cprintf("Now back to the host, VM halt in the background, run vmmanager to resume the VM.\n");
  800421e2a7:	48 bf 20 21 22 04 80 	movabs $0x8004222120,%rdi
  800421e2ae:	00 00 00 
  800421e2b1:	b8 00 00 00 00       	mov    $0x0,%eax
  800421e2b6:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421e2bd:	00 00 00 
  800421e2c0:	ff d2                	callq  *%rdx
		curenv->env_status = ENV_NOT_RUNNABLE;	//mark the guest not runable
  800421e2c2:	48 b8 32 7e 21 04 80 	movabs $0x8004217e32,%rax
  800421e2c9:	00 00 00 
  800421e2cc:	ff d0                	callq  *%rax
  800421e2ce:	48 ba 20 00 6e 04 80 	movabs $0x80046e0020,%rdx
  800421e2d5:	00 00 00 
  800421e2d8:	48 98                	cltq   
  800421e2da:	48 c1 e0 03          	shl    $0x3,%rax
  800421e2de:	48 89 c1             	mov    %rax,%rcx
  800421e2e1:	48 c1 e1 04          	shl    $0x4,%rcx
  800421e2e5:	48 01 c8             	add    %rcx,%rax
  800421e2e8:	48 01 d0             	add    %rdx,%rax
  800421e2eb:	48 83 c0 08          	add    $0x8,%rax
  800421e2ef:	48 8b 00             	mov    (%rax),%rax
  800421e2f2:	c7 80 d4 00 00 00 04 	movl   $0x4,0xd4(%rax)
  800421e2f9:	00 00 00 
		ENV_CREATE(user_sh, ENV_TYPE_USER);	//create a new host shell
  800421e2fc:	be 00 00 00 00       	mov    $0x0,%esi
  800421e301:	48 bf 82 0b 4c 04 80 	movabs $0x80044c0b82,%rdi
  800421e308:	00 00 00 
  800421e30b:	48 b8 be 8f 20 04 80 	movabs $0x8004208fbe,%rax
  800421e312:	00 00 00 
  800421e315:	ff d0                	callq  *%rax
		handled = true;
  800421e317:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
		break;	
  800421e31b:	eb 1c                	jmp    800421e339 <handle_vmcall+0xf3>
	case VMX_VMCALL_GETDISKIMGNUM:	//alloc a number to guest
		tf->tf_regs.reg_rax = vmdisk_number;
  800421e31d:	48 b8 c8 e5 6d 04 80 	movabs $0x80046de5c8,%rax
  800421e324:	00 00 00 
  800421e327:	8b 00                	mov    (%rax),%eax
  800421e329:	48 63 d0             	movslq %eax,%rdx
  800421e32c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421e330:	48 89 50 70          	mov    %rdx,0x70(%rax)
		handled = true;
  800421e334:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
		break;
  800421e338:	90                   	nop
		 * 
		 * Hint: The solution does not hard-code the length of the vmcall instruction.
		 */
		/* Your code here */
	}
	return handled;
  800421e339:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
}
  800421e33d:	c9                   	leaveq 
  800421e33e:	c3                   	retq   
